[
  structure_item (lib/path.ml[16,1079+0]..[23,1221+11])
    Pstr_type Rec
    [
      type_declaration "t" (lib/path.ml[16,1079+5]..[16,1079+6]) (lib/path.ml[16,1079+0]..[20,1153+29])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/path.ml[17,1088+4]..[17,1088+21])
                "Pident" (lib/path.ml[17,1088+4]..[17,1088+10])
                [
                  core_type (lib/path.ml[17,1088+14]..[17,1088+21])
                    Ptyp_constr "Ident.t" (lib/path.ml[17,1088+14]..[17,1088+21])
                    []
                ]
                None
              (lib/path.ml[18,1110+2]..[18,1110+22])
                "Pdot" (lib/path.ml[18,1110+4]..[18,1110+8])
                [
                  core_type (lib/path.ml[18,1110+12]..[18,1110+13])
                    Ptyp_constr "t" (lib/path.ml[18,1110+12]..[18,1110+13])
                    []
                  core_type (lib/path.ml[18,1110+16]..[18,1110+22])
                    Ptyp_constr "string" (lib/path.ml[18,1110+16]..[18,1110+22])
                    []
                ]
                None
              (lib/path.ml[19,1133+2]..[19,1133+19])
                "Papply" (lib/path.ml[19,1133+4]..[19,1133+10])
                [
                  core_type (lib/path.ml[19,1133+14]..[19,1133+15])
                    Ptyp_constr "t" (lib/path.ml[19,1133+14]..[19,1133+15])
                    []
                  core_type (lib/path.ml[19,1133+18]..[19,1133+19])
                    Ptyp_constr "t" (lib/path.ml[19,1133+18]..[19,1133+19])
                    []
                ]
                None
              (lib/path.ml[20,1153+2]..[20,1153+29])
                "Pextra_ty" (lib/path.ml[20,1153+4]..[20,1153+13])
                [
                  core_type (lib/path.ml[20,1153+17]..[20,1153+18])
                    Ptyp_constr "t" (lib/path.ml[20,1153+17]..[20,1153+18])
                    []
                  core_type (lib/path.ml[20,1153+21]..[20,1153+29])
                    Ptyp_constr "extra_ty" (lib/path.ml[20,1153+21]..[20,1153+29])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "extra_ty" (lib/path.ml[21,1183+4]..[21,1183+12]) (lib/path.ml[21,1183+0]..[23,1221+11])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/path.ml[22,1198+2]..[22,1198+22])
                "Pcstr_ty" (lib/path.ml[22,1198+4]..[22,1198+12])
                [
                  core_type (lib/path.ml[22,1198+16]..[22,1198+22])
                    Ptyp_constr "string" (lib/path.ml[22,1198+16]..[22,1198+22])
                    []
                ]
                None
              (lib/path.ml[23,1221+2]..[23,1221+11])
                "Pext_ty" (lib/path.ml[23,1221+4]..[23,1221+11])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/path.ml[25,1234+0]..[39,1748+19])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[25,1234+8]..[25,1234+12])
          Ppat_var "same" (lib/path.ml[25,1234+8]..[25,1234+12])
        expression (lib/path.ml[25,1234+13]..[39,1748+19]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[25,1234+13]..[25,1234+15])
              Nolabel
              None
              pattern (lib/path.ml[25,1234+13]..[25,1234+15])
                Ppat_var "p1" (lib/path.ml[25,1234+13]..[25,1234+15])
            Pparam_val (lib/path.ml[25,1234+16]..[25,1234+18])
              Nolabel
              None
              pattern (lib/path.ml[25,1234+16]..[25,1234+18])
                Ppat_var "p2" (lib/path.ml[25,1234+16]..[25,1234+18])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[26,1255+2]..[39,1748+19])
              Pexp_apply
              expression (lib/path.ml[27,1266+2]..[27,1266+4])
                Pexp_ident "||" (lib/path.ml[27,1266+2]..[27,1266+4])
              [
                <arg>
                Nolabel
                  expression (lib/path.ml[26,1255+2]..[26,1255+10])
                    Pexp_apply
                    expression (lib/path.ml[26,1255+5]..[26,1255+7])
                      Pexp_ident "==" (lib/path.ml[26,1255+5]..[26,1255+7])
                    [
                      <arg>
                      Nolabel
                        expression (lib/path.ml[26,1255+2]..[26,1255+4])
                          Pexp_ident "p1" (lib/path.ml[26,1255+2]..[26,1255+4])
                      <arg>
                      Nolabel
                        expression (lib/path.ml[26,1255+8]..[26,1255+10])
                          Pexp_ident "p2" (lib/path.ml[26,1255+8]..[26,1255+10])
                    ]
                <arg>
                Nolabel
                  expression (lib/path.ml[27,1266+5]..[39,1748+19])
                    Pexp_match
                    expression (lib/path.ml[27,1266+11]..[27,1266+19])
                      Pexp_tuple
                      [
                        expression (lib/path.ml[27,1266+12]..[27,1266+14])
                          Pexp_ident "p1" (lib/path.ml[27,1266+12]..[27,1266+14])
                        expression (lib/path.ml[27,1266+16]..[27,1266+18])
                          Pexp_ident "p2" (lib/path.ml[27,1266+16]..[27,1266+18])
                      ]
                    [
                      <case>
                        pattern (lib/path.ml[28,1291+4]..[28,1291+28])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[28,1291+5]..[28,1291+15])
                              Ppat_construct "Pident" (lib/path.ml[28,1291+5]..[28,1291+11])
                              Some
                                []
                                pattern (lib/path.ml[28,1291+12]..[28,1291+15])
                                  Ppat_var "id1" (lib/path.ml[28,1291+12]..[28,1291+15])
                            pattern (lib/path.ml[28,1291+17]..[28,1291+27])
                              Ppat_construct "Pident" (lib/path.ml[28,1291+17]..[28,1291+23])
                              Some
                                []
                                pattern (lib/path.ml[28,1291+24]..[28,1291+27])
                                  Ppat_var "id2" (lib/path.ml[28,1291+24]..[28,1291+27])
                          ]
                        expression (lib/path.ml[28,1291+32]..[28,1291+50])
                          Pexp_apply
                          expression (lib/path.ml[28,1291+32]..[28,1291+42])
                            Pexp_ident "Ident.same" (lib/path.ml[28,1291+32]..[28,1291+42])
                          [
                            <arg>
                            Nolabel
                              expression (lib/path.ml[28,1291+43]..[28,1291+46])
                                Pexp_ident "id1" (lib/path.ml[28,1291+43]..[28,1291+46])
                            <arg>
                            Nolabel
                              expression (lib/path.ml[28,1291+47]..[28,1291+50])
                                Pexp_ident "id2" (lib/path.ml[28,1291+47]..[28,1291+50])
                          ]
                      <case>
                        pattern (lib/path.ml[29,1342+4]..[29,1342+32])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[29,1342+5]..[29,1342+17])
                              Ppat_construct "Pdot" (lib/path.ml[29,1342+5]..[29,1342+9])
                              Some
                                []
                                pattern (lib/path.ml[29,1342+9]..[29,1342+17])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[29,1342+10]..[29,1342+12])
                                      Ppat_var "p1" (lib/path.ml[29,1342+10]..[29,1342+12])
                                    pattern (lib/path.ml[29,1342+14]..[29,1342+16])
                                      Ppat_var "s1" (lib/path.ml[29,1342+14]..[29,1342+16])
                                  ]
                            pattern (lib/path.ml[29,1342+19]..[29,1342+31])
                              Ppat_construct "Pdot" (lib/path.ml[29,1342+19]..[29,1342+23])
                              Some
                                []
                                pattern (lib/path.ml[29,1342+23]..[29,1342+31])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[29,1342+24]..[29,1342+26])
                                      Ppat_var "p2" (lib/path.ml[29,1342+24]..[29,1342+26])
                                    pattern (lib/path.ml[29,1342+28]..[29,1342+30])
                                      Ppat_var "s2" (lib/path.ml[29,1342+28]..[29,1342+30])
                                  ]
                          ]
                        expression (lib/path.ml[30,1378+6]..[30,1378+27])
                          Pexp_apply
                          expression (lib/path.ml[30,1378+14]..[30,1378+16])
                            Pexp_ident "&&" (lib/path.ml[30,1378+14]..[30,1378+16])
                          [
                            <arg>
                            Nolabel
                              expression (lib/path.ml[30,1378+6]..[30,1378+13])
                                Pexp_apply
                                expression (lib/path.ml[30,1378+9]..[30,1378+10])
                                  Pexp_ident "=" (lib/path.ml[30,1378+9]..[30,1378+10])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[30,1378+6]..[30,1378+8])
                                      Pexp_ident "s1" (lib/path.ml[30,1378+6]..[30,1378+8])
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[30,1378+11]..[30,1378+13])
                                      Pexp_ident "s2" (lib/path.ml[30,1378+11]..[30,1378+13])
                                ]
                            <arg>
                            Nolabel
                              expression (lib/path.ml[30,1378+17]..[30,1378+27])
                                Pexp_apply
                                expression (lib/path.ml[30,1378+17]..[30,1378+21])
                                  Pexp_ident "same" (lib/path.ml[30,1378+17]..[30,1378+21])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[30,1378+22]..[30,1378+24])
                                      Pexp_ident "p1" (lib/path.ml[30,1378+22]..[30,1378+24])
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[30,1378+25]..[30,1378+27])
                                      Pexp_ident "p2" (lib/path.ml[30,1378+25]..[30,1378+27])
                                ]
                          ]
                      <case>
                        pattern (lib/path.ml[31,1406+4]..[31,1406+44])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[31,1406+5]..[31,1406+23])
                              Ppat_construct "Papply" (lib/path.ml[31,1406+5]..[31,1406+11])
                              Some
                                []
                                pattern (lib/path.ml[31,1406+11]..[31,1406+23])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[31,1406+12]..[31,1406+16])
                                      Ppat_var "fun1" (lib/path.ml[31,1406+12]..[31,1406+16])
                                    pattern (lib/path.ml[31,1406+18]..[31,1406+22])
                                      Ppat_var "arg1" (lib/path.ml[31,1406+18]..[31,1406+22])
                                  ]
                            pattern (lib/path.ml[31,1406+25]..[31,1406+43])
                              Ppat_construct "Papply" (lib/path.ml[31,1406+25]..[31,1406+31])
                              Some
                                []
                                pattern (lib/path.ml[31,1406+31]..[31,1406+43])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[31,1406+32]..[31,1406+36])
                                      Ppat_var "fun2" (lib/path.ml[31,1406+32]..[31,1406+36])
                                    pattern (lib/path.ml[31,1406+38]..[31,1406+42])
                                      Ppat_var "arg2" (lib/path.ml[31,1406+38]..[31,1406+42])
                                  ]
                          ]
                        expression (lib/path.ml[32,1454+6]..[32,1454+38])
                          Pexp_apply
                          expression (lib/path.ml[32,1454+21]..[32,1454+23])
                            Pexp_ident "&&" (lib/path.ml[32,1454+21]..[32,1454+23])
                          [
                            <arg>
                            Nolabel
                              expression (lib/path.ml[32,1454+6]..[32,1454+20])
                                Pexp_apply
                                expression (lib/path.ml[32,1454+6]..[32,1454+10])
                                  Pexp_ident "same" (lib/path.ml[32,1454+6]..[32,1454+10])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[32,1454+11]..[32,1454+15])
                                      Pexp_ident "fun1" (lib/path.ml[32,1454+11]..[32,1454+15])
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[32,1454+16]..[32,1454+20])
                                      Pexp_ident "fun2" (lib/path.ml[32,1454+16]..[32,1454+20])
                                ]
                            <arg>
                            Nolabel
                              expression (lib/path.ml[32,1454+24]..[32,1454+38])
                                Pexp_apply
                                expression (lib/path.ml[32,1454+24]..[32,1454+28])
                                  Pexp_ident "same" (lib/path.ml[32,1454+24]..[32,1454+28])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[32,1454+29]..[32,1454+33])
                                      Pexp_ident "arg1" (lib/path.ml[32,1454+29]..[32,1454+33])
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[32,1454+34]..[32,1454+38])
                                      Pexp_ident "arg2" (lib/path.ml[32,1454+34]..[32,1454+38])
                                ]
                          ]
                      <case>
                        pattern (lib/path.ml[33,1493+4]..[33,1493+44])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[33,1493+5]..[33,1493+23])
                              Ppat_construct "Pextra_ty" (lib/path.ml[33,1493+5]..[33,1493+14])
                              Some
                                []
                                pattern (lib/path.ml[33,1493+15]..[33,1493+23])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[33,1493+16]..[33,1493+18])
                                      Ppat_var "p1" (lib/path.ml[33,1493+16]..[33,1493+18])
                                    pattern (lib/path.ml[33,1493+20]..[33,1493+22])
                                      Ppat_var "t1" (lib/path.ml[33,1493+20]..[33,1493+22])
                                  ]
                            pattern (lib/path.ml[33,1493+25]..[33,1493+43])
                              Ppat_construct "Pextra_ty" (lib/path.ml[33,1493+25]..[33,1493+34])
                              Some
                                []
                                pattern (lib/path.ml[33,1493+35]..[33,1493+43])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[33,1493+36]..[33,1493+38])
                                      Ppat_var "p2" (lib/path.ml[33,1493+36]..[33,1493+38])
                                    pattern (lib/path.ml[33,1493+40]..[33,1493+42])
                                      Ppat_var "t2" (lib/path.ml[33,1493+40]..[33,1493+42])
                                  ]
                          ]
                        expression (lib/path.ml[34,1541+6]..[38,1714+33])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/path.ml[34,1541+10]..[34,1541+20])
                                Ppat_var "same_extra" (lib/path.ml[34,1541+10]..[34,1541+20])
                              expression (lib/path.ml[34,1541+23]..[37,1667+46])
                                Pexp_match
                                expression (lib/path.ml[34,1541+29]..[34,1541+35])
                                  Pexp_tuple
                                  [
                                    expression (lib/path.ml[34,1541+29]..[34,1541+31])
                                      Pexp_ident "t1" (lib/path.ml[34,1541+29]..[34,1541+31])
                                    expression (lib/path.ml[34,1541+33]..[34,1541+35])
                                      Pexp_ident "t2" (lib/path.ml[34,1541+33]..[34,1541+35])
                                  ]
                                [
                                  <case>
                                    pattern (lib/path.ml[35,1582+10]..[35,1582+36])
                                      Ppat_tuple
                                      [
                                        pattern (lib/path.ml[35,1582+11]..[35,1582+22])
                                          Ppat_construct "Pcstr_ty" (lib/path.ml[35,1582+11]..[35,1582+19])
                                          Some
                                            []
                                            pattern (lib/path.ml[35,1582+20]..[35,1582+22])
                                              Ppat_var "s1" (lib/path.ml[35,1582+20]..[35,1582+22])
                                        pattern (lib/path.ml[35,1582+24]..[35,1582+35])
                                          Ppat_construct "Pcstr_ty" (lib/path.ml[35,1582+24]..[35,1582+32])
                                          Some
                                            []
                                            pattern (lib/path.ml[35,1582+33]..[35,1582+35])
                                              Ppat_var "s2" (lib/path.ml[35,1582+33]..[35,1582+35])
                                      ]
                                    expression (lib/path.ml[35,1582+40]..[35,1582+47])
                                      Pexp_apply
                                      expression (lib/path.ml[35,1582+43]..[35,1582+44])
                                        Pexp_ident "=" (lib/path.ml[35,1582+43]..[35,1582+44])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/path.ml[35,1582+40]..[35,1582+42])
                                            Pexp_ident "s1" (lib/path.ml[35,1582+40]..[35,1582+42])
                                        <arg>
                                        Nolabel
                                          expression (lib/path.ml[35,1582+45]..[35,1582+47])
                                            Pexp_ident "s2" (lib/path.ml[35,1582+45]..[35,1582+47])
                                      ]
                                  <case>
                                    pattern (lib/path.ml[36,1630+10]..[36,1630+28])
                                      Ppat_tuple
                                      [
                                        pattern (lib/path.ml[36,1630+11]..[36,1630+18])
                                          Ppat_construct "Pext_ty" (lib/path.ml[36,1630+11]..[36,1630+18])
                                          None
                                        pattern (lib/path.ml[36,1630+20]..[36,1630+27])
                                          Ppat_construct "Pext_ty" (lib/path.ml[36,1630+20]..[36,1630+27])
                                          None
                                      ]
                                    expression (lib/path.ml[36,1630+32]..[36,1630+36])
                                      Pexp_construct "true" (lib/path.ml[36,1630+32]..[36,1630+36])
                                      None
                                  <case>
                                    pattern (lib/path.ml[37,1667+10]..[37,1667+37])
                                      Ppat_tuple
                                      [
                                        pattern (lib/path.ml[37,1667+11]..[37,1667+33])
                                          Ppat_or
                                          pattern (lib/path.ml[37,1667+12]..[37,1667+22])
                                            Ppat_construct "Pcstr_ty" (lib/path.ml[37,1667+12]..[37,1667+20])
                                            Some
                                              []
                                              pattern (lib/path.ml[37,1667+21]..[37,1667+22])
                                                Ppat_any
                                          pattern (lib/path.ml[37,1667+25]..[37,1667+32])
                                            Ppat_construct "Pext_ty" (lib/path.ml[37,1667+25]..[37,1667+32])
                                            None
                                        pattern (lib/path.ml[37,1667+35]..[37,1667+36])
                                          Ppat_any
                                      ]
                                    expression (lib/path.ml[37,1667+41]..[37,1667+46])
                                      Pexp_construct "false" (lib/path.ml[37,1667+41]..[37,1667+46])
                                      None
                                ]
                          ]
                          expression (lib/path.ml[38,1714+9]..[38,1714+33])
                            Pexp_apply
                            expression (lib/path.ml[38,1714+20]..[38,1714+22])
                              Pexp_ident "&&" (lib/path.ml[38,1714+20]..[38,1714+22])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[38,1714+9]..[38,1714+19])
                                  Pexp_ident "same_extra" (lib/path.ml[38,1714+9]..[38,1714+19])
                              <arg>
                              Nolabel
                                expression (lib/path.ml[38,1714+23]..[38,1714+33])
                                  Pexp_apply
                                  expression (lib/path.ml[38,1714+23]..[38,1714+27])
                                    Pexp_ident "same" (lib/path.ml[38,1714+23]..[38,1714+27])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/path.ml[38,1714+28]..[38,1714+30])
                                        Pexp_ident "p1" (lib/path.ml[38,1714+28]..[38,1714+30])
                                    <arg>
                                    Nolabel
                                      expression (lib/path.ml[38,1714+31]..[38,1714+33])
                                        Pexp_ident "p2" (lib/path.ml[38,1714+31]..[38,1714+33])
                                  ]
                            ]
                      <case>
                        pattern (lib/path.ml[39,1748+4]..[39,1748+10])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[39,1748+5]..[39,1748+6])
                              Ppat_any
                            pattern (lib/path.ml[39,1748+8]..[39,1748+9])
                              Ppat_any
                          ]
                        expression (lib/path.ml[39,1748+14]..[39,1748+19])
                          Pexp_construct "false" (lib/path.ml[39,1748+14]..[39,1748+19])
                          None
                    ]
              ]
    ]
  structure_item (lib/path.ml[41,1769+0]..[70,2716+8])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[41,1769+8]..[41,1769+15])
          Ppat_var "compare" (lib/path.ml[41,1769+8]..[41,1769+15])
        expression (lib/path.ml[41,1769+16]..[61,2512+8]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[41,1769+16]..[41,1769+18])
              Nolabel
              None
              pattern (lib/path.ml[41,1769+16]..[41,1769+18])
                Ppat_var "p1" (lib/path.ml[41,1769+16]..[41,1769+18])
            Pparam_val (lib/path.ml[41,1769+19]..[41,1769+21])
              Nolabel
              None
              pattern (lib/path.ml[41,1769+19]..[41,1769+21])
                Ppat_var "p2" (lib/path.ml[41,1769+19]..[41,1769+21])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[42,1793+2]..[61,2512+8])
              Pexp_ifthenelse
              expression (lib/path.ml[42,1793+5]..[42,1793+13])
                Pexp_apply
                expression (lib/path.ml[42,1793+8]..[42,1793+10])
                  Pexp_ident "==" (lib/path.ml[42,1793+8]..[42,1793+10])
                [
                  <arg>
                  Nolabel
                    expression (lib/path.ml[42,1793+5]..[42,1793+7])
                      Pexp_ident "p1" (lib/path.ml[42,1793+5]..[42,1793+7])
                  <arg>
                  Nolabel
                    expression (lib/path.ml[42,1793+11]..[42,1793+13])
                      Pexp_ident "p2" (lib/path.ml[42,1793+11]..[42,1793+13])
                ]
              expression (lib/path.ml[42,1793+19]..[42,1793+20])
                Pexp_constant PConst_int (0,None)
              Some
                expression (lib/path.ml[43,1814+7]..[61,2512+8])
                  Pexp_match
                  expression (lib/path.ml[43,1814+13]..[43,1814+21])
                    Pexp_tuple
                    [
                      expression (lib/path.ml[43,1814+14]..[43,1814+16])
                        Pexp_ident "p1" (lib/path.ml[43,1814+14]..[43,1814+16])
                      expression (lib/path.ml[43,1814+18]..[43,1814+20])
                        Pexp_ident "p2" (lib/path.ml[43,1814+18]..[43,1814+20])
                    ]
                  [
                    <case>
                      pattern (lib/path.ml[44,1841+4]..[44,1841+28])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[44,1841+5]..[44,1841+15])
                            Ppat_construct "Pident" (lib/path.ml[44,1841+5]..[44,1841+11])
                            Some
                              []
                              pattern (lib/path.ml[44,1841+12]..[44,1841+15])
                                Ppat_var "id1" (lib/path.ml[44,1841+12]..[44,1841+15])
                          pattern (lib/path.ml[44,1841+17]..[44,1841+27])
                            Ppat_construct "Pident" (lib/path.ml[44,1841+17]..[44,1841+23])
                            Some
                              []
                              pattern (lib/path.ml[44,1841+24]..[44,1841+27])
                                Ppat_var "id2" (lib/path.ml[44,1841+24]..[44,1841+27])
                        ]
                      expression (lib/path.ml[44,1841+32]..[44,1841+53])
                        Pexp_apply
                        expression (lib/path.ml[44,1841+32]..[44,1841+45])
                          Pexp_ident "Ident.compare" (lib/path.ml[44,1841+32]..[44,1841+45])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[44,1841+46]..[44,1841+49])
                              Pexp_ident "id1" (lib/path.ml[44,1841+46]..[44,1841+49])
                          <arg>
                          Nolabel
                            expression (lib/path.ml[44,1841+50]..[44,1841+53])
                              Pexp_ident "id2" (lib/path.ml[44,1841+50]..[44,1841+53])
                        ]
                    <case>
                      pattern (lib/path.ml[45,1895+4]..[45,1895+32])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[45,1895+5]..[45,1895+17])
                            Ppat_construct "Pdot" (lib/path.ml[45,1895+5]..[45,1895+9])
                            Some
                              []
                              pattern (lib/path.ml[45,1895+9]..[45,1895+17])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[45,1895+10]..[45,1895+12])
                                    Ppat_var "p1" (lib/path.ml[45,1895+10]..[45,1895+12])
                                  pattern (lib/path.ml[45,1895+14]..[45,1895+16])
                                    Ppat_var "s1" (lib/path.ml[45,1895+14]..[45,1895+16])
                                ]
                          pattern (lib/path.ml[45,1895+19]..[45,1895+31])
                            Ppat_construct "Pdot" (lib/path.ml[45,1895+19]..[45,1895+23])
                            Some
                              []
                              pattern (lib/path.ml[45,1895+23]..[45,1895+31])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[45,1895+24]..[45,1895+26])
                                    Ppat_var "p2" (lib/path.ml[45,1895+24]..[45,1895+26])
                                  pattern (lib/path.ml[45,1895+28]..[45,1895+30])
                                    Ppat_var "s2" (lib/path.ml[45,1895+28]..[45,1895+30])
                                ]
                        ]
                      expression (lib/path.ml[46,1931+6]..[47,1962+48])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/path.ml[46,1931+10]..[46,1931+11])
                              Ppat_var "h" (lib/path.ml[46,1931+10]..[46,1931+11])
                            expression (lib/path.ml[46,1931+14]..[46,1931+27])
                              Pexp_apply
                              expression (lib/path.ml[46,1931+14]..[46,1931+21])
                                Pexp_ident "compare" (lib/path.ml[46,1931+14]..[46,1931+21])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[46,1931+22]..[46,1931+24])
                                    Pexp_ident "p1" (lib/path.ml[46,1931+22]..[46,1931+24])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[46,1931+25]..[46,1931+27])
                                    Pexp_ident "p2" (lib/path.ml[46,1931+25]..[46,1931+27])
                              ]
                        ]
                        expression (lib/path.ml[47,1962+6]..[47,1962+48])
                          Pexp_ifthenelse
                          expression (lib/path.ml[47,1962+9]..[47,1962+15])
                            Pexp_apply
                            expression (lib/path.ml[47,1962+11]..[47,1962+13])
                              Pexp_ident "<>" (lib/path.ml[47,1962+11]..[47,1962+13])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[47,1962+9]..[47,1962+10])
                                  Pexp_ident "h" (lib/path.ml[47,1962+9]..[47,1962+10])
                              <arg>
                              Nolabel
                                expression (lib/path.ml[47,1962+14]..[47,1962+15])
                                  Pexp_constant PConst_int (0,None)
                            ]
                          expression (lib/path.ml[47,1962+21]..[47,1962+22])
                            Pexp_ident "h" (lib/path.ml[47,1962+21]..[47,1962+22])
                          Some
                            expression (lib/path.ml[47,1962+28]..[47,1962+48])
                              Pexp_apply
                              expression (lib/path.ml[47,1962+28]..[47,1962+42])
                                Pexp_ident "String.compare" (lib/path.ml[47,1962+28]..[47,1962+42])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[47,1962+43]..[47,1962+45])
                                    Pexp_ident "s1" (lib/path.ml[47,1962+43]..[47,1962+45])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[47,1962+46]..[47,1962+48])
                                    Pexp_ident "s2" (lib/path.ml[47,1962+46]..[47,1962+48])
                              ]
                    <case>
                      pattern (lib/path.ml[48,2011+4]..[48,2011+44])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[48,2011+5]..[48,2011+23])
                            Ppat_construct "Papply" (lib/path.ml[48,2011+5]..[48,2011+11])
                            Some
                              []
                              pattern (lib/path.ml[48,2011+11]..[48,2011+23])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[48,2011+12]..[48,2011+16])
                                    Ppat_var "fun1" (lib/path.ml[48,2011+12]..[48,2011+16])
                                  pattern (lib/path.ml[48,2011+18]..[48,2011+22])
                                    Ppat_var "arg1" (lib/path.ml[48,2011+18]..[48,2011+22])
                                ]
                          pattern (lib/path.ml[48,2011+25]..[48,2011+43])
                            Ppat_construct "Papply" (lib/path.ml[48,2011+25]..[48,2011+31])
                            Some
                              []
                              pattern (lib/path.ml[48,2011+31]..[48,2011+43])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[48,2011+32]..[48,2011+36])
                                    Ppat_var "fun2" (lib/path.ml[48,2011+32]..[48,2011+36])
                                  pattern (lib/path.ml[48,2011+38]..[48,2011+42])
                                    Ppat_var "arg2" (lib/path.ml[48,2011+38]..[48,2011+42])
                                ]
                        ]
                      expression (lib/path.ml[49,2059+6]..[50,2094+45])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/path.ml[49,2059+10]..[49,2059+11])
                              Ppat_var "h" (lib/path.ml[49,2059+10]..[49,2059+11])
                            expression (lib/path.ml[49,2059+14]..[49,2059+31])
                              Pexp_apply
                              expression (lib/path.ml[49,2059+14]..[49,2059+21])
                                Pexp_ident "compare" (lib/path.ml[49,2059+14]..[49,2059+21])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[49,2059+22]..[49,2059+26])
                                    Pexp_ident "fun1" (lib/path.ml[49,2059+22]..[49,2059+26])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[49,2059+27]..[49,2059+31])
                                    Pexp_ident "fun2" (lib/path.ml[49,2059+27]..[49,2059+31])
                              ]
                        ]
                        expression (lib/path.ml[50,2094+6]..[50,2094+45])
                          Pexp_ifthenelse
                          expression (lib/path.ml[50,2094+9]..[50,2094+15])
                            Pexp_apply
                            expression (lib/path.ml[50,2094+11]..[50,2094+13])
                              Pexp_ident "<>" (lib/path.ml[50,2094+11]..[50,2094+13])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[50,2094+9]..[50,2094+10])
                                  Pexp_ident "h" (lib/path.ml[50,2094+9]..[50,2094+10])
                              <arg>
                              Nolabel
                                expression (lib/path.ml[50,2094+14]..[50,2094+15])
                                  Pexp_constant PConst_int (0,None)
                            ]
                          expression (lib/path.ml[50,2094+21]..[50,2094+22])
                            Pexp_ident "h" (lib/path.ml[50,2094+21]..[50,2094+22])
                          Some
                            expression (lib/path.ml[50,2094+28]..[50,2094+45])
                              Pexp_apply
                              expression (lib/path.ml[50,2094+28]..[50,2094+35])
                                Pexp_ident "compare" (lib/path.ml[50,2094+28]..[50,2094+35])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[50,2094+36]..[50,2094+40])
                                    Pexp_ident "arg1" (lib/path.ml[50,2094+36]..[50,2094+40])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[50,2094+41]..[50,2094+45])
                                    Pexp_ident "arg2" (lib/path.ml[50,2094+41]..[50,2094+45])
                              ]
                    <case>
                      pattern (lib/path.ml[51,2140+4]..[51,2140+44])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[51,2140+5]..[51,2140+23])
                            Ppat_construct "Pextra_ty" (lib/path.ml[51,2140+5]..[51,2140+14])
                            Some
                              []
                              pattern (lib/path.ml[51,2140+15]..[51,2140+23])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[51,2140+16]..[51,2140+18])
                                    Ppat_var "p1" (lib/path.ml[51,2140+16]..[51,2140+18])
                                  pattern (lib/path.ml[51,2140+20]..[51,2140+22])
                                    Ppat_var "t1" (lib/path.ml[51,2140+20]..[51,2140+22])
                                ]
                          pattern (lib/path.ml[51,2140+25]..[51,2140+43])
                            Ppat_construct "Pextra_ty" (lib/path.ml[51,2140+25]..[51,2140+34])
                            Some
                              []
                              pattern (lib/path.ml[51,2140+35]..[51,2140+43])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[51,2140+36]..[51,2140+38])
                                    Ppat_var "p2" (lib/path.ml[51,2140+36]..[51,2140+38])
                                  pattern (lib/path.ml[51,2140+40]..[51,2140+42])
                                    Ppat_var "t2" (lib/path.ml[51,2140+40]..[51,2140+42])
                                ]
                        ]
                      expression (lib/path.ml[52,2188+6]..[53,2225+41])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/path.ml[52,2188+10]..[52,2188+11])
                              Ppat_var "h" (lib/path.ml[52,2188+10]..[52,2188+11])
                            expression (lib/path.ml[52,2188+14]..[52,2188+33])
                              Pexp_apply
                              expression (lib/path.ml[52,2188+14]..[52,2188+27])
                                Pexp_ident "compare_extra" (lib/path.ml[52,2188+14]..[52,2188+27])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[52,2188+28]..[52,2188+30])
                                    Pexp_ident "t1" (lib/path.ml[52,2188+28]..[52,2188+30])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[52,2188+31]..[52,2188+33])
                                    Pexp_ident "t2" (lib/path.ml[52,2188+31]..[52,2188+33])
                              ]
                        ]
                        expression (lib/path.ml[53,2225+6]..[53,2225+41])
                          Pexp_ifthenelse
                          expression (lib/path.ml[53,2225+9]..[53,2225+15])
                            Pexp_apply
                            expression (lib/path.ml[53,2225+11]..[53,2225+13])
                              Pexp_ident "<>" (lib/path.ml[53,2225+11]..[53,2225+13])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[53,2225+9]..[53,2225+10])
                                  Pexp_ident "h" (lib/path.ml[53,2225+9]..[53,2225+10])
                              <arg>
                              Nolabel
                                expression (lib/path.ml[53,2225+14]..[53,2225+15])
                                  Pexp_constant PConst_int (0,None)
                            ]
                          expression (lib/path.ml[53,2225+21]..[53,2225+22])
                            Pexp_ident "h" (lib/path.ml[53,2225+21]..[53,2225+22])
                          Some
                            expression (lib/path.ml[53,2225+28]..[53,2225+41])
                              Pexp_apply
                              expression (lib/path.ml[53,2225+28]..[53,2225+35])
                                Pexp_ident "compare" (lib/path.ml[53,2225+28]..[53,2225+35])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[53,2225+36]..[53,2225+38])
                                    Pexp_ident "p1" (lib/path.ml[53,2225+36]..[53,2225+38])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[53,2225+39]..[53,2225+41])
                                    Pexp_ident "p2" (lib/path.ml[53,2225+39]..[53,2225+41])
                              ]
                    <case>
                      pattern (lib/path.ml[54,2267+4]..[56,2356+27])
                        Ppat_or
                        pattern (lib/path.ml[54,2267+4]..[55,2317+38])
                          Ppat_or
                          pattern (lib/path.ml[54,2267+4]..[54,2267+49])
                            Ppat_tuple
                            [
                              pattern (lib/path.ml[54,2267+5]..[54,2267+13])
                                Ppat_construct "Pident" (lib/path.ml[54,2267+5]..[54,2267+11])
                                Some
                                  []
                                  pattern (lib/path.ml[54,2267+12]..[54,2267+13])
                                    Ppat_any
                              pattern (lib/path.ml[54,2267+15]..[54,2267+48])
                                Ppat_or
                                pattern (lib/path.ml[54,2267+16]..[54,2267+33])
                                  Ppat_or
                                  pattern (lib/path.ml[54,2267+16]..[54,2267+22])
                                    Ppat_construct "Pdot" (lib/path.ml[54,2267+16]..[54,2267+20])
                                    Some
                                      []
                                      pattern (lib/path.ml[54,2267+21]..[54,2267+22])
                                        Ppat_any
                                  pattern (lib/path.ml[54,2267+25]..[54,2267+33])
                                    Ppat_construct "Papply" (lib/path.ml[54,2267+25]..[54,2267+31])
                                    Some
                                      []
                                      pattern (lib/path.ml[54,2267+32]..[54,2267+33])
                                        Ppat_any
                                pattern (lib/path.ml[54,2267+36]..[54,2267+47])
                                  Ppat_construct "Pextra_ty" (lib/path.ml[54,2267+36]..[54,2267+45])
                                  Some
                                    []
                                    pattern (lib/path.ml[54,2267+46]..[54,2267+47])
                                      Ppat_any
                            ]
                          pattern (lib/path.ml[55,2317+4]..[55,2317+38])
                            Ppat_tuple
                            [
                              pattern (lib/path.ml[55,2317+5]..[55,2317+11])
                                Ppat_construct "Pdot" (lib/path.ml[55,2317+5]..[55,2317+9])
                                Some
                                  []
                                  pattern (lib/path.ml[55,2317+10]..[55,2317+11])
                                    Ppat_any
                              pattern (lib/path.ml[55,2317+13]..[55,2317+37])
                                Ppat_or
                                pattern (lib/path.ml[55,2317+14]..[55,2317+22])
                                  Ppat_construct "Papply" (lib/path.ml[55,2317+14]..[55,2317+20])
                                  Some
                                    []
                                    pattern (lib/path.ml[55,2317+21]..[55,2317+22])
                                      Ppat_any
                                pattern (lib/path.ml[55,2317+25]..[55,2317+36])
                                  Ppat_construct "Pextra_ty" (lib/path.ml[55,2317+25]..[55,2317+34])
                                  Some
                                    []
                                    pattern (lib/path.ml[55,2317+35]..[55,2317+36])
                                      Ppat_any
                            ]
                        pattern (lib/path.ml[56,2356+4]..[56,2356+27])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[56,2356+5]..[56,2356+13])
                              Ppat_construct "Papply" (lib/path.ml[56,2356+5]..[56,2356+11])
                              Some
                                []
                                pattern (lib/path.ml[56,2356+12]..[56,2356+13])
                                  Ppat_any
                            pattern (lib/path.ml[56,2356+15]..[56,2356+26])
                              Ppat_construct "Pextra_ty" (lib/path.ml[56,2356+15]..[56,2356+24])
                              Some
                                []
                                pattern (lib/path.ml[56,2356+25]..[56,2356+26])
                                  Ppat_any
                          ]
                      expression (lib/path.ml[57,2384+7]..[57,2384+9])
                        Pexp_constant PConst_int (-1,None)
                    <case>
                      pattern (lib/path.ml[58,2394+4]..[60,2484+27])
                        Ppat_or
                        pattern (lib/path.ml[58,2394+4]..[59,2444+39])
                          Ppat_or
                          pattern (lib/path.ml[58,2394+4]..[58,2394+49])
                            Ppat_tuple
                            [
                              pattern (lib/path.ml[58,2394+5]..[58,2394+38])
                                Ppat_or
                                pattern (lib/path.ml[58,2394+6]..[58,2394+28])
                                  Ppat_or
                                  pattern (lib/path.ml[58,2394+6]..[58,2394+17])
                                    Ppat_construct "Pextra_ty" (lib/path.ml[58,2394+6]..[58,2394+15])
                                    Some
                                      []
                                      pattern (lib/path.ml[58,2394+16]..[58,2394+17])
                                        Ppat_any
                                  pattern (lib/path.ml[58,2394+20]..[58,2394+28])
                                    Ppat_construct "Papply" (lib/path.ml[58,2394+20]..[58,2394+26])
                                    Some
                                      []
                                      pattern (lib/path.ml[58,2394+27]..[58,2394+28])
                                        Ppat_any
                                pattern (lib/path.ml[58,2394+31]..[58,2394+37])
                                  Ppat_construct "Pdot" (lib/path.ml[58,2394+31]..[58,2394+35])
                                  Some
                                    []
                                    pattern (lib/path.ml[58,2394+36]..[58,2394+37])
                                      Ppat_any
                              pattern (lib/path.ml[58,2394+40]..[58,2394+48])
                                Ppat_construct "Pident" (lib/path.ml[58,2394+40]..[58,2394+46])
                                Some
                                  []
                                  pattern (lib/path.ml[58,2394+47]..[58,2394+48])
                                    Ppat_any
                            ]
                          pattern (lib/path.ml[59,2444+4]..[59,2444+39])
                            Ppat_tuple
                            [
                              pattern (lib/path.ml[59,2444+5]..[59,2444+29])
                                Ppat_or
                                pattern (lib/path.ml[59,2444+6]..[59,2444+17])
                                  Ppat_construct "Pextra_ty" (lib/path.ml[59,2444+6]..[59,2444+15])
                                  Some
                                    []
                                    pattern (lib/path.ml[59,2444+16]..[59,2444+17])
                                      Ppat_any
                                pattern (lib/path.ml[59,2444+20]..[59,2444+28])
                                  Ppat_construct "Papply" (lib/path.ml[59,2444+20]..[59,2444+26])
                                  Some
                                    []
                                    pattern (lib/path.ml[59,2444+27]..[59,2444+28])
                                      Ppat_any
                              pattern (lib/path.ml[59,2444+32]..[59,2444+38])
                                Ppat_construct "Pdot" (lib/path.ml[59,2444+32]..[59,2444+36])
                                Some
                                  []
                                  pattern (lib/path.ml[59,2444+37]..[59,2444+38])
                                    Ppat_any
                            ]
                        pattern (lib/path.ml[60,2484+4]..[60,2484+27])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[60,2484+5]..[60,2484+16])
                              Ppat_construct "Pextra_ty" (lib/path.ml[60,2484+5]..[60,2484+14])
                              Some
                                []
                                pattern (lib/path.ml[60,2484+15]..[60,2484+16])
                                  Ppat_any
                            pattern (lib/path.ml[60,2484+18]..[60,2484+26])
                              Ppat_construct "Papply" (lib/path.ml[60,2484+18]..[60,2484+24])
                              Some
                                []
                                pattern (lib/path.ml[60,2484+25]..[60,2484+26])
                                  Ppat_any
                          ]
                      expression (lib/path.ml[61,2512+7]..[61,2512+8])
                        Pexp_constant PConst_int (1,None)
                  ]
      <def>
        pattern (lib/path.ml[62,2521+4]..[62,2521+17])
          Ppat_var "compare_extra" (lib/path.ml[62,2521+4]..[62,2521+17])
        expression (lib/path.ml[62,2521+18]..[70,2716+8]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[62,2521+18]..[62,2521+20])
              Nolabel
              None
              pattern (lib/path.ml[62,2521+18]..[62,2521+20])
                Ppat_var "t1" (lib/path.ml[62,2521+18]..[62,2521+20])
            Pparam_val (lib/path.ml[62,2521+21]..[62,2521+23])
              Nolabel
              None
              pattern (lib/path.ml[62,2521+21]..[62,2521+23])
                Ppat_var "t2" (lib/path.ml[62,2521+21]..[62,2521+23])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[63,2547+2]..[70,2716+8])
              Pexp_match
              expression (lib/path.ml[63,2547+8]..[63,2547+16])
                Pexp_tuple
                [
                  expression (lib/path.ml[63,2547+9]..[63,2547+11])
                    Pexp_ident "t1" (lib/path.ml[63,2547+9]..[63,2547+11])
                  expression (lib/path.ml[63,2547+13]..[63,2547+15])
                    Pexp_ident "t2" (lib/path.ml[63,2547+13]..[63,2547+15])
                ]
              [
                <case>
                  pattern (lib/path.ml[64,2569+4]..[64,2569+28])
                    Ppat_tuple
                    [
                      pattern (lib/path.ml[64,2569+4]..[64,2569+15])
                        Ppat_construct "Pcstr_ty" (lib/path.ml[64,2569+4]..[64,2569+12])
                        Some
                          []
                          pattern (lib/path.ml[64,2569+13]..[64,2569+15])
                            Ppat_var "s1" (lib/path.ml[64,2569+13]..[64,2569+15])
                      pattern (lib/path.ml[64,2569+17]..[64,2569+28])
                        Ppat_construct "Pcstr_ty" (lib/path.ml[64,2569+17]..[64,2569+25])
                        Some
                          []
                          pattern (lib/path.ml[64,2569+26]..[64,2569+28])
                            Ppat_var "s2" (lib/path.ml[64,2569+26]..[64,2569+28])
                    ]
                  expression (lib/path.ml[64,2569+32]..[64,2569+52])
                    Pexp_apply
                    expression (lib/path.ml[64,2569+32]..[64,2569+46])
                      Pexp_ident "String.compare" (lib/path.ml[64,2569+32]..[64,2569+46])
                    [
                      <arg>
                      Nolabel
                        expression (lib/path.ml[64,2569+47]..[64,2569+49])
                          Pexp_ident "s1" (lib/path.ml[64,2569+47]..[64,2569+49])
                      <arg>
                      Nolabel
                        expression (lib/path.ml[64,2569+50]..[64,2569+52])
                          Pexp_ident "s2" (lib/path.ml[64,2569+50]..[64,2569+52])
                    ]
                <case>
                  pattern (lib/path.ml[65,2622+4]..[65,2622+22])
                    Ppat_tuple
                    [
                      pattern (lib/path.ml[65,2622+5]..[65,2622+12])
                        Ppat_construct "Pext_ty" (lib/path.ml[65,2622+5]..[65,2622+12])
                        None
                      pattern (lib/path.ml[65,2622+14]..[65,2622+21])
                        Ppat_construct "Pext_ty" (lib/path.ml[65,2622+14]..[65,2622+21])
                        None
                    ]
                  expression (lib/path.ml[66,2645+7]..[66,2645+8])
                    Pexp_constant PConst_int (0,None)
                <case>
                  pattern (lib/path.ml[67,2654+4]..[67,2654+25])
                    Ppat_tuple
                    [
                      pattern (lib/path.ml[67,2654+5]..[67,2654+15])
                        Ppat_construct "Pcstr_ty" (lib/path.ml[67,2654+5]..[67,2654+13])
                        Some
                          []
                          pattern (lib/path.ml[67,2654+14]..[67,2654+15])
                            Ppat_any
                      pattern (lib/path.ml[67,2654+17]..[67,2654+24])
                        Ppat_construct "Pext_ty" (lib/path.ml[67,2654+17]..[67,2654+24])
                        None
                    ]
                  expression (lib/path.ml[68,2680+7]..[68,2680+9])
                    Pexp_constant PConst_int (-1,None)
                <case>
                  pattern (lib/path.ml[69,2690+4]..[69,2690+25])
                    Ppat_tuple
                    [
                      pattern (lib/path.ml[69,2690+5]..[69,2690+12])
                        Ppat_construct "Pext_ty" (lib/path.ml[69,2690+5]..[69,2690+12])
                        None
                      pattern (lib/path.ml[69,2690+14]..[69,2690+24])
                        Ppat_construct "Pcstr_ty" (lib/path.ml[69,2690+14]..[69,2690+22])
                        Some
                          []
                          pattern (lib/path.ml[69,2690+23]..[69,2690+24])
                            Ppat_any
                    ]
                  expression (lib/path.ml[70,2716+7]..[70,2716+8])
                    Pexp_constant PConst_int (1,None)
              ]
    ]
  structure_item (lib/path.ml[72,2726+0]..[79,3003+7])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[72,2726+8]..[72,2726+21])
          Ppat_var "find_free_opt" (lib/path.ml[72,2726+8]..[72,2726+21])
        expression (lib/path.ml[72,2726+22]..[79,3003+7]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[72,2726+22]..[72,2726+25])
              Nolabel
              None
              pattern (lib/path.ml[72,2726+22]..[72,2726+25])
                Ppat_var "ids" (lib/path.ml[72,2726+22]..[72,2726+25])
          ]
          None
          Pfunction_cases (lib/path.ml[72,2726+28]..[79,3003+7])
            [
              <case>
                pattern (lib/path.ml[73,2763+4]..[73,2763+13])
                  Ppat_construct "Pident" (lib/path.ml[73,2763+4]..[73,2763+10])
                  Some
                    []
                    pattern (lib/path.ml[73,2763+11]..[73,2763+13])
                      Ppat_var "id" (lib/path.ml[73,2763+11]..[73,2763+13])
                expression (lib/path.ml[73,2763+17]..[73,2763+50])
                  Pexp_apply
                  expression (lib/path.ml[73,2763+17]..[73,2763+30])
                    Pexp_ident "List.find_opt" (lib/path.ml[73,2763+17]..[73,2763+30])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[73,2763+31]..[73,2763+46])
                        Pexp_apply
                        expression (lib/path.ml[73,2763+32]..[73,2763+42])
                          Pexp_ident "Ident.same" (lib/path.ml[73,2763+32]..[73,2763+42])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[73,2763+43]..[73,2763+45])
                              Pexp_ident "id" (lib/path.ml[73,2763+43]..[73,2763+45])
                        ]
                    <arg>
                    Nolabel
                      expression (lib/path.ml[73,2763+47]..[73,2763+50])
                        Pexp_ident "ids" (lib/path.ml[73,2763+47]..[73,2763+50])
                  ]
              <case>
                pattern (lib/path.ml[74,2814+4]..[74,2814+33])
                  Ppat_or
                  pattern (lib/path.ml[74,2814+4]..[74,2814+14])
                    Ppat_construct "Pdot" (lib/path.ml[74,2814+4]..[74,2814+8])
                    Some
                      []
                      pattern (lib/path.ml[74,2814+8]..[74,2814+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[74,2814+9]..[74,2814+10])
                            Ppat_var "p" (lib/path.ml[74,2814+9]..[74,2814+10])
                          pattern (lib/path.ml[74,2814+12]..[74,2814+13])
                            Ppat_any
                        ]
                  pattern (lib/path.ml[74,2814+17]..[74,2814+33])
                    Ppat_construct "Pextra_ty" (lib/path.ml[74,2814+17]..[74,2814+26])
                    Some
                      []
                      pattern (lib/path.ml[74,2814+27]..[74,2814+33])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[74,2814+28]..[74,2814+29])
                            Ppat_var "p" (lib/path.ml[74,2814+28]..[74,2814+29])
                          pattern (lib/path.ml[74,2814+31]..[74,2814+32])
                            Ppat_any
                        ]
                expression (lib/path.ml[74,2814+37]..[74,2814+56])
                  Pexp_apply
                  expression (lib/path.ml[74,2814+37]..[74,2814+50])
                    Pexp_ident "find_free_opt" (lib/path.ml[74,2814+37]..[74,2814+50])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[74,2814+51]..[74,2814+54])
                        Pexp_ident "ids" (lib/path.ml[74,2814+51]..[74,2814+54])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[74,2814+55]..[74,2814+56])
                        Pexp_ident "p" (lib/path.ml[74,2814+55]..[74,2814+56])
                  ]
              <case>
                pattern (lib/path.ml[75,2871+4]..[75,2871+18])
                  Ppat_construct "Papply" (lib/path.ml[75,2871+4]..[75,2871+10])
                  Some
                    []
                    pattern (lib/path.ml[75,2871+10]..[75,2871+18])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[75,2871+11]..[75,2871+13])
                          Ppat_var "p1" (lib/path.ml[75,2871+11]..[75,2871+13])
                        pattern (lib/path.ml[75,2871+15]..[75,2871+17])
                          Ppat_var "p2" (lib/path.ml[75,2871+15]..[75,2871+17])
                      ]
                expression (lib/path.ml[75,2871+22]..[79,3003+7])
                  Pexp_match
                  expression (lib/path.ml[76,2899+12]..[76,2899+32])
                    Pexp_apply
                    expression (lib/path.ml[76,2899+12]..[76,2899+25])
                      Pexp_ident "find_free_opt" (lib/path.ml[76,2899+12]..[76,2899+25])
                    [
                      <arg>
                      Nolabel
                        expression (lib/path.ml[76,2899+26]..[76,2899+29])
                          Pexp_ident "ids" (lib/path.ml[76,2899+26]..[76,2899+29])
                      <arg>
                      Nolabel
                        expression (lib/path.ml[76,2899+30]..[76,2899+32])
                          Pexp_ident "p1" (lib/path.ml[76,2899+30]..[76,2899+32])
                    ]
                  [
                    <case>
                      pattern (lib/path.ml[77,2937+8]..[77,2937+12])
                        Ppat_construct "None" (lib/path.ml[77,2937+8]..[77,2937+12])
                        None
                      expression (lib/path.ml[77,2937+16]..[77,2937+36])
                        Pexp_apply
                        expression (lib/path.ml[77,2937+16]..[77,2937+29])
                          Pexp_ident "find_free_opt" (lib/path.ml[77,2937+16]..[77,2937+29])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[77,2937+30]..[77,2937+33])
                              Pexp_ident "ids" (lib/path.ml[77,2937+30]..[77,2937+33])
                          <arg>
                          Nolabel
                            expression (lib/path.ml[77,2937+34]..[77,2937+36])
                              Pexp_ident "p2" (lib/path.ml[77,2937+34]..[77,2937+36])
                        ]
                    <case>
                      pattern (lib/path.ml[78,2974+8]..[78,2974+21])
                        Ppat_alias "res" (lib/path.ml[78,2974+18]..[78,2974+21])
                        pattern (lib/path.ml[78,2974+8]..[78,2974+14])
                          Ppat_construct "Some" (lib/path.ml[78,2974+8]..[78,2974+12])
                          Some
                            []
                            pattern (lib/path.ml[78,2974+13]..[78,2974+14])
                              Ppat_any
                      expression (lib/path.ml[78,2974+25]..[78,2974+28])
                        Pexp_ident "res" (lib/path.ml[78,2974+25]..[78,2974+28])
                  ]
            ]
    ]
  structure_item (lib/path.ml[81,3012+0]..[84,3087+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[81,3012+4]..[81,3012+15])
          Ppat_var "exists_free" (lib/path.ml[81,3012+4]..[81,3012+15])
        expression (lib/path.ml[81,3012+16]..[84,3087+13]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[81,3012+16]..[81,3012+19])
              Nolabel
              None
              pattern (lib/path.ml[81,3012+16]..[81,3012+19])
                Ppat_var "ids" (lib/path.ml[81,3012+16]..[81,3012+19])
            Pparam_val (lib/path.ml[81,3012+20]..[81,3012+21])
              Nolabel
              None
              pattern (lib/path.ml[81,3012+20]..[81,3012+21])
                Ppat_var "p" (lib/path.ml[81,3012+20]..[81,3012+21])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[82,3036+2]..[84,3087+13])
              Pexp_match
              expression (lib/path.ml[82,3036+8]..[82,3036+27])
                Pexp_apply
                expression (lib/path.ml[82,3036+8]..[82,3036+21])
                  Pexp_ident "find_free_opt" (lib/path.ml[82,3036+8]..[82,3036+21])
                [
                  <arg>
                  Nolabel
                    expression (lib/path.ml[82,3036+22]..[82,3036+25])
                      Pexp_ident "ids" (lib/path.ml[82,3036+22]..[82,3036+25])
                  <arg>
                  Nolabel
                    expression (lib/path.ml[82,3036+26]..[82,3036+27])
                      Pexp_ident "p" (lib/path.ml[82,3036+26]..[82,3036+27])
                ]
              [
                <case>
                  pattern (lib/path.ml[83,3069+4]..[83,3069+8])
                    Ppat_construct "None" (lib/path.ml[83,3069+4]..[83,3069+8])
                    None
                  expression (lib/path.ml[83,3069+12]..[83,3069+17])
                    Pexp_construct "false" (lib/path.ml[83,3069+12]..[83,3069+17])
                    None
                <case>
                  pattern (lib/path.ml[84,3087+4]..[84,3087+5])
                    Ppat_any
                  expression (lib/path.ml[84,3087+9]..[84,3087+13])
                    Pexp_construct "true" (lib/path.ml[84,3087+9]..[84,3087+13])
                    None
              ]
    ]
  structure_item (lib/path.ml[86,3102+0]..[89,3204+51])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[86,3102+8]..[86,3102+13])
          Ppat_var "scope" (lib/path.ml[86,3102+8]..[86,3102+13])
        expression (lib/path.ml[86,3102+16]..[89,3204+51])
          Pexp_function
          []
          None
          Pfunction_cases (lib/path.ml[86,3102+16]..[89,3204+51])
            [
              <case>
                pattern (lib/path.ml[87,3127+4]..[87,3127+13])
                  Ppat_construct "Pident" (lib/path.ml[87,3127+4]..[87,3127+10])
                  Some
                    []
                    pattern (lib/path.ml[87,3127+11]..[87,3127+13])
                      Ppat_var "id" (lib/path.ml[87,3127+11]..[87,3127+13])
                expression (lib/path.ml[87,3127+17]..[87,3127+31])
                  Pexp_apply
                  expression (lib/path.ml[87,3127+17]..[87,3127+28])
                    Pexp_ident "Ident.scope" (lib/path.ml[87,3127+17]..[87,3127+28])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[87,3127+29]..[87,3127+31])
                        Pexp_ident "id" (lib/path.ml[87,3127+29]..[87,3127+31])
                  ]
              <case>
                pattern (lib/path.ml[88,3159+4]..[88,3159+33])
                  Ppat_or
                  pattern (lib/path.ml[88,3159+4]..[88,3159+14])
                    Ppat_construct "Pdot" (lib/path.ml[88,3159+4]..[88,3159+8])
                    Some
                      []
                      pattern (lib/path.ml[88,3159+8]..[88,3159+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[88,3159+9]..[88,3159+10])
                            Ppat_var "p" (lib/path.ml[88,3159+9]..[88,3159+10])
                          pattern (lib/path.ml[88,3159+12]..[88,3159+13])
                            Ppat_any
                        ]
                  pattern (lib/path.ml[88,3159+17]..[88,3159+33])
                    Ppat_construct "Pextra_ty" (lib/path.ml[88,3159+17]..[88,3159+26])
                    Some
                      []
                      pattern (lib/path.ml[88,3159+27]..[88,3159+33])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[88,3159+28]..[88,3159+29])
                            Ppat_var "p" (lib/path.ml[88,3159+28]..[88,3159+29])
                          pattern (lib/path.ml[88,3159+31]..[88,3159+32])
                            Ppat_any
                        ]
                expression (lib/path.ml[88,3159+37]..[88,3159+44])
                  Pexp_apply
                  expression (lib/path.ml[88,3159+37]..[88,3159+42])
                    Pexp_ident "scope" (lib/path.ml[88,3159+37]..[88,3159+42])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[88,3159+43]..[88,3159+44])
                        Pexp_ident "p" (lib/path.ml[88,3159+43]..[88,3159+44])
                  ]
              <case>
                pattern (lib/path.ml[89,3204+4]..[89,3204+18])
                  Ppat_construct "Papply" (lib/path.ml[89,3204+4]..[89,3204+10])
                  Some
                    []
                    pattern (lib/path.ml[89,3204+10]..[89,3204+18])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[89,3204+11]..[89,3204+13])
                          Ppat_var "p1" (lib/path.ml[89,3204+11]..[89,3204+13])
                        pattern (lib/path.ml[89,3204+15]..[89,3204+17])
                          Ppat_var "p2" (lib/path.ml[89,3204+15]..[89,3204+17])
                      ]
                expression (lib/path.ml[89,3204+22]..[89,3204+51])
                  Pexp_apply
                  expression (lib/path.ml[89,3204+22]..[89,3204+29])
                    Pexp_ident "Int.max" (lib/path.ml[89,3204+22]..[89,3204+29])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[89,3204+30]..[89,3204+40])
                        Pexp_apply
                        expression (lib/path.ml[89,3204+31]..[89,3204+36])
                          Pexp_ident "scope" (lib/path.ml[89,3204+31]..[89,3204+36])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[89,3204+37]..[89,3204+39])
                              Pexp_ident "p1" (lib/path.ml[89,3204+37]..[89,3204+39])
                        ]
                    <arg>
                    Nolabel
                      expression (lib/path.ml[89,3204+41]..[89,3204+51])
                        Pexp_apply
                        expression (lib/path.ml[89,3204+42]..[89,3204+47])
                          Pexp_ident "scope" (lib/path.ml[89,3204+42]..[89,3204+47])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[89,3204+48]..[89,3204+50])
                              Pexp_ident "p2" (lib/path.ml[89,3204+48]..[89,3204+50])
                        ]
                  ]
            ]
    ]
  structure_item (lib/path.ml[91,3257+0]..[91,3257+20])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[91,3257+4]..[91,3257+10])
          Ppat_var "kfalse" (lib/path.ml[91,3257+4]..[91,3257+10])
        expression (lib/path.ml[91,3257+11]..[91,3257+20]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[91,3257+11]..[91,3257+12])
              Nolabel
              None
              pattern (lib/path.ml[91,3257+11]..[91,3257+12])
                Ppat_any
          ]
          None
          Pfunction_body
            expression (lib/path.ml[91,3257+15]..[91,3257+20])
              Pexp_construct "false" (lib/path.ml[91,3257+15]..[91,3257+20])
              None
    ]
  structure_item (lib/path.ml[93,3279+0]..[94,3300+45])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[93,3279+4]..[93,3279+16])
          Ppat_var "maybe_escape" (lib/path.ml[93,3279+4]..[93,3279+16])
        expression (lib/path.ml[93,3279+17]..[94,3300+45]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[93,3279+17]..[93,3279+18])
              Nolabel
              None
              pattern (lib/path.ml[93,3279+17]..[93,3279+18])
                Ppat_var "s" (lib/path.ml[93,3279+17]..[93,3279+18])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[94,3300+2]..[94,3300+45])
              Pexp_ifthenelse
              expression (lib/path.ml[94,3300+5]..[94,3300+23])
                Pexp_apply
                expression (lib/path.ml[94,3300+5]..[94,3300+21])
                  Pexp_ident "Lexer.is_keyword" (lib/path.ml[94,3300+5]..[94,3300+21])
                [
                  <arg>
                  Nolabel
                    expression (lib/path.ml[94,3300+22]..[94,3300+23])
                      Pexp_ident "s" (lib/path.ml[94,3300+22]..[94,3300+23])
                ]
              expression (lib/path.ml[94,3300+29]..[94,3300+38])
                Pexp_apply
                expression (lib/path.ml[94,3300+35]..[94,3300+36])
                  Pexp_ident "^" (lib/path.ml[94,3300+35]..[94,3300+36])
                [
                  <arg>
                  Nolabel
                    expression (lib/path.ml[94,3300+29]..[94,3300+34])
                      Pexp_constant PConst_string("\\#",(lib/path.ml[94,3300+30]..[94,3300+33]),None)
                  <arg>
                  Nolabel
                    expression (lib/path.ml[94,3300+37]..[94,3300+38])
                      Pexp_ident "s" (lib/path.ml[94,3300+37]..[94,3300+38])
                ]
              Some
                expression (lib/path.ml[94,3300+44]..[94,3300+45])
                  Pexp_ident "s" (lib/path.ml[94,3300+44]..[94,3300+45])
    ]
  structure_item (lib/path.ml[96,3347+0]..[102,3645+43])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[96,3347+8]..[96,3347+12])
          Ppat_var "name" (lib/path.ml[96,3347+8]..[96,3347+12])
        expression (lib/path.ml[96,3347+13]..[102,3645+43]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[96,3347+13]..[96,3347+28])
              Optional "paren"
              Some
                expression (lib/path.ml[96,3347+21]..[96,3347+27])
                  Pexp_ident "kfalse" (lib/path.ml[96,3347+21]..[96,3347+27])
              pattern (lib/path.ml[96,3347+15]..[96,3347+20])
                Ppat_var "paren" (lib/path.ml[96,3347+15]..[96,3347+20])
          ]
          None
          Pfunction_cases (lib/path.ml[96,3347+31]..[102,3645+43])
            [
              <case>
                pattern (lib/path.ml[97,3387+4]..[97,3387+13])
                  Ppat_construct "Pident" (lib/path.ml[97,3387+4]..[97,3387+10])
                  Some
                    []
                    pattern (lib/path.ml[97,3387+11]..[97,3387+13])
                      Ppat_var "id" (lib/path.ml[97,3387+11]..[97,3387+13])
                expression (lib/path.ml[97,3387+17]..[97,3387+45])
                  Pexp_apply
                  expression (lib/path.ml[97,3387+17]..[97,3387+29])
                    Pexp_ident "maybe_escape" (lib/path.ml[97,3387+17]..[97,3387+29])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[97,3387+30]..[97,3387+45])
                        Pexp_apply
                        expression (lib/path.ml[97,3387+31]..[97,3387+41])
                          Pexp_ident "Ident.name" (lib/path.ml[97,3387+31]..[97,3387+41])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[97,3387+42]..[97,3387+44])
                              Pexp_ident "id" (lib/path.ml[97,3387+42]..[97,3387+44])
                        ]
                  ]
              <case>
                pattern (lib/path.ml[98,3433+4]..[98,3433+42])
                  Ppat_or
                  pattern (lib/path.ml[98,3433+4]..[98,3433+14])
                    Ppat_construct "Pdot" (lib/path.ml[98,3433+4]..[98,3433+8])
                    Some
                      []
                      pattern (lib/path.ml[98,3433+8]..[98,3433+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[98,3433+9]..[98,3433+10])
                            Ppat_var "p" (lib/path.ml[98,3433+9]..[98,3433+10])
                          pattern (lib/path.ml[98,3433+12]..[98,3433+13])
                            Ppat_var "s" (lib/path.ml[98,3433+12]..[98,3433+13])
                        ]
                  pattern (lib/path.ml[98,3433+17]..[98,3433+42])
                    Ppat_construct "Pextra_ty" (lib/path.ml[98,3433+17]..[98,3433+26])
                    Some
                      []
                      pattern (lib/path.ml[98,3433+27]..[98,3433+42])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[98,3433+28]..[98,3433+29])
                            Ppat_var "p" (lib/path.ml[98,3433+28]..[98,3433+29])
                          pattern (lib/path.ml[98,3433+31]..[98,3433+41])
                            Ppat_construct "Pcstr_ty" (lib/path.ml[98,3433+31]..[98,3433+39])
                            Some
                              []
                              pattern (lib/path.ml[98,3433+40]..[98,3433+41])
                                Ppat_var "s" (lib/path.ml[98,3433+40]..[98,3433+41])
                        ]
                expression (lib/path.ml[99,3479+6]..[100,3511+67])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lib/path.ml[99,3479+10]..[99,3479+11])
                        Ppat_var "s" (lib/path.ml[99,3479+10]..[99,3479+11])
                      expression (lib/path.ml[99,3479+14]..[99,3479+28])
                        Pexp_apply
                        expression (lib/path.ml[99,3479+14]..[99,3479+26])
                          Pexp_ident "maybe_escape" (lib/path.ml[99,3479+14]..[99,3479+26])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[99,3479+27]..[99,3479+28])
                              Pexp_ident "s" (lib/path.ml[99,3479+27]..[99,3479+28])
                        ]
                  ]
                  expression (lib/path.ml[100,3511+6]..[100,3511+67])
                    Pexp_apply
                    expression (lib/path.ml[100,3511+20]..[100,3511+21])
                      Pexp_ident "^" (lib/path.ml[100,3511+20]..[100,3511+21])
                    [
                      <arg>
                      Nolabel
                        expression (lib/path.ml[100,3511+6]..[100,3511+19])
                          Pexp_apply
                          expression (lib/path.ml[100,3511+6]..[100,3511+10])
                            Pexp_ident "name" (lib/path.ml[100,3511+6]..[100,3511+10])
                          [
                            <arg>
                            Labelled "paren"
                              expression (lib/path.ml[100,3511+12]..[100,3511+17])
                                Pexp_ident "paren" (lib/path.ml[100,3511+12]..[100,3511+17])
                            <arg>
                            Nolabel
                              expression (lib/path.ml[100,3511+18]..[100,3511+19])
                                Pexp_ident "p" (lib/path.ml[100,3511+18]..[100,3511+19])
                          ]
                      <arg>
                      Nolabel
                        expression (lib/path.ml[100,3511+22]..[100,3511+67])
                          Pexp_ifthenelse
                          expression (lib/path.ml[100,3511+25]..[100,3511+32])
                            Pexp_apply
                            expression (lib/path.ml[100,3511+25]..[100,3511+30])
                              Pexp_ident "paren" (lib/path.ml[100,3511+25]..[100,3511+30])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[100,3511+31]..[100,3511+32])
                                  Pexp_ident "s" (lib/path.ml[100,3511+31]..[100,3511+32])
                            ]
                          expression (lib/path.ml[100,3511+38]..[100,3511+54])
                            Pexp_apply
                            expression (lib/path.ml[100,3511+44]..[100,3511+45])
                              Pexp_ident "^" (lib/path.ml[100,3511+44]..[100,3511+45])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[100,3511+38]..[100,3511+43])
                                  Pexp_constant PConst_string(".( ",(lib/path.ml[100,3511+39]..[100,3511+42]),None)
                              <arg>
                              Nolabel
                                expression (lib/path.ml[100,3511+46]..[100,3511+54])
                                  Pexp_apply
                                  expression (lib/path.ml[100,3511+48]..[100,3511+49])
                                    Pexp_ident "^" (lib/path.ml[100,3511+48]..[100,3511+49])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/path.ml[100,3511+46]..[100,3511+47])
                                        Pexp_ident "s" (lib/path.ml[100,3511+46]..[100,3511+47])
                                    <arg>
                                    Nolabel
                                      expression (lib/path.ml[100,3511+50]..[100,3511+54])
                                        Pexp_constant PConst_string(" )",(lib/path.ml[100,3511+51]..[100,3511+53]),None)
                                  ]
                            ]
                          Some
                            expression (lib/path.ml[100,3511+60]..[100,3511+67])
                              Pexp_apply
                              expression (lib/path.ml[100,3511+64]..[100,3511+65])
                                Pexp_ident "^" (lib/path.ml[100,3511+64]..[100,3511+65])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[100,3511+60]..[100,3511+63])
                                    Pexp_constant PConst_string(".",(lib/path.ml[100,3511+61]..[100,3511+62]),None)
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[100,3511+66]..[100,3511+67])
                                    Pexp_ident "s" (lib/path.ml[100,3511+66]..[100,3511+67])
                              ]
                    ]
              <case>
                pattern (lib/path.ml[101,3579+4]..[101,3579+18])
                  Ppat_construct "Papply" (lib/path.ml[101,3579+4]..[101,3579+10])
                  Some
                    []
                    pattern (lib/path.ml[101,3579+10]..[101,3579+18])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[101,3579+11]..[101,3579+13])
                          Ppat_var "p1" (lib/path.ml[101,3579+11]..[101,3579+13])
                        pattern (lib/path.ml[101,3579+15]..[101,3579+17])
                          Ppat_var "p2" (lib/path.ml[101,3579+15]..[101,3579+17])
                      ]
                expression (lib/path.ml[101,3579+22]..[101,3579+65])
                  Pexp_apply
                  expression (lib/path.ml[101,3579+37]..[101,3579+38])
                    Pexp_ident "^" (lib/path.ml[101,3579+37]..[101,3579+38])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[101,3579+22]..[101,3579+36])
                        Pexp_apply
                        expression (lib/path.ml[101,3579+22]..[101,3579+26])
                          Pexp_ident "name" (lib/path.ml[101,3579+22]..[101,3579+26])
                        [
                          <arg>
                          Labelled "paren"
                            expression (lib/path.ml[101,3579+28]..[101,3579+33])
                              Pexp_ident "paren" (lib/path.ml[101,3579+28]..[101,3579+33])
                          <arg>
                          Nolabel
                            expression (lib/path.ml[101,3579+34]..[101,3579+36])
                              Pexp_ident "p1" (lib/path.ml[101,3579+34]..[101,3579+36])
                        ]
                    <arg>
                    Nolabel
                      expression (lib/path.ml[101,3579+39]..[101,3579+65])
                        Pexp_apply
                        expression (lib/path.ml[101,3579+43]..[101,3579+44])
                          Pexp_ident "^" (lib/path.ml[101,3579+43]..[101,3579+44])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[101,3579+39]..[101,3579+42])
                              Pexp_constant PConst_string("(",(lib/path.ml[101,3579+40]..[101,3579+41]),None)
                          <arg>
                          Nolabel
                            expression (lib/path.ml[101,3579+45]..[101,3579+65])
                              Pexp_apply
                              expression (lib/path.ml[101,3579+60]..[101,3579+61])
                                Pexp_ident "^" (lib/path.ml[101,3579+60]..[101,3579+61])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[101,3579+45]..[101,3579+59])
                                    Pexp_apply
                                    expression (lib/path.ml[101,3579+45]..[101,3579+49])
                                      Pexp_ident "name" (lib/path.ml[101,3579+45]..[101,3579+49])
                                    [
                                      <arg>
                                      Labelled "paren"
                                        expression (lib/path.ml[101,3579+51]..[101,3579+56])
                                          Pexp_ident "paren" (lib/path.ml[101,3579+51]..[101,3579+56])
                                      <arg>
                                      Nolabel
                                        expression (lib/path.ml[101,3579+57]..[101,3579+59])
                                          Pexp_ident "p2" (lib/path.ml[101,3579+57]..[101,3579+59])
                                    ]
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[101,3579+62]..[101,3579+65])
                                    Pexp_constant PConst_string(")",(lib/path.ml[101,3579+63]..[101,3579+64]),None)
                              ]
                        ]
                  ]
              <case>
                pattern (lib/path.ml[102,3645+4]..[102,3645+26])
                  Ppat_construct "Pextra_ty" (lib/path.ml[102,3645+4]..[102,3645+13])
                  Some
                    []
                    pattern (lib/path.ml[102,3645+14]..[102,3645+26])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[102,3645+15]..[102,3645+16])
                          Ppat_var "p" (lib/path.ml[102,3645+15]..[102,3645+16])
                        pattern (lib/path.ml[102,3645+18]..[102,3645+25])
                          Ppat_construct "Pext_ty" (lib/path.ml[102,3645+18]..[102,3645+25])
                          None
                      ]
                expression (lib/path.ml[102,3645+30]..[102,3645+43])
                  Pexp_apply
                  expression (lib/path.ml[102,3645+30]..[102,3645+34])
                    Pexp_ident "name" (lib/path.ml[102,3645+30]..[102,3645+34])
                  [
                    <arg>
                    Labelled "paren"
                      expression (lib/path.ml[102,3645+36]..[102,3645+41])
                        Pexp_ident "paren" (lib/path.ml[102,3645+36]..[102,3645+41])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[102,3645+42]..[102,3645+43])
                        Pexp_ident "p" (lib/path.ml[102,3645+42]..[102,3645+43])
                  ]
            ]
    ]
  structure_item (lib/path.ml[104,3690+0]..[109,3923+41])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[104,3690+8]..[104,3690+13])
          Ppat_var "print" (lib/path.ml[104,3690+8]..[104,3690+13])
        expression (lib/path.ml[104,3690+14]..[109,3923+41]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[104,3690+14]..[104,3690+17])
              Nolabel
              None
              pattern (lib/path.ml[104,3690+14]..[104,3690+17])
                Ppat_var "ppf" (lib/path.ml[104,3690+14]..[104,3690+17])
          ]
          None
          Pfunction_cases (lib/path.ml[104,3690+20]..[109,3923+41])
            [
              <case>
                pattern (lib/path.ml[105,3719+4]..[105,3719+13])
                  Ppat_construct "Pident" (lib/path.ml[105,3719+4]..[105,3719+10])
                  Some
                    []
                    pattern (lib/path.ml[105,3719+11]..[105,3719+13])
                      Ppat_var "id" (lib/path.ml[105,3719+11]..[105,3719+13])
                expression (lib/path.ml[105,3719+17]..[105,3719+46])
                  Pexp_apply
                  expression (lib/path.ml[105,3719+17]..[105,3719+39])
                    Pexp_ident "Ident.print_with_scope" (lib/path.ml[105,3719+17]..[105,3719+39])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[105,3719+40]..[105,3719+43])
                        Pexp_ident "ppf" (lib/path.ml[105,3719+40]..[105,3719+43])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[105,3719+44]..[105,3719+46])
                        Pexp_ident "id" (lib/path.ml[105,3719+44]..[105,3719+46])
                  ]
              <case>
                pattern (lib/path.ml[106,3766+4]..[106,3766+42])
                  Ppat_or
                  pattern (lib/path.ml[106,3766+4]..[106,3766+14])
                    Ppat_construct "Pdot" (lib/path.ml[106,3766+4]..[106,3766+8])
                    Some
                      []
                      pattern (lib/path.ml[106,3766+8]..[106,3766+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[106,3766+9]..[106,3766+10])
                            Ppat_var "p" (lib/path.ml[106,3766+9]..[106,3766+10])
                          pattern (lib/path.ml[106,3766+12]..[106,3766+13])
                            Ppat_var "s" (lib/path.ml[106,3766+12]..[106,3766+13])
                        ]
                  pattern (lib/path.ml[106,3766+17]..[106,3766+42])
                    Ppat_construct "Pextra_ty" (lib/path.ml[106,3766+17]..[106,3766+26])
                    Some
                      []
                      pattern (lib/path.ml[106,3766+27]..[106,3766+42])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[106,3766+28]..[106,3766+29])
                            Ppat_var "p" (lib/path.ml[106,3766+28]..[106,3766+29])
                          pattern (lib/path.ml[106,3766+31]..[106,3766+41])
                            Ppat_construct "Pcstr_ty" (lib/path.ml[106,3766+31]..[106,3766+39])
                            Some
                              []
                              pattern (lib/path.ml[106,3766+40]..[106,3766+41])
                                Ppat_var "s" (lib/path.ml[106,3766+40]..[106,3766+41])
                        ]
                expression (lib/path.ml[107,3812+6]..[107,3812+42])
                  Pexp_apply
                  expression (lib/path.ml[107,3812+6]..[107,3812+20])
                    Pexp_ident "Format.fprintf" (lib/path.ml[107,3812+6]..[107,3812+20])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[107,3812+21]..[107,3812+24])
                        Pexp_ident "ppf" (lib/path.ml[107,3812+21]..[107,3812+24])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[107,3812+25]..[107,3812+32])
                        Pexp_constant PConst_string("%a.%s",(lib/path.ml[107,3812+26]..[107,3812+31]),None)
                    <arg>
                    Nolabel
                      expression (lib/path.ml[107,3812+33]..[107,3812+38])
                        Pexp_ident "print" (lib/path.ml[107,3812+33]..[107,3812+38])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[107,3812+39]..[107,3812+40])
                        Pexp_ident "p" (lib/path.ml[107,3812+39]..[107,3812+40])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[107,3812+41]..[107,3812+42])
                        Pexp_ident "s" (lib/path.ml[107,3812+41]..[107,3812+42])
                  ]
              <case>
                pattern (lib/path.ml[108,3855+4]..[108,3855+18])
                  Ppat_construct "Papply" (lib/path.ml[108,3855+4]..[108,3855+10])
                  Some
                    []
                    pattern (lib/path.ml[108,3855+10]..[108,3855+18])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[108,3855+11]..[108,3855+13])
                          Ppat_var "p1" (lib/path.ml[108,3855+11]..[108,3855+13])
                        pattern (lib/path.ml[108,3855+15]..[108,3855+17])
                          Ppat_var "p2" (lib/path.ml[108,3855+15]..[108,3855+17])
                      ]
                expression (lib/path.ml[108,3855+22]..[108,3855+67])
                  Pexp_apply
                  expression (lib/path.ml[108,3855+22]..[108,3855+36])
                    Pexp_ident "Format.fprintf" (lib/path.ml[108,3855+22]..[108,3855+36])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3855+37]..[108,3855+40])
                        Pexp_ident "ppf" (lib/path.ml[108,3855+37]..[108,3855+40])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3855+41]..[108,3855+49])
                        Pexp_constant PConst_string("%a(%a)",(lib/path.ml[108,3855+42]..[108,3855+48]),None)
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3855+50]..[108,3855+55])
                        Pexp_ident "print" (lib/path.ml[108,3855+50]..[108,3855+55])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3855+56]..[108,3855+58])
                        Pexp_ident "p1" (lib/path.ml[108,3855+56]..[108,3855+58])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3855+59]..[108,3855+64])
                        Pexp_ident "print" (lib/path.ml[108,3855+59]..[108,3855+64])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3855+65]..[108,3855+67])
                        Pexp_ident "p2" (lib/path.ml[108,3855+65]..[108,3855+67])
                  ]
              <case>
                pattern (lib/path.ml[109,3923+4]..[109,3923+26])
                  Ppat_construct "Pextra_ty" (lib/path.ml[109,3923+4]..[109,3923+13])
                  Some
                    []
                    pattern (lib/path.ml[109,3923+14]..[109,3923+26])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[109,3923+15]..[109,3923+16])
                          Ppat_var "p" (lib/path.ml[109,3923+15]..[109,3923+16])
                        pattern (lib/path.ml[109,3923+18]..[109,3923+25])
                          Ppat_construct "Pext_ty" (lib/path.ml[109,3923+18]..[109,3923+25])
                          None
                      ]
                expression (lib/path.ml[109,3923+30]..[109,3923+41])
                  Pexp_apply
                  expression (lib/path.ml[109,3923+30]..[109,3923+35])
                    Pexp_ident "print" (lib/path.ml[109,3923+30]..[109,3923+35])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[109,3923+36]..[109,3923+39])
                        Pexp_ident "ppf" (lib/path.ml[109,3923+36]..[109,3923+39])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[109,3923+40]..[109,3923+41])
                        Pexp_ident "p" (lib/path.ml[109,3923+40]..[109,3923+41])
                  ]
            ]
    ]
  structure_item (lib/path.ml[111,3966+0]..[114,4054+28])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[111,3966+8]..[111,3966+12])
          Ppat_var "head" (lib/path.ml[111,3966+8]..[111,3966+12])
        expression (lib/path.ml[111,3966+15]..[114,4054+28])
          Pexp_function
          []
          None
          Pfunction_cases (lib/path.ml[111,3966+15]..[114,4054+28])
            [
              <case>
                pattern (lib/path.ml[112,3990+4]..[112,3990+13])
                  Ppat_construct "Pident" (lib/path.ml[112,3990+4]..[112,3990+10])
                  Some
                    []
                    pattern (lib/path.ml[112,3990+11]..[112,3990+13])
                      Ppat_var "id" (lib/path.ml[112,3990+11]..[112,3990+13])
                expression (lib/path.ml[112,3990+17]..[112,3990+19])
                  Pexp_ident "id" (lib/path.ml[112,3990+17]..[112,3990+19])
              <case>
                pattern (lib/path.ml[113,4010+4]..[113,4010+33])
                  Ppat_or
                  pattern (lib/path.ml[113,4010+4]..[113,4010+14])
                    Ppat_construct "Pdot" (lib/path.ml[113,4010+4]..[113,4010+8])
                    Some
                      []
                      pattern (lib/path.ml[113,4010+8]..[113,4010+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[113,4010+9]..[113,4010+10])
                            Ppat_var "p" (lib/path.ml[113,4010+9]..[113,4010+10])
                          pattern (lib/path.ml[113,4010+12]..[113,4010+13])
                            Ppat_any
                        ]
                  pattern (lib/path.ml[113,4010+17]..[113,4010+33])
                    Ppat_construct "Pextra_ty" (lib/path.ml[113,4010+17]..[113,4010+26])
                    Some
                      []
                      pattern (lib/path.ml[113,4010+27]..[113,4010+33])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[113,4010+28]..[113,4010+29])
                            Ppat_var "p" (lib/path.ml[113,4010+28]..[113,4010+29])
                          pattern (lib/path.ml[113,4010+31]..[113,4010+32])
                            Ppat_any
                        ]
                expression (lib/path.ml[113,4010+37]..[113,4010+43])
                  Pexp_apply
                  expression (lib/path.ml[113,4010+37]..[113,4010+41])
                    Pexp_ident "head" (lib/path.ml[113,4010+37]..[113,4010+41])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[113,4010+42]..[113,4010+43])
                        Pexp_ident "p" (lib/path.ml[113,4010+42]..[113,4010+43])
                  ]
              <case>
                pattern (lib/path.ml[114,4054+4]..[114,4054+12])
                  Ppat_construct "Papply" (lib/path.ml[114,4054+4]..[114,4054+10])
                  Some
                    []
                    pattern (lib/path.ml[114,4054+11]..[114,4054+12])
                      Ppat_any
                expression (lib/path.ml[114,4054+16]..[114,4054+28])
                  Pexp_assert
                  expression (lib/path.ml[114,4054+23]..[114,4054+28])
                    Pexp_construct "false" (lib/path.ml[114,4054+23]..[114,4054+28])
                    None
            ]
    ]
  structure_item (lib/path.ml[116,4084+0]..[123,4319+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[116,4084+4]..[116,4084+11])
          Ppat_var "flatten" (lib/path.ml[116,4084+4]..[116,4084+11])
        expression (lib/path.ml[117,4098+2]..[123,4319+23])
          Pexp_let Rec
          [
            <def>
              pattern (lib/path.ml[117,4098+10]..[117,4098+17])
                Ppat_var "flatten" (lib/path.ml[117,4098+10]..[117,4098+17])
              expression (lib/path.ml[117,4098+18]..[121,4268+45]) ghost
                Pexp_function
                [
                  Pparam_val (lib/path.ml[117,4098+18]..[117,4098+21])
                    Nolabel
                    None
                    pattern (lib/path.ml[117,4098+18]..[117,4098+21])
                      Ppat_var "acc" (lib/path.ml[117,4098+18]..[117,4098+21])
                ]
                None
                Pfunction_cases (lib/path.ml[117,4098+24]..[121,4268+45])
                  [
                    <case>
                      pattern (lib/path.ml[118,4131+6]..[118,4131+15])
                        Ppat_construct "Pident" (lib/path.ml[118,4131+6]..[118,4131+12])
                        Some
                          []
                          pattern (lib/path.ml[118,4131+13]..[118,4131+15])
                            Ppat_var "id" (lib/path.ml[118,4131+13]..[118,4131+15])
                      expression (lib/path.ml[118,4131+19]..[118,4131+32])
                        Pexp_variant "Ok"
                        Some
                          expression (lib/path.ml[118,4131+23]..[118,4131+32])
                            Pexp_tuple
                            [
                              expression (lib/path.ml[118,4131+24]..[118,4131+26])
                                Pexp_ident "id" (lib/path.ml[118,4131+24]..[118,4131+26])
                              expression (lib/path.ml[118,4131+28]..[118,4131+31])
                                Pexp_ident "acc" (lib/path.ml[118,4131+28]..[118,4131+31])
                            ]
                    <case>
                      pattern (lib/path.ml[119,4164+6]..[119,4164+45])
                        Ppat_or
                        pattern (lib/path.ml[119,4164+6]..[119,4164+17])
                          Ppat_construct "Pdot" (lib/path.ml[119,4164+6]..[119,4164+10])
                          Some
                            []
                            pattern (lib/path.ml[119,4164+11]..[119,4164+17])
                              Ppat_tuple
                              [
                                pattern (lib/path.ml[119,4164+12]..[119,4164+13])
                                  Ppat_var "p" (lib/path.ml[119,4164+12]..[119,4164+13])
                                pattern (lib/path.ml[119,4164+15]..[119,4164+16])
                                  Ppat_var "s" (lib/path.ml[119,4164+15]..[119,4164+16])
                              ]
                        pattern (lib/path.ml[119,4164+20]..[119,4164+45])
                          Ppat_construct "Pextra_ty" (lib/path.ml[119,4164+20]..[119,4164+29])
                          Some
                            []
                            pattern (lib/path.ml[119,4164+30]..[119,4164+45])
                              Ppat_tuple
                              [
                                pattern (lib/path.ml[119,4164+31]..[119,4164+32])
                                  Ppat_var "p" (lib/path.ml[119,4164+31]..[119,4164+32])
                                pattern (lib/path.ml[119,4164+34]..[119,4164+44])
                                  Ppat_construct "Pcstr_ty" (lib/path.ml[119,4164+34]..[119,4164+42])
                                  Some
                                    []
                                    pattern (lib/path.ml[119,4164+43]..[119,4164+44])
                                      Ppat_var "s" (lib/path.ml[119,4164+43]..[119,4164+44])
                              ]
                      expression (lib/path.ml[119,4164+49]..[119,4164+69])
                        Pexp_apply
                        expression (lib/path.ml[119,4164+49]..[119,4164+56])
                          Pexp_ident "flatten" (lib/path.ml[119,4164+49]..[119,4164+56])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[119,4164+57]..[119,4164+67])
                              Pexp_construct "::" (lib/path.ml[119,4164+60]..[119,4164+62])
                              Some
                                expression (lib/path.ml[119,4164+58]..[119,4164+66]) ghost
                                  Pexp_tuple
                                  [
                                    expression (lib/path.ml[119,4164+58]..[119,4164+59])
                                      Pexp_ident "s" (lib/path.ml[119,4164+58]..[119,4164+59])
                                    expression (lib/path.ml[119,4164+63]..[119,4164+66])
                                      Pexp_ident "acc" (lib/path.ml[119,4164+63]..[119,4164+66])
                                  ]
                          <arg>
                          Nolabel
                            expression (lib/path.ml[119,4164+68]..[119,4164+69])
                              Pexp_ident "p" (lib/path.ml[119,4164+68]..[119,4164+69])
                        ]
                    <case>
                      pattern (lib/path.ml[120,4234+6]..[120,4234+14])
                        Ppat_construct "Papply" (lib/path.ml[120,4234+6]..[120,4234+12])
                        Some
                          []
                          pattern (lib/path.ml[120,4234+13]..[120,4234+14])
                            Ppat_any
                      expression (lib/path.ml[120,4234+18]..[120,4234+33])
                        Pexp_variant "Contains_apply"
                        None
                    <case>
                      pattern (lib/path.ml[121,4268+6]..[121,4268+28])
                        Ppat_construct "Pextra_ty" (lib/path.ml[121,4268+6]..[121,4268+15])
                        Some
                          []
                          pattern (lib/path.ml[121,4268+16]..[121,4268+28])
                            Ppat_tuple
                            [
                              pattern (lib/path.ml[121,4268+17]..[121,4268+18])
                                Ppat_var "p" (lib/path.ml[121,4268+17]..[121,4268+18])
                              pattern (lib/path.ml[121,4268+20]..[121,4268+27])
                                Ppat_construct "Pext_ty" (lib/path.ml[121,4268+20]..[121,4268+27])
                                None
                            ]
                      expression (lib/path.ml[121,4268+32]..[121,4268+45])
                        Pexp_apply
                        expression (lib/path.ml[121,4268+32]..[121,4268+39])
                          Pexp_ident "flatten" (lib/path.ml[121,4268+32]..[121,4268+39])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[121,4268+40]..[121,4268+43])
                              Pexp_ident "acc" (lib/path.ml[121,4268+40]..[121,4268+43])
                          <arg>
                          Nolabel
                            expression (lib/path.ml[121,4268+44]..[121,4268+45])
                              Pexp_ident "p" (lib/path.ml[121,4268+44]..[121,4268+45])
                        ]
                  ]
          ]
          expression (lib/path.ml[123,4319+2]..[123,4319+23])
            Pexp_function
            [
              Pparam_val (lib/path.ml[123,4319+6]..[123,4319+7])
                Nolabel
                None
                pattern (lib/path.ml[123,4319+6]..[123,4319+7])
                  Ppat_var "t" (lib/path.ml[123,4319+6]..[123,4319+7])
            ]
            None
            Pfunction_body
              expression (lib/path.ml[123,4319+11]..[123,4319+23])
                Pexp_apply
                expression (lib/path.ml[123,4319+11]..[123,4319+18])
                  Pexp_ident "flatten" (lib/path.ml[123,4319+11]..[123,4319+18])
                [
                  <arg>
                  Nolabel
                    expression (lib/path.ml[123,4319+19]..[123,4319+21])
                      Pexp_construct "[]" (lib/path.ml[123,4319+19]..[123,4319+21])
                      None
                  <arg>
                  Nolabel
                    expression (lib/path.ml[123,4319+22]..[123,4319+23])
                      Pexp_ident "t" (lib/path.ml[123,4319+22]..[123,4319+23])
                ]
    ]
  structure_item (lib/path.ml[125,4344+0]..[131,4532+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[125,4344+4]..[125,4344+9])
          Ppat_var "heads" (lib/path.ml[125,4344+4]..[125,4344+9])
        expression (lib/path.ml[125,4344+10]..[131,4532+15]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[125,4344+10]..[125,4344+11])
              Nolabel
              None
              pattern (lib/path.ml[125,4344+10]..[125,4344+11])
                Ppat_var "p" (lib/path.ml[125,4344+10]..[125,4344+11])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[126,4358+2]..[131,4532+15])
              Pexp_let Rec
              [
                <def>
                  pattern (lib/path.ml[126,4358+10]..[126,4358+15])
                    Ppat_var "heads" (lib/path.ml[126,4358+10]..[126,4358+15])
                  expression (lib/path.ml[126,4358+16]..[130,4500+31]) ghost
                    Pexp_function
                    [
                      Pparam_val (lib/path.ml[126,4358+16]..[126,4358+17])
                        Nolabel
                        None
                        pattern (lib/path.ml[126,4358+16]..[126,4358+17])
                          Ppat_var "p" (lib/path.ml[126,4358+16]..[126,4358+17])
                      Pparam_val (lib/path.ml[126,4358+18]..[126,4358+21])
                        Nolabel
                        None
                        pattern (lib/path.ml[126,4358+18]..[126,4358+21])
                          Ppat_var "acc" (lib/path.ml[126,4358+18]..[126,4358+21])
                    ]
                    None
                    Pfunction_body
                      expression (lib/path.ml[126,4358+24]..[130,4500+31])
                        Pexp_match
                        expression (lib/path.ml[126,4358+30]..[126,4358+31])
                          Pexp_ident "p" (lib/path.ml[126,4358+30]..[126,4358+31])
                        [
                          <case>
                            pattern (lib/path.ml[127,4395+6]..[127,4395+15])
                              Ppat_construct "Pident" (lib/path.ml[127,4395+6]..[127,4395+12])
                              Some
                                []
                                pattern (lib/path.ml[127,4395+13]..[127,4395+15])
                                  Ppat_var "id" (lib/path.ml[127,4395+13]..[127,4395+15])
                            expression (lib/path.ml[127,4395+19]..[127,4395+28])
                              Pexp_construct "::" (lib/path.ml[127,4395+22]..[127,4395+24])
                              Some
                                expression (lib/path.ml[127,4395+19]..[127,4395+28]) ghost
                                  Pexp_tuple
                                  [
                                    expression (lib/path.ml[127,4395+19]..[127,4395+21])
                                      Pexp_ident "id" (lib/path.ml[127,4395+19]..[127,4395+21])
                                    expression (lib/path.ml[127,4395+25]..[127,4395+28])
                                      Pexp_ident "acc" (lib/path.ml[127,4395+25]..[127,4395+28])
                                  ]
                          <case>
                            pattern (lib/path.ml[128,4424+6]..[128,4424+36])
                              Ppat_or
                              pattern (lib/path.ml[128,4424+6]..[128,4424+17])
                                Ppat_construct "Pdot" (lib/path.ml[128,4424+6]..[128,4424+10])
                                Some
                                  []
                                  pattern (lib/path.ml[128,4424+11]..[128,4424+17])
                                    Ppat_tuple
                                    [
                                      pattern (lib/path.ml[128,4424+12]..[128,4424+13])
                                        Ppat_var "p" (lib/path.ml[128,4424+12]..[128,4424+13])
                                      pattern (lib/path.ml[128,4424+15]..[128,4424+16])
                                        Ppat_any
                                    ]
                              pattern (lib/path.ml[128,4424+20]..[128,4424+36])
                                Ppat_construct "Pextra_ty" (lib/path.ml[128,4424+20]..[128,4424+29])
                                Some
                                  []
                                  pattern (lib/path.ml[128,4424+30]..[128,4424+36])
                                    Ppat_tuple
                                    [
                                      pattern (lib/path.ml[128,4424+31]..[128,4424+32])
                                        Ppat_var "p" (lib/path.ml[128,4424+31]..[128,4424+32])
                                      pattern (lib/path.ml[128,4424+34]..[128,4424+35])
                                        Ppat_any
                                    ]
                            expression (lib/path.ml[128,4424+40]..[128,4424+51])
                              Pexp_apply
                              expression (lib/path.ml[128,4424+40]..[128,4424+45])
                                Pexp_ident "heads" (lib/path.ml[128,4424+40]..[128,4424+45])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[128,4424+46]..[128,4424+47])
                                    Pexp_ident "p" (lib/path.ml[128,4424+46]..[128,4424+47])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[128,4424+48]..[128,4424+51])
                                    Pexp_ident "acc" (lib/path.ml[128,4424+48]..[128,4424+51])
                              ]
                          <case>
                            pattern (lib/path.ml[129,4476+6]..[129,4476+20])
                              Ppat_construct "Papply" (lib/path.ml[129,4476+6]..[129,4476+12])
                              Some
                                []
                                pattern (lib/path.ml[129,4476+12]..[129,4476+20])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[129,4476+13]..[129,4476+15])
                                      Ppat_var "p1" (lib/path.ml[129,4476+13]..[129,4476+15])
                                    pattern (lib/path.ml[129,4476+17]..[129,4476+19])
                                      Ppat_var "p2" (lib/path.ml[129,4476+17]..[129,4476+19])
                                  ]
                            expression (lib/path.ml[130,4500+8]..[130,4500+31])
                              Pexp_apply
                              expression (lib/path.ml[130,4500+8]..[130,4500+13])
                                Pexp_ident "heads" (lib/path.ml[130,4500+8]..[130,4500+13])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[130,4500+14]..[130,4500+16])
                                    Pexp_ident "p1" (lib/path.ml[130,4500+14]..[130,4500+16])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[130,4500+17]..[130,4500+31])
                                    Pexp_apply
                                    expression (lib/path.ml[130,4500+18]..[130,4500+23])
                                      Pexp_ident "heads" (lib/path.ml[130,4500+18]..[130,4500+23])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/path.ml[130,4500+24]..[130,4500+26])
                                          Pexp_ident "p2" (lib/path.ml[130,4500+24]..[130,4500+26])
                                      <arg>
                                      Nolabel
                                        expression (lib/path.ml[130,4500+27]..[130,4500+30])
                                          Pexp_ident "acc" (lib/path.ml[130,4500+27]..[130,4500+30])
                                    ]
                              ]
                        ]
              ]
              expression (lib/path.ml[131,4532+5]..[131,4532+15])
                Pexp_apply
                expression (lib/path.ml[131,4532+5]..[131,4532+10])
                  Pexp_ident "heads" (lib/path.ml[131,4532+5]..[131,4532+10])
                [
                  <arg>
                  Nolabel
                    expression (lib/path.ml[131,4532+11]..[131,4532+12])
                      Pexp_ident "p" (lib/path.ml[131,4532+11]..[131,4532+12])
                  <arg>
                  Nolabel
                    expression (lib/path.ml[131,4532+13]..[131,4532+15])
                      Pexp_construct "[]" (lib/path.ml[131,4532+13]..[131,4532+15])
                      None
                ]
    ]
  structure_item (lib/path.ml[133,4549+0]..[136,4652+51])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[133,4549+8]..[133,4549+12])
          Ppat_var "last" (lib/path.ml[133,4549+8]..[133,4549+12])
        expression (lib/path.ml[133,4549+15]..[136,4652+51])
          Pexp_function
          []
          None
          Pfunction_cases (lib/path.ml[133,4549+15]..[136,4652+51])
            [
              <case>
                pattern (lib/path.ml[134,4573+4]..[134,4573+13])
                  Ppat_construct "Pident" (lib/path.ml[134,4573+4]..[134,4573+10])
                  Some
                    []
                    pattern (lib/path.ml[134,4573+11]..[134,4573+13])
                      Ppat_var "id" (lib/path.ml[134,4573+11]..[134,4573+13])
                expression (lib/path.ml[134,4573+17]..[134,4573+30])
                  Pexp_apply
                  expression (lib/path.ml[134,4573+17]..[134,4573+27])
                    Pexp_ident "Ident.name" (lib/path.ml[134,4573+17]..[134,4573+27])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[134,4573+28]..[134,4573+30])
                        Pexp_ident "id" (lib/path.ml[134,4573+28]..[134,4573+30])
                  ]
              <case>
                pattern (lib/path.ml[135,4604+4]..[135,4604+42])
                  Ppat_or
                  pattern (lib/path.ml[135,4604+4]..[135,4604+14])
                    Ppat_construct "Pdot" (lib/path.ml[135,4604+4]..[135,4604+8])
                    Some
                      []
                      pattern (lib/path.ml[135,4604+8]..[135,4604+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[135,4604+9]..[135,4604+10])
                            Ppat_any
                          pattern (lib/path.ml[135,4604+12]..[135,4604+13])
                            Ppat_var "s" (lib/path.ml[135,4604+12]..[135,4604+13])
                        ]
                  pattern (lib/path.ml[135,4604+17]..[135,4604+42])
                    Ppat_construct "Pextra_ty" (lib/path.ml[135,4604+17]..[135,4604+26])
                    Some
                      []
                      pattern (lib/path.ml[135,4604+27]..[135,4604+42])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[135,4604+28]..[135,4604+29])
                            Ppat_any
                          pattern (lib/path.ml[135,4604+31]..[135,4604+41])
                            Ppat_construct "Pcstr_ty" (lib/path.ml[135,4604+31]..[135,4604+39])
                            Some
                              []
                              pattern (lib/path.ml[135,4604+40]..[135,4604+41])
                                Ppat_var "s" (lib/path.ml[135,4604+40]..[135,4604+41])
                        ]
                expression (lib/path.ml[135,4604+46]..[135,4604+47])
                  Pexp_ident "s" (lib/path.ml[135,4604+46]..[135,4604+47])
              <case>
                pattern (lib/path.ml[136,4652+4]..[136,4652+41])
                  Ppat_or
                  pattern (lib/path.ml[136,4652+4]..[136,4652+16])
                    Ppat_construct "Papply" (lib/path.ml[136,4652+4]..[136,4652+10])
                    Some
                      []
                      pattern (lib/path.ml[136,4652+10]..[136,4652+16])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[136,4652+11]..[136,4652+12])
                            Ppat_any
                          pattern (lib/path.ml[136,4652+14]..[136,4652+15])
                            Ppat_var "p" (lib/path.ml[136,4652+14]..[136,4652+15])
                        ]
                  pattern (lib/path.ml[136,4652+19]..[136,4652+41])
                    Ppat_construct "Pextra_ty" (lib/path.ml[136,4652+19]..[136,4652+28])
                    Some
                      []
                      pattern (lib/path.ml[136,4652+29]..[136,4652+41])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[136,4652+30]..[136,4652+31])
                            Ppat_var "p" (lib/path.ml[136,4652+30]..[136,4652+31])
                          pattern (lib/path.ml[136,4652+33]..[136,4652+40])
                            Ppat_construct "Pext_ty" (lib/path.ml[136,4652+33]..[136,4652+40])
                            None
                        ]
                expression (lib/path.ml[136,4652+45]..[136,4652+51])
                  Pexp_apply
                  expression (lib/path.ml[136,4652+45]..[136,4652+49])
                    Pexp_ident "last" (lib/path.ml[136,4652+45]..[136,4652+49])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[136,4652+50]..[136,4652+51])
                        Pexp_ident "p" (lib/path.ml[136,4652+50]..[136,4652+51])
                  ]
            ]
    ]
  structure_item (lib/path.ml[138,4705+0]..[141,4792+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[138,4705+4]..[138,4705+25])
          Ppat_var "is_constructor_typath" (lib/path.ml[138,4705+4]..[138,4705+25])
        expression (lib/path.ml[138,4705+26]..[141,4792+23]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[138,4705+26]..[138,4705+27])
              Nolabel
              None
              pattern (lib/path.ml[138,4705+26]..[138,4705+27])
                Ppat_var "p" (lib/path.ml[138,4705+26]..[138,4705+27])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[139,4735+2]..[141,4792+23])
              Pexp_match
              expression (lib/path.ml[139,4735+8]..[139,4735+9])
                Pexp_ident "p" (lib/path.ml[139,4735+8]..[139,4735+9])
              [
                <case>
                  pattern (lib/path.ml[140,4750+4]..[140,4750+32])
                    Ppat_or
                    pattern (lib/path.ml[140,4750+4]..[140,4750+21])
                      Ppat_or
                      pattern (lib/path.ml[140,4750+4]..[140,4750+12])
                        Ppat_construct "Pident" (lib/path.ml[140,4750+4]..[140,4750+10])
                        Some
                          []
                          pattern (lib/path.ml[140,4750+11]..[140,4750+12])
                            Ppat_any
                      pattern (lib/path.ml[140,4750+15]..[140,4750+21])
                        Ppat_construct "Pdot" (lib/path.ml[140,4750+15]..[140,4750+19])
                        Some
                          []
                          pattern (lib/path.ml[140,4750+20]..[140,4750+21])
                            Ppat_any
                    pattern (lib/path.ml[140,4750+24]..[140,4750+32])
                      Ppat_construct "Papply" (lib/path.ml[140,4750+24]..[140,4750+30])
                      Some
                        []
                        pattern (lib/path.ml[140,4750+31]..[140,4750+32])
                          Ppat_any
                  expression (lib/path.ml[140,4750+36]..[140,4750+41])
                    Pexp_construct "false" (lib/path.ml[140,4750+36]..[140,4750+41])
                    None
                <case>
                  pattern (lib/path.ml[141,4792+4]..[141,4792+15])
                    Ppat_construct "Pextra_ty" (lib/path.ml[141,4792+4]..[141,4792+13])
                    Some
                      []
                      pattern (lib/path.ml[141,4792+14]..[141,4792+15])
                        Ppat_any
                  expression (lib/path.ml[141,4792+19]..[141,4792+23])
                    Pexp_construct "true" (lib/path.ml[141,4792+19]..[141,4792+23])
                    None
              ]
    ]
  structure_item (lib/path.ml[143,4817+0]..[146,4879+3])
    Pstr_module
    "T" (lib/path.ml[143,4817+7]..[143,4817+8])
      module_expr (lib/path.ml[143,4817+11]..[146,4879+3])
        Pmod_structure
        [
          structure_item (lib/path.ml[144,4835+2]..[144,4835+19])
            Pstr_type Nonrec
            [
              type_declaration "t" (lib/path.ml[144,4835+14]..[144,4835+15]) (lib/path.ml[144,4835+2]..[144,4835+19])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/path.ml[144,4835+18]..[144,4835+19])
                      Ptyp_constr "t" (lib/path.ml[144,4835+18]..[144,4835+19])
                      []
            ]
          structure_item (lib/path.ml[145,4855+2]..[145,4855+23])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/path.ml[145,4855+6]..[145,4855+13])
                  Ppat_var "compare" (lib/path.ml[145,4855+6]..[145,4855+13])
                expression (lib/path.ml[145,4855+16]..[145,4855+23])
                  Pexp_ident "compare" (lib/path.ml[145,4855+16]..[145,4855+23])
            ]
        ]
  structure_item (lib/path.ml[147,4883+0]..[147,4883+24])
    Pstr_module
    "Set" (lib/path.ml[147,4883+7]..[147,4883+10])
      module_expr (lib/path.ml[147,4883+13]..[147,4883+24])
        Pmod_apply
        module_expr (lib/path.ml[147,4883+13]..[147,4883+21])
          Pmod_ident "Set.Make" (lib/path.ml[147,4883+13]..[147,4883+21])
        module_expr (lib/path.ml[147,4883+22]..[147,4883+23])
          Pmod_ident "T" (lib/path.ml[147,4883+22]..[147,4883+23])
  structure_item (lib/path.ml[148,4908+0]..[148,4908+24])
    Pstr_module
    "Map" (lib/path.ml[148,4908+7]..[148,4908+10])
      module_expr (lib/path.ml[148,4908+13]..[148,4908+24])
        Pmod_apply
        module_expr (lib/path.ml[148,4908+13]..[148,4908+21])
          Pmod_ident "Map.Make" (lib/path.ml[148,4908+13]..[148,4908+21])
        module_expr (lib/path.ml[148,4908+22]..[148,4908+23])
          Pmod_ident "T" (lib/path.ml[148,4908+22]..[148,4908+23])
]

type t =
  | Pident of Ident.t 
  | Pdot of t * string 
  | Papply of t * t 
  | Pextra_ty of t * extra_ty 
and extra_ty =
  | Pcstr_ty of string 
  | Pext_ty 
let rec same p1 p2 =
  (p1 == p2) ||
    (match (p1, p2) with
     | (Pident id1, Pident id2) -> Ident.same id1 id2
     | (Pdot (p1, s1), Pdot (p2, s2)) -> (s1 = s2) && (same p1 p2)
     | (Papply (fun1, arg1), Papply (fun2, arg2)) ->
         (same fun1 fun2) && (same arg1 arg2)
     | (Pextra_ty (p1, t1), Pextra_ty (p2, t2)) ->
         let same_extra =
           match (t1, t2) with
           | (Pcstr_ty s1, Pcstr_ty s2) -> s1 = s2
           | (Pext_ty, Pext_ty) -> true
           | ((Pcstr_ty _ | Pext_ty), _) -> false in
         same_extra && (same p1 p2)
     | (_, _) -> false)
let rec compare p1 p2 =
  if p1 == p2
  then 0
  else
    (match (p1, p2) with
     | (Pident id1, Pident id2) -> Ident.compare id1 id2
     | (Pdot (p1, s1), Pdot (p2, s2)) ->
         let h = compare p1 p2 in if h <> 0 then h else String.compare s1 s2
     | (Papply (fun1, arg1), Papply (fun2, arg2)) ->
         let h = compare fun1 fun2 in if h <> 0 then h else compare arg1 arg2
     | (Pextra_ty (p1, t1), Pextra_ty (p2, t2)) ->
         let h = compare_extra t1 t2 in if h <> 0 then h else compare p1 p2
     | (Pident _, (Pdot _ | Papply _ | Pextra_ty _))
       | (Pdot _, (Papply _ | Pextra_ty _)) | (Papply _, Pextra_ty _) -> (-1)
     | ((Pextra_ty _ | Papply _ | Pdot _), Pident _)
       | ((Pextra_ty _ | Papply _), Pdot _) | (Pextra_ty _, Papply _) -> 1)
and compare_extra t1 t2 =
  match (t1, t2) with
  | (Pcstr_ty s1, Pcstr_ty s2) -> String.compare s1 s2
  | (Pext_ty, Pext_ty) -> 0
  | (Pcstr_ty _, Pext_ty) -> (-1)
  | (Pext_ty, Pcstr_ty _) -> 1
let rec find_free_opt ids =
  function
  | Pident id -> List.find_opt (Ident.same id) ids
  | Pdot (p, _) | Pextra_ty (p, _) -> find_free_opt ids p
  | Papply (p1, p2) ->
      (match find_free_opt ids p1 with
       | None -> find_free_opt ids p2
       | Some _ as res -> res)
let exists_free ids p =
  match find_free_opt ids p with | None -> false | _ -> true
let rec scope =
  function
  | Pident id -> Ident.scope id
  | Pdot (p, _) | Pextra_ty (p, _) -> scope p
  | Papply (p1, p2) -> Int.max (scope p1) (scope p2)
let kfalse _ = false
let maybe_escape s = if Lexer.is_keyword s then "\\#" ^ s else s
let rec name ?(paren= kfalse) =
  function
  | Pident id -> maybe_escape (Ident.name id)
  | Pdot (p, s) | Pextra_ty (p, Pcstr_ty s) ->
      let s = maybe_escape s in
      (name ~paren p) ^ (if paren s then ".( " ^ (s ^ " )") else "." ^ s)
  | Papply (p1, p2) -> (name ~paren p1) ^ ("(" ^ ((name ~paren p2) ^ ")"))
  | Pextra_ty (p, Pext_ty) -> name ~paren p
let rec print ppf =
  function
  | Pident id -> Ident.print_with_scope ppf id
  | Pdot (p, s) | Pextra_ty (p, Pcstr_ty s) ->
      Format.fprintf ppf "%a.%s" print p s
  | Papply (p1, p2) -> Format.fprintf ppf "%a(%a)" print p1 print p2
  | Pextra_ty (p, Pext_ty) -> print ppf p
let rec head =
  function
  | Pident id -> id
  | Pdot (p, _) | Pextra_ty (p, _) -> head p
  | Papply _ -> assert false
let flatten =
  let rec flatten acc =
    function
    | Pident id -> `Ok (id, acc)
    | Pdot (p, s) | Pextra_ty (p, Pcstr_ty s) -> flatten (s :: acc) p
    | Papply _ -> `Contains_apply
    | Pextra_ty (p, Pext_ty) -> flatten acc p in
  fun t -> flatten [] t
let heads p =
  let rec heads p acc =
    match p with
    | Pident id -> id :: acc
    | Pdot (p, _) | Pextra_ty (p, _) -> heads p acc
    | Papply (p1, p2) -> heads p1 (heads p2 acc) in
  heads p []
let rec last =
  function
  | Pident id -> Ident.name id
  | Pdot (_, s) | Pextra_ty (_, Pcstr_ty s) -> s
  | Papply (_, p) | Pextra_ty (p, Pext_ty) -> last p
let is_constructor_typath p =
  match p with | Pident _ | Pdot _ | Papply _ -> false | Pextra_ty _ -> true
module T = struct type nonrec t = t
                  let compare = compare end
module Set = (Set.Make)(T)
module Map = (Map.Make)(T)
