[
  structure_item (lib/path.ml[16,1079+0]..[23,1221+11])
    Pstr_type Rec
    [
      type_declaration "t" (lib/path.ml[16,1079+5]..[16,1079+6]) (lib/path.ml[16,1079+0]..[20,1153+29])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/path.ml[17,1088+4]..[17,1088+21])
                "Pident" (lib/path.ml[17,1088+4]..[17,1088+10])
                [
                  core_type (lib/path.ml[17,1088+14]..[17,1088+21])
                    Ptyp_constr "Ident.t" (lib/path.ml[17,1088+14]..[17,1088+21])
                    []
                ]
                None
              (lib/path.ml[18,1110+2]..[18,1110+22])
                "Pdot" (lib/path.ml[18,1110+4]..[18,1110+8])
                [
                  core_type (lib/path.ml[18,1110+12]..[18,1110+13])
                    Ptyp_constr "t" (lib/path.ml[18,1110+12]..[18,1110+13])
                    []
                  core_type (lib/path.ml[18,1110+16]..[18,1110+22])
                    Ptyp_constr "string" (lib/path.ml[18,1110+16]..[18,1110+22])
                    []
                ]
                None
              (lib/path.ml[19,1133+2]..[19,1133+19])
                "Papply" (lib/path.ml[19,1133+4]..[19,1133+10])
                [
                  core_type (lib/path.ml[19,1133+14]..[19,1133+15])
                    Ptyp_constr "t" (lib/path.ml[19,1133+14]..[19,1133+15])
                    []
                  core_type (lib/path.ml[19,1133+18]..[19,1133+19])
                    Ptyp_constr "t" (lib/path.ml[19,1133+18]..[19,1133+19])
                    []
                ]
                None
              (lib/path.ml[20,1153+2]..[20,1153+29])
                "Pextra_ty" (lib/path.ml[20,1153+4]..[20,1153+13])
                [
                  core_type (lib/path.ml[20,1153+17]..[20,1153+18])
                    Ptyp_constr "t" (lib/path.ml[20,1153+17]..[20,1153+18])
                    []
                  core_type (lib/path.ml[20,1153+21]..[20,1153+29])
                    Ptyp_constr "extra_ty" (lib/path.ml[20,1153+21]..[20,1153+29])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "extra_ty" (lib/path.ml[21,1183+4]..[21,1183+12]) (lib/path.ml[21,1183+0]..[23,1221+11])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/path.ml[22,1198+2]..[22,1198+22])
                "Pcstr_ty" (lib/path.ml[22,1198+4]..[22,1198+12])
                [
                  core_type (lib/path.ml[22,1198+16]..[22,1198+22])
                    Ptyp_constr "string" (lib/path.ml[22,1198+16]..[22,1198+22])
                    []
                ]
                None
              (lib/path.ml[23,1221+2]..[23,1221+11])
                "Pext_ty" (lib/path.ml[23,1221+4]..[23,1221+11])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/path.ml[25,1234+0]..[39,1748+19])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[25,1234+8]..[25,1234+12])
          Ppat_var "same" (lib/path.ml[25,1234+8]..[25,1234+12])
        expression (lib/path.ml[25,1234+13]..[39,1748+19]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[25,1234+13]..[25,1234+15])
              Nolabel
              None
              pattern (lib/path.ml[25,1234+13]..[25,1234+15])
                Ppat_var "p1" (lib/path.ml[25,1234+13]..[25,1234+15])
            Pparam_val (lib/path.ml[25,1234+16]..[25,1234+18])
              Nolabel
              None
              pattern (lib/path.ml[25,1234+16]..[25,1234+18])
                Ppat_var "p2" (lib/path.ml[25,1234+16]..[25,1234+18])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[26,1255+2]..[39,1748+19])
              Pexp_apply
              expression (lib/path.ml[27,1266+2]..[27,1266+4])
                Pexp_ident "||" (lib/path.ml[27,1266+2]..[27,1266+4])
              [
                <arg>
                Nolabel
                  expression (lib/path.ml[26,1255+2]..[26,1255+10])
                    Pexp_apply
                    expression (lib/path.ml[26,1255+5]..[26,1255+7])
                      Pexp_ident "==" (lib/path.ml[26,1255+5]..[26,1255+7])
                    [
                      <arg>
                      Nolabel
                        expression (lib/path.ml[26,1255+2]..[26,1255+4])
                          Pexp_ident "p1" (lib/path.ml[26,1255+2]..[26,1255+4])
                      <arg>
                      Nolabel
                        expression (lib/path.ml[26,1255+8]..[26,1255+10])
                          Pexp_ident "p2" (lib/path.ml[26,1255+8]..[26,1255+10])
                    ]
                <arg>
                Nolabel
                  expression (lib/path.ml[27,1266+5]..[39,1748+19])
                    Pexp_match
                    expression (lib/path.ml[27,1266+11]..[27,1266+19])
                      Pexp_tuple
                      [
                        expression (lib/path.ml[27,1266+12]..[27,1266+14])
                          Pexp_ident "p1" (lib/path.ml[27,1266+12]..[27,1266+14])
                        expression (lib/path.ml[27,1266+16]..[27,1266+18])
                          Pexp_ident "p2" (lib/path.ml[27,1266+16]..[27,1266+18])
                      ]
                    [
                      <case>
                        pattern (lib/path.ml[28,1291+4]..[28,1291+28])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[28,1291+5]..[28,1291+15])
                              Ppat_construct "Pident" (lib/path.ml[28,1291+5]..[28,1291+11])
                              Some
                                []
                                pattern (lib/path.ml[28,1291+12]..[28,1291+15])
                                  Ppat_var "id1" (lib/path.ml[28,1291+12]..[28,1291+15])
                            pattern (lib/path.ml[28,1291+17]..[28,1291+27])
                              Ppat_construct "Pident" (lib/path.ml[28,1291+17]..[28,1291+23])
                              Some
                                []
                                pattern (lib/path.ml[28,1291+24]..[28,1291+27])
                                  Ppat_var "id2" (lib/path.ml[28,1291+24]..[28,1291+27])
                          ]
                        expression (lib/path.ml[28,1291+32]..[28,1291+50])
                          Pexp_apply
                          expression (lib/path.ml[28,1291+32]..[28,1291+42])
                            Pexp_ident "Ident.same" (lib/path.ml[28,1291+32]..[28,1291+42])
                          [
                            <arg>
                            Nolabel
                              expression (lib/path.ml[28,1291+43]..[28,1291+46])
                                Pexp_ident "id1" (lib/path.ml[28,1291+43]..[28,1291+46])
                            <arg>
                            Nolabel
                              expression (lib/path.ml[28,1291+47]..[28,1291+50])
                                Pexp_ident "id2" (lib/path.ml[28,1291+47]..[28,1291+50])
                          ]
                      <case>
                        pattern (lib/path.ml[29,1342+4]..[29,1342+32])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[29,1342+5]..[29,1342+17])
                              Ppat_construct "Pdot" (lib/path.ml[29,1342+5]..[29,1342+9])
                              Some
                                []
                                pattern (lib/path.ml[29,1342+9]..[29,1342+17])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[29,1342+10]..[29,1342+12])
                                      Ppat_var "p1" (lib/path.ml[29,1342+10]..[29,1342+12])
                                    pattern (lib/path.ml[29,1342+14]..[29,1342+16])
                                      Ppat_var "s1" (lib/path.ml[29,1342+14]..[29,1342+16])
                                  ]
                            pattern (lib/path.ml[29,1342+19]..[29,1342+31])
                              Ppat_construct "Pdot" (lib/path.ml[29,1342+19]..[29,1342+23])
                              Some
                                []
                                pattern (lib/path.ml[29,1342+23]..[29,1342+31])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[29,1342+24]..[29,1342+26])
                                      Ppat_var "p2" (lib/path.ml[29,1342+24]..[29,1342+26])
                                    pattern (lib/path.ml[29,1342+28]..[29,1342+30])
                                      Ppat_var "s2" (lib/path.ml[29,1342+28]..[29,1342+30])
                                  ]
                          ]
                        expression (lib/path.ml[30,1378+6]..[30,1378+27])
                          Pexp_apply
                          expression (lib/path.ml[30,1378+14]..[30,1378+16])
                            Pexp_ident "&&" (lib/path.ml[30,1378+14]..[30,1378+16])
                          [
                            <arg>
                            Nolabel
                              expression (lib/path.ml[30,1378+6]..[30,1378+13])
                                Pexp_apply
                                expression (lib/path.ml[30,1378+9]..[30,1378+10])
                                  Pexp_ident "=" (lib/path.ml[30,1378+9]..[30,1378+10])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[30,1378+6]..[30,1378+8])
                                      Pexp_ident "s1" (lib/path.ml[30,1378+6]..[30,1378+8])
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[30,1378+11]..[30,1378+13])
                                      Pexp_ident "s2" (lib/path.ml[30,1378+11]..[30,1378+13])
                                ]
                            <arg>
                            Nolabel
                              expression (lib/path.ml[30,1378+17]..[30,1378+27])
                                Pexp_apply
                                expression (lib/path.ml[30,1378+17]..[30,1378+21])
                                  Pexp_ident "same" (lib/path.ml[30,1378+17]..[30,1378+21])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[30,1378+22]..[30,1378+24])
                                      Pexp_ident "p1" (lib/path.ml[30,1378+22]..[30,1378+24])
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[30,1378+25]..[30,1378+27])
                                      Pexp_ident "p2" (lib/path.ml[30,1378+25]..[30,1378+27])
                                ]
                          ]
                      <case>
                        pattern (lib/path.ml[31,1406+4]..[31,1406+44])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[31,1406+5]..[31,1406+23])
                              Ppat_construct "Papply" (lib/path.ml[31,1406+5]..[31,1406+11])
                              Some
                                []
                                pattern (lib/path.ml[31,1406+11]..[31,1406+23])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[31,1406+12]..[31,1406+16])
                                      Ppat_var "fun1" (lib/path.ml[31,1406+12]..[31,1406+16])
                                    pattern (lib/path.ml[31,1406+18]..[31,1406+22])
                                      Ppat_var "arg1" (lib/path.ml[31,1406+18]..[31,1406+22])
                                  ]
                            pattern (lib/path.ml[31,1406+25]..[31,1406+43])
                              Ppat_construct "Papply" (lib/path.ml[31,1406+25]..[31,1406+31])
                              Some
                                []
                                pattern (lib/path.ml[31,1406+31]..[31,1406+43])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[31,1406+32]..[31,1406+36])
                                      Ppat_var "fun2" (lib/path.ml[31,1406+32]..[31,1406+36])
                                    pattern (lib/path.ml[31,1406+38]..[31,1406+42])
                                      Ppat_var "arg2" (lib/path.ml[31,1406+38]..[31,1406+42])
                                  ]
                          ]
                        expression (lib/path.ml[32,1454+6]..[32,1454+38])
                          Pexp_apply
                          expression (lib/path.ml[32,1454+21]..[32,1454+23])
                            Pexp_ident "&&" (lib/path.ml[32,1454+21]..[32,1454+23])
                          [
                            <arg>
                            Nolabel
                              expression (lib/path.ml[32,1454+6]..[32,1454+20])
                                Pexp_apply
                                expression (lib/path.ml[32,1454+6]..[32,1454+10])
                                  Pexp_ident "same" (lib/path.ml[32,1454+6]..[32,1454+10])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[32,1454+11]..[32,1454+15])
                                      Pexp_ident "fun1" (lib/path.ml[32,1454+11]..[32,1454+15])
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[32,1454+16]..[32,1454+20])
                                      Pexp_ident "fun2" (lib/path.ml[32,1454+16]..[32,1454+20])
                                ]
                            <arg>
                            Nolabel
                              expression (lib/path.ml[32,1454+24]..[32,1454+38])
                                Pexp_apply
                                expression (lib/path.ml[32,1454+24]..[32,1454+28])
                                  Pexp_ident "same" (lib/path.ml[32,1454+24]..[32,1454+28])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[32,1454+29]..[32,1454+33])
                                      Pexp_ident "arg1" (lib/path.ml[32,1454+29]..[32,1454+33])
                                  <arg>
                                  Nolabel
                                    expression (lib/path.ml[32,1454+34]..[32,1454+38])
                                      Pexp_ident "arg2" (lib/path.ml[32,1454+34]..[32,1454+38])
                                ]
                          ]
                      <case>
                        pattern (lib/path.ml[33,1493+4]..[33,1493+44])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[33,1493+5]..[33,1493+23])
                              Ppat_construct "Pextra_ty" (lib/path.ml[33,1493+5]..[33,1493+14])
                              Some
                                []
                                pattern (lib/path.ml[33,1493+15]..[33,1493+23])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[33,1493+16]..[33,1493+18])
                                      Ppat_var "p1" (lib/path.ml[33,1493+16]..[33,1493+18])
                                    pattern (lib/path.ml[33,1493+20]..[33,1493+22])
                                      Ppat_var "t1" (lib/path.ml[33,1493+20]..[33,1493+22])
                                  ]
                            pattern (lib/path.ml[33,1493+25]..[33,1493+43])
                              Ppat_construct "Pextra_ty" (lib/path.ml[33,1493+25]..[33,1493+34])
                              Some
                                []
                                pattern (lib/path.ml[33,1493+35]..[33,1493+43])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[33,1493+36]..[33,1493+38])
                                      Ppat_var "p2" (lib/path.ml[33,1493+36]..[33,1493+38])
                                    pattern (lib/path.ml[33,1493+40]..[33,1493+42])
                                      Ppat_var "t2" (lib/path.ml[33,1493+40]..[33,1493+42])
                                  ]
                          ]
                        expression (lib/path.ml[34,1541+6]..[38,1714+33])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/path.ml[34,1541+10]..[34,1541+20])
                                Ppat_var "same_extra" (lib/path.ml[34,1541+10]..[34,1541+20])
                              expression (lib/path.ml[34,1541+23]..[37,1667+46])
                                Pexp_match
                                expression (lib/path.ml[34,1541+29]..[34,1541+35])
                                  Pexp_tuple
                                  [
                                    expression (lib/path.ml[34,1541+29]..[34,1541+31])
                                      Pexp_ident "t1" (lib/path.ml[34,1541+29]..[34,1541+31])
                                    expression (lib/path.ml[34,1541+33]..[34,1541+35])
                                      Pexp_ident "t2" (lib/path.ml[34,1541+33]..[34,1541+35])
                                  ]
                                [
                                  <case>
                                    pattern (lib/path.ml[35,1582+10]..[35,1582+36])
                                      Ppat_tuple
                                      [
                                        pattern (lib/path.ml[35,1582+11]..[35,1582+22])
                                          Ppat_construct "Pcstr_ty" (lib/path.ml[35,1582+11]..[35,1582+19])
                                          Some
                                            []
                                            pattern (lib/path.ml[35,1582+20]..[35,1582+22])
                                              Ppat_var "s1" (lib/path.ml[35,1582+20]..[35,1582+22])
                                        pattern (lib/path.ml[35,1582+24]..[35,1582+35])
                                          Ppat_construct "Pcstr_ty" (lib/path.ml[35,1582+24]..[35,1582+32])
                                          Some
                                            []
                                            pattern (lib/path.ml[35,1582+33]..[35,1582+35])
                                              Ppat_var "s2" (lib/path.ml[35,1582+33]..[35,1582+35])
                                      ]
                                    expression (lib/path.ml[35,1582+40]..[35,1582+47])
                                      Pexp_apply
                                      expression (lib/path.ml[35,1582+43]..[35,1582+44])
                                        Pexp_ident "=" (lib/path.ml[35,1582+43]..[35,1582+44])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/path.ml[35,1582+40]..[35,1582+42])
                                            Pexp_ident "s1" (lib/path.ml[35,1582+40]..[35,1582+42])
                                        <arg>
                                        Nolabel
                                          expression (lib/path.ml[35,1582+45]..[35,1582+47])
                                            Pexp_ident "s2" (lib/path.ml[35,1582+45]..[35,1582+47])
                                      ]
                                  <case>
                                    pattern (lib/path.ml[36,1630+10]..[36,1630+28])
                                      Ppat_tuple
                                      [
                                        pattern (lib/path.ml[36,1630+11]..[36,1630+18])
                                          Ppat_construct "Pext_ty" (lib/path.ml[36,1630+11]..[36,1630+18])
                                          None
                                        pattern (lib/path.ml[36,1630+20]..[36,1630+27])
                                          Ppat_construct "Pext_ty" (lib/path.ml[36,1630+20]..[36,1630+27])
                                          None
                                      ]
                                    expression (lib/path.ml[36,1630+32]..[36,1630+36])
                                      Pexp_construct "true" (lib/path.ml[36,1630+32]..[36,1630+36])
                                      None
                                  <case>
                                    pattern (lib/path.ml[37,1667+10]..[37,1667+37])
                                      Ppat_tuple
                                      [
                                        pattern (lib/path.ml[37,1667+11]..[37,1667+33])
                                          Ppat_or
                                          pattern (lib/path.ml[37,1667+12]..[37,1667+22])
                                            Ppat_construct "Pcstr_ty" (lib/path.ml[37,1667+12]..[37,1667+20])
                                            Some
                                              []
                                              pattern (lib/path.ml[37,1667+21]..[37,1667+22])
                                                Ppat_any
                                          pattern (lib/path.ml[37,1667+25]..[37,1667+32])
                                            Ppat_construct "Pext_ty" (lib/path.ml[37,1667+25]..[37,1667+32])
                                            None
                                        pattern (lib/path.ml[37,1667+35]..[37,1667+36])
                                          Ppat_any
                                      ]
                                    expression (lib/path.ml[37,1667+41]..[37,1667+46])
                                      Pexp_construct "false" (lib/path.ml[37,1667+41]..[37,1667+46])
                                      None
                                ]
                          ]
                          expression (lib/path.ml[38,1714+9]..[38,1714+33])
                            Pexp_apply
                            expression (lib/path.ml[38,1714+20]..[38,1714+22])
                              Pexp_ident "&&" (lib/path.ml[38,1714+20]..[38,1714+22])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[38,1714+9]..[38,1714+19])
                                  Pexp_ident "same_extra" (lib/path.ml[38,1714+9]..[38,1714+19])
                              <arg>
                              Nolabel
                                expression (lib/path.ml[38,1714+23]..[38,1714+33])
                                  Pexp_apply
                                  expression (lib/path.ml[38,1714+23]..[38,1714+27])
                                    Pexp_ident "same" (lib/path.ml[38,1714+23]..[38,1714+27])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/path.ml[38,1714+28]..[38,1714+30])
                                        Pexp_ident "p1" (lib/path.ml[38,1714+28]..[38,1714+30])
                                    <arg>
                                    Nolabel
                                      expression (lib/path.ml[38,1714+31]..[38,1714+33])
                                        Pexp_ident "p2" (lib/path.ml[38,1714+31]..[38,1714+33])
                                  ]
                            ]
                      <case>
                        pattern (lib/path.ml[39,1748+4]..[39,1748+10])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[39,1748+5]..[39,1748+6])
                              Ppat_any
                            pattern (lib/path.ml[39,1748+8]..[39,1748+9])
                              Ppat_any
                          ]
                        expression (lib/path.ml[39,1748+14]..[39,1748+19])
                          Pexp_construct "false" (lib/path.ml[39,1748+14]..[39,1748+19])
                          None
                    ]
              ]
    ]
  structure_item (lib/path.ml[41,1769+0]..[70,2716+8])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[41,1769+8]..[41,1769+15])
          Ppat_var "compare" (lib/path.ml[41,1769+8]..[41,1769+15])
        expression (lib/path.ml[41,1769+16]..[61,2512+8]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[41,1769+16]..[41,1769+18])
              Nolabel
              None
              pattern (lib/path.ml[41,1769+16]..[41,1769+18])
                Ppat_var "p1" (lib/path.ml[41,1769+16]..[41,1769+18])
            Pparam_val (lib/path.ml[41,1769+19]..[41,1769+21])
              Nolabel
              None
              pattern (lib/path.ml[41,1769+19]..[41,1769+21])
                Ppat_var "p2" (lib/path.ml[41,1769+19]..[41,1769+21])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[42,1793+2]..[61,2512+8])
              Pexp_ifthenelse
              expression (lib/path.ml[42,1793+5]..[42,1793+13])
                Pexp_apply
                expression (lib/path.ml[42,1793+8]..[42,1793+10])
                  Pexp_ident "==" (lib/path.ml[42,1793+8]..[42,1793+10])
                [
                  <arg>
                  Nolabel
                    expression (lib/path.ml[42,1793+5]..[42,1793+7])
                      Pexp_ident "p1" (lib/path.ml[42,1793+5]..[42,1793+7])
                  <arg>
                  Nolabel
                    expression (lib/path.ml[42,1793+11]..[42,1793+13])
                      Pexp_ident "p2" (lib/path.ml[42,1793+11]..[42,1793+13])
                ]
              expression (lib/path.ml[42,1793+19]..[42,1793+20])
                Pexp_constant PConst_int (0,None)
              Some
                expression (lib/path.ml[43,1814+7]..[61,2512+8])
                  Pexp_match
                  expression (lib/path.ml[43,1814+13]..[43,1814+21])
                    Pexp_tuple
                    [
                      expression (lib/path.ml[43,1814+14]..[43,1814+16])
                        Pexp_ident "p1" (lib/path.ml[43,1814+14]..[43,1814+16])
                      expression (lib/path.ml[43,1814+18]..[43,1814+20])
                        Pexp_ident "p2" (lib/path.ml[43,1814+18]..[43,1814+20])
                    ]
                  [
                    <case>
                      pattern (lib/path.ml[44,1841+4]..[44,1841+28])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[44,1841+5]..[44,1841+15])
                            Ppat_construct "Pident" (lib/path.ml[44,1841+5]..[44,1841+11])
                            Some
                              []
                              pattern (lib/path.ml[44,1841+12]..[44,1841+15])
                                Ppat_var "id1" (lib/path.ml[44,1841+12]..[44,1841+15])
                          pattern (lib/path.ml[44,1841+17]..[44,1841+27])
                            Ppat_construct "Pident" (lib/path.ml[44,1841+17]..[44,1841+23])
                            Some
                              []
                              pattern (lib/path.ml[44,1841+24]..[44,1841+27])
                                Ppat_var "id2" (lib/path.ml[44,1841+24]..[44,1841+27])
                        ]
                      expression (lib/path.ml[44,1841+32]..[44,1841+53])
                        Pexp_apply
                        expression (lib/path.ml[44,1841+32]..[44,1841+45])
                          Pexp_ident "Ident.compare" (lib/path.ml[44,1841+32]..[44,1841+45])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[44,1841+46]..[44,1841+49])
                              Pexp_ident "id1" (lib/path.ml[44,1841+46]..[44,1841+49])
                          <arg>
                          Nolabel
                            expression (lib/path.ml[44,1841+50]..[44,1841+53])
                              Pexp_ident "id2" (lib/path.ml[44,1841+50]..[44,1841+53])
                        ]
                    <case>
                      pattern (lib/path.ml[45,1895+4]..[45,1895+32])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[45,1895+5]..[45,1895+17])
                            Ppat_construct "Pdot" (lib/path.ml[45,1895+5]..[45,1895+9])
                            Some
                              []
                              pattern (lib/path.ml[45,1895+9]..[45,1895+17])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[45,1895+10]..[45,1895+12])
                                    Ppat_var "p1" (lib/path.ml[45,1895+10]..[45,1895+12])
                                  pattern (lib/path.ml[45,1895+14]..[45,1895+16])
                                    Ppat_var "s1" (lib/path.ml[45,1895+14]..[45,1895+16])
                                ]
                          pattern (lib/path.ml[45,1895+19]..[45,1895+31])
                            Ppat_construct "Pdot" (lib/path.ml[45,1895+19]..[45,1895+23])
                            Some
                              []
                              pattern (lib/path.ml[45,1895+23]..[45,1895+31])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[45,1895+24]..[45,1895+26])
                                    Ppat_var "p2" (lib/path.ml[45,1895+24]..[45,1895+26])
                                  pattern (lib/path.ml[45,1895+28]..[45,1895+30])
                                    Ppat_var "s2" (lib/path.ml[45,1895+28]..[45,1895+30])
                                ]
                        ]
                      expression (lib/path.ml[46,1931+6]..[47,1962+48])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/path.ml[46,1931+10]..[46,1931+11])
                              Ppat_var "h" (lib/path.ml[46,1931+10]..[46,1931+11])
                            expression (lib/path.ml[46,1931+14]..[46,1931+27])
                              Pexp_apply
                              expression (lib/path.ml[46,1931+14]..[46,1931+21])
                                Pexp_ident "compare" (lib/path.ml[46,1931+14]..[46,1931+21])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[46,1931+22]..[46,1931+24])
                                    Pexp_ident "p1" (lib/path.ml[46,1931+22]..[46,1931+24])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[46,1931+25]..[46,1931+27])
                                    Pexp_ident "p2" (lib/path.ml[46,1931+25]..[46,1931+27])
                              ]
                        ]
                        expression (lib/path.ml[47,1962+6]..[47,1962+48])
                          Pexp_ifthenelse
                          expression (lib/path.ml[47,1962+9]..[47,1962+15])
                            Pexp_apply
                            expression (lib/path.ml[47,1962+11]..[47,1962+13])
                              Pexp_ident "<>" (lib/path.ml[47,1962+11]..[47,1962+13])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[47,1962+9]..[47,1962+10])
                                  Pexp_ident "h" (lib/path.ml[47,1962+9]..[47,1962+10])
                              <arg>
                              Nolabel
                                expression (lib/path.ml[47,1962+14]..[47,1962+15])
                                  Pexp_constant PConst_int (0,None)
                            ]
                          expression (lib/path.ml[47,1962+21]..[47,1962+22])
                            Pexp_ident "h" (lib/path.ml[47,1962+21]..[47,1962+22])
                          Some
                            expression (lib/path.ml[47,1962+28]..[47,1962+48])
                              Pexp_apply
                              expression (lib/path.ml[47,1962+28]..[47,1962+42])
                                Pexp_ident "String.compare" (lib/path.ml[47,1962+28]..[47,1962+42])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[47,1962+43]..[47,1962+45])
                                    Pexp_ident "s1" (lib/path.ml[47,1962+43]..[47,1962+45])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[47,1962+46]..[47,1962+48])
                                    Pexp_ident "s2" (lib/path.ml[47,1962+46]..[47,1962+48])
                              ]
                    <case>
                      pattern (lib/path.ml[48,2011+4]..[48,2011+44])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[48,2011+5]..[48,2011+23])
                            Ppat_construct "Papply" (lib/path.ml[48,2011+5]..[48,2011+11])
                            Some
                              []
                              pattern (lib/path.ml[48,2011+11]..[48,2011+23])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[48,2011+12]..[48,2011+16])
                                    Ppat_var "fun1" (lib/path.ml[48,2011+12]..[48,2011+16])
                                  pattern (lib/path.ml[48,2011+18]..[48,2011+22])
                                    Ppat_var "arg1" (lib/path.ml[48,2011+18]..[48,2011+22])
                                ]
                          pattern (lib/path.ml[48,2011+25]..[48,2011+43])
                            Ppat_construct "Papply" (lib/path.ml[48,2011+25]..[48,2011+31])
                            Some
                              []
                              pattern (lib/path.ml[48,2011+31]..[48,2011+43])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[48,2011+32]..[48,2011+36])
                                    Ppat_var "fun2" (lib/path.ml[48,2011+32]..[48,2011+36])
                                  pattern (lib/path.ml[48,2011+38]..[48,2011+42])
                                    Ppat_var "arg2" (lib/path.ml[48,2011+38]..[48,2011+42])
                                ]
                        ]
                      expression (lib/path.ml[49,2059+6]..[50,2094+45])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/path.ml[49,2059+10]..[49,2059+11])
                              Ppat_var "h" (lib/path.ml[49,2059+10]..[49,2059+11])
                            expression (lib/path.ml[49,2059+14]..[49,2059+31])
                              Pexp_apply
                              expression (lib/path.ml[49,2059+14]..[49,2059+21])
                                Pexp_ident "compare" (lib/path.ml[49,2059+14]..[49,2059+21])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[49,2059+22]..[49,2059+26])
                                    Pexp_ident "fun1" (lib/path.ml[49,2059+22]..[49,2059+26])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[49,2059+27]..[49,2059+31])
                                    Pexp_ident "fun2" (lib/path.ml[49,2059+27]..[49,2059+31])
                              ]
                        ]
                        expression (lib/path.ml[50,2094+6]..[50,2094+45])
                          Pexp_ifthenelse
                          expression (lib/path.ml[50,2094+9]..[50,2094+15])
                            Pexp_apply
                            expression (lib/path.ml[50,2094+11]..[50,2094+13])
                              Pexp_ident "<>" (lib/path.ml[50,2094+11]..[50,2094+13])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[50,2094+9]..[50,2094+10])
                                  Pexp_ident "h" (lib/path.ml[50,2094+9]..[50,2094+10])
                              <arg>
                              Nolabel
                                expression (lib/path.ml[50,2094+14]..[50,2094+15])
                                  Pexp_constant PConst_int (0,None)
                            ]
                          expression (lib/path.ml[50,2094+21]..[50,2094+22])
                            Pexp_ident "h" (lib/path.ml[50,2094+21]..[50,2094+22])
                          Some
                            expression (lib/path.ml[50,2094+28]..[50,2094+45])
                              Pexp_apply
                              expression (lib/path.ml[50,2094+28]..[50,2094+35])
                                Pexp_ident "compare" (lib/path.ml[50,2094+28]..[50,2094+35])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[50,2094+36]..[50,2094+40])
                                    Pexp_ident "arg1" (lib/path.ml[50,2094+36]..[50,2094+40])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[50,2094+41]..[50,2094+45])
                                    Pexp_ident "arg2" (lib/path.ml[50,2094+41]..[50,2094+45])
                              ]
                    <case>
                      pattern (lib/path.ml[51,2140+4]..[51,2140+44])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[51,2140+5]..[51,2140+23])
                            Ppat_construct "Pextra_ty" (lib/path.ml[51,2140+5]..[51,2140+14])
                            Some
                              []
                              pattern (lib/path.ml[51,2140+15]..[51,2140+23])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[51,2140+16]..[51,2140+18])
                                    Ppat_var "p1" (lib/path.ml[51,2140+16]..[51,2140+18])
                                  pattern (lib/path.ml[51,2140+20]..[51,2140+22])
                                    Ppat_var "t1" (lib/path.ml[51,2140+20]..[51,2140+22])
                                ]
                          pattern (lib/path.ml[51,2140+25]..[51,2140+43])
                            Ppat_construct "Pextra_ty" (lib/path.ml[51,2140+25]..[51,2140+34])
                            Some
                              []
                              pattern (lib/path.ml[51,2140+35]..[51,2140+43])
                                Ppat_tuple
                                [
                                  pattern (lib/path.ml[51,2140+36]..[51,2140+38])
                                    Ppat_var "p2" (lib/path.ml[51,2140+36]..[51,2140+38])
                                  pattern (lib/path.ml[51,2140+40]..[51,2140+42])
                                    Ppat_var "t2" (lib/path.ml[51,2140+40]..[51,2140+42])
                                ]
                        ]
                      expression (lib/path.ml[52,2188+6]..[53,2225+41])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/path.ml[52,2188+10]..[52,2188+11])
                              Ppat_var "h" (lib/path.ml[52,2188+10]..[52,2188+11])
                            expression (lib/path.ml[52,2188+14]..[52,2188+33])
                              Pexp_apply
                              expression (lib/path.ml[52,2188+14]..[52,2188+27])
                                Pexp_ident "compare_extra" (lib/path.ml[52,2188+14]..[52,2188+27])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[52,2188+28]..[52,2188+30])
                                    Pexp_ident "t1" (lib/path.ml[52,2188+28]..[52,2188+30])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[52,2188+31]..[52,2188+33])
                                    Pexp_ident "t2" (lib/path.ml[52,2188+31]..[52,2188+33])
                              ]
                        ]
                        expression (lib/path.ml[53,2225+6]..[53,2225+41])
                          Pexp_ifthenelse
                          expression (lib/path.ml[53,2225+9]..[53,2225+15])
                            Pexp_apply
                            expression (lib/path.ml[53,2225+11]..[53,2225+13])
                              Pexp_ident "<>" (lib/path.ml[53,2225+11]..[53,2225+13])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[53,2225+9]..[53,2225+10])
                                  Pexp_ident "h" (lib/path.ml[53,2225+9]..[53,2225+10])
                              <arg>
                              Nolabel
                                expression (lib/path.ml[53,2225+14]..[53,2225+15])
                                  Pexp_constant PConst_int (0,None)
                            ]
                          expression (lib/path.ml[53,2225+21]..[53,2225+22])
                            Pexp_ident "h" (lib/path.ml[53,2225+21]..[53,2225+22])
                          Some
                            expression (lib/path.ml[53,2225+28]..[53,2225+41])
                              Pexp_apply
                              expression (lib/path.ml[53,2225+28]..[53,2225+35])
                                Pexp_ident "compare" (lib/path.ml[53,2225+28]..[53,2225+35])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[53,2225+36]..[53,2225+38])
                                    Pexp_ident "p1" (lib/path.ml[53,2225+36]..[53,2225+38])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[53,2225+39]..[53,2225+41])
                                    Pexp_ident "p2" (lib/path.ml[53,2225+39]..[53,2225+41])
                              ]
                    <case>
                      pattern (lib/path.ml[54,2267+4]..[56,2356+27])
                        Ppat_or
                        pattern (lib/path.ml[54,2267+4]..[55,2317+38])
                          Ppat_or
                          pattern (lib/path.ml[54,2267+4]..[54,2267+49])
                            Ppat_tuple
                            [
                              pattern (lib/path.ml[54,2267+5]..[54,2267+13])
                                Ppat_construct "Pident" (lib/path.ml[54,2267+5]..[54,2267+11])
                                Some
                                  []
                                  pattern (lib/path.ml[54,2267+12]..[54,2267+13])
                                    Ppat_any
                              pattern (lib/path.ml[54,2267+15]..[54,2267+48])
                                Ppat_or
                                pattern (lib/path.ml[54,2267+16]..[54,2267+33])
                                  Ppat_or
                                  pattern (lib/path.ml[54,2267+16]..[54,2267+22])
                                    Ppat_construct "Pdot" (lib/path.ml[54,2267+16]..[54,2267+20])
                                    Some
                                      []
                                      pattern (lib/path.ml[54,2267+21]..[54,2267+22])
                                        Ppat_any
                                  pattern (lib/path.ml[54,2267+25]..[54,2267+33])
                                    Ppat_construct "Papply" (lib/path.ml[54,2267+25]..[54,2267+31])
                                    Some
                                      []
                                      pattern (lib/path.ml[54,2267+32]..[54,2267+33])
                                        Ppat_any
                                pattern (lib/path.ml[54,2267+36]..[54,2267+47])
                                  Ppat_construct "Pextra_ty" (lib/path.ml[54,2267+36]..[54,2267+45])
                                  Some
                                    []
                                    pattern (lib/path.ml[54,2267+46]..[54,2267+47])
                                      Ppat_any
                            ]
                          pattern (lib/path.ml[55,2317+4]..[55,2317+38])
                            Ppat_tuple
                            [
                              pattern (lib/path.ml[55,2317+5]..[55,2317+11])
                                Ppat_construct "Pdot" (lib/path.ml[55,2317+5]..[55,2317+9])
                                Some
                                  []
                                  pattern (lib/path.ml[55,2317+10]..[55,2317+11])
                                    Ppat_any
                              pattern (lib/path.ml[55,2317+13]..[55,2317+37])
                                Ppat_or
                                pattern (lib/path.ml[55,2317+14]..[55,2317+22])
                                  Ppat_construct "Papply" (lib/path.ml[55,2317+14]..[55,2317+20])
                                  Some
                                    []
                                    pattern (lib/path.ml[55,2317+21]..[55,2317+22])
                                      Ppat_any
                                pattern (lib/path.ml[55,2317+25]..[55,2317+36])
                                  Ppat_construct "Pextra_ty" (lib/path.ml[55,2317+25]..[55,2317+34])
                                  Some
                                    []
                                    pattern (lib/path.ml[55,2317+35]..[55,2317+36])
                                      Ppat_any
                            ]
                        pattern (lib/path.ml[56,2356+4]..[56,2356+27])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[56,2356+5]..[56,2356+13])
                              Ppat_construct "Papply" (lib/path.ml[56,2356+5]..[56,2356+11])
                              Some
                                []
                                pattern (lib/path.ml[56,2356+12]..[56,2356+13])
                                  Ppat_any
                            pattern (lib/path.ml[56,2356+15]..[56,2356+26])
                              Ppat_construct "Pextra_ty" (lib/path.ml[56,2356+15]..[56,2356+24])
                              Some
                                []
                                pattern (lib/path.ml[56,2356+25]..[56,2356+26])
                                  Ppat_any
                          ]
                      expression (lib/path.ml[57,2384+7]..[57,2384+9])
                        Pexp_constant PConst_int (-1,None)
                    <case>
                      pattern (lib/path.ml[58,2394+4]..[60,2484+27])
                        Ppat_or
                        pattern (lib/path.ml[58,2394+4]..[59,2444+39])
                          Ppat_or
                          pattern (lib/path.ml[58,2394+4]..[58,2394+49])
                            Ppat_tuple
                            [
                              pattern (lib/path.ml[58,2394+5]..[58,2394+38])
                                Ppat_or
                                pattern (lib/path.ml[58,2394+6]..[58,2394+28])
                                  Ppat_or
                                  pattern (lib/path.ml[58,2394+6]..[58,2394+17])
                                    Ppat_construct "Pextra_ty" (lib/path.ml[58,2394+6]..[58,2394+15])
                                    Some
                                      []
                                      pattern (lib/path.ml[58,2394+16]..[58,2394+17])
                                        Ppat_any
                                  pattern (lib/path.ml[58,2394+20]..[58,2394+28])
                                    Ppat_construct "Papply" (lib/path.ml[58,2394+20]..[58,2394+26])
                                    Some
                                      []
                                      pattern (lib/path.ml[58,2394+27]..[58,2394+28])
                                        Ppat_any
                                pattern (lib/path.ml[58,2394+31]..[58,2394+37])
                                  Ppat_construct "Pdot" (lib/path.ml[58,2394+31]..[58,2394+35])
                                  Some
                                    []
                                    pattern (lib/path.ml[58,2394+36]..[58,2394+37])
                                      Ppat_any
                              pattern (lib/path.ml[58,2394+40]..[58,2394+48])
                                Ppat_construct "Pident" (lib/path.ml[58,2394+40]..[58,2394+46])
                                Some
                                  []
                                  pattern (lib/path.ml[58,2394+47]..[58,2394+48])
                                    Ppat_any
                            ]
                          pattern (lib/path.ml[59,2444+4]..[59,2444+39])
                            Ppat_tuple
                            [
                              pattern (lib/path.ml[59,2444+5]..[59,2444+29])
                                Ppat_or
                                pattern (lib/path.ml[59,2444+6]..[59,2444+17])
                                  Ppat_construct "Pextra_ty" (lib/path.ml[59,2444+6]..[59,2444+15])
                                  Some
                                    []
                                    pattern (lib/path.ml[59,2444+16]..[59,2444+17])
                                      Ppat_any
                                pattern (lib/path.ml[59,2444+20]..[59,2444+28])
                                  Ppat_construct "Papply" (lib/path.ml[59,2444+20]..[59,2444+26])
                                  Some
                                    []
                                    pattern (lib/path.ml[59,2444+27]..[59,2444+28])
                                      Ppat_any
                              pattern (lib/path.ml[59,2444+32]..[59,2444+38])
                                Ppat_construct "Pdot" (lib/path.ml[59,2444+32]..[59,2444+36])
                                Some
                                  []
                                  pattern (lib/path.ml[59,2444+37]..[59,2444+38])
                                    Ppat_any
                            ]
                        pattern (lib/path.ml[60,2484+4]..[60,2484+27])
                          Ppat_tuple
                          [
                            pattern (lib/path.ml[60,2484+5]..[60,2484+16])
                              Ppat_construct "Pextra_ty" (lib/path.ml[60,2484+5]..[60,2484+14])
                              Some
                                []
                                pattern (lib/path.ml[60,2484+15]..[60,2484+16])
                                  Ppat_any
                            pattern (lib/path.ml[60,2484+18]..[60,2484+26])
                              Ppat_construct "Papply" (lib/path.ml[60,2484+18]..[60,2484+24])
                              Some
                                []
                                pattern (lib/path.ml[60,2484+25]..[60,2484+26])
                                  Ppat_any
                          ]
                      expression (lib/path.ml[61,2512+7]..[61,2512+8])
                        Pexp_constant PConst_int (1,None)
                  ]
      <def>
        pattern (lib/path.ml[62,2521+4]..[62,2521+17])
          Ppat_var "compare_extra" (lib/path.ml[62,2521+4]..[62,2521+17])
        expression (lib/path.ml[62,2521+18]..[70,2716+8]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[62,2521+18]..[62,2521+20])
              Nolabel
              None
              pattern (lib/path.ml[62,2521+18]..[62,2521+20])
                Ppat_var "t1" (lib/path.ml[62,2521+18]..[62,2521+20])
            Pparam_val (lib/path.ml[62,2521+21]..[62,2521+23])
              Nolabel
              None
              pattern (lib/path.ml[62,2521+21]..[62,2521+23])
                Ppat_var "t2" (lib/path.ml[62,2521+21]..[62,2521+23])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[63,2547+2]..[70,2716+8])
              Pexp_match
              expression (lib/path.ml[63,2547+8]..[63,2547+16])
                Pexp_tuple
                [
                  expression (lib/path.ml[63,2547+9]..[63,2547+11])
                    Pexp_ident "t1" (lib/path.ml[63,2547+9]..[63,2547+11])
                  expression (lib/path.ml[63,2547+13]..[63,2547+15])
                    Pexp_ident "t2" (lib/path.ml[63,2547+13]..[63,2547+15])
                ]
              [
                <case>
                  pattern (lib/path.ml[64,2569+4]..[64,2569+28])
                    Ppat_tuple
                    [
                      pattern (lib/path.ml[64,2569+4]..[64,2569+15])
                        Ppat_construct "Pcstr_ty" (lib/path.ml[64,2569+4]..[64,2569+12])
                        Some
                          []
                          pattern (lib/path.ml[64,2569+13]..[64,2569+15])
                            Ppat_var "s1" (lib/path.ml[64,2569+13]..[64,2569+15])
                      pattern (lib/path.ml[64,2569+17]..[64,2569+28])
                        Ppat_construct "Pcstr_ty" (lib/path.ml[64,2569+17]..[64,2569+25])
                        Some
                          []
                          pattern (lib/path.ml[64,2569+26]..[64,2569+28])
                            Ppat_var "s2" (lib/path.ml[64,2569+26]..[64,2569+28])
                    ]
                  expression (lib/path.ml[64,2569+32]..[64,2569+52])
                    Pexp_apply
                    expression (lib/path.ml[64,2569+32]..[64,2569+46])
                      Pexp_ident "String.compare" (lib/path.ml[64,2569+32]..[64,2569+46])
                    [
                      <arg>
                      Nolabel
                        expression (lib/path.ml[64,2569+47]..[64,2569+49])
                          Pexp_ident "s1" (lib/path.ml[64,2569+47]..[64,2569+49])
                      <arg>
                      Nolabel
                        expression (lib/path.ml[64,2569+50]..[64,2569+52])
                          Pexp_ident "s2" (lib/path.ml[64,2569+50]..[64,2569+52])
                    ]
                <case>
                  pattern (lib/path.ml[65,2622+4]..[65,2622+22])
                    Ppat_tuple
                    [
                      pattern (lib/path.ml[65,2622+5]..[65,2622+12])
                        Ppat_construct "Pext_ty" (lib/path.ml[65,2622+5]..[65,2622+12])
                        None
                      pattern (lib/path.ml[65,2622+14]..[65,2622+21])
                        Ppat_construct "Pext_ty" (lib/path.ml[65,2622+14]..[65,2622+21])
                        None
                    ]
                  expression (lib/path.ml[66,2645+7]..[66,2645+8])
                    Pexp_constant PConst_int (0,None)
                <case>
                  pattern (lib/path.ml[67,2654+4]..[67,2654+25])
                    Ppat_tuple
                    [
                      pattern (lib/path.ml[67,2654+5]..[67,2654+15])
                        Ppat_construct "Pcstr_ty" (lib/path.ml[67,2654+5]..[67,2654+13])
                        Some
                          []
                          pattern (lib/path.ml[67,2654+14]..[67,2654+15])
                            Ppat_any
                      pattern (lib/path.ml[67,2654+17]..[67,2654+24])
                        Ppat_construct "Pext_ty" (lib/path.ml[67,2654+17]..[67,2654+24])
                        None
                    ]
                  expression (lib/path.ml[68,2680+7]..[68,2680+9])
                    Pexp_constant PConst_int (-1,None)
                <case>
                  pattern (lib/path.ml[69,2690+4]..[69,2690+25])
                    Ppat_tuple
                    [
                      pattern (lib/path.ml[69,2690+5]..[69,2690+12])
                        Ppat_construct "Pext_ty" (lib/path.ml[69,2690+5]..[69,2690+12])
                        None
                      pattern (lib/path.ml[69,2690+14]..[69,2690+24])
                        Ppat_construct "Pcstr_ty" (lib/path.ml[69,2690+14]..[69,2690+22])
                        Some
                          []
                          pattern (lib/path.ml[69,2690+23]..[69,2690+24])
                            Ppat_any
                    ]
                  expression (lib/path.ml[70,2716+7]..[70,2716+8])
                    Pexp_constant PConst_int (1,None)
              ]
    ]
  structure_item (lib/path.ml[72,2726+0]..[79,3003+7])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[72,2726+8]..[72,2726+21])
          Ppat_var "find_free_opt" (lib/path.ml[72,2726+8]..[72,2726+21])
        expression (lib/path.ml[72,2726+22]..[79,3003+7]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[72,2726+22]..[72,2726+25])
              Nolabel
              None
              pattern (lib/path.ml[72,2726+22]..[72,2726+25])
                Ppat_var "ids" (lib/path.ml[72,2726+22]..[72,2726+25])
          ]
          None
          Pfunction_cases (lib/path.ml[72,2726+28]..[79,3003+7])
            [
              <case>
                pattern (lib/path.ml[73,2763+4]..[73,2763+13])
                  Ppat_construct "Pident" (lib/path.ml[73,2763+4]..[73,2763+10])
                  Some
                    []
                    pattern (lib/path.ml[73,2763+11]..[73,2763+13])
                      Ppat_var "id" (lib/path.ml[73,2763+11]..[73,2763+13])
                expression (lib/path.ml[73,2763+17]..[73,2763+50])
                  Pexp_apply
                  expression (lib/path.ml[73,2763+17]..[73,2763+30])
                    Pexp_ident "List.find_opt" (lib/path.ml[73,2763+17]..[73,2763+30])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[73,2763+31]..[73,2763+46])
                        Pexp_apply
                        expression (lib/path.ml[73,2763+32]..[73,2763+42])
                          Pexp_ident "Ident.same" (lib/path.ml[73,2763+32]..[73,2763+42])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[73,2763+43]..[73,2763+45])
                              Pexp_ident "id" (lib/path.ml[73,2763+43]..[73,2763+45])
                        ]
                    <arg>
                    Nolabel
                      expression (lib/path.ml[73,2763+47]..[73,2763+50])
                        Pexp_ident "ids" (lib/path.ml[73,2763+47]..[73,2763+50])
                  ]
              <case>
                pattern (lib/path.ml[74,2814+4]..[74,2814+33])
                  Ppat_or
                  pattern (lib/path.ml[74,2814+4]..[74,2814+14])
                    Ppat_construct "Pdot" (lib/path.ml[74,2814+4]..[74,2814+8])
                    Some
                      []
                      pattern (lib/path.ml[74,2814+8]..[74,2814+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[74,2814+9]..[74,2814+10])
                            Ppat_var "p" (lib/path.ml[74,2814+9]..[74,2814+10])
                          pattern (lib/path.ml[74,2814+12]..[74,2814+13])
                            Ppat_any
                        ]
                  pattern (lib/path.ml[74,2814+17]..[74,2814+33])
                    Ppat_construct "Pextra_ty" (lib/path.ml[74,2814+17]..[74,2814+26])
                    Some
                      []
                      pattern (lib/path.ml[74,2814+27]..[74,2814+33])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[74,2814+28]..[74,2814+29])
                            Ppat_var "p" (lib/path.ml[74,2814+28]..[74,2814+29])
                          pattern (lib/path.ml[74,2814+31]..[74,2814+32])
                            Ppat_any
                        ]
                expression (lib/path.ml[74,2814+37]..[74,2814+56])
                  Pexp_apply
                  expression (lib/path.ml[74,2814+37]..[74,2814+50])
                    Pexp_ident "find_free_opt" (lib/path.ml[74,2814+37]..[74,2814+50])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[74,2814+51]..[74,2814+54])
                        Pexp_ident "ids" (lib/path.ml[74,2814+51]..[74,2814+54])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[74,2814+55]..[74,2814+56])
                        Pexp_ident "p" (lib/path.ml[74,2814+55]..[74,2814+56])
                  ]
              <case>
                pattern (lib/path.ml[75,2871+4]..[75,2871+18])
                  Ppat_construct "Papply" (lib/path.ml[75,2871+4]..[75,2871+10])
                  Some
                    []
                    pattern (lib/path.ml[75,2871+10]..[75,2871+18])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[75,2871+11]..[75,2871+13])
                          Ppat_var "p1" (lib/path.ml[75,2871+11]..[75,2871+13])
                        pattern (lib/path.ml[75,2871+15]..[75,2871+17])
                          Ppat_var "p2" (lib/path.ml[75,2871+15]..[75,2871+17])
                      ]
                expression (lib/path.ml[75,2871+22]..[79,3003+7])
                  Pexp_match
                  expression (lib/path.ml[76,2899+12]..[76,2899+32])
                    Pexp_apply
                    expression (lib/path.ml[76,2899+12]..[76,2899+25])
                      Pexp_ident "find_free_opt" (lib/path.ml[76,2899+12]..[76,2899+25])
                    [
                      <arg>
                      Nolabel
                        expression (lib/path.ml[76,2899+26]..[76,2899+29])
                          Pexp_ident "ids" (lib/path.ml[76,2899+26]..[76,2899+29])
                      <arg>
                      Nolabel
                        expression (lib/path.ml[76,2899+30]..[76,2899+32])
                          Pexp_ident "p1" (lib/path.ml[76,2899+30]..[76,2899+32])
                    ]
                  [
                    <case>
                      pattern (lib/path.ml[77,2937+8]..[77,2937+12])
                        Ppat_construct "None" (lib/path.ml[77,2937+8]..[77,2937+12])
                        None
                      expression (lib/path.ml[77,2937+16]..[77,2937+36])
                        Pexp_apply
                        expression (lib/path.ml[77,2937+16]..[77,2937+29])
                          Pexp_ident "find_free_opt" (lib/path.ml[77,2937+16]..[77,2937+29])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[77,2937+30]..[77,2937+33])
                              Pexp_ident "ids" (lib/path.ml[77,2937+30]..[77,2937+33])
                          <arg>
                          Nolabel
                            expression (lib/path.ml[77,2937+34]..[77,2937+36])
                              Pexp_ident "p2" (lib/path.ml[77,2937+34]..[77,2937+36])
                        ]
                    <case>
                      pattern (lib/path.ml[78,2974+8]..[78,2974+21])
                        Ppat_alias "res" (lib/path.ml[78,2974+18]..[78,2974+21])
                        pattern (lib/path.ml[78,2974+8]..[78,2974+14])
                          Ppat_construct "Some" (lib/path.ml[78,2974+8]..[78,2974+12])
                          Some
                            []
                            pattern (lib/path.ml[78,2974+13]..[78,2974+14])
                              Ppat_any
                      expression (lib/path.ml[78,2974+25]..[78,2974+28])
                        Pexp_ident "res" (lib/path.ml[78,2974+25]..[78,2974+28])
                  ]
            ]
    ]
  structure_item (lib/path.ml[81,3012+0]..[84,3087+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[81,3012+4]..[81,3012+15])
          Ppat_var "exists_free" (lib/path.ml[81,3012+4]..[81,3012+15])
        expression (lib/path.ml[81,3012+16]..[84,3087+13]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[81,3012+16]..[81,3012+19])
              Nolabel
              None
              pattern (lib/path.ml[81,3012+16]..[81,3012+19])
                Ppat_var "ids" (lib/path.ml[81,3012+16]..[81,3012+19])
            Pparam_val (lib/path.ml[81,3012+20]..[81,3012+21])
              Nolabel
              None
              pattern (lib/path.ml[81,3012+20]..[81,3012+21])
                Ppat_var "p" (lib/path.ml[81,3012+20]..[81,3012+21])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[82,3036+2]..[84,3087+13])
              Pexp_match
              expression (lib/path.ml[82,3036+8]..[82,3036+27])
                Pexp_apply
                expression (lib/path.ml[82,3036+8]..[82,3036+21])
                  Pexp_ident "find_free_opt" (lib/path.ml[82,3036+8]..[82,3036+21])
                [
                  <arg>
                  Nolabel
                    expression (lib/path.ml[82,3036+22]..[82,3036+25])
                      Pexp_ident "ids" (lib/path.ml[82,3036+22]..[82,3036+25])
                  <arg>
                  Nolabel
                    expression (lib/path.ml[82,3036+26]..[82,3036+27])
                      Pexp_ident "p" (lib/path.ml[82,3036+26]..[82,3036+27])
                ]
              [
                <case>
                  pattern (lib/path.ml[83,3069+4]..[83,3069+8])
                    Ppat_construct "None" (lib/path.ml[83,3069+4]..[83,3069+8])
                    None
                  expression (lib/path.ml[83,3069+12]..[83,3069+17])
                    Pexp_construct "false" (lib/path.ml[83,3069+12]..[83,3069+17])
                    None
                <case>
                  pattern (lib/path.ml[84,3087+4]..[84,3087+5])
                    Ppat_any
                  expression (lib/path.ml[84,3087+9]..[84,3087+13])
                    Pexp_construct "true" (lib/path.ml[84,3087+9]..[84,3087+13])
                    None
              ]
    ]
  structure_item (lib/path.ml[86,3102+0]..[89,3204+51])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[86,3102+8]..[86,3102+13])
          Ppat_var "scope" (lib/path.ml[86,3102+8]..[86,3102+13])
        expression (lib/path.ml[86,3102+16]..[89,3204+51])
          Pexp_function
          []
          None
          Pfunction_cases (lib/path.ml[86,3102+16]..[89,3204+51])
            [
              <case>
                pattern (lib/path.ml[87,3127+4]..[87,3127+13])
                  Ppat_construct "Pident" (lib/path.ml[87,3127+4]..[87,3127+10])
                  Some
                    []
                    pattern (lib/path.ml[87,3127+11]..[87,3127+13])
                      Ppat_var "id" (lib/path.ml[87,3127+11]..[87,3127+13])
                expression (lib/path.ml[87,3127+17]..[87,3127+31])
                  Pexp_apply
                  expression (lib/path.ml[87,3127+17]..[87,3127+28])
                    Pexp_ident "Ident.scope" (lib/path.ml[87,3127+17]..[87,3127+28])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[87,3127+29]..[87,3127+31])
                        Pexp_ident "id" (lib/path.ml[87,3127+29]..[87,3127+31])
                  ]
              <case>
                pattern (lib/path.ml[88,3159+4]..[88,3159+33])
                  Ppat_or
                  pattern (lib/path.ml[88,3159+4]..[88,3159+14])
                    Ppat_construct "Pdot" (lib/path.ml[88,3159+4]..[88,3159+8])
                    Some
                      []
                      pattern (lib/path.ml[88,3159+8]..[88,3159+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[88,3159+9]..[88,3159+10])
                            Ppat_var "p" (lib/path.ml[88,3159+9]..[88,3159+10])
                          pattern (lib/path.ml[88,3159+12]..[88,3159+13])
                            Ppat_any
                        ]
                  pattern (lib/path.ml[88,3159+17]..[88,3159+33])
                    Ppat_construct "Pextra_ty" (lib/path.ml[88,3159+17]..[88,3159+26])
                    Some
                      []
                      pattern (lib/path.ml[88,3159+27]..[88,3159+33])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[88,3159+28]..[88,3159+29])
                            Ppat_var "p" (lib/path.ml[88,3159+28]..[88,3159+29])
                          pattern (lib/path.ml[88,3159+31]..[88,3159+32])
                            Ppat_any
                        ]
                expression (lib/path.ml[88,3159+37]..[88,3159+44])
                  Pexp_apply
                  expression (lib/path.ml[88,3159+37]..[88,3159+42])
                    Pexp_ident "scope" (lib/path.ml[88,3159+37]..[88,3159+42])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[88,3159+43]..[88,3159+44])
                        Pexp_ident "p" (lib/path.ml[88,3159+43]..[88,3159+44])
                  ]
              <case>
                pattern (lib/path.ml[89,3204+4]..[89,3204+18])
                  Ppat_construct "Papply" (lib/path.ml[89,3204+4]..[89,3204+10])
                  Some
                    []
                    pattern (lib/path.ml[89,3204+10]..[89,3204+18])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[89,3204+11]..[89,3204+13])
                          Ppat_var "p1" (lib/path.ml[89,3204+11]..[89,3204+13])
                        pattern (lib/path.ml[89,3204+15]..[89,3204+17])
                          Ppat_var "p2" (lib/path.ml[89,3204+15]..[89,3204+17])
                      ]
                expression (lib/path.ml[89,3204+22]..[89,3204+51])
                  Pexp_apply
                  expression (lib/path.ml[89,3204+22]..[89,3204+29])
                    Pexp_ident "Int.max" (lib/path.ml[89,3204+22]..[89,3204+29])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[89,3204+30]..[89,3204+40])
                        Pexp_apply
                        expression (lib/path.ml[89,3204+31]..[89,3204+36])
                          Pexp_ident "scope" (lib/path.ml[89,3204+31]..[89,3204+36])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[89,3204+37]..[89,3204+39])
                              Pexp_ident "p1" (lib/path.ml[89,3204+37]..[89,3204+39])
                        ]
                    <arg>
                    Nolabel
                      expression (lib/path.ml[89,3204+41]..[89,3204+51])
                        Pexp_apply
                        expression (lib/path.ml[89,3204+42]..[89,3204+47])
                          Pexp_ident "scope" (lib/path.ml[89,3204+42]..[89,3204+47])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[89,3204+48]..[89,3204+50])
                              Pexp_ident "p2" (lib/path.ml[89,3204+48]..[89,3204+50])
                        ]
                  ]
            ]
    ]
  structure_item (lib/path.ml[91,3257+0]..[91,3257+20])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[91,3257+4]..[91,3257+10])
          Ppat_var "kfalse" (lib/path.ml[91,3257+4]..[91,3257+10])
        expression (lib/path.ml[91,3257+11]..[91,3257+20]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[91,3257+11]..[91,3257+12])
              Nolabel
              None
              pattern (lib/path.ml[91,3257+11]..[91,3257+12])
                Ppat_any
          ]
          None
          Pfunction_body
            expression (lib/path.ml[91,3257+15]..[91,3257+20])
              Pexp_construct "false" (lib/path.ml[91,3257+15]..[91,3257+20])
              None
    ]
  structure_item (lib/path.ml[93,3279+0]..[93,3279+22])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[93,3279+4]..[93,3279+16])
          Ppat_var "maybe_escape" (lib/path.ml[93,3279+4]..[93,3279+16])
        expression (lib/path.ml[93,3279+17]..[93,3279+22]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[93,3279+17]..[93,3279+18])
              Nolabel
              None
              pattern (lib/path.ml[93,3279+17]..[93,3279+18])
                Ppat_var "s" (lib/path.ml[93,3279+17]..[93,3279+18])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[93,3279+21]..[93,3279+22])
              Pexp_ident "s" (lib/path.ml[93,3279+21]..[93,3279+22])
    ]
  structure_item (lib/path.ml[96,3355+0]..[102,3653+43])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[96,3355+8]..[96,3355+12])
          Ppat_var "name" (lib/path.ml[96,3355+8]..[96,3355+12])
        expression (lib/path.ml[96,3355+13]..[102,3653+43]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[96,3355+13]..[96,3355+28])
              Optional "paren"
              Some
                expression (lib/path.ml[96,3355+21]..[96,3355+27])
                  Pexp_ident "kfalse" (lib/path.ml[96,3355+21]..[96,3355+27])
              pattern (lib/path.ml[96,3355+15]..[96,3355+20])
                Ppat_var "paren" (lib/path.ml[96,3355+15]..[96,3355+20])
          ]
          None
          Pfunction_cases (lib/path.ml[96,3355+31]..[102,3653+43])
            [
              <case>
                pattern (lib/path.ml[97,3395+4]..[97,3395+13])
                  Ppat_construct "Pident" (lib/path.ml[97,3395+4]..[97,3395+10])
                  Some
                    []
                    pattern (lib/path.ml[97,3395+11]..[97,3395+13])
                      Ppat_var "id" (lib/path.ml[97,3395+11]..[97,3395+13])
                expression (lib/path.ml[97,3395+17]..[97,3395+45])
                  Pexp_apply
                  expression (lib/path.ml[97,3395+17]..[97,3395+29])
                    Pexp_ident "maybe_escape" (lib/path.ml[97,3395+17]..[97,3395+29])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[97,3395+30]..[97,3395+45])
                        Pexp_apply
                        expression (lib/path.ml[97,3395+31]..[97,3395+41])
                          Pexp_ident "Ident.name" (lib/path.ml[97,3395+31]..[97,3395+41])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[97,3395+42]..[97,3395+44])
                              Pexp_ident "id" (lib/path.ml[97,3395+42]..[97,3395+44])
                        ]
                  ]
              <case>
                pattern (lib/path.ml[98,3441+4]..[98,3441+42])
                  Ppat_or
                  pattern (lib/path.ml[98,3441+4]..[98,3441+14])
                    Ppat_construct "Pdot" (lib/path.ml[98,3441+4]..[98,3441+8])
                    Some
                      []
                      pattern (lib/path.ml[98,3441+8]..[98,3441+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[98,3441+9]..[98,3441+10])
                            Ppat_var "p" (lib/path.ml[98,3441+9]..[98,3441+10])
                          pattern (lib/path.ml[98,3441+12]..[98,3441+13])
                            Ppat_var "s" (lib/path.ml[98,3441+12]..[98,3441+13])
                        ]
                  pattern (lib/path.ml[98,3441+17]..[98,3441+42])
                    Ppat_construct "Pextra_ty" (lib/path.ml[98,3441+17]..[98,3441+26])
                    Some
                      []
                      pattern (lib/path.ml[98,3441+27]..[98,3441+42])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[98,3441+28]..[98,3441+29])
                            Ppat_var "p" (lib/path.ml[98,3441+28]..[98,3441+29])
                          pattern (lib/path.ml[98,3441+31]..[98,3441+41])
                            Ppat_construct "Pcstr_ty" (lib/path.ml[98,3441+31]..[98,3441+39])
                            Some
                              []
                              pattern (lib/path.ml[98,3441+40]..[98,3441+41])
                                Ppat_var "s" (lib/path.ml[98,3441+40]..[98,3441+41])
                        ]
                expression (lib/path.ml[99,3487+6]..[100,3519+67])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lib/path.ml[99,3487+10]..[99,3487+11])
                        Ppat_var "s" (lib/path.ml[99,3487+10]..[99,3487+11])
                      expression (lib/path.ml[99,3487+14]..[99,3487+28])
                        Pexp_apply
                        expression (lib/path.ml[99,3487+14]..[99,3487+26])
                          Pexp_ident "maybe_escape" (lib/path.ml[99,3487+14]..[99,3487+26])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[99,3487+27]..[99,3487+28])
                              Pexp_ident "s" (lib/path.ml[99,3487+27]..[99,3487+28])
                        ]
                  ]
                  expression (lib/path.ml[100,3519+6]..[100,3519+67])
                    Pexp_apply
                    expression (lib/path.ml[100,3519+20]..[100,3519+21])
                      Pexp_ident "^" (lib/path.ml[100,3519+20]..[100,3519+21])
                    [
                      <arg>
                      Nolabel
                        expression (lib/path.ml[100,3519+6]..[100,3519+19])
                          Pexp_apply
                          expression (lib/path.ml[100,3519+6]..[100,3519+10])
                            Pexp_ident "name" (lib/path.ml[100,3519+6]..[100,3519+10])
                          [
                            <arg>
                            Labelled "paren"
                              expression (lib/path.ml[100,3519+12]..[100,3519+17])
                                Pexp_ident "paren" (lib/path.ml[100,3519+12]..[100,3519+17])
                            <arg>
                            Nolabel
                              expression (lib/path.ml[100,3519+18]..[100,3519+19])
                                Pexp_ident "p" (lib/path.ml[100,3519+18]..[100,3519+19])
                          ]
                      <arg>
                      Nolabel
                        expression (lib/path.ml[100,3519+22]..[100,3519+67])
                          Pexp_ifthenelse
                          expression (lib/path.ml[100,3519+25]..[100,3519+32])
                            Pexp_apply
                            expression (lib/path.ml[100,3519+25]..[100,3519+30])
                              Pexp_ident "paren" (lib/path.ml[100,3519+25]..[100,3519+30])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[100,3519+31]..[100,3519+32])
                                  Pexp_ident "s" (lib/path.ml[100,3519+31]..[100,3519+32])
                            ]
                          expression (lib/path.ml[100,3519+38]..[100,3519+54])
                            Pexp_apply
                            expression (lib/path.ml[100,3519+44]..[100,3519+45])
                              Pexp_ident "^" (lib/path.ml[100,3519+44]..[100,3519+45])
                            [
                              <arg>
                              Nolabel
                                expression (lib/path.ml[100,3519+38]..[100,3519+43])
                                  Pexp_constant PConst_string(".( ",(lib/path.ml[100,3519+39]..[100,3519+42]),None)
                              <arg>
                              Nolabel
                                expression (lib/path.ml[100,3519+46]..[100,3519+54])
                                  Pexp_apply
                                  expression (lib/path.ml[100,3519+48]..[100,3519+49])
                                    Pexp_ident "^" (lib/path.ml[100,3519+48]..[100,3519+49])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/path.ml[100,3519+46]..[100,3519+47])
                                        Pexp_ident "s" (lib/path.ml[100,3519+46]..[100,3519+47])
                                    <arg>
                                    Nolabel
                                      expression (lib/path.ml[100,3519+50]..[100,3519+54])
                                        Pexp_constant PConst_string(" )",(lib/path.ml[100,3519+51]..[100,3519+53]),None)
                                  ]
                            ]
                          Some
                            expression (lib/path.ml[100,3519+60]..[100,3519+67])
                              Pexp_apply
                              expression (lib/path.ml[100,3519+64]..[100,3519+65])
                                Pexp_ident "^" (lib/path.ml[100,3519+64]..[100,3519+65])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[100,3519+60]..[100,3519+63])
                                    Pexp_constant PConst_string(".",(lib/path.ml[100,3519+61]..[100,3519+62]),None)
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[100,3519+66]..[100,3519+67])
                                    Pexp_ident "s" (lib/path.ml[100,3519+66]..[100,3519+67])
                              ]
                    ]
              <case>
                pattern (lib/path.ml[101,3587+4]..[101,3587+18])
                  Ppat_construct "Papply" (lib/path.ml[101,3587+4]..[101,3587+10])
                  Some
                    []
                    pattern (lib/path.ml[101,3587+10]..[101,3587+18])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[101,3587+11]..[101,3587+13])
                          Ppat_var "p1" (lib/path.ml[101,3587+11]..[101,3587+13])
                        pattern (lib/path.ml[101,3587+15]..[101,3587+17])
                          Ppat_var "p2" (lib/path.ml[101,3587+15]..[101,3587+17])
                      ]
                expression (lib/path.ml[101,3587+22]..[101,3587+65])
                  Pexp_apply
                  expression (lib/path.ml[101,3587+37]..[101,3587+38])
                    Pexp_ident "^" (lib/path.ml[101,3587+37]..[101,3587+38])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[101,3587+22]..[101,3587+36])
                        Pexp_apply
                        expression (lib/path.ml[101,3587+22]..[101,3587+26])
                          Pexp_ident "name" (lib/path.ml[101,3587+22]..[101,3587+26])
                        [
                          <arg>
                          Labelled "paren"
                            expression (lib/path.ml[101,3587+28]..[101,3587+33])
                              Pexp_ident "paren" (lib/path.ml[101,3587+28]..[101,3587+33])
                          <arg>
                          Nolabel
                            expression (lib/path.ml[101,3587+34]..[101,3587+36])
                              Pexp_ident "p1" (lib/path.ml[101,3587+34]..[101,3587+36])
                        ]
                    <arg>
                    Nolabel
                      expression (lib/path.ml[101,3587+39]..[101,3587+65])
                        Pexp_apply
                        expression (lib/path.ml[101,3587+43]..[101,3587+44])
                          Pexp_ident "^" (lib/path.ml[101,3587+43]..[101,3587+44])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[101,3587+39]..[101,3587+42])
                              Pexp_constant PConst_string("(",(lib/path.ml[101,3587+40]..[101,3587+41]),None)
                          <arg>
                          Nolabel
                            expression (lib/path.ml[101,3587+45]..[101,3587+65])
                              Pexp_apply
                              expression (lib/path.ml[101,3587+60]..[101,3587+61])
                                Pexp_ident "^" (lib/path.ml[101,3587+60]..[101,3587+61])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[101,3587+45]..[101,3587+59])
                                    Pexp_apply
                                    expression (lib/path.ml[101,3587+45]..[101,3587+49])
                                      Pexp_ident "name" (lib/path.ml[101,3587+45]..[101,3587+49])
                                    [
                                      <arg>
                                      Labelled "paren"
                                        expression (lib/path.ml[101,3587+51]..[101,3587+56])
                                          Pexp_ident "paren" (lib/path.ml[101,3587+51]..[101,3587+56])
                                      <arg>
                                      Nolabel
                                        expression (lib/path.ml[101,3587+57]..[101,3587+59])
                                          Pexp_ident "p2" (lib/path.ml[101,3587+57]..[101,3587+59])
                                    ]
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[101,3587+62]..[101,3587+65])
                                    Pexp_constant PConst_string(")",(lib/path.ml[101,3587+63]..[101,3587+64]),None)
                              ]
                        ]
                  ]
              <case>
                pattern (lib/path.ml[102,3653+4]..[102,3653+26])
                  Ppat_construct "Pextra_ty" (lib/path.ml[102,3653+4]..[102,3653+13])
                  Some
                    []
                    pattern (lib/path.ml[102,3653+14]..[102,3653+26])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[102,3653+15]..[102,3653+16])
                          Ppat_var "p" (lib/path.ml[102,3653+15]..[102,3653+16])
                        pattern (lib/path.ml[102,3653+18]..[102,3653+25])
                          Ppat_construct "Pext_ty" (lib/path.ml[102,3653+18]..[102,3653+25])
                          None
                      ]
                expression (lib/path.ml[102,3653+30]..[102,3653+43])
                  Pexp_apply
                  expression (lib/path.ml[102,3653+30]..[102,3653+34])
                    Pexp_ident "name" (lib/path.ml[102,3653+30]..[102,3653+34])
                  [
                    <arg>
                    Labelled "paren"
                      expression (lib/path.ml[102,3653+36]..[102,3653+41])
                        Pexp_ident "paren" (lib/path.ml[102,3653+36]..[102,3653+41])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[102,3653+42]..[102,3653+43])
                        Pexp_ident "p" (lib/path.ml[102,3653+42]..[102,3653+43])
                  ]
            ]
    ]
  structure_item (lib/path.ml[104,3698+0]..[109,3931+41])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[104,3698+8]..[104,3698+13])
          Ppat_var "print" (lib/path.ml[104,3698+8]..[104,3698+13])
        expression (lib/path.ml[104,3698+14]..[109,3931+41]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[104,3698+14]..[104,3698+17])
              Nolabel
              None
              pattern (lib/path.ml[104,3698+14]..[104,3698+17])
                Ppat_var "ppf" (lib/path.ml[104,3698+14]..[104,3698+17])
          ]
          None
          Pfunction_cases (lib/path.ml[104,3698+20]..[109,3931+41])
            [
              <case>
                pattern (lib/path.ml[105,3727+4]..[105,3727+13])
                  Ppat_construct "Pident" (lib/path.ml[105,3727+4]..[105,3727+10])
                  Some
                    []
                    pattern (lib/path.ml[105,3727+11]..[105,3727+13])
                      Ppat_var "id" (lib/path.ml[105,3727+11]..[105,3727+13])
                expression (lib/path.ml[105,3727+17]..[105,3727+46])
                  Pexp_apply
                  expression (lib/path.ml[105,3727+17]..[105,3727+39])
                    Pexp_ident "Ident.print_with_scope" (lib/path.ml[105,3727+17]..[105,3727+39])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[105,3727+40]..[105,3727+43])
                        Pexp_ident "ppf" (lib/path.ml[105,3727+40]..[105,3727+43])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[105,3727+44]..[105,3727+46])
                        Pexp_ident "id" (lib/path.ml[105,3727+44]..[105,3727+46])
                  ]
              <case>
                pattern (lib/path.ml[106,3774+4]..[106,3774+42])
                  Ppat_or
                  pattern (lib/path.ml[106,3774+4]..[106,3774+14])
                    Ppat_construct "Pdot" (lib/path.ml[106,3774+4]..[106,3774+8])
                    Some
                      []
                      pattern (lib/path.ml[106,3774+8]..[106,3774+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[106,3774+9]..[106,3774+10])
                            Ppat_var "p" (lib/path.ml[106,3774+9]..[106,3774+10])
                          pattern (lib/path.ml[106,3774+12]..[106,3774+13])
                            Ppat_var "s" (lib/path.ml[106,3774+12]..[106,3774+13])
                        ]
                  pattern (lib/path.ml[106,3774+17]..[106,3774+42])
                    Ppat_construct "Pextra_ty" (lib/path.ml[106,3774+17]..[106,3774+26])
                    Some
                      []
                      pattern (lib/path.ml[106,3774+27]..[106,3774+42])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[106,3774+28]..[106,3774+29])
                            Ppat_var "p" (lib/path.ml[106,3774+28]..[106,3774+29])
                          pattern (lib/path.ml[106,3774+31]..[106,3774+41])
                            Ppat_construct "Pcstr_ty" (lib/path.ml[106,3774+31]..[106,3774+39])
                            Some
                              []
                              pattern (lib/path.ml[106,3774+40]..[106,3774+41])
                                Ppat_var "s" (lib/path.ml[106,3774+40]..[106,3774+41])
                        ]
                expression (lib/path.ml[107,3820+6]..[107,3820+42])
                  Pexp_apply
                  expression (lib/path.ml[107,3820+6]..[107,3820+20])
                    Pexp_ident "Format.fprintf" (lib/path.ml[107,3820+6]..[107,3820+20])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[107,3820+21]..[107,3820+24])
                        Pexp_ident "ppf" (lib/path.ml[107,3820+21]..[107,3820+24])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[107,3820+25]..[107,3820+32])
                        Pexp_constant PConst_string("%a.%s",(lib/path.ml[107,3820+26]..[107,3820+31]),None)
                    <arg>
                    Nolabel
                      expression (lib/path.ml[107,3820+33]..[107,3820+38])
                        Pexp_ident "print" (lib/path.ml[107,3820+33]..[107,3820+38])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[107,3820+39]..[107,3820+40])
                        Pexp_ident "p" (lib/path.ml[107,3820+39]..[107,3820+40])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[107,3820+41]..[107,3820+42])
                        Pexp_ident "s" (lib/path.ml[107,3820+41]..[107,3820+42])
                  ]
              <case>
                pattern (lib/path.ml[108,3863+4]..[108,3863+18])
                  Ppat_construct "Papply" (lib/path.ml[108,3863+4]..[108,3863+10])
                  Some
                    []
                    pattern (lib/path.ml[108,3863+10]..[108,3863+18])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[108,3863+11]..[108,3863+13])
                          Ppat_var "p1" (lib/path.ml[108,3863+11]..[108,3863+13])
                        pattern (lib/path.ml[108,3863+15]..[108,3863+17])
                          Ppat_var "p2" (lib/path.ml[108,3863+15]..[108,3863+17])
                      ]
                expression (lib/path.ml[108,3863+22]..[108,3863+67])
                  Pexp_apply
                  expression (lib/path.ml[108,3863+22]..[108,3863+36])
                    Pexp_ident "Format.fprintf" (lib/path.ml[108,3863+22]..[108,3863+36])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3863+37]..[108,3863+40])
                        Pexp_ident "ppf" (lib/path.ml[108,3863+37]..[108,3863+40])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3863+41]..[108,3863+49])
                        Pexp_constant PConst_string("%a(%a)",(lib/path.ml[108,3863+42]..[108,3863+48]),None)
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3863+50]..[108,3863+55])
                        Pexp_ident "print" (lib/path.ml[108,3863+50]..[108,3863+55])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3863+56]..[108,3863+58])
                        Pexp_ident "p1" (lib/path.ml[108,3863+56]..[108,3863+58])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3863+59]..[108,3863+64])
                        Pexp_ident "print" (lib/path.ml[108,3863+59]..[108,3863+64])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[108,3863+65]..[108,3863+67])
                        Pexp_ident "p2" (lib/path.ml[108,3863+65]..[108,3863+67])
                  ]
              <case>
                pattern (lib/path.ml[109,3931+4]..[109,3931+26])
                  Ppat_construct "Pextra_ty" (lib/path.ml[109,3931+4]..[109,3931+13])
                  Some
                    []
                    pattern (lib/path.ml[109,3931+14]..[109,3931+26])
                      Ppat_tuple
                      [
                        pattern (lib/path.ml[109,3931+15]..[109,3931+16])
                          Ppat_var "p" (lib/path.ml[109,3931+15]..[109,3931+16])
                        pattern (lib/path.ml[109,3931+18]..[109,3931+25])
                          Ppat_construct "Pext_ty" (lib/path.ml[109,3931+18]..[109,3931+25])
                          None
                      ]
                expression (lib/path.ml[109,3931+30]..[109,3931+41])
                  Pexp_apply
                  expression (lib/path.ml[109,3931+30]..[109,3931+35])
                    Pexp_ident "print" (lib/path.ml[109,3931+30]..[109,3931+35])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[109,3931+36]..[109,3931+39])
                        Pexp_ident "ppf" (lib/path.ml[109,3931+36]..[109,3931+39])
                    <arg>
                    Nolabel
                      expression (lib/path.ml[109,3931+40]..[109,3931+41])
                        Pexp_ident "p" (lib/path.ml[109,3931+40]..[109,3931+41])
                  ]
            ]
    ]
  structure_item (lib/path.ml[111,3974+0]..[114,4062+28])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[111,3974+8]..[111,3974+12])
          Ppat_var "head" (lib/path.ml[111,3974+8]..[111,3974+12])
        expression (lib/path.ml[111,3974+15]..[114,4062+28])
          Pexp_function
          []
          None
          Pfunction_cases (lib/path.ml[111,3974+15]..[114,4062+28])
            [
              <case>
                pattern (lib/path.ml[112,3998+4]..[112,3998+13])
                  Ppat_construct "Pident" (lib/path.ml[112,3998+4]..[112,3998+10])
                  Some
                    []
                    pattern (lib/path.ml[112,3998+11]..[112,3998+13])
                      Ppat_var "id" (lib/path.ml[112,3998+11]..[112,3998+13])
                expression (lib/path.ml[112,3998+17]..[112,3998+19])
                  Pexp_ident "id" (lib/path.ml[112,3998+17]..[112,3998+19])
              <case>
                pattern (lib/path.ml[113,4018+4]..[113,4018+33])
                  Ppat_or
                  pattern (lib/path.ml[113,4018+4]..[113,4018+14])
                    Ppat_construct "Pdot" (lib/path.ml[113,4018+4]..[113,4018+8])
                    Some
                      []
                      pattern (lib/path.ml[113,4018+8]..[113,4018+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[113,4018+9]..[113,4018+10])
                            Ppat_var "p" (lib/path.ml[113,4018+9]..[113,4018+10])
                          pattern (lib/path.ml[113,4018+12]..[113,4018+13])
                            Ppat_any
                        ]
                  pattern (lib/path.ml[113,4018+17]..[113,4018+33])
                    Ppat_construct "Pextra_ty" (lib/path.ml[113,4018+17]..[113,4018+26])
                    Some
                      []
                      pattern (lib/path.ml[113,4018+27]..[113,4018+33])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[113,4018+28]..[113,4018+29])
                            Ppat_var "p" (lib/path.ml[113,4018+28]..[113,4018+29])
                          pattern (lib/path.ml[113,4018+31]..[113,4018+32])
                            Ppat_any
                        ]
                expression (lib/path.ml[113,4018+37]..[113,4018+43])
                  Pexp_apply
                  expression (lib/path.ml[113,4018+37]..[113,4018+41])
                    Pexp_ident "head" (lib/path.ml[113,4018+37]..[113,4018+41])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[113,4018+42]..[113,4018+43])
                        Pexp_ident "p" (lib/path.ml[113,4018+42]..[113,4018+43])
                  ]
              <case>
                pattern (lib/path.ml[114,4062+4]..[114,4062+12])
                  Ppat_construct "Papply" (lib/path.ml[114,4062+4]..[114,4062+10])
                  Some
                    []
                    pattern (lib/path.ml[114,4062+11]..[114,4062+12])
                      Ppat_any
                expression (lib/path.ml[114,4062+16]..[114,4062+28])
                  Pexp_assert
                  expression (lib/path.ml[114,4062+23]..[114,4062+28])
                    Pexp_construct "false" (lib/path.ml[114,4062+23]..[114,4062+28])
                    None
            ]
    ]
  structure_item (lib/path.ml[116,4092+0]..[123,4327+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[116,4092+4]..[116,4092+11])
          Ppat_var "flatten" (lib/path.ml[116,4092+4]..[116,4092+11])
        expression (lib/path.ml[117,4106+2]..[123,4327+23])
          Pexp_let Rec
          [
            <def>
              pattern (lib/path.ml[117,4106+10]..[117,4106+17])
                Ppat_var "flatten" (lib/path.ml[117,4106+10]..[117,4106+17])
              expression (lib/path.ml[117,4106+18]..[121,4276+45]) ghost
                Pexp_function
                [
                  Pparam_val (lib/path.ml[117,4106+18]..[117,4106+21])
                    Nolabel
                    None
                    pattern (lib/path.ml[117,4106+18]..[117,4106+21])
                      Ppat_var "acc" (lib/path.ml[117,4106+18]..[117,4106+21])
                ]
                None
                Pfunction_cases (lib/path.ml[117,4106+24]..[121,4276+45])
                  [
                    <case>
                      pattern (lib/path.ml[118,4139+6]..[118,4139+15])
                        Ppat_construct "Pident" (lib/path.ml[118,4139+6]..[118,4139+12])
                        Some
                          []
                          pattern (lib/path.ml[118,4139+13]..[118,4139+15])
                            Ppat_var "id" (lib/path.ml[118,4139+13]..[118,4139+15])
                      expression (lib/path.ml[118,4139+19]..[118,4139+32])
                        Pexp_variant "Ok"
                        Some
                          expression (lib/path.ml[118,4139+23]..[118,4139+32])
                            Pexp_tuple
                            [
                              expression (lib/path.ml[118,4139+24]..[118,4139+26])
                                Pexp_ident "id" (lib/path.ml[118,4139+24]..[118,4139+26])
                              expression (lib/path.ml[118,4139+28]..[118,4139+31])
                                Pexp_ident "acc" (lib/path.ml[118,4139+28]..[118,4139+31])
                            ]
                    <case>
                      pattern (lib/path.ml[119,4172+6]..[119,4172+45])
                        Ppat_or
                        pattern (lib/path.ml[119,4172+6]..[119,4172+17])
                          Ppat_construct "Pdot" (lib/path.ml[119,4172+6]..[119,4172+10])
                          Some
                            []
                            pattern (lib/path.ml[119,4172+11]..[119,4172+17])
                              Ppat_tuple
                              [
                                pattern (lib/path.ml[119,4172+12]..[119,4172+13])
                                  Ppat_var "p" (lib/path.ml[119,4172+12]..[119,4172+13])
                                pattern (lib/path.ml[119,4172+15]..[119,4172+16])
                                  Ppat_var "s" (lib/path.ml[119,4172+15]..[119,4172+16])
                              ]
                        pattern (lib/path.ml[119,4172+20]..[119,4172+45])
                          Ppat_construct "Pextra_ty" (lib/path.ml[119,4172+20]..[119,4172+29])
                          Some
                            []
                            pattern (lib/path.ml[119,4172+30]..[119,4172+45])
                              Ppat_tuple
                              [
                                pattern (lib/path.ml[119,4172+31]..[119,4172+32])
                                  Ppat_var "p" (lib/path.ml[119,4172+31]..[119,4172+32])
                                pattern (lib/path.ml[119,4172+34]..[119,4172+44])
                                  Ppat_construct "Pcstr_ty" (lib/path.ml[119,4172+34]..[119,4172+42])
                                  Some
                                    []
                                    pattern (lib/path.ml[119,4172+43]..[119,4172+44])
                                      Ppat_var "s" (lib/path.ml[119,4172+43]..[119,4172+44])
                              ]
                      expression (lib/path.ml[119,4172+49]..[119,4172+69])
                        Pexp_apply
                        expression (lib/path.ml[119,4172+49]..[119,4172+56])
                          Pexp_ident "flatten" (lib/path.ml[119,4172+49]..[119,4172+56])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[119,4172+57]..[119,4172+67])
                              Pexp_construct "::" (lib/path.ml[119,4172+60]..[119,4172+62])
                              Some
                                expression (lib/path.ml[119,4172+58]..[119,4172+66]) ghost
                                  Pexp_tuple
                                  [
                                    expression (lib/path.ml[119,4172+58]..[119,4172+59])
                                      Pexp_ident "s" (lib/path.ml[119,4172+58]..[119,4172+59])
                                    expression (lib/path.ml[119,4172+63]..[119,4172+66])
                                      Pexp_ident "acc" (lib/path.ml[119,4172+63]..[119,4172+66])
                                  ]
                          <arg>
                          Nolabel
                            expression (lib/path.ml[119,4172+68]..[119,4172+69])
                              Pexp_ident "p" (lib/path.ml[119,4172+68]..[119,4172+69])
                        ]
                    <case>
                      pattern (lib/path.ml[120,4242+6]..[120,4242+14])
                        Ppat_construct "Papply" (lib/path.ml[120,4242+6]..[120,4242+12])
                        Some
                          []
                          pattern (lib/path.ml[120,4242+13]..[120,4242+14])
                            Ppat_any
                      expression (lib/path.ml[120,4242+18]..[120,4242+33])
                        Pexp_variant "Contains_apply"
                        None
                    <case>
                      pattern (lib/path.ml[121,4276+6]..[121,4276+28])
                        Ppat_construct "Pextra_ty" (lib/path.ml[121,4276+6]..[121,4276+15])
                        Some
                          []
                          pattern (lib/path.ml[121,4276+16]..[121,4276+28])
                            Ppat_tuple
                            [
                              pattern (lib/path.ml[121,4276+17]..[121,4276+18])
                                Ppat_var "p" (lib/path.ml[121,4276+17]..[121,4276+18])
                              pattern (lib/path.ml[121,4276+20]..[121,4276+27])
                                Ppat_construct "Pext_ty" (lib/path.ml[121,4276+20]..[121,4276+27])
                                None
                            ]
                      expression (lib/path.ml[121,4276+32]..[121,4276+45])
                        Pexp_apply
                        expression (lib/path.ml[121,4276+32]..[121,4276+39])
                          Pexp_ident "flatten" (lib/path.ml[121,4276+32]..[121,4276+39])
                        [
                          <arg>
                          Nolabel
                            expression (lib/path.ml[121,4276+40]..[121,4276+43])
                              Pexp_ident "acc" (lib/path.ml[121,4276+40]..[121,4276+43])
                          <arg>
                          Nolabel
                            expression (lib/path.ml[121,4276+44]..[121,4276+45])
                              Pexp_ident "p" (lib/path.ml[121,4276+44]..[121,4276+45])
                        ]
                  ]
          ]
          expression (lib/path.ml[123,4327+2]..[123,4327+23])
            Pexp_function
            [
              Pparam_val (lib/path.ml[123,4327+6]..[123,4327+7])
                Nolabel
                None
                pattern (lib/path.ml[123,4327+6]..[123,4327+7])
                  Ppat_var "t" (lib/path.ml[123,4327+6]..[123,4327+7])
            ]
            None
            Pfunction_body
              expression (lib/path.ml[123,4327+11]..[123,4327+23])
                Pexp_apply
                expression (lib/path.ml[123,4327+11]..[123,4327+18])
                  Pexp_ident "flatten" (lib/path.ml[123,4327+11]..[123,4327+18])
                [
                  <arg>
                  Nolabel
                    expression (lib/path.ml[123,4327+19]..[123,4327+21])
                      Pexp_construct "[]" (lib/path.ml[123,4327+19]..[123,4327+21])
                      None
                  <arg>
                  Nolabel
                    expression (lib/path.ml[123,4327+22]..[123,4327+23])
                      Pexp_ident "t" (lib/path.ml[123,4327+22]..[123,4327+23])
                ]
    ]
  structure_item (lib/path.ml[125,4352+0]..[131,4540+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[125,4352+4]..[125,4352+9])
          Ppat_var "heads" (lib/path.ml[125,4352+4]..[125,4352+9])
        expression (lib/path.ml[125,4352+10]..[131,4540+15]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[125,4352+10]..[125,4352+11])
              Nolabel
              None
              pattern (lib/path.ml[125,4352+10]..[125,4352+11])
                Ppat_var "p" (lib/path.ml[125,4352+10]..[125,4352+11])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[126,4366+2]..[131,4540+15])
              Pexp_let Rec
              [
                <def>
                  pattern (lib/path.ml[126,4366+10]..[126,4366+15])
                    Ppat_var "heads" (lib/path.ml[126,4366+10]..[126,4366+15])
                  expression (lib/path.ml[126,4366+16]..[130,4508+31]) ghost
                    Pexp_function
                    [
                      Pparam_val (lib/path.ml[126,4366+16]..[126,4366+17])
                        Nolabel
                        None
                        pattern (lib/path.ml[126,4366+16]..[126,4366+17])
                          Ppat_var "p" (lib/path.ml[126,4366+16]..[126,4366+17])
                      Pparam_val (lib/path.ml[126,4366+18]..[126,4366+21])
                        Nolabel
                        None
                        pattern (lib/path.ml[126,4366+18]..[126,4366+21])
                          Ppat_var "acc" (lib/path.ml[126,4366+18]..[126,4366+21])
                    ]
                    None
                    Pfunction_body
                      expression (lib/path.ml[126,4366+24]..[130,4508+31])
                        Pexp_match
                        expression (lib/path.ml[126,4366+30]..[126,4366+31])
                          Pexp_ident "p" (lib/path.ml[126,4366+30]..[126,4366+31])
                        [
                          <case>
                            pattern (lib/path.ml[127,4403+6]..[127,4403+15])
                              Ppat_construct "Pident" (lib/path.ml[127,4403+6]..[127,4403+12])
                              Some
                                []
                                pattern (lib/path.ml[127,4403+13]..[127,4403+15])
                                  Ppat_var "id" (lib/path.ml[127,4403+13]..[127,4403+15])
                            expression (lib/path.ml[127,4403+19]..[127,4403+28])
                              Pexp_construct "::" (lib/path.ml[127,4403+22]..[127,4403+24])
                              Some
                                expression (lib/path.ml[127,4403+19]..[127,4403+28]) ghost
                                  Pexp_tuple
                                  [
                                    expression (lib/path.ml[127,4403+19]..[127,4403+21])
                                      Pexp_ident "id" (lib/path.ml[127,4403+19]..[127,4403+21])
                                    expression (lib/path.ml[127,4403+25]..[127,4403+28])
                                      Pexp_ident "acc" (lib/path.ml[127,4403+25]..[127,4403+28])
                                  ]
                          <case>
                            pattern (lib/path.ml[128,4432+6]..[128,4432+36])
                              Ppat_or
                              pattern (lib/path.ml[128,4432+6]..[128,4432+17])
                                Ppat_construct "Pdot" (lib/path.ml[128,4432+6]..[128,4432+10])
                                Some
                                  []
                                  pattern (lib/path.ml[128,4432+11]..[128,4432+17])
                                    Ppat_tuple
                                    [
                                      pattern (lib/path.ml[128,4432+12]..[128,4432+13])
                                        Ppat_var "p" (lib/path.ml[128,4432+12]..[128,4432+13])
                                      pattern (lib/path.ml[128,4432+15]..[128,4432+16])
                                        Ppat_any
                                    ]
                              pattern (lib/path.ml[128,4432+20]..[128,4432+36])
                                Ppat_construct "Pextra_ty" (lib/path.ml[128,4432+20]..[128,4432+29])
                                Some
                                  []
                                  pattern (lib/path.ml[128,4432+30]..[128,4432+36])
                                    Ppat_tuple
                                    [
                                      pattern (lib/path.ml[128,4432+31]..[128,4432+32])
                                        Ppat_var "p" (lib/path.ml[128,4432+31]..[128,4432+32])
                                      pattern (lib/path.ml[128,4432+34]..[128,4432+35])
                                        Ppat_any
                                    ]
                            expression (lib/path.ml[128,4432+40]..[128,4432+51])
                              Pexp_apply
                              expression (lib/path.ml[128,4432+40]..[128,4432+45])
                                Pexp_ident "heads" (lib/path.ml[128,4432+40]..[128,4432+45])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[128,4432+46]..[128,4432+47])
                                    Pexp_ident "p" (lib/path.ml[128,4432+46]..[128,4432+47])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[128,4432+48]..[128,4432+51])
                                    Pexp_ident "acc" (lib/path.ml[128,4432+48]..[128,4432+51])
                              ]
                          <case>
                            pattern (lib/path.ml[129,4484+6]..[129,4484+20])
                              Ppat_construct "Papply" (lib/path.ml[129,4484+6]..[129,4484+12])
                              Some
                                []
                                pattern (lib/path.ml[129,4484+12]..[129,4484+20])
                                  Ppat_tuple
                                  [
                                    pattern (lib/path.ml[129,4484+13]..[129,4484+15])
                                      Ppat_var "p1" (lib/path.ml[129,4484+13]..[129,4484+15])
                                    pattern (lib/path.ml[129,4484+17]..[129,4484+19])
                                      Ppat_var "p2" (lib/path.ml[129,4484+17]..[129,4484+19])
                                  ]
                            expression (lib/path.ml[130,4508+8]..[130,4508+31])
                              Pexp_apply
                              expression (lib/path.ml[130,4508+8]..[130,4508+13])
                                Pexp_ident "heads" (lib/path.ml[130,4508+8]..[130,4508+13])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[130,4508+14]..[130,4508+16])
                                    Pexp_ident "p1" (lib/path.ml[130,4508+14]..[130,4508+16])
                                <arg>
                                Nolabel
                                  expression (lib/path.ml[130,4508+17]..[130,4508+31])
                                    Pexp_apply
                                    expression (lib/path.ml[130,4508+18]..[130,4508+23])
                                      Pexp_ident "heads" (lib/path.ml[130,4508+18]..[130,4508+23])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/path.ml[130,4508+24]..[130,4508+26])
                                          Pexp_ident "p2" (lib/path.ml[130,4508+24]..[130,4508+26])
                                      <arg>
                                      Nolabel
                                        expression (lib/path.ml[130,4508+27]..[130,4508+30])
                                          Pexp_ident "acc" (lib/path.ml[130,4508+27]..[130,4508+30])
                                    ]
                              ]
                        ]
              ]
              expression (lib/path.ml[131,4540+5]..[131,4540+15])
                Pexp_apply
                expression (lib/path.ml[131,4540+5]..[131,4540+10])
                  Pexp_ident "heads" (lib/path.ml[131,4540+5]..[131,4540+10])
                [
                  <arg>
                  Nolabel
                    expression (lib/path.ml[131,4540+11]..[131,4540+12])
                      Pexp_ident "p" (lib/path.ml[131,4540+11]..[131,4540+12])
                  <arg>
                  Nolabel
                    expression (lib/path.ml[131,4540+13]..[131,4540+15])
                      Pexp_construct "[]" (lib/path.ml[131,4540+13]..[131,4540+15])
                      None
                ]
    ]
  structure_item (lib/path.ml[133,4557+0]..[136,4660+51])
    Pstr_value Rec
    [
      <def>
        pattern (lib/path.ml[133,4557+8]..[133,4557+12])
          Ppat_var "last" (lib/path.ml[133,4557+8]..[133,4557+12])
        expression (lib/path.ml[133,4557+15]..[136,4660+51])
          Pexp_function
          []
          None
          Pfunction_cases (lib/path.ml[133,4557+15]..[136,4660+51])
            [
              <case>
                pattern (lib/path.ml[134,4581+4]..[134,4581+13])
                  Ppat_construct "Pident" (lib/path.ml[134,4581+4]..[134,4581+10])
                  Some
                    []
                    pattern (lib/path.ml[134,4581+11]..[134,4581+13])
                      Ppat_var "id" (lib/path.ml[134,4581+11]..[134,4581+13])
                expression (lib/path.ml[134,4581+17]..[134,4581+30])
                  Pexp_apply
                  expression (lib/path.ml[134,4581+17]..[134,4581+27])
                    Pexp_ident "Ident.name" (lib/path.ml[134,4581+17]..[134,4581+27])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[134,4581+28]..[134,4581+30])
                        Pexp_ident "id" (lib/path.ml[134,4581+28]..[134,4581+30])
                  ]
              <case>
                pattern (lib/path.ml[135,4612+4]..[135,4612+42])
                  Ppat_or
                  pattern (lib/path.ml[135,4612+4]..[135,4612+14])
                    Ppat_construct "Pdot" (lib/path.ml[135,4612+4]..[135,4612+8])
                    Some
                      []
                      pattern (lib/path.ml[135,4612+8]..[135,4612+14])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[135,4612+9]..[135,4612+10])
                            Ppat_any
                          pattern (lib/path.ml[135,4612+12]..[135,4612+13])
                            Ppat_var "s" (lib/path.ml[135,4612+12]..[135,4612+13])
                        ]
                  pattern (lib/path.ml[135,4612+17]..[135,4612+42])
                    Ppat_construct "Pextra_ty" (lib/path.ml[135,4612+17]..[135,4612+26])
                    Some
                      []
                      pattern (lib/path.ml[135,4612+27]..[135,4612+42])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[135,4612+28]..[135,4612+29])
                            Ppat_any
                          pattern (lib/path.ml[135,4612+31]..[135,4612+41])
                            Ppat_construct "Pcstr_ty" (lib/path.ml[135,4612+31]..[135,4612+39])
                            Some
                              []
                              pattern (lib/path.ml[135,4612+40]..[135,4612+41])
                                Ppat_var "s" (lib/path.ml[135,4612+40]..[135,4612+41])
                        ]
                expression (lib/path.ml[135,4612+46]..[135,4612+47])
                  Pexp_ident "s" (lib/path.ml[135,4612+46]..[135,4612+47])
              <case>
                pattern (lib/path.ml[136,4660+4]..[136,4660+41])
                  Ppat_or
                  pattern (lib/path.ml[136,4660+4]..[136,4660+16])
                    Ppat_construct "Papply" (lib/path.ml[136,4660+4]..[136,4660+10])
                    Some
                      []
                      pattern (lib/path.ml[136,4660+10]..[136,4660+16])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[136,4660+11]..[136,4660+12])
                            Ppat_any
                          pattern (lib/path.ml[136,4660+14]..[136,4660+15])
                            Ppat_var "p" (lib/path.ml[136,4660+14]..[136,4660+15])
                        ]
                  pattern (lib/path.ml[136,4660+19]..[136,4660+41])
                    Ppat_construct "Pextra_ty" (lib/path.ml[136,4660+19]..[136,4660+28])
                    Some
                      []
                      pattern (lib/path.ml[136,4660+29]..[136,4660+41])
                        Ppat_tuple
                        [
                          pattern (lib/path.ml[136,4660+30]..[136,4660+31])
                            Ppat_var "p" (lib/path.ml[136,4660+30]..[136,4660+31])
                          pattern (lib/path.ml[136,4660+33]..[136,4660+40])
                            Ppat_construct "Pext_ty" (lib/path.ml[136,4660+33]..[136,4660+40])
                            None
                        ]
                expression (lib/path.ml[136,4660+45]..[136,4660+51])
                  Pexp_apply
                  expression (lib/path.ml[136,4660+45]..[136,4660+49])
                    Pexp_ident "last" (lib/path.ml[136,4660+45]..[136,4660+49])
                  [
                    <arg>
                    Nolabel
                      expression (lib/path.ml[136,4660+50]..[136,4660+51])
                        Pexp_ident "p" (lib/path.ml[136,4660+50]..[136,4660+51])
                  ]
            ]
    ]
  structure_item (lib/path.ml[138,4713+0]..[141,4800+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[138,4713+4]..[138,4713+25])
          Ppat_var "is_constructor_typath" (lib/path.ml[138,4713+4]..[138,4713+25])
        expression (lib/path.ml[138,4713+26]..[141,4800+23]) ghost
          Pexp_function
          [
            Pparam_val (lib/path.ml[138,4713+26]..[138,4713+27])
              Nolabel
              None
              pattern (lib/path.ml[138,4713+26]..[138,4713+27])
                Ppat_var "p" (lib/path.ml[138,4713+26]..[138,4713+27])
          ]
          None
          Pfunction_body
            expression (lib/path.ml[139,4743+2]..[141,4800+23])
              Pexp_match
              expression (lib/path.ml[139,4743+8]..[139,4743+9])
                Pexp_ident "p" (lib/path.ml[139,4743+8]..[139,4743+9])
              [
                <case>
                  pattern (lib/path.ml[140,4758+4]..[140,4758+32])
                    Ppat_or
                    pattern (lib/path.ml[140,4758+4]..[140,4758+21])
                      Ppat_or
                      pattern (lib/path.ml[140,4758+4]..[140,4758+12])
                        Ppat_construct "Pident" (lib/path.ml[140,4758+4]..[140,4758+10])
                        Some
                          []
                          pattern (lib/path.ml[140,4758+11]..[140,4758+12])
                            Ppat_any
                      pattern (lib/path.ml[140,4758+15]..[140,4758+21])
                        Ppat_construct "Pdot" (lib/path.ml[140,4758+15]..[140,4758+19])
                        Some
                          []
                          pattern (lib/path.ml[140,4758+20]..[140,4758+21])
                            Ppat_any
                    pattern (lib/path.ml[140,4758+24]..[140,4758+32])
                      Ppat_construct "Papply" (lib/path.ml[140,4758+24]..[140,4758+30])
                      Some
                        []
                        pattern (lib/path.ml[140,4758+31]..[140,4758+32])
                          Ppat_any
                  expression (lib/path.ml[140,4758+36]..[140,4758+41])
                    Pexp_construct "false" (lib/path.ml[140,4758+36]..[140,4758+41])
                    None
                <case>
                  pattern (lib/path.ml[141,4800+4]..[141,4800+15])
                    Ppat_construct "Pextra_ty" (lib/path.ml[141,4800+4]..[141,4800+13])
                    Some
                      []
                      pattern (lib/path.ml[141,4800+14]..[141,4800+15])
                        Ppat_any
                  expression (lib/path.ml[141,4800+19]..[141,4800+23])
                    Pexp_construct "true" (lib/path.ml[141,4800+19]..[141,4800+23])
                    None
              ]
    ]
  structure_item (lib/path.ml[143,4825+0]..[146,4887+3])
    Pstr_module
    "T" (lib/path.ml[143,4825+7]..[143,4825+8])
      module_expr (lib/path.ml[143,4825+11]..[146,4887+3])
        Pmod_structure
        [
          structure_item (lib/path.ml[144,4843+2]..[144,4843+19])
            Pstr_type Nonrec
            [
              type_declaration "t" (lib/path.ml[144,4843+14]..[144,4843+15]) (lib/path.ml[144,4843+2]..[144,4843+19])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/path.ml[144,4843+18]..[144,4843+19])
                      Ptyp_constr "t" (lib/path.ml[144,4843+18]..[144,4843+19])
                      []
            ]
          structure_item (lib/path.ml[145,4863+2]..[145,4863+23])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/path.ml[145,4863+6]..[145,4863+13])
                  Ppat_var "compare" (lib/path.ml[145,4863+6]..[145,4863+13])
                expression (lib/path.ml[145,4863+16]..[145,4863+23])
                  Pexp_ident "compare" (lib/path.ml[145,4863+16]..[145,4863+23])
            ]
        ]
  structure_item (lib/path.ml[147,4891+0]..[147,4891+24])
    Pstr_module
    "Set" (lib/path.ml[147,4891+7]..[147,4891+10])
      module_expr (lib/path.ml[147,4891+13]..[147,4891+24])
        Pmod_apply
        module_expr (lib/path.ml[147,4891+13]..[147,4891+21])
          Pmod_ident "Set.Make" (lib/path.ml[147,4891+13]..[147,4891+21])
        module_expr (lib/path.ml[147,4891+22]..[147,4891+23])
          Pmod_ident "T" (lib/path.ml[147,4891+22]..[147,4891+23])
  structure_item (lib/path.ml[148,4916+0]..[148,4916+24])
    Pstr_module
    "Map" (lib/path.ml[148,4916+7]..[148,4916+10])
      module_expr (lib/path.ml[148,4916+13]..[148,4916+24])
        Pmod_apply
        module_expr (lib/path.ml[148,4916+13]..[148,4916+21])
          Pmod_ident "Map.Make" (lib/path.ml[148,4916+13]..[148,4916+21])
        module_expr (lib/path.ml[148,4916+22]..[148,4916+23])
          Pmod_ident "T" (lib/path.ml[148,4916+22]..[148,4916+23])
]

type t =
  | Pident of Ident.t 
  | Pdot of t * string 
  | Papply of t * t 
  | Pextra_ty of t * extra_ty 
and extra_ty =
  | Pcstr_ty of string 
  | Pext_ty 
let rec same p1 p2 =
  (p1 == p2) ||
    (match (p1, p2) with
     | (Pident id1, Pident id2) -> Ident.same id1 id2
     | (Pdot (p1, s1), Pdot (p2, s2)) -> (s1 = s2) && (same p1 p2)
     | (Papply (fun1, arg1), Papply (fun2, arg2)) ->
         (same fun1 fun2) && (same arg1 arg2)
     | (Pextra_ty (p1, t1), Pextra_ty (p2, t2)) ->
         let same_extra =
           match (t1, t2) with
           | (Pcstr_ty s1, Pcstr_ty s2) -> s1 = s2
           | (Pext_ty, Pext_ty) -> true
           | ((Pcstr_ty _ | Pext_ty), _) -> false in
         same_extra && (same p1 p2)
     | (_, _) -> false)
let rec compare p1 p2 =
  if p1 == p2
  then 0
  else
    (match (p1, p2) with
     | (Pident id1, Pident id2) -> Ident.compare id1 id2
     | (Pdot (p1, s1), Pdot (p2, s2)) ->
         let h = compare p1 p2 in if h <> 0 then h else String.compare s1 s2
     | (Papply (fun1, arg1), Papply (fun2, arg2)) ->
         let h = compare fun1 fun2 in if h <> 0 then h else compare arg1 arg2
     | (Pextra_ty (p1, t1), Pextra_ty (p2, t2)) ->
         let h = compare_extra t1 t2 in if h <> 0 then h else compare p1 p2
     | (Pident _, (Pdot _ | Papply _ | Pextra_ty _))
       | (Pdot _, (Papply _ | Pextra_ty _)) | (Papply _, Pextra_ty _) -> (-1)
     | ((Pextra_ty _ | Papply _ | Pdot _), Pident _)
       | ((Pextra_ty _ | Papply _), Pdot _) | (Pextra_ty _, Papply _) -> 1)
and compare_extra t1 t2 =
  match (t1, t2) with
  | (Pcstr_ty s1, Pcstr_ty s2) -> String.compare s1 s2
  | (Pext_ty, Pext_ty) -> 0
  | (Pcstr_ty _, Pext_ty) -> (-1)
  | (Pext_ty, Pcstr_ty _) -> 1
let rec find_free_opt ids =
  function
  | Pident id -> List.find_opt (Ident.same id) ids
  | Pdot (p, _) | Pextra_ty (p, _) -> find_free_opt ids p
  | Papply (p1, p2) ->
      (match find_free_opt ids p1 with
       | None -> find_free_opt ids p2
       | Some _ as res -> res)
let exists_free ids p =
  match find_free_opt ids p with | None -> false | _ -> true
let rec scope =
  function
  | Pident id -> Ident.scope id
  | Pdot (p, _) | Pextra_ty (p, _) -> scope p
  | Papply (p1, p2) -> Int.max (scope p1) (scope p2)
let kfalse _ = false
let maybe_escape s = s
let rec name ?(paren= kfalse) =
  function
  | Pident id -> maybe_escape (Ident.name id)
  | Pdot (p, s) | Pextra_ty (p, Pcstr_ty s) ->
      let s = maybe_escape s in
      (name ~paren p) ^ (if paren s then ".( " ^ (s ^ " )") else "." ^ s)
  | Papply (p1, p2) -> (name ~paren p1) ^ ("(" ^ ((name ~paren p2) ^ ")"))
  | Pextra_ty (p, Pext_ty) -> name ~paren p
let rec print ppf =
  function
  | Pident id -> Ident.print_with_scope ppf id
  | Pdot (p, s) | Pextra_ty (p, Pcstr_ty s) ->
      Format.fprintf ppf "%a.%s" print p s
  | Papply (p1, p2) -> Format.fprintf ppf "%a(%a)" print p1 print p2
  | Pextra_ty (p, Pext_ty) -> print ppf p
let rec head =
  function
  | Pident id -> id
  | Pdot (p, _) | Pextra_ty (p, _) -> head p
  | Papply _ -> assert false
let flatten =
  let rec flatten acc =
    function
    | Pident id -> `Ok (id, acc)
    | Pdot (p, s) | Pextra_ty (p, Pcstr_ty s) -> flatten (s :: acc) p
    | Papply _ -> `Contains_apply
    | Pextra_ty (p, Pext_ty) -> flatten acc p in
  fun t -> flatten [] t
let heads p =
  let rec heads p acc =
    match p with
    | Pident id -> id :: acc
    | Pdot (p, _) | Pextra_ty (p, _) -> heads p acc
    | Papply (p1, p2) -> heads p1 (heads p2 acc) in
  heads p []
let rec last =
  function
  | Pident id -> Ident.name id
  | Pdot (_, s) | Pextra_ty (_, Pcstr_ty s) -> s
  | Papply (_, p) | Pextra_ty (p, Pext_ty) -> last p
let is_constructor_typath p =
  match p with | Pident _ | Pdot _ | Papply _ -> false | Pextra_ty _ -> true
module T = struct type nonrec t = t
                  let compare = compare end
module Set = (Set.Make)(T)
module Map = (Map.Make)(T)
[
  structure_item (lib/path.ml[16,1079+0]..lib/path.ml[23,1221+11])
    Tstr_type Rec
    [
      type_declaration t/292 (lib/path.ml[16,1079+0]..lib/path.ml[20,1153+29])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/path.ml[17,1088+4]..lib/path.ml[17,1088+21])
                Pident/294
                [
                  core_type (lib/path.ml[17,1088+14]..lib/path.ml[17,1088+21])
                    Ttyp_constr "Ocaml_ocaml_types!.Ident.t"
                    []
                ]
                None
              (lib/path.ml[18,1110+2]..lib/path.ml[18,1110+22])
                Pdot/347
                [
                  core_type (lib/path.ml[18,1110+12]..lib/path.ml[18,1110+13])
                    Ttyp_constr "t/292"
                    []
                  core_type (lib/path.ml[18,1110+16]..lib/path.ml[18,1110+22])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (lib/path.ml[19,1133+2]..lib/path.ml[19,1133+19])
                Papply/348
                [
                  core_type (lib/path.ml[19,1133+14]..lib/path.ml[19,1133+15])
                    Ttyp_constr "t/292"
                    []
                  core_type (lib/path.ml[19,1133+18]..lib/path.ml[19,1133+19])
                    Ttyp_constr "t/292"
                    []
                ]
                None
              (lib/path.ml[20,1153+2]..lib/path.ml[20,1153+29])
                Pextra_ty/349
                [
                  core_type (lib/path.ml[20,1153+17]..lib/path.ml[20,1153+18])
                    Ttyp_constr "t/292"
                    []
                  core_type (lib/path.ml[20,1153+21]..lib/path.ml[20,1153+29])
                    Ttyp_constr "extra_ty/293"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration extra_ty/293 (lib/path.ml[21,1183+0]..lib/path.ml[23,1221+11])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/path.ml[22,1198+2]..lib/path.ml[22,1198+22])
                Pcstr_ty/350
                [
                  core_type (lib/path.ml[22,1198+16]..lib/path.ml[22,1198+22])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (lib/path.ml[23,1221+2]..lib/path.ml[23,1221+11])
                Pext_ty/351
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/path.ml[25,1234+0]..lib/path.ml[39,1748+19])
    Tstr_value Rec
    [
      <def>
        pattern (lib/path.ml[25,1234+8]..lib/path.ml[25,1234+12])
          Tpat_var "same/404"
        expression (lib/path.ml[25,1234+13]..lib/path.ml[39,1748+19]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/path.ml[25,1234+13]..lib/path.ml[25,1234+15])
                Tpat_var "p1/405"
            Nolabel
            Param_pat
              pattern (lib/path.ml[25,1234+16]..lib/path.ml[25,1234+18])
                Tpat_var "p2/406"
          ]
          Tfunction_body
            expression (lib/path.ml[26,1255+2]..lib/path.ml[39,1748+19])
              Texp_apply
              expression (lib/path.ml[27,1266+2]..lib/path.ml[27,1266+4])
                Texp_ident "Stdlib!.||"
              [
                <arg>
                  Nolabel
                  expression (lib/path.ml[26,1255+2]..lib/path.ml[26,1255+10])
                    Texp_apply
                    expression (lib/path.ml[26,1255+5]..lib/path.ml[26,1255+7])
                      Texp_ident "Stdlib!.=="
                    [
                      <arg>
                        Nolabel
                        expression (lib/path.ml[26,1255+2]..lib/path.ml[26,1255+4])
                          Texp_ident "p1/405"
                      <arg>
                        Nolabel
                        expression (lib/path.ml[26,1255+8]..lib/path.ml[26,1255+10])
                          Texp_ident "p2/406"
                    ]
                <arg>
                  Nolabel
                  expression (lib/path.ml[27,1266+5]..lib/path.ml[39,1748+19])
                    Texp_match
                    expression (lib/path.ml[27,1266+11]..lib/path.ml[27,1266+19])
                      Texp_tuple
                      [
                        expression (lib/path.ml[27,1266+12]..lib/path.ml[27,1266+14])
                          Texp_ident "p1/405"
                        expression (lib/path.ml[27,1266+16]..lib/path.ml[27,1266+18])
                          Texp_ident "p2/406"
                      ]
                    [
                      <case>
                        pattern (lib/path.ml[28,1291+4]..lib/path.ml[28,1291+28])
                          Tpat_value
                          pattern (lib/path.ml[28,1291+4]..lib/path.ml[28,1291+28])
                            Tpat_tuple
                            [
                              pattern (lib/path.ml[28,1291+5]..lib/path.ml[28,1291+15])
                                Tpat_construct "Pident"
                                [
                                  pattern (lib/path.ml[28,1291+12]..lib/path.ml[28,1291+15])
                                    Tpat_var "id1/407"
                                ]
                                None
                              pattern (lib/path.ml[28,1291+17]..lib/path.ml[28,1291+27])
                                Tpat_construct "Pident"
                                [
                                  pattern (lib/path.ml[28,1291+24]..lib/path.ml[28,1291+27])
                                    Tpat_var "id2/408"
                                ]
                                None
                            ]
                        expression (lib/path.ml[28,1291+32]..lib/path.ml[28,1291+50])
                          Texp_apply
                          expression (lib/path.ml[28,1291+32]..lib/path.ml[28,1291+42])
                            Texp_ident "Ocaml_ocaml_types!.Ident.same"
                          [
                            <arg>
                              Nolabel
                              expression (lib/path.ml[28,1291+43]..lib/path.ml[28,1291+46])
                                Texp_ident "id1/407"
                            <arg>
                              Nolabel
                              expression (lib/path.ml[28,1291+47]..lib/path.ml[28,1291+50])
                                Texp_ident "id2/408"
                          ]
                      <case>
                        pattern (lib/path.ml[29,1342+4]..lib/path.ml[29,1342+32])
                          Tpat_value
                          pattern (lib/path.ml[29,1342+4]..lib/path.ml[29,1342+32])
                            Tpat_tuple
                            [
                              pattern (lib/path.ml[29,1342+5]..lib/path.ml[29,1342+17])
                                Tpat_construct "Pdot"
                                [
                                  pattern (lib/path.ml[29,1342+10]..lib/path.ml[29,1342+12])
                                    Tpat_var "p1/409"
                                  pattern (lib/path.ml[29,1342+14]..lib/path.ml[29,1342+16])
                                    Tpat_var "s1/410"
                                ]
                                None
                              pattern (lib/path.ml[29,1342+19]..lib/path.ml[29,1342+31])
                                Tpat_construct "Pdot"
                                [
                                  pattern (lib/path.ml[29,1342+24]..lib/path.ml[29,1342+26])
                                    Tpat_var "p2/411"
                                  pattern (lib/path.ml[29,1342+28]..lib/path.ml[29,1342+30])
                                    Tpat_var "s2/412"
                                ]
                                None
                            ]
                        expression (lib/path.ml[30,1378+6]..lib/path.ml[30,1378+27])
                          Texp_apply
                          expression (lib/path.ml[30,1378+14]..lib/path.ml[30,1378+16])
                            Texp_ident "Stdlib!.&&"
                          [
                            <arg>
                              Nolabel
                              expression (lib/path.ml[30,1378+6]..lib/path.ml[30,1378+13])
                                Texp_apply
                                expression (lib/path.ml[30,1378+9]..lib/path.ml[30,1378+10])
                                  Texp_ident "Stdlib!.="
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/path.ml[30,1378+6]..lib/path.ml[30,1378+8])
                                      Texp_ident "s1/410"
                                  <arg>
                                    Nolabel
                                    expression (lib/path.ml[30,1378+11]..lib/path.ml[30,1378+13])
                                      Texp_ident "s2/412"
                                ]
                            <arg>
                              Nolabel
                              expression (lib/path.ml[30,1378+17]..lib/path.ml[30,1378+27])
                                Texp_apply
                                expression (lib/path.ml[30,1378+17]..lib/path.ml[30,1378+21])
                                  Texp_ident "same/404"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/path.ml[30,1378+22]..lib/path.ml[30,1378+24])
                                      Texp_ident "p1/409"
                                  <arg>
                                    Nolabel
                                    expression (lib/path.ml[30,1378+25]..lib/path.ml[30,1378+27])
                                      Texp_ident "p2/411"
                                ]
                          ]
                      <case>
                        pattern (lib/path.ml[31,1406+4]..lib/path.ml[31,1406+44])
                          Tpat_value
                          pattern (lib/path.ml[31,1406+4]..lib/path.ml[31,1406+44])
                            Tpat_tuple
                            [
                              pattern (lib/path.ml[31,1406+5]..lib/path.ml[31,1406+23])
                                Tpat_construct "Papply"
                                [
                                  pattern (lib/path.ml[31,1406+12]..lib/path.ml[31,1406+16])
                                    Tpat_var "fun1/413"
                                  pattern (lib/path.ml[31,1406+18]..lib/path.ml[31,1406+22])
                                    Tpat_var "arg1/414"
                                ]
                                None
                              pattern (lib/path.ml[31,1406+25]..lib/path.ml[31,1406+43])
                                Tpat_construct "Papply"
                                [
                                  pattern (lib/path.ml[31,1406+32]..lib/path.ml[31,1406+36])
                                    Tpat_var "fun2/415"
                                  pattern (lib/path.ml[31,1406+38]..lib/path.ml[31,1406+42])
                                    Tpat_var "arg2/416"
                                ]
                                None
                            ]
                        expression (lib/path.ml[32,1454+6]..lib/path.ml[32,1454+38])
                          Texp_apply
                          expression (lib/path.ml[32,1454+21]..lib/path.ml[32,1454+23])
                            Texp_ident "Stdlib!.&&"
                          [
                            <arg>
                              Nolabel
                              expression (lib/path.ml[32,1454+6]..lib/path.ml[32,1454+20])
                                Texp_apply
                                expression (lib/path.ml[32,1454+6]..lib/path.ml[32,1454+10])
                                  Texp_ident "same/404"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/path.ml[32,1454+11]..lib/path.ml[32,1454+15])
                                      Texp_ident "fun1/413"
                                  <arg>
                                    Nolabel
                                    expression (lib/path.ml[32,1454+16]..lib/path.ml[32,1454+20])
                                      Texp_ident "fun2/415"
                                ]
                            <arg>
                              Nolabel
                              expression (lib/path.ml[32,1454+24]..lib/path.ml[32,1454+38])
                                Texp_apply
                                expression (lib/path.ml[32,1454+24]..lib/path.ml[32,1454+28])
                                  Texp_ident "same/404"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/path.ml[32,1454+29]..lib/path.ml[32,1454+33])
                                      Texp_ident "arg1/414"
                                  <arg>
                                    Nolabel
                                    expression (lib/path.ml[32,1454+34]..lib/path.ml[32,1454+38])
                                      Texp_ident "arg2/416"
                                ]
                          ]
                      <case>
                        pattern (lib/path.ml[33,1493+4]..lib/path.ml[33,1493+44])
                          Tpat_value
                          pattern (lib/path.ml[33,1493+4]..lib/path.ml[33,1493+44])
                            Tpat_tuple
                            [
                              pattern (lib/path.ml[33,1493+5]..lib/path.ml[33,1493+23])
                                Tpat_construct "Pextra_ty"
                                [
                                  pattern (lib/path.ml[33,1493+16]..lib/path.ml[33,1493+18])
                                    Tpat_var "p1/417"
                                  pattern (lib/path.ml[33,1493+20]..lib/path.ml[33,1493+22])
                                    Tpat_var "t1/418"
                                ]
                                None
                              pattern (lib/path.ml[33,1493+25]..lib/path.ml[33,1493+43])
                                Tpat_construct "Pextra_ty"
                                [
                                  pattern (lib/path.ml[33,1493+36]..lib/path.ml[33,1493+38])
                                    Tpat_var "p2/419"
                                  pattern (lib/path.ml[33,1493+40]..lib/path.ml[33,1493+42])
                                    Tpat_var "t2/420"
                                ]
                                None
                            ]
                        expression (lib/path.ml[34,1541+6]..lib/path.ml[38,1714+33])
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (lib/path.ml[34,1541+10]..lib/path.ml[34,1541+20])
                                Tpat_var "same_extra/421"
                              expression (lib/path.ml[34,1541+23]..lib/path.ml[37,1667+46])
                                Texp_match
                                expression (lib/path.ml[34,1541+29]..lib/path.ml[34,1541+35])
                                  Texp_tuple
                                  [
                                    expression (lib/path.ml[34,1541+29]..lib/path.ml[34,1541+31])
                                      Texp_ident "t1/418"
                                    expression (lib/path.ml[34,1541+33]..lib/path.ml[34,1541+35])
                                      Texp_ident "t2/420"
                                  ]
                                [
                                  <case>
                                    pattern (lib/path.ml[35,1582+10]..lib/path.ml[35,1582+36])
                                      Tpat_value
                                      pattern (lib/path.ml[35,1582+10]..lib/path.ml[35,1582+36])
                                        Tpat_tuple
                                        [
                                          pattern (lib/path.ml[35,1582+11]..lib/path.ml[35,1582+22])
                                            Tpat_construct "Pcstr_ty"
                                            [
                                              pattern (lib/path.ml[35,1582+20]..lib/path.ml[35,1582+22])
                                                Tpat_var "s1/422"
                                            ]
                                            None
                                          pattern (lib/path.ml[35,1582+24]..lib/path.ml[35,1582+35])
                                            Tpat_construct "Pcstr_ty"
                                            [
                                              pattern (lib/path.ml[35,1582+33]..lib/path.ml[35,1582+35])
                                                Tpat_var "s2/423"
                                            ]
                                            None
                                        ]
                                    expression (lib/path.ml[35,1582+40]..lib/path.ml[35,1582+47])
                                      Texp_apply
                                      expression (lib/path.ml[35,1582+43]..lib/path.ml[35,1582+44])
                                        Texp_ident "Stdlib!.="
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/path.ml[35,1582+40]..lib/path.ml[35,1582+42])
                                            Texp_ident "s1/422"
                                        <arg>
                                          Nolabel
                                          expression (lib/path.ml[35,1582+45]..lib/path.ml[35,1582+47])
                                            Texp_ident "s2/423"
                                      ]
                                  <case>
                                    pattern (lib/path.ml[36,1630+10]..lib/path.ml[36,1630+28])
                                      Tpat_value
                                      pattern (lib/path.ml[36,1630+10]..lib/path.ml[36,1630+28])
                                        Tpat_tuple
                                        [
                                          pattern (lib/path.ml[36,1630+11]..lib/path.ml[36,1630+18])
                                            Tpat_construct "Pext_ty"
                                            []
                                            None
                                          pattern (lib/path.ml[36,1630+20]..lib/path.ml[36,1630+27])
                                            Tpat_construct "Pext_ty"
                                            []
                                            None
                                        ]
                                    expression (lib/path.ml[36,1630+32]..lib/path.ml[36,1630+36])
                                      Texp_construct "true"
                                      []
                                  <case>
                                    pattern (lib/path.ml[37,1667+10]..lib/path.ml[37,1667+37])
                                      Tpat_value
                                      pattern (lib/path.ml[37,1667+10]..lib/path.ml[37,1667+37])
                                        Tpat_tuple
                                        [
                                          pattern (lib/path.ml[37,1667+11]..lib/path.ml[37,1667+33])
                                            Tpat_or
                                            pattern (lib/path.ml[37,1667+12]..lib/path.ml[37,1667+22])
                                              Tpat_construct "Pcstr_ty"
                                              [
                                                pattern (lib/path.ml[37,1667+21]..lib/path.ml[37,1667+22])
                                                  Tpat_any
                                              ]
                                              None
                                            pattern (lib/path.ml[37,1667+25]..lib/path.ml[37,1667+32])
                                              Tpat_construct "Pext_ty"
                                              []
                                              None
                                          pattern (lib/path.ml[37,1667+35]..lib/path.ml[37,1667+36])
                                            Tpat_any
                                        ]
                                    expression (lib/path.ml[37,1667+41]..lib/path.ml[37,1667+46])
                                      Texp_construct "false"
                                      []
                                ]
                          ]
                          expression (lib/path.ml[38,1714+9]..lib/path.ml[38,1714+33])
                            Texp_apply
                            expression (lib/path.ml[38,1714+20]..lib/path.ml[38,1714+22])
                              Texp_ident "Stdlib!.&&"
                            [
                              <arg>
                                Nolabel
                                expression (lib/path.ml[38,1714+9]..lib/path.ml[38,1714+19])
                                  Texp_ident "same_extra/421"
                              <arg>
                                Nolabel
                                expression (lib/path.ml[38,1714+23]..lib/path.ml[38,1714+33])
                                  Texp_apply
                                  expression (lib/path.ml[38,1714+23]..lib/path.ml[38,1714+27])
                                    Texp_ident "same/404"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/path.ml[38,1714+28]..lib/path.ml[38,1714+30])
                                        Texp_ident "p1/417"
                                    <arg>
                                      Nolabel
                                      expression (lib/path.ml[38,1714+31]..lib/path.ml[38,1714+33])
                                        Texp_ident "p2/419"
                                  ]
                            ]
                      <case>
                        pattern (lib/path.ml[39,1748+4]..lib/path.ml[39,1748+10])
                          Tpat_value
                          pattern (lib/path.ml[39,1748+4]..lib/path.ml[39,1748+10])
                            Tpat_tuple
                            [
                              pattern (lib/path.ml[39,1748+5]..lib/path.ml[39,1748+6])
                                Tpat_any
                              pattern (lib/path.ml[39,1748+8]..lib/path.ml[39,1748+9])
                                Tpat_any
                            ]
                        expression (lib/path.ml[39,1748+14]..lib/path.ml[39,1748+19])
                          Texp_construct "false"
                          []
                    ]
              ]
    ]
  structure_item (lib/path.ml[41,1769+0]..lib/path.ml[70,2716+8])
    Tstr_value Rec
    [
      <def>
        pattern (lib/path.ml[41,1769+8]..lib/path.ml[41,1769+15])
          Tpat_var "compare/424"
        expression (lib/path.ml[41,1769+16]..lib/path.ml[61,2512+8]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/path.ml[41,1769+16]..lib/path.ml[41,1769+18])
                Tpat_var "p1/426"
            Nolabel
            Param_pat
              pattern (lib/path.ml[41,1769+19]..lib/path.ml[41,1769+21])
                Tpat_var "p2/427"
          ]
          Tfunction_body
            expression (lib/path.ml[42,1793+2]..lib/path.ml[61,2512+8])
              Texp_ifthenelse
              expression (lib/path.ml[42,1793+5]..lib/path.ml[42,1793+13])
                Texp_apply
                expression (lib/path.ml[42,1793+8]..lib/path.ml[42,1793+10])
                  Texp_ident "Stdlib!.=="
                [
                  <arg>
                    Nolabel
                    expression (lib/path.ml[42,1793+5]..lib/path.ml[42,1793+7])
                      Texp_ident "p1/426"
                  <arg>
                    Nolabel
                    expression (lib/path.ml[42,1793+11]..lib/path.ml[42,1793+13])
                      Texp_ident "p2/427"
                ]
              expression (lib/path.ml[42,1793+19]..lib/path.ml[42,1793+20])
                Texp_constant Const_int 0
              Some
                expression (lib/path.ml[43,1814+7]..lib/path.ml[61,2512+8])
                  Texp_match
                  expression (lib/path.ml[43,1814+13]..lib/path.ml[43,1814+21])
                    Texp_tuple
                    [
                      expression (lib/path.ml[43,1814+14]..lib/path.ml[43,1814+16])
                        Texp_ident "p1/426"
                      expression (lib/path.ml[43,1814+18]..lib/path.ml[43,1814+20])
                        Texp_ident "p2/427"
                    ]
                  [
                    <case>
                      pattern (lib/path.ml[44,1841+4]..lib/path.ml[44,1841+28])
                        Tpat_value
                        pattern (lib/path.ml[44,1841+4]..lib/path.ml[44,1841+28])
                          Tpat_tuple
                          [
                            pattern (lib/path.ml[44,1841+5]..lib/path.ml[44,1841+15])
                              Tpat_construct "Pident"
                              [
                                pattern (lib/path.ml[44,1841+12]..lib/path.ml[44,1841+15])
                                  Tpat_var "id1/428"
                              ]
                              None
                            pattern (lib/path.ml[44,1841+17]..lib/path.ml[44,1841+27])
                              Tpat_construct "Pident"
                              [
                                pattern (lib/path.ml[44,1841+24]..lib/path.ml[44,1841+27])
                                  Tpat_var "id2/429"
                              ]
                              None
                          ]
                      expression (lib/path.ml[44,1841+32]..lib/path.ml[44,1841+53])
                        Texp_apply
                        expression (lib/path.ml[44,1841+32]..lib/path.ml[44,1841+45])
                          Texp_ident "Ocaml_ocaml_types!.Ident.compare"
                        [
                          <arg>
                            Nolabel
                            expression (lib/path.ml[44,1841+46]..lib/path.ml[44,1841+49])
                              Texp_ident "id1/428"
                          <arg>
                            Nolabel
                            expression (lib/path.ml[44,1841+50]..lib/path.ml[44,1841+53])
                              Texp_ident "id2/429"
                        ]
                    <case>
                      pattern (lib/path.ml[45,1895+4]..lib/path.ml[45,1895+32])
                        Tpat_value
                        pattern (lib/path.ml[45,1895+4]..lib/path.ml[45,1895+32])
                          Tpat_tuple
                          [
                            pattern (lib/path.ml[45,1895+5]..lib/path.ml[45,1895+17])
                              Tpat_construct "Pdot"
                              [
                                pattern (lib/path.ml[45,1895+10]..lib/path.ml[45,1895+12])
                                  Tpat_var "p1/430"
                                pattern (lib/path.ml[45,1895+14]..lib/path.ml[45,1895+16])
                                  Tpat_var "s1/431"
                              ]
                              None
                            pattern (lib/path.ml[45,1895+19]..lib/path.ml[45,1895+31])
                              Tpat_construct "Pdot"
                              [
                                pattern (lib/path.ml[45,1895+24]..lib/path.ml[45,1895+26])
                                  Tpat_var "p2/432"
                                pattern (lib/path.ml[45,1895+28]..lib/path.ml[45,1895+30])
                                  Tpat_var "s2/433"
                              ]
                              None
                          ]
                      expression (lib/path.ml[46,1931+6]..lib/path.ml[47,1962+48])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (lib/path.ml[46,1931+10]..lib/path.ml[46,1931+11])
                              Tpat_var "h/442"
                            expression (lib/path.ml[46,1931+14]..lib/path.ml[46,1931+27])
                              Texp_apply
                              expression (lib/path.ml[46,1931+14]..lib/path.ml[46,1931+21])
                                Texp_ident "compare/424"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[46,1931+22]..lib/path.ml[46,1931+24])
                                    Texp_ident "p1/430"
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[46,1931+25]..lib/path.ml[46,1931+27])
                                    Texp_ident "p2/432"
                              ]
                        ]
                        expression (lib/path.ml[47,1962+6]..lib/path.ml[47,1962+48])
                          Texp_ifthenelse
                          expression (lib/path.ml[47,1962+9]..lib/path.ml[47,1962+15])
                            Texp_apply
                            expression (lib/path.ml[47,1962+11]..lib/path.ml[47,1962+13])
                              Texp_ident "Stdlib!.<>"
                            [
                              <arg>
                                Nolabel
                                expression (lib/path.ml[47,1962+9]..lib/path.ml[47,1962+10])
                                  Texp_ident "h/442"
                              <arg>
                                Nolabel
                                expression (lib/path.ml[47,1962+14]..lib/path.ml[47,1962+15])
                                  Texp_constant Const_int 0
                            ]
                          expression (lib/path.ml[47,1962+21]..lib/path.ml[47,1962+22])
                            Texp_ident "h/442"
                          Some
                            expression (lib/path.ml[47,1962+28]..lib/path.ml[47,1962+48])
                              Texp_apply
                              expression (lib/path.ml[47,1962+28]..lib/path.ml[47,1962+42])
                                Texp_ident "Stdlib!.String.compare"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[47,1962+43]..lib/path.ml[47,1962+45])
                                    Texp_ident "s1/431"
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[47,1962+46]..lib/path.ml[47,1962+48])
                                    Texp_ident "s2/433"
                              ]
                    <case>
                      pattern (lib/path.ml[48,2011+4]..lib/path.ml[48,2011+44])
                        Tpat_value
                        pattern (lib/path.ml[48,2011+4]..lib/path.ml[48,2011+44])
                          Tpat_tuple
                          [
                            pattern (lib/path.ml[48,2011+5]..lib/path.ml[48,2011+23])
                              Tpat_construct "Papply"
                              [
                                pattern (lib/path.ml[48,2011+12]..lib/path.ml[48,2011+16])
                                  Tpat_var "fun1/434"
                                pattern (lib/path.ml[48,2011+18]..lib/path.ml[48,2011+22])
                                  Tpat_var "arg1/435"
                              ]
                              None
                            pattern (lib/path.ml[48,2011+25]..lib/path.ml[48,2011+43])
                              Tpat_construct "Papply"
                              [
                                pattern (lib/path.ml[48,2011+32]..lib/path.ml[48,2011+36])
                                  Tpat_var "fun2/436"
                                pattern (lib/path.ml[48,2011+38]..lib/path.ml[48,2011+42])
                                  Tpat_var "arg2/437"
                              ]
                              None
                          ]
                      expression (lib/path.ml[49,2059+6]..lib/path.ml[50,2094+45])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (lib/path.ml[49,2059+10]..lib/path.ml[49,2059+11])
                              Tpat_var "h/512"
                            expression (lib/path.ml[49,2059+14]..lib/path.ml[49,2059+31])
                              Texp_apply
                              expression (lib/path.ml[49,2059+14]..lib/path.ml[49,2059+21])
                                Texp_ident "compare/424"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[49,2059+22]..lib/path.ml[49,2059+26])
                                    Texp_ident "fun1/434"
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[49,2059+27]..lib/path.ml[49,2059+31])
                                    Texp_ident "fun2/436"
                              ]
                        ]
                        expression (lib/path.ml[50,2094+6]..lib/path.ml[50,2094+45])
                          Texp_ifthenelse
                          expression (lib/path.ml[50,2094+9]..lib/path.ml[50,2094+15])
                            Texp_apply
                            expression (lib/path.ml[50,2094+11]..lib/path.ml[50,2094+13])
                              Texp_ident "Stdlib!.<>"
                            [
                              <arg>
                                Nolabel
                                expression (lib/path.ml[50,2094+9]..lib/path.ml[50,2094+10])
                                  Texp_ident "h/512"
                              <arg>
                                Nolabel
                                expression (lib/path.ml[50,2094+14]..lib/path.ml[50,2094+15])
                                  Texp_constant Const_int 0
                            ]
                          expression (lib/path.ml[50,2094+21]..lib/path.ml[50,2094+22])
                            Texp_ident "h/512"
                          Some
                            expression (lib/path.ml[50,2094+28]..lib/path.ml[50,2094+45])
                              Texp_apply
                              expression (lib/path.ml[50,2094+28]..lib/path.ml[50,2094+35])
                                Texp_ident "compare/424"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[50,2094+36]..lib/path.ml[50,2094+40])
                                    Texp_ident "arg1/435"
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[50,2094+41]..lib/path.ml[50,2094+45])
                                    Texp_ident "arg2/437"
                              ]
                    <case>
                      pattern (lib/path.ml[51,2140+4]..lib/path.ml[51,2140+44])
                        Tpat_value
                        pattern (lib/path.ml[51,2140+4]..lib/path.ml[51,2140+44])
                          Tpat_tuple
                          [
                            pattern (lib/path.ml[51,2140+5]..lib/path.ml[51,2140+23])
                              Tpat_construct "Pextra_ty"
                              [
                                pattern (lib/path.ml[51,2140+16]..lib/path.ml[51,2140+18])
                                  Tpat_var "p1/438"
                                pattern (lib/path.ml[51,2140+20]..lib/path.ml[51,2140+22])
                                  Tpat_var "t1/439"
                              ]
                              None
                            pattern (lib/path.ml[51,2140+25]..lib/path.ml[51,2140+43])
                              Tpat_construct "Pextra_ty"
                              [
                                pattern (lib/path.ml[51,2140+36]..lib/path.ml[51,2140+38])
                                  Tpat_var "p2/440"
                                pattern (lib/path.ml[51,2140+40]..lib/path.ml[51,2140+42])
                                  Tpat_var "t2/441"
                              ]
                              None
                          ]
                      expression (lib/path.ml[52,2188+6]..lib/path.ml[53,2225+41])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (lib/path.ml[52,2188+10]..lib/path.ml[52,2188+11])
                              Tpat_var "h/513"
                            expression (lib/path.ml[52,2188+14]..lib/path.ml[52,2188+33])
                              Texp_apply
                              expression (lib/path.ml[52,2188+14]..lib/path.ml[52,2188+27])
                                Texp_ident "compare_extra/425"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[52,2188+28]..lib/path.ml[52,2188+30])
                                    Texp_ident "t1/439"
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[52,2188+31]..lib/path.ml[52,2188+33])
                                    Texp_ident "t2/441"
                              ]
                        ]
                        expression (lib/path.ml[53,2225+6]..lib/path.ml[53,2225+41])
                          Texp_ifthenelse
                          expression (lib/path.ml[53,2225+9]..lib/path.ml[53,2225+15])
                            Texp_apply
                            expression (lib/path.ml[53,2225+11]..lib/path.ml[53,2225+13])
                              Texp_ident "Stdlib!.<>"
                            [
                              <arg>
                                Nolabel
                                expression (lib/path.ml[53,2225+9]..lib/path.ml[53,2225+10])
                                  Texp_ident "h/513"
                              <arg>
                                Nolabel
                                expression (lib/path.ml[53,2225+14]..lib/path.ml[53,2225+15])
                                  Texp_constant Const_int 0
                            ]
                          expression (lib/path.ml[53,2225+21]..lib/path.ml[53,2225+22])
                            Texp_ident "h/513"
                          Some
                            expression (lib/path.ml[53,2225+28]..lib/path.ml[53,2225+41])
                              Texp_apply
                              expression (lib/path.ml[53,2225+28]..lib/path.ml[53,2225+35])
                                Texp_ident "compare/424"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[53,2225+36]..lib/path.ml[53,2225+38])
                                    Texp_ident "p1/438"
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[53,2225+39]..lib/path.ml[53,2225+41])
                                    Texp_ident "p2/440"
                              ]
                    <case>
                      pattern (lib/path.ml[54,2267+4]..lib/path.ml[56,2356+27])
                        Tpat_or
                        pattern (lib/path.ml[54,2267+4]..lib/path.ml[55,2317+38])
                          Tpat_or
                          pattern (lib/path.ml[54,2267+4]..lib/path.ml[54,2267+49])
                            Tpat_value
                            pattern (lib/path.ml[54,2267+4]..lib/path.ml[54,2267+49])
                              Tpat_tuple
                              [
                                pattern (lib/path.ml[54,2267+5]..lib/path.ml[54,2267+13])
                                  Tpat_construct "Pident"
                                  [
                                    pattern (lib/path.ml[54,2267+12]..lib/path.ml[54,2267+13])
                                      Tpat_any
                                  ]
                                  None
                                pattern (lib/path.ml[54,2267+15]..lib/path.ml[54,2267+48])
                                  Tpat_or
                                  pattern (lib/path.ml[54,2267+16]..lib/path.ml[54,2267+33])
                                    Tpat_or
                                    pattern (lib/path.ml[54,2267+16]..lib/path.ml[54,2267+22])
                                      Tpat_construct "Pdot"
                                      [
                                        pattern (lib/path.ml[54,2267+21]..lib/path.ml[54,2267+22])
                                          Tpat_any
                                        pattern (lib/path.ml[54,2267+21]..lib/path.ml[54,2267+22])
                                          Tpat_any
                                      ]
                                      None
                                    pattern (lib/path.ml[54,2267+25]..lib/path.ml[54,2267+33])
                                      Tpat_construct "Papply"
                                      [
                                        pattern (lib/path.ml[54,2267+32]..lib/path.ml[54,2267+33])
                                          Tpat_any
                                        pattern (lib/path.ml[54,2267+32]..lib/path.ml[54,2267+33])
                                          Tpat_any
                                      ]
                                      None
                                  pattern (lib/path.ml[54,2267+36]..lib/path.ml[54,2267+47])
                                    Tpat_construct "Pextra_ty"
                                    [
                                      pattern (lib/path.ml[54,2267+46]..lib/path.ml[54,2267+47])
                                        Tpat_any
                                      pattern (lib/path.ml[54,2267+46]..lib/path.ml[54,2267+47])
                                        Tpat_any
                                    ]
                                    None
                              ]
                          pattern (lib/path.ml[55,2317+4]..lib/path.ml[55,2317+38])
                            Tpat_value
                            pattern (lib/path.ml[55,2317+4]..lib/path.ml[55,2317+38])
                              Tpat_tuple
                              [
                                pattern (lib/path.ml[55,2317+5]..lib/path.ml[55,2317+11])
                                  Tpat_construct "Pdot"
                                  [
                                    pattern (lib/path.ml[55,2317+10]..lib/path.ml[55,2317+11])
                                      Tpat_any
                                    pattern (lib/path.ml[55,2317+10]..lib/path.ml[55,2317+11])
                                      Tpat_any
                                  ]
                                  None
                                pattern (lib/path.ml[55,2317+13]..lib/path.ml[55,2317+37])
                                  Tpat_or
                                  pattern (lib/path.ml[55,2317+14]..lib/path.ml[55,2317+22])
                                    Tpat_construct "Papply"
                                    [
                                      pattern (lib/path.ml[55,2317+21]..lib/path.ml[55,2317+22])
                                        Tpat_any
                                      pattern (lib/path.ml[55,2317+21]..lib/path.ml[55,2317+22])
                                        Tpat_any
                                    ]
                                    None
                                  pattern (lib/path.ml[55,2317+25]..lib/path.ml[55,2317+36])
                                    Tpat_construct "Pextra_ty"
                                    [
                                      pattern (lib/path.ml[55,2317+35]..lib/path.ml[55,2317+36])
                                        Tpat_any
                                      pattern (lib/path.ml[55,2317+35]..lib/path.ml[55,2317+36])
                                        Tpat_any
                                    ]
                                    None
                              ]
                        pattern (lib/path.ml[56,2356+4]..lib/path.ml[56,2356+27])
                          Tpat_value
                          pattern (lib/path.ml[56,2356+4]..lib/path.ml[56,2356+27])
                            Tpat_tuple
                            [
                              pattern (lib/path.ml[56,2356+5]..lib/path.ml[56,2356+13])
                                Tpat_construct "Papply"
                                [
                                  pattern (lib/path.ml[56,2356+12]..lib/path.ml[56,2356+13])
                                    Tpat_any
                                  pattern (lib/path.ml[56,2356+12]..lib/path.ml[56,2356+13])
                                    Tpat_any
                                ]
                                None
                              pattern (lib/path.ml[56,2356+15]..lib/path.ml[56,2356+26])
                                Tpat_construct "Pextra_ty"
                                [
                                  pattern (lib/path.ml[56,2356+25]..lib/path.ml[56,2356+26])
                                    Tpat_any
                                  pattern (lib/path.ml[56,2356+25]..lib/path.ml[56,2356+26])
                                    Tpat_any
                                ]
                                None
                            ]
                      expression (lib/path.ml[57,2384+7]..lib/path.ml[57,2384+9])
                        Texp_constant Const_int -1
                    <case>
                      pattern (lib/path.ml[58,2394+4]..lib/path.ml[60,2484+27])
                        Tpat_or
                        pattern (lib/path.ml[58,2394+4]..lib/path.ml[59,2444+39])
                          Tpat_or
                          pattern (lib/path.ml[58,2394+4]..lib/path.ml[58,2394+49])
                            Tpat_value
                            pattern (lib/path.ml[58,2394+4]..lib/path.ml[58,2394+49])
                              Tpat_tuple
                              [
                                pattern (lib/path.ml[58,2394+5]..lib/path.ml[58,2394+38])
                                  Tpat_or
                                  pattern (lib/path.ml[58,2394+6]..lib/path.ml[58,2394+28])
                                    Tpat_or
                                    pattern (lib/path.ml[58,2394+6]..lib/path.ml[58,2394+17])
                                      Tpat_construct "Pextra_ty"
                                      [
                                        pattern (lib/path.ml[58,2394+16]..lib/path.ml[58,2394+17])
                                          Tpat_any
                                        pattern (lib/path.ml[58,2394+16]..lib/path.ml[58,2394+17])
                                          Tpat_any
                                      ]
                                      None
                                    pattern (lib/path.ml[58,2394+20]..lib/path.ml[58,2394+28])
                                      Tpat_construct "Papply"
                                      [
                                        pattern (lib/path.ml[58,2394+27]..lib/path.ml[58,2394+28])
                                          Tpat_any
                                        pattern (lib/path.ml[58,2394+27]..lib/path.ml[58,2394+28])
                                          Tpat_any
                                      ]
                                      None
                                  pattern (lib/path.ml[58,2394+31]..lib/path.ml[58,2394+37])
                                    Tpat_construct "Pdot"
                                    [
                                      pattern (lib/path.ml[58,2394+36]..lib/path.ml[58,2394+37])
                                        Tpat_any
                                      pattern (lib/path.ml[58,2394+36]..lib/path.ml[58,2394+37])
                                        Tpat_any
                                    ]
                                    None
                                pattern (lib/path.ml[58,2394+40]..lib/path.ml[58,2394+48])
                                  Tpat_construct "Pident"
                                  [
                                    pattern (lib/path.ml[58,2394+47]..lib/path.ml[58,2394+48])
                                      Tpat_any
                                  ]
                                  None
                              ]
                          pattern (lib/path.ml[59,2444+4]..lib/path.ml[59,2444+39])
                            Tpat_value
                            pattern (lib/path.ml[59,2444+4]..lib/path.ml[59,2444+39])
                              Tpat_tuple
                              [
                                pattern (lib/path.ml[59,2444+5]..lib/path.ml[59,2444+29])
                                  Tpat_or
                                  pattern (lib/path.ml[59,2444+6]..lib/path.ml[59,2444+17])
                                    Tpat_construct "Pextra_ty"
                                    [
                                      pattern (lib/path.ml[59,2444+16]..lib/path.ml[59,2444+17])
                                        Tpat_any
                                      pattern (lib/path.ml[59,2444+16]..lib/path.ml[59,2444+17])
                                        Tpat_any
                                    ]
                                    None
                                  pattern (lib/path.ml[59,2444+20]..lib/path.ml[59,2444+28])
                                    Tpat_construct "Papply"
                                    [
                                      pattern (lib/path.ml[59,2444+27]..lib/path.ml[59,2444+28])
                                        Tpat_any
                                      pattern (lib/path.ml[59,2444+27]..lib/path.ml[59,2444+28])
                                        Tpat_any
                                    ]
                                    None
                                pattern (lib/path.ml[59,2444+32]..lib/path.ml[59,2444+38])
                                  Tpat_construct "Pdot"
                                  [
                                    pattern (lib/path.ml[59,2444+37]..lib/path.ml[59,2444+38])
                                      Tpat_any
                                    pattern (lib/path.ml[59,2444+37]..lib/path.ml[59,2444+38])
                                      Tpat_any
                                  ]
                                  None
                              ]
                        pattern (lib/path.ml[60,2484+4]..lib/path.ml[60,2484+27])
                          Tpat_value
                          pattern (lib/path.ml[60,2484+4]..lib/path.ml[60,2484+27])
                            Tpat_tuple
                            [
                              pattern (lib/path.ml[60,2484+5]..lib/path.ml[60,2484+16])
                                Tpat_construct "Pextra_ty"
                                [
                                  pattern (lib/path.ml[60,2484+15]..lib/path.ml[60,2484+16])
                                    Tpat_any
                                  pattern (lib/path.ml[60,2484+15]..lib/path.ml[60,2484+16])
                                    Tpat_any
                                ]
                                None
                              pattern (lib/path.ml[60,2484+18]..lib/path.ml[60,2484+26])
                                Tpat_construct "Papply"
                                [
                                  pattern (lib/path.ml[60,2484+25]..lib/path.ml[60,2484+26])
                                    Tpat_any
                                  pattern (lib/path.ml[60,2484+25]..lib/path.ml[60,2484+26])
                                    Tpat_any
                                ]
                                None
                            ]
                      expression (lib/path.ml[61,2512+7]..lib/path.ml[61,2512+8])
                        Texp_constant Const_int 1
                  ]
      <def>
        pattern (lib/path.ml[62,2521+4]..lib/path.ml[62,2521+17])
          Tpat_var "compare_extra/425"
        expression (lib/path.ml[62,2521+18]..lib/path.ml[70,2716+8]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/path.ml[62,2521+18]..lib/path.ml[62,2521+20])
                Tpat_var "t1/514"
            Nolabel
            Param_pat
              pattern (lib/path.ml[62,2521+21]..lib/path.ml[62,2521+23])
                Tpat_var "t2/515"
          ]
          Tfunction_body
            expression (lib/path.ml[63,2547+2]..lib/path.ml[70,2716+8])
              Texp_match
              expression (lib/path.ml[63,2547+8]..lib/path.ml[63,2547+16])
                Texp_tuple
                [
                  expression (lib/path.ml[63,2547+9]..lib/path.ml[63,2547+11])
                    Texp_ident "t1/514"
                  expression (lib/path.ml[63,2547+13]..lib/path.ml[63,2547+15])
                    Texp_ident "t2/515"
                ]
              [
                <case>
                  pattern (lib/path.ml[64,2569+4]..lib/path.ml[64,2569+28])
                    Tpat_value
                    pattern (lib/path.ml[64,2569+4]..lib/path.ml[64,2569+28])
                      Tpat_tuple
                      [
                        pattern (lib/path.ml[64,2569+4]..lib/path.ml[64,2569+15])
                          Tpat_construct "Pcstr_ty"
                          [
                            pattern (lib/path.ml[64,2569+13]..lib/path.ml[64,2569+15])
                              Tpat_var "s1/516"
                          ]
                          None
                        pattern (lib/path.ml[64,2569+17]..lib/path.ml[64,2569+28])
                          Tpat_construct "Pcstr_ty"
                          [
                            pattern (lib/path.ml[64,2569+26]..lib/path.ml[64,2569+28])
                              Tpat_var "s2/517"
                          ]
                          None
                      ]
                  expression (lib/path.ml[64,2569+32]..lib/path.ml[64,2569+52])
                    Texp_apply
                    expression (lib/path.ml[64,2569+32]..lib/path.ml[64,2569+46])
                      Texp_ident "Stdlib!.String.compare"
                    [
                      <arg>
                        Nolabel
                        expression (lib/path.ml[64,2569+47]..lib/path.ml[64,2569+49])
                          Texp_ident "s1/516"
                      <arg>
                        Nolabel
                        expression (lib/path.ml[64,2569+50]..lib/path.ml[64,2569+52])
                          Texp_ident "s2/517"
                    ]
                <case>
                  pattern (lib/path.ml[65,2622+4]..lib/path.ml[65,2622+22])
                    Tpat_value
                    pattern (lib/path.ml[65,2622+4]..lib/path.ml[65,2622+22])
                      Tpat_tuple
                      [
                        pattern (lib/path.ml[65,2622+5]..lib/path.ml[65,2622+12])
                          Tpat_construct "Pext_ty"
                          []
                          None
                        pattern (lib/path.ml[65,2622+14]..lib/path.ml[65,2622+21])
                          Tpat_construct "Pext_ty"
                          []
                          None
                      ]
                  expression (lib/path.ml[66,2645+7]..lib/path.ml[66,2645+8])
                    Texp_constant Const_int 0
                <case>
                  pattern (lib/path.ml[67,2654+4]..lib/path.ml[67,2654+25])
                    Tpat_value
                    pattern (lib/path.ml[67,2654+4]..lib/path.ml[67,2654+25])
                      Tpat_tuple
                      [
                        pattern (lib/path.ml[67,2654+5]..lib/path.ml[67,2654+15])
                          Tpat_construct "Pcstr_ty"
                          [
                            pattern (lib/path.ml[67,2654+14]..lib/path.ml[67,2654+15])
                              Tpat_any
                          ]
                          None
                        pattern (lib/path.ml[67,2654+17]..lib/path.ml[67,2654+24])
                          Tpat_construct "Pext_ty"
                          []
                          None
                      ]
                  expression (lib/path.ml[68,2680+7]..lib/path.ml[68,2680+9])
                    Texp_constant Const_int -1
                <case>
                  pattern (lib/path.ml[69,2690+4]..lib/path.ml[69,2690+25])
                    Tpat_value
                    pattern (lib/path.ml[69,2690+4]..lib/path.ml[69,2690+25])
                      Tpat_tuple
                      [
                        pattern (lib/path.ml[69,2690+5]..lib/path.ml[69,2690+12])
                          Tpat_construct "Pext_ty"
                          []
                          None
                        pattern (lib/path.ml[69,2690+14]..lib/path.ml[69,2690+24])
                          Tpat_construct "Pcstr_ty"
                          [
                            pattern (lib/path.ml[69,2690+23]..lib/path.ml[69,2690+24])
                              Tpat_any
                          ]
                          None
                      ]
                  expression (lib/path.ml[70,2716+7]..lib/path.ml[70,2716+8])
                    Texp_constant Const_int 1
              ]
    ]
  structure_item (lib/path.ml[72,2726+0]..lib/path.ml[79,3003+7])
    Tstr_value Rec
    [
      <def>
        pattern (lib/path.ml[72,2726+8]..lib/path.ml[72,2726+21])
          Tpat_var "find_free_opt/518"
        expression (lib/path.ml[72,2726+22]..lib/path.ml[79,3003+7]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/path.ml[72,2726+22]..lib/path.ml[72,2726+25])
                Tpat_var "ids/519"
          ]
          Tfunction_cases (lib/path.ml[72,2726+28]..lib/path.ml[79,3003+7])
            [
              <case>
                pattern (lib/path.ml[73,2763+4]..lib/path.ml[73,2763+13])
                  Tpat_construct "Pident"
                  [
                    pattern (lib/path.ml[73,2763+11]..lib/path.ml[73,2763+13])
                      Tpat_var "id/520"
                  ]
                  None
                expression (lib/path.ml[73,2763+17]..lib/path.ml[73,2763+50])
                  Texp_apply
                  expression (lib/path.ml[73,2763+17]..lib/path.ml[73,2763+30])
                    Texp_ident "Stdlib!.List.find_opt"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[73,2763+31]..lib/path.ml[73,2763+46])
                        Texp_apply
                        expression (lib/path.ml[73,2763+32]..lib/path.ml[73,2763+42])
                          Texp_ident "Ocaml_ocaml_types!.Ident.same"
                        [
                          <arg>
                            Nolabel
                            expression (lib/path.ml[73,2763+43]..lib/path.ml[73,2763+45])
                              Texp_ident "id/520"
                        ]
                    <arg>
                      Nolabel
                      expression (lib/path.ml[73,2763+47]..lib/path.ml[73,2763+50])
                        Texp_ident "ids/519"
                  ]
              <case>
                pattern (lib/path.ml[74,2814+4]..lib/path.ml[74,2814+33])
                  Tpat_or
                  pattern (lib/path.ml[74,2814+4]..lib/path.ml[74,2814+14])
                    Tpat_construct "Pdot"
                    [
                      pattern (lib/path.ml[74,2814+9]..lib/path.ml[74,2814+10])
                        Tpat_var "p/521"
                      pattern (lib/path.ml[74,2814+12]..lib/path.ml[74,2814+13])
                        Tpat_any
                    ]
                    None
                  pattern (lib/path.ml[74,2814+17]..lib/path.ml[74,2814+33])
                    Tpat_construct "Pextra_ty"
                    [
                      pattern (lib/path.ml[74,2814+28]..lib/path.ml[74,2814+29])
                        Tpat_var "p/521"
                      pattern (lib/path.ml[74,2814+31]..lib/path.ml[74,2814+32])
                        Tpat_any
                    ]
                    None
                expression (lib/path.ml[74,2814+37]..lib/path.ml[74,2814+56])
                  Texp_apply
                  expression (lib/path.ml[74,2814+37]..lib/path.ml[74,2814+50])
                    Texp_ident "find_free_opt/518"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[74,2814+51]..lib/path.ml[74,2814+54])
                        Texp_ident "ids/519"
                    <arg>
                      Nolabel
                      expression (lib/path.ml[74,2814+55]..lib/path.ml[74,2814+56])
                        Texp_ident "p/521"
                  ]
              <case>
                pattern (lib/path.ml[75,2871+4]..lib/path.ml[75,2871+18])
                  Tpat_construct "Papply"
                  [
                    pattern (lib/path.ml[75,2871+11]..lib/path.ml[75,2871+13])
                      Tpat_var "p1/523"
                    pattern (lib/path.ml[75,2871+15]..lib/path.ml[75,2871+17])
                      Tpat_var "p2/524"
                  ]
                  None
                expression (lib/path.ml[75,2871+22]..lib/path.ml[79,3003+7])
                  Texp_match
                  expression (lib/path.ml[76,2899+12]..lib/path.ml[76,2899+32])
                    Texp_apply
                    expression (lib/path.ml[76,2899+12]..lib/path.ml[76,2899+25])
                      Texp_ident "find_free_opt/518"
                    [
                      <arg>
                        Nolabel
                        expression (lib/path.ml[76,2899+26]..lib/path.ml[76,2899+29])
                          Texp_ident "ids/519"
                      <arg>
                        Nolabel
                        expression (lib/path.ml[76,2899+30]..lib/path.ml[76,2899+32])
                          Texp_ident "p1/523"
                    ]
                  [
                    <case>
                      pattern (lib/path.ml[77,2937+8]..lib/path.ml[77,2937+12])
                        Tpat_value
                        pattern (lib/path.ml[77,2937+8]..lib/path.ml[77,2937+12])
                          Tpat_construct "None"
                          []
                          None
                      expression (lib/path.ml[77,2937+16]..lib/path.ml[77,2937+36])
                        Texp_apply
                        expression (lib/path.ml[77,2937+16]..lib/path.ml[77,2937+29])
                          Texp_ident "find_free_opt/518"
                        [
                          <arg>
                            Nolabel
                            expression (lib/path.ml[77,2937+30]..lib/path.ml[77,2937+33])
                              Texp_ident "ids/519"
                          <arg>
                            Nolabel
                            expression (lib/path.ml[77,2937+34]..lib/path.ml[77,2937+36])
                              Texp_ident "p2/524"
                        ]
                    <case>
                      pattern (lib/path.ml[78,2974+8]..lib/path.ml[78,2974+21])
                        Tpat_value
                        pattern (lib/path.ml[78,2974+8]..lib/path.ml[78,2974+21])
                          Tpat_alias "res/591"
                          pattern (lib/path.ml[78,2974+8]..lib/path.ml[78,2974+14])
                            Tpat_construct "Some"
                            [
                              pattern (lib/path.ml[78,2974+13]..lib/path.ml[78,2974+14])
                                Tpat_any
                            ]
                            None
                      expression (lib/path.ml[78,2974+25]..lib/path.ml[78,2974+28])
                        Texp_ident "res/591"
                  ]
            ]
    ]
  structure_item (lib/path.ml[81,3012+0]..lib/path.ml[84,3087+13])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[81,3012+4]..lib/path.ml[81,3012+15])
          Tpat_var "exists_free/593"
        expression (lib/path.ml[81,3012+16]..lib/path.ml[84,3087+13]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/path.ml[81,3012+16]..lib/path.ml[81,3012+19])
                Tpat_var "ids/595"
            Nolabel
            Param_pat
              pattern (lib/path.ml[81,3012+20]..lib/path.ml[81,3012+21])
                Tpat_var "p/596"
          ]
          Tfunction_body
            expression (lib/path.ml[82,3036+2]..lib/path.ml[84,3087+13])
              Texp_match
              expression (lib/path.ml[82,3036+8]..lib/path.ml[82,3036+27])
                Texp_apply
                expression (lib/path.ml[82,3036+8]..lib/path.ml[82,3036+21])
                  Texp_ident "find_free_opt/518"
                [
                  <arg>
                    Nolabel
                    expression (lib/path.ml[82,3036+22]..lib/path.ml[82,3036+25])
                      Texp_ident "ids/595"
                  <arg>
                    Nolabel
                    expression (lib/path.ml[82,3036+26]..lib/path.ml[82,3036+27])
                      Texp_ident "p/596"
                ]
              [
                <case>
                  pattern (lib/path.ml[83,3069+4]..lib/path.ml[83,3069+8])
                    Tpat_value
                    pattern (lib/path.ml[83,3069+4]..lib/path.ml[83,3069+8])
                      Tpat_construct "None"
                      []
                      None
                  expression (lib/path.ml[83,3069+12]..lib/path.ml[83,3069+17])
                    Texp_construct "false"
                    []
                <case>
                  pattern (lib/path.ml[84,3087+4]..lib/path.ml[84,3087+5])
                    Tpat_value
                    pattern (lib/path.ml[84,3087+4]..lib/path.ml[84,3087+5])
                      Tpat_any
                  expression (lib/path.ml[84,3087+9]..lib/path.ml[84,3087+13])
                    Texp_construct "true"
                    []
              ]
    ]
  structure_item (lib/path.ml[86,3102+0]..lib/path.ml[89,3204+51])
    Tstr_value Rec
    [
      <def>
        pattern (lib/path.ml[86,3102+8]..lib/path.ml[86,3102+13])
          Tpat_var "scope/597"
        expression (lib/path.ml[86,3102+16]..lib/path.ml[89,3204+51])
          Texp_function
          []
          Tfunction_cases (lib/path.ml[86,3102+16]..lib/path.ml[89,3204+51])
            [
              <case>
                pattern (lib/path.ml[87,3127+4]..lib/path.ml[87,3127+13])
                  Tpat_construct "Pident"
                  [
                    pattern (lib/path.ml[87,3127+11]..lib/path.ml[87,3127+13])
                      Tpat_var "id/598"
                  ]
                  None
                expression (lib/path.ml[87,3127+17]..lib/path.ml[87,3127+31])
                  Texp_apply
                  expression (lib/path.ml[87,3127+17]..lib/path.ml[87,3127+28])
                    Texp_ident "Ocaml_ocaml_types!.Ident.scope"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[87,3127+29]..lib/path.ml[87,3127+31])
                        Texp_ident "id/598"
                  ]
              <case>
                pattern (lib/path.ml[88,3159+4]..lib/path.ml[88,3159+33])
                  Tpat_or
                  pattern (lib/path.ml[88,3159+4]..lib/path.ml[88,3159+14])
                    Tpat_construct "Pdot"
                    [
                      pattern (lib/path.ml[88,3159+9]..lib/path.ml[88,3159+10])
                        Tpat_var "p/599"
                      pattern (lib/path.ml[88,3159+12]..lib/path.ml[88,3159+13])
                        Tpat_any
                    ]
                    None
                  pattern (lib/path.ml[88,3159+17]..lib/path.ml[88,3159+33])
                    Tpat_construct "Pextra_ty"
                    [
                      pattern (lib/path.ml[88,3159+28]..lib/path.ml[88,3159+29])
                        Tpat_var "p/599"
                      pattern (lib/path.ml[88,3159+31]..lib/path.ml[88,3159+32])
                        Tpat_any
                    ]
                    None
                expression (lib/path.ml[88,3159+37]..lib/path.ml[88,3159+44])
                  Texp_apply
                  expression (lib/path.ml[88,3159+37]..lib/path.ml[88,3159+42])
                    Texp_ident "scope/597"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[88,3159+43]..lib/path.ml[88,3159+44])
                        Texp_ident "p/599"
                  ]
              <case>
                pattern (lib/path.ml[89,3204+4]..lib/path.ml[89,3204+18])
                  Tpat_construct "Papply"
                  [
                    pattern (lib/path.ml[89,3204+11]..lib/path.ml[89,3204+13])
                      Tpat_var "p1/601"
                    pattern (lib/path.ml[89,3204+15]..lib/path.ml[89,3204+17])
                      Tpat_var "p2/602"
                  ]
                  None
                expression (lib/path.ml[89,3204+22]..lib/path.ml[89,3204+51])
                  Texp_apply
                  expression (lib/path.ml[89,3204+22]..lib/path.ml[89,3204+29])
                    Texp_ident "Stdlib!.Int.max"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[89,3204+30]..lib/path.ml[89,3204+40])
                        Texp_apply
                        expression (lib/path.ml[89,3204+31]..lib/path.ml[89,3204+36])
                          Texp_ident "scope/597"
                        [
                          <arg>
                            Nolabel
                            expression (lib/path.ml[89,3204+37]..lib/path.ml[89,3204+39])
                              Texp_ident "p1/601"
                        ]
                    <arg>
                      Nolabel
                      expression (lib/path.ml[89,3204+41]..lib/path.ml[89,3204+51])
                        Texp_apply
                        expression (lib/path.ml[89,3204+42]..lib/path.ml[89,3204+47])
                          Texp_ident "scope/597"
                        [
                          <arg>
                            Nolabel
                            expression (lib/path.ml[89,3204+48]..lib/path.ml[89,3204+50])
                              Texp_ident "p2/602"
                        ]
                  ]
            ]
    ]
  structure_item (lib/path.ml[91,3257+0]..lib/path.ml[91,3257+20])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[91,3257+4]..lib/path.ml[91,3257+10])
          Tpat_var "kfalse/635"
        expression (lib/path.ml[91,3257+11]..lib/path.ml[91,3257+20]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/path.ml[91,3257+11]..lib/path.ml[91,3257+12])
                Tpat_any
          ]
          Tfunction_body
            expression (lib/path.ml[91,3257+15]..lib/path.ml[91,3257+20])
              Texp_construct "false"
              []
    ]
  structure_item (lib/path.ml[93,3279+0]..lib/path.ml[93,3279+22])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[93,3279+4]..lib/path.ml[93,3279+16])
          Tpat_var "maybe_escape/638"
        expression (lib/path.ml[93,3279+17]..lib/path.ml[93,3279+22]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/path.ml[93,3279+17]..lib/path.ml[93,3279+18])
                Tpat_var "s/640"
          ]
          Tfunction_body
            expression (lib/path.ml[93,3279+21]..lib/path.ml[93,3279+22])
              Texp_ident "s/640"
    ]
  structure_item (lib/path.ml[96,3355+0]..lib/path.ml[102,3653+43])
    Tstr_value Rec
    [
      <def>
        pattern (lib/path.ml[96,3355+8]..lib/path.ml[96,3355+12])
          Tpat_var "name/641"
        expression (lib/path.ml[96,3355+13]..lib/path.ml[102,3653+43]) ghost
          Texp_function
          [
            Optional "paren"
            Param_optional_default
              pattern (lib/path.ml[96,3355+15]..lib/path.ml[96,3355+20])
                Tpat_var "paren/642"
              expression (lib/path.ml[96,3355+21]..lib/path.ml[96,3355+27])
                Texp_ident "kfalse/635"
          ]
          Tfunction_cases (lib/path.ml[96,3355+31]..lib/path.ml[102,3653+43])
            [
              <case>
                pattern (lib/path.ml[97,3395+4]..lib/path.ml[97,3395+13])
                  Tpat_construct "Pident"
                  [
                    pattern (lib/path.ml[97,3395+11]..lib/path.ml[97,3395+13])
                      Tpat_var "id/643"
                  ]
                  None
                expression (lib/path.ml[97,3395+17]..lib/path.ml[97,3395+45])
                  Texp_apply
                  expression (lib/path.ml[97,3395+17]..lib/path.ml[97,3395+29])
                    Texp_ident "maybe_escape/638"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[97,3395+30]..lib/path.ml[97,3395+45])
                        Texp_apply
                        expression (lib/path.ml[97,3395+31]..lib/path.ml[97,3395+41])
                          Texp_ident "Ocaml_ocaml_types!.Ident.name"
                        [
                          <arg>
                            Nolabel
                            expression (lib/path.ml[97,3395+42]..lib/path.ml[97,3395+44])
                              Texp_ident "id/643"
                        ]
                  ]
              <case>
                pattern (lib/path.ml[98,3441+4]..lib/path.ml[98,3441+42])
                  Tpat_or
                  pattern (lib/path.ml[98,3441+4]..lib/path.ml[98,3441+14])
                    Tpat_construct "Pdot"
                    [
                      pattern (lib/path.ml[98,3441+9]..lib/path.ml[98,3441+10])
                        Tpat_var "p/644"
                      pattern (lib/path.ml[98,3441+12]..lib/path.ml[98,3441+13])
                        Tpat_var "s/645"
                    ]
                    None
                  pattern (lib/path.ml[98,3441+17]..lib/path.ml[98,3441+42])
                    Tpat_construct "Pextra_ty"
                    [
                      pattern (lib/path.ml[98,3441+28]..lib/path.ml[98,3441+29])
                        Tpat_var "p/644"
                      pattern (lib/path.ml[98,3441+31]..lib/path.ml[98,3441+41])
                        Tpat_construct "Pcstr_ty"
                        [
                          pattern (lib/path.ml[98,3441+40]..lib/path.ml[98,3441+41])
                            Tpat_var "s/645"
                        ]
                        None
                    ]
                    None
                expression (lib/path.ml[99,3487+6]..lib/path.ml[100,3519+67])
                  Texp_let Nonrec
                  [
                    <def>
                      pattern (lib/path.ml[99,3487+10]..lib/path.ml[99,3487+11])
                        Tpat_var "s/651"
                      expression (lib/path.ml[99,3487+14]..lib/path.ml[99,3487+28])
                        Texp_apply
                        expression (lib/path.ml[99,3487+14]..lib/path.ml[99,3487+26])
                          Texp_ident "maybe_escape/638"
                        [
                          <arg>
                            Nolabel
                            expression (lib/path.ml[99,3487+27]..lib/path.ml[99,3487+28])
                              Texp_ident "s/645"
                        ]
                  ]
                  expression (lib/path.ml[100,3519+6]..lib/path.ml[100,3519+67])
                    Texp_apply
                    expression (lib/path.ml[100,3519+20]..lib/path.ml[100,3519+21])
                      Texp_ident "Stdlib!.^"
                    [
                      <arg>
                        Nolabel
                        expression (lib/path.ml[100,3519+6]..lib/path.ml[100,3519+19])
                          Texp_apply
                          expression (lib/path.ml[100,3519+6]..lib/path.ml[100,3519+10])
                            Texp_ident "name/641"
                          [
                            <arg>
                              Optional "paren"
                              expression (lib/path.ml[100,3519+12]..lib/path.ml[100,3519+17])
                                Texp_construct "Some"
                                [
                                  expression (lib/path.ml[100,3519+12]..lib/path.ml[100,3519+17])
                                    Texp_ident "paren/642"
                                ]
                            <arg>
                              Nolabel
                              expression (lib/path.ml[100,3519+18]..lib/path.ml[100,3519+19])
                                Texp_ident "p/644"
                          ]
                      <arg>
                        Nolabel
                        expression (lib/path.ml[100,3519+22]..lib/path.ml[100,3519+67])
                          Texp_ifthenelse
                          expression (lib/path.ml[100,3519+25]..lib/path.ml[100,3519+32])
                            Texp_apply
                            expression (lib/path.ml[100,3519+25]..lib/path.ml[100,3519+30])
                              Texp_ident "paren/642"
                            [
                              <arg>
                                Nolabel
                                expression (lib/path.ml[100,3519+31]..lib/path.ml[100,3519+32])
                                  Texp_ident "s/651"
                            ]
                          expression (lib/path.ml[100,3519+38]..lib/path.ml[100,3519+54])
                            Texp_apply
                            expression (lib/path.ml[100,3519+44]..lib/path.ml[100,3519+45])
                              Texp_ident "Stdlib!.^"
                            [
                              <arg>
                                Nolabel
                                expression (lib/path.ml[100,3519+38]..lib/path.ml[100,3519+43])
                                  Texp_constant Const_string(".( ",(lib/path.ml[100,3519+39]..lib/path.ml[100,3519+42]),None)
                              <arg>
                                Nolabel
                                expression (lib/path.ml[100,3519+46]..lib/path.ml[100,3519+54])
                                  Texp_apply
                                  expression (lib/path.ml[100,3519+48]..lib/path.ml[100,3519+49])
                                    Texp_ident "Stdlib!.^"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/path.ml[100,3519+46]..lib/path.ml[100,3519+47])
                                        Texp_ident "s/651"
                                    <arg>
                                      Nolabel
                                      expression (lib/path.ml[100,3519+50]..lib/path.ml[100,3519+54])
                                        Texp_constant Const_string(" )",(lib/path.ml[100,3519+51]..lib/path.ml[100,3519+53]),None)
                                  ]
                            ]
                          Some
                            expression (lib/path.ml[100,3519+60]..lib/path.ml[100,3519+67])
                              Texp_apply
                              expression (lib/path.ml[100,3519+64]..lib/path.ml[100,3519+65])
                                Texp_ident "Stdlib!.^"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[100,3519+60]..lib/path.ml[100,3519+63])
                                    Texp_constant Const_string(".",(lib/path.ml[100,3519+61]..lib/path.ml[100,3519+62]),None)
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[100,3519+66]..lib/path.ml[100,3519+67])
                                    Texp_ident "s/651"
                              ]
                    ]
              <case>
                pattern (lib/path.ml[101,3587+4]..lib/path.ml[101,3587+18])
                  Tpat_construct "Papply"
                  [
                    pattern (lib/path.ml[101,3587+11]..lib/path.ml[101,3587+13])
                      Tpat_var "p1/648"
                    pattern (lib/path.ml[101,3587+15]..lib/path.ml[101,3587+17])
                      Tpat_var "p2/649"
                  ]
                  None
                expression (lib/path.ml[101,3587+22]..lib/path.ml[101,3587+65])
                  Texp_apply
                  expression (lib/path.ml[101,3587+37]..lib/path.ml[101,3587+38])
                    Texp_ident "Stdlib!.^"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[101,3587+22]..lib/path.ml[101,3587+36])
                        Texp_apply
                        expression (lib/path.ml[101,3587+22]..lib/path.ml[101,3587+26])
                          Texp_ident "name/641"
                        [
                          <arg>
                            Optional "paren"
                            expression (lib/path.ml[101,3587+28]..lib/path.ml[101,3587+33])
                              Texp_construct "Some"
                              [
                                expression (lib/path.ml[101,3587+28]..lib/path.ml[101,3587+33])
                                  Texp_ident "paren/642"
                              ]
                          <arg>
                            Nolabel
                            expression (lib/path.ml[101,3587+34]..lib/path.ml[101,3587+36])
                              Texp_ident "p1/648"
                        ]
                    <arg>
                      Nolabel
                      expression (lib/path.ml[101,3587+39]..lib/path.ml[101,3587+65])
                        Texp_apply
                        expression (lib/path.ml[101,3587+43]..lib/path.ml[101,3587+44])
                          Texp_ident "Stdlib!.^"
                        [
                          <arg>
                            Nolabel
                            expression (lib/path.ml[101,3587+39]..lib/path.ml[101,3587+42])
                              Texp_constant Const_string("(",(lib/path.ml[101,3587+40]..lib/path.ml[101,3587+41]),None)
                          <arg>
                            Nolabel
                            expression (lib/path.ml[101,3587+45]..lib/path.ml[101,3587+65])
                              Texp_apply
                              expression (lib/path.ml[101,3587+60]..lib/path.ml[101,3587+61])
                                Texp_ident "Stdlib!.^"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[101,3587+45]..lib/path.ml[101,3587+59])
                                    Texp_apply
                                    expression (lib/path.ml[101,3587+45]..lib/path.ml[101,3587+49])
                                      Texp_ident "name/641"
                                    [
                                      <arg>
                                        Optional "paren"
                                        expression (lib/path.ml[101,3587+51]..lib/path.ml[101,3587+56])
                                          Texp_construct "Some"
                                          [
                                            expression (lib/path.ml[101,3587+51]..lib/path.ml[101,3587+56])
                                              Texp_ident "paren/642"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (lib/path.ml[101,3587+57]..lib/path.ml[101,3587+59])
                                          Texp_ident "p2/649"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[101,3587+62]..lib/path.ml[101,3587+65])
                                    Texp_constant Const_string(")",(lib/path.ml[101,3587+63]..lib/path.ml[101,3587+64]),None)
                              ]
                        ]
                  ]
              <case>
                pattern (lib/path.ml[102,3653+4]..lib/path.ml[102,3653+26])
                  Tpat_construct "Pextra_ty"
                  [
                    pattern (lib/path.ml[102,3653+15]..lib/path.ml[102,3653+16])
                      Tpat_var "p/650"
                    pattern (lib/path.ml[102,3653+18]..lib/path.ml[102,3653+25])
                      Tpat_construct "Pext_ty"
                      []
                      None
                  ]
                  None
                expression (lib/path.ml[102,3653+30]..lib/path.ml[102,3653+43])
                  Texp_apply
                  expression (lib/path.ml[102,3653+30]..lib/path.ml[102,3653+34])
                    Texp_ident "name/641"
                  [
                    <arg>
                      Optional "paren"
                      expression (lib/path.ml[102,3653+36]..lib/path.ml[102,3653+41])
                        Texp_construct "Some"
                        [
                          expression (lib/path.ml[102,3653+36]..lib/path.ml[102,3653+41])
                            Texp_ident "paren/642"
                        ]
                    <arg>
                      Nolabel
                      expression (lib/path.ml[102,3653+42]..lib/path.ml[102,3653+43])
                        Texp_ident "p/650"
                  ]
            ]
    ]
  structure_item (lib/path.ml[104,3698+0]..lib/path.ml[109,3931+41])
    Tstr_value Rec
    [
      <def>
        pattern (lib/path.ml[104,3698+8]..lib/path.ml[104,3698+13])
          Tpat_var "print/654"
        expression (lib/path.ml[104,3698+14]..lib/path.ml[109,3931+41]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/path.ml[104,3698+14]..lib/path.ml[104,3698+17])
                Tpat_var "ppf/655"
          ]
          Tfunction_cases (lib/path.ml[104,3698+20]..lib/path.ml[109,3931+41])
            [
              <case>
                pattern (lib/path.ml[105,3727+4]..lib/path.ml[105,3727+13])
                  Tpat_construct "Pident"
                  [
                    pattern (lib/path.ml[105,3727+11]..lib/path.ml[105,3727+13])
                      Tpat_var "id/656"
                  ]
                  None
                expression (lib/path.ml[105,3727+17]..lib/path.ml[105,3727+46])
                  Texp_apply
                  expression (lib/path.ml[105,3727+17]..lib/path.ml[105,3727+39])
                    Texp_ident "Ocaml_ocaml_types!.Ident.print_with_scope"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[105,3727+40]..lib/path.ml[105,3727+43])
                        Texp_ident "ppf/655"
                    <arg>
                      Nolabel
                      expression (lib/path.ml[105,3727+44]..lib/path.ml[105,3727+46])
                        Texp_ident "id/656"
                  ]
              <case>
                pattern (lib/path.ml[106,3774+4]..lib/path.ml[106,3774+42])
                  Tpat_or
                  pattern (lib/path.ml[106,3774+4]..lib/path.ml[106,3774+14])
                    Tpat_construct "Pdot"
                    [
                      pattern (lib/path.ml[106,3774+9]..lib/path.ml[106,3774+10])
                        Tpat_var "p/657"
                      pattern (lib/path.ml[106,3774+12]..lib/path.ml[106,3774+13])
                        Tpat_var "s/658"
                    ]
                    None
                  pattern (lib/path.ml[106,3774+17]..lib/path.ml[106,3774+42])
                    Tpat_construct "Pextra_ty"
                    [
                      pattern (lib/path.ml[106,3774+28]..lib/path.ml[106,3774+29])
                        Tpat_var "p/657"
                      pattern (lib/path.ml[106,3774+31]..lib/path.ml[106,3774+41])
                        Tpat_construct "Pcstr_ty"
                        [
                          pattern (lib/path.ml[106,3774+40]..lib/path.ml[106,3774+41])
                            Tpat_var "s/658"
                        ]
                        None
                    ]
                    None
                expression (lib/path.ml[107,3820+6]..lib/path.ml[107,3820+42])
                  Texp_apply
                  expression (lib/path.ml[107,3820+6]..lib/path.ml[107,3820+20])
                    Texp_ident "Stdlib!.Format.fprintf"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[107,3820+21]..lib/path.ml[107,3820+24])
                        Texp_ident "ppf/655"
                    <arg>
                      Nolabel
                      expression (lib/path.ml[107,3820+25]..lib/path.ml[107,3820+32])
                        Texp_construct "CamlinternalFormatBasics.Format"
                        [
                          expression (lib/path.ml[107,3820+25]..lib/path.ml[107,3820+32]) ghost
                            Texp_construct "CamlinternalFormatBasics.Alpha"
                            [
                              expression (lib/path.ml[107,3820+25]..lib/path.ml[107,3820+32]) ghost
                                Texp_construct "CamlinternalFormatBasics.Char_literal"
                                [
                                  expression (lib/path.ml[107,3820+25]..lib/path.ml[107,3820+32]) ghost
                                    Texp_constant Const_char 2e
                                  expression (lib/path.ml[107,3820+25]..lib/path.ml[107,3820+32]) ghost
                                    Texp_construct "CamlinternalFormatBasics.String"
                                    [
                                      expression (lib/path.ml[107,3820+25]..lib/path.ml[107,3820+32]) ghost
                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                        []
                                      expression (lib/path.ml[107,3820+25]..lib/path.ml[107,3820+32]) ghost
                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                        []
                                    ]
                                ]
                            ]
                          expression (lib/path.ml[107,3820+25]..lib/path.ml[107,3820+32]) ghost
                            Texp_constant Const_string("%a.%s",(lib/path.ml[107,3820+25]..lib/path.ml[107,3820+32]) ghost,None)
                        ]
                    <arg>
                      Nolabel
                      expression (lib/path.ml[107,3820+33]..lib/path.ml[107,3820+38])
                        Texp_ident "print/654"
                    <arg>
                      Nolabel
                      expression (lib/path.ml[107,3820+39]..lib/path.ml[107,3820+40])
                        Texp_ident "p/657"
                    <arg>
                      Nolabel
                      expression (lib/path.ml[107,3820+41]..lib/path.ml[107,3820+42])
                        Texp_ident "s/658"
                  ]
              <case>
                pattern (lib/path.ml[108,3863+4]..lib/path.ml[108,3863+18])
                  Tpat_construct "Papply"
                  [
                    pattern (lib/path.ml[108,3863+11]..lib/path.ml[108,3863+13])
                      Tpat_var "p1/661"
                    pattern (lib/path.ml[108,3863+15]..lib/path.ml[108,3863+17])
                      Tpat_var "p2/662"
                  ]
                  None
                expression (lib/path.ml[108,3863+22]..lib/path.ml[108,3863+67])
                  Texp_apply
                  expression (lib/path.ml[108,3863+22]..lib/path.ml[108,3863+36])
                    Texp_ident "Stdlib!.Format.fprintf"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[108,3863+37]..lib/path.ml[108,3863+40])
                        Texp_ident "ppf/655"
                    <arg>
                      Nolabel
                      expression (lib/path.ml[108,3863+41]..lib/path.ml[108,3863+49])
                        Texp_construct "CamlinternalFormatBasics.Format"
                        [
                          expression (lib/path.ml[108,3863+41]..lib/path.ml[108,3863+49]) ghost
                            Texp_construct "CamlinternalFormatBasics.Alpha"
                            [
                              expression (lib/path.ml[108,3863+41]..lib/path.ml[108,3863+49]) ghost
                                Texp_construct "CamlinternalFormatBasics.Char_literal"
                                [
                                  expression (lib/path.ml[108,3863+41]..lib/path.ml[108,3863+49]) ghost
                                    Texp_constant Const_char 28
                                  expression (lib/path.ml[108,3863+41]..lib/path.ml[108,3863+49]) ghost
                                    Texp_construct "CamlinternalFormatBasics.Alpha"
                                    [
                                      expression (lib/path.ml[108,3863+41]..lib/path.ml[108,3863+49]) ghost
                                        Texp_construct "CamlinternalFormatBasics.Char_literal"
                                        [
                                          expression (lib/path.ml[108,3863+41]..lib/path.ml[108,3863+49]) ghost
                                            Texp_constant Const_char 29
                                          expression (lib/path.ml[108,3863+41]..lib/path.ml[108,3863+49]) ghost
                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                            []
                                        ]
                                    ]
                                ]
                            ]
                          expression (lib/path.ml[108,3863+41]..lib/path.ml[108,3863+49]) ghost
                            Texp_constant Const_string("%a(%a)",(lib/path.ml[108,3863+41]..lib/path.ml[108,3863+49]) ghost,None)
                        ]
                    <arg>
                      Nolabel
                      expression (lib/path.ml[108,3863+50]..lib/path.ml[108,3863+55])
                        Texp_ident "print/654"
                    <arg>
                      Nolabel
                      expression (lib/path.ml[108,3863+56]..lib/path.ml[108,3863+58])
                        Texp_ident "p1/661"
                    <arg>
                      Nolabel
                      expression (lib/path.ml[108,3863+59]..lib/path.ml[108,3863+64])
                        Texp_ident "print/654"
                    <arg>
                      Nolabel
                      expression (lib/path.ml[108,3863+65]..lib/path.ml[108,3863+67])
                        Texp_ident "p2/662"
                  ]
              <case>
                pattern (lib/path.ml[109,3931+4]..lib/path.ml[109,3931+26])
                  Tpat_construct "Pextra_ty"
                  [
                    pattern (lib/path.ml[109,3931+15]..lib/path.ml[109,3931+16])
                      Tpat_var "p/663"
                    pattern (lib/path.ml[109,3931+18]..lib/path.ml[109,3931+25])
                      Tpat_construct "Pext_ty"
                      []
                      None
                  ]
                  None
                expression (lib/path.ml[109,3931+30]..lib/path.ml[109,3931+41])
                  Texp_apply
                  expression (lib/path.ml[109,3931+30]..lib/path.ml[109,3931+35])
                    Texp_ident "print/654"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[109,3931+36]..lib/path.ml[109,3931+39])
                        Texp_ident "ppf/655"
                    <arg>
                      Nolabel
                      expression (lib/path.ml[109,3931+40]..lib/path.ml[109,3931+41])
                        Texp_ident "p/663"
                  ]
            ]
    ]
  structure_item (lib/path.ml[111,3974+0]..lib/path.ml[114,4062+28])
    Tstr_value Rec
    [
      <def>
        pattern (lib/path.ml[111,3974+8]..lib/path.ml[111,3974+12])
          Tpat_var "head/1004"
        expression (lib/path.ml[111,3974+15]..lib/path.ml[114,4062+28])
          Texp_function
          []
          Tfunction_cases (lib/path.ml[111,3974+15]..lib/path.ml[114,4062+28])
            [
              <case>
                pattern (lib/path.ml[112,3998+4]..lib/path.ml[112,3998+13])
                  Tpat_construct "Pident"
                  [
                    pattern (lib/path.ml[112,3998+11]..lib/path.ml[112,3998+13])
                      Tpat_var "id/1005"
                  ]
                  None
                expression (lib/path.ml[112,3998+17]..lib/path.ml[112,3998+19])
                  Texp_ident "id/1005"
              <case>
                pattern (lib/path.ml[113,4018+4]..lib/path.ml[113,4018+33])
                  Tpat_or
                  pattern (lib/path.ml[113,4018+4]..lib/path.ml[113,4018+14])
                    Tpat_construct "Pdot"
                    [
                      pattern (lib/path.ml[113,4018+9]..lib/path.ml[113,4018+10])
                        Tpat_var "p/1006"
                      pattern (lib/path.ml[113,4018+12]..lib/path.ml[113,4018+13])
                        Tpat_any
                    ]
                    None
                  pattern (lib/path.ml[113,4018+17]..lib/path.ml[113,4018+33])
                    Tpat_construct "Pextra_ty"
                    [
                      pattern (lib/path.ml[113,4018+28]..lib/path.ml[113,4018+29])
                        Tpat_var "p/1006"
                      pattern (lib/path.ml[113,4018+31]..lib/path.ml[113,4018+32])
                        Tpat_any
                    ]
                    None
                expression (lib/path.ml[113,4018+37]..lib/path.ml[113,4018+43])
                  Texp_apply
                  expression (lib/path.ml[113,4018+37]..lib/path.ml[113,4018+41])
                    Texp_ident "head/1004"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[113,4018+42]..lib/path.ml[113,4018+43])
                        Texp_ident "p/1006"
                  ]
              <case>
                pattern (lib/path.ml[114,4062+4]..lib/path.ml[114,4062+12])
                  Tpat_construct "Papply"
                  [
                    pattern (lib/path.ml[114,4062+11]..lib/path.ml[114,4062+12])
                      Tpat_any
                    pattern (lib/path.ml[114,4062+11]..lib/path.ml[114,4062+12])
                      Tpat_any
                  ]
                  None
                expression (lib/path.ml[114,4062+16]..lib/path.ml[114,4062+28])
                  Texp_assert                  expression (lib/path.ml[114,4062+23]..lib/path.ml[114,4062+28])
                    Texp_construct "false"
                    []
            ]
    ]
  structure_item (lib/path.ml[116,4092+0]..lib/path.ml[123,4327+23])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[116,4092+4]..lib/path.ml[116,4092+11])
          Tpat_var "flatten/1009"
        expression (lib/path.ml[117,4106+2]..lib/path.ml[123,4327+23])
          Texp_let Rec
          [
            <def>
              pattern (lib/path.ml[117,4106+10]..lib/path.ml[117,4106+17])
                Tpat_var "flatten/1010"
              expression (lib/path.ml[117,4106+18]..lib/path.ml[121,4276+45]) ghost
                Texp_function
                [
                  Nolabel
                  Param_pat
                    pattern (lib/path.ml[117,4106+18]..lib/path.ml[117,4106+21])
                      Tpat_var "acc/1011"
                ]
                Tfunction_cases (lib/path.ml[117,4106+24]..lib/path.ml[121,4276+45])
                  [
                    <case>
                      pattern (lib/path.ml[118,4139+6]..lib/path.ml[118,4139+15])
                        Tpat_construct "Pident"
                        [
                          pattern (lib/path.ml[118,4139+13]..lib/path.ml[118,4139+15])
                            Tpat_var "id/1012"
                        ]
                        None
                      expression (lib/path.ml[118,4139+19]..lib/path.ml[118,4139+32])
                        Texp_variant "Ok"
                        Some
                          expression (lib/path.ml[118,4139+23]..lib/path.ml[118,4139+32])
                            Texp_tuple
                            [
                              expression (lib/path.ml[118,4139+24]..lib/path.ml[118,4139+26])
                                Texp_ident "id/1012"
                              expression (lib/path.ml[118,4139+28]..lib/path.ml[118,4139+31])
                                Texp_ident "acc/1011"
                            ]
                    <case>
                      pattern (lib/path.ml[119,4172+6]..lib/path.ml[119,4172+45])
                        Tpat_or
                        pattern (lib/path.ml[119,4172+6]..lib/path.ml[119,4172+17])
                          Tpat_construct "Pdot"
                          [
                            pattern (lib/path.ml[119,4172+12]..lib/path.ml[119,4172+13])
                              Tpat_var "p/1013"
                            pattern (lib/path.ml[119,4172+15]..lib/path.ml[119,4172+16])
                              Tpat_var "s/1014"
                          ]
                          None
                        pattern (lib/path.ml[119,4172+20]..lib/path.ml[119,4172+45])
                          Tpat_construct "Pextra_ty"
                          [
                            pattern (lib/path.ml[119,4172+31]..lib/path.ml[119,4172+32])
                              Tpat_var "p/1013"
                            pattern (lib/path.ml[119,4172+34]..lib/path.ml[119,4172+44])
                              Tpat_construct "Pcstr_ty"
                              [
                                pattern (lib/path.ml[119,4172+43]..lib/path.ml[119,4172+44])
                                  Tpat_var "s/1014"
                              ]
                              None
                          ]
                          None
                      expression (lib/path.ml[119,4172+49]..lib/path.ml[119,4172+69])
                        Texp_apply
                        expression (lib/path.ml[119,4172+49]..lib/path.ml[119,4172+56])
                          Texp_ident "flatten/1010"
                        [
                          <arg>
                            Nolabel
                            expression (lib/path.ml[119,4172+57]..lib/path.ml[119,4172+67])
                              Texp_construct "::"
                              [
                                expression (lib/path.ml[119,4172+58]..lib/path.ml[119,4172+59])
                                  Texp_ident "s/1014"
                                expression (lib/path.ml[119,4172+63]..lib/path.ml[119,4172+66])
                                  Texp_ident "acc/1011"
                              ]
                          <arg>
                            Nolabel
                            expression (lib/path.ml[119,4172+68]..lib/path.ml[119,4172+69])
                              Texp_ident "p/1013"
                        ]
                    <case>
                      pattern (lib/path.ml[120,4242+6]..lib/path.ml[120,4242+14])
                        Tpat_construct "Papply"
                        [
                          pattern (lib/path.ml[120,4242+13]..lib/path.ml[120,4242+14])
                            Tpat_any
                          pattern (lib/path.ml[120,4242+13]..lib/path.ml[120,4242+14])
                            Tpat_any
                        ]
                        None
                      expression (lib/path.ml[120,4242+18]..lib/path.ml[120,4242+33])
                        Texp_variant "Contains_apply"
                        None
                    <case>
                      pattern (lib/path.ml[121,4276+6]..lib/path.ml[121,4276+28])
                        Tpat_construct "Pextra_ty"
                        [
                          pattern (lib/path.ml[121,4276+17]..lib/path.ml[121,4276+18])
                            Tpat_var "p/1017"
                          pattern (lib/path.ml[121,4276+20]..lib/path.ml[121,4276+27])
                            Tpat_construct "Pext_ty"
                            []
                            None
                        ]
                        None
                      expression (lib/path.ml[121,4276+32]..lib/path.ml[121,4276+45])
                        Texp_apply
                        expression (lib/path.ml[121,4276+32]..lib/path.ml[121,4276+39])
                          Texp_ident "flatten/1010"
                        [
                          <arg>
                            Nolabel
                            expression (lib/path.ml[121,4276+40]..lib/path.ml[121,4276+43])
                              Texp_ident "acc/1011"
                          <arg>
                            Nolabel
                            expression (lib/path.ml[121,4276+44]..lib/path.ml[121,4276+45])
                              Texp_ident "p/1017"
                        ]
                  ]
          ]
          expression (lib/path.ml[123,4327+2]..lib/path.ml[123,4327+23])
            Texp_function
            [
              Nolabel
              Param_pat
                pattern (lib/path.ml[123,4327+6]..lib/path.ml[123,4327+7])
                  Tpat_var "t/1019"
            ]
            Tfunction_body
              expression (lib/path.ml[123,4327+11]..lib/path.ml[123,4327+23])
                Texp_apply
                expression (lib/path.ml[123,4327+11]..lib/path.ml[123,4327+18])
                  Texp_ident "flatten/1010"
                [
                  <arg>
                    Nolabel
                    expression (lib/path.ml[123,4327+19]..lib/path.ml[123,4327+21])
                      Texp_construct "[]"
                      []
                  <arg>
                    Nolabel
                    expression (lib/path.ml[123,4327+22]..lib/path.ml[123,4327+23])
                      Texp_ident "t/1019"
                ]
    ]
  structure_item (lib/path.ml[125,4352+0]..lib/path.ml[131,4540+15])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[125,4352+4]..lib/path.ml[125,4352+9])
          Tpat_var "heads/1020"
        expression (lib/path.ml[125,4352+10]..lib/path.ml[131,4540+15]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/path.ml[125,4352+10]..lib/path.ml[125,4352+11])
                Tpat_var "p/1022"
          ]
          Tfunction_body
            expression (lib/path.ml[126,4366+2]..lib/path.ml[131,4540+15])
              Texp_let Rec
              [
                <def>
                  pattern (lib/path.ml[126,4366+10]..lib/path.ml[126,4366+15])
                    Tpat_var "heads/1023"
                  expression (lib/path.ml[126,4366+16]..lib/path.ml[130,4508+31]) ghost
                    Texp_function
                    [
                      Nolabel
                      Param_pat
                        pattern (lib/path.ml[126,4366+16]..lib/path.ml[126,4366+17])
                          Tpat_var "p/1024"
                      Nolabel
                      Param_pat
                        pattern (lib/path.ml[126,4366+18]..lib/path.ml[126,4366+21])
                          Tpat_var "acc/1025"
                    ]
                    Tfunction_body
                      expression (lib/path.ml[126,4366+24]..lib/path.ml[130,4508+31])
                        Texp_match
                        expression (lib/path.ml[126,4366+30]..lib/path.ml[126,4366+31])
                          Texp_ident "p/1024"
                        [
                          <case>
                            pattern (lib/path.ml[127,4403+6]..lib/path.ml[127,4403+15])
                              Tpat_value
                              pattern (lib/path.ml[127,4403+6]..lib/path.ml[127,4403+15])
                                Tpat_construct "Pident"
                                [
                                  pattern (lib/path.ml[127,4403+13]..lib/path.ml[127,4403+15])
                                    Tpat_var "id/1026"
                                ]
                                None
                            expression (lib/path.ml[127,4403+19]..lib/path.ml[127,4403+28])
                              Texp_construct "::"
                              [
                                expression (lib/path.ml[127,4403+19]..lib/path.ml[127,4403+21])
                                  Texp_ident "id/1026"
                                expression (lib/path.ml[127,4403+25]..lib/path.ml[127,4403+28])
                                  Texp_ident "acc/1025"
                              ]
                          <case>
                            pattern (lib/path.ml[128,4432+6]..lib/path.ml[128,4432+36])
                              Tpat_or
                              pattern (lib/path.ml[128,4432+6]..lib/path.ml[128,4432+17])
                                Tpat_value
                                pattern (lib/path.ml[128,4432+6]..lib/path.ml[128,4432+17])
                                  Tpat_construct "Pdot"
                                  [
                                    pattern (lib/path.ml[128,4432+12]..lib/path.ml[128,4432+13])
                                      Tpat_var "p/1027"
                                    pattern (lib/path.ml[128,4432+15]..lib/path.ml[128,4432+16])
                                      Tpat_any
                                  ]
                                  None
                              pattern (lib/path.ml[128,4432+20]..lib/path.ml[128,4432+36])
                                Tpat_value
                                pattern (lib/path.ml[128,4432+20]..lib/path.ml[128,4432+36])
                                  Tpat_construct "Pextra_ty"
                                  [
                                    pattern (lib/path.ml[128,4432+31]..lib/path.ml[128,4432+32])
                                      Tpat_var "p/1027"
                                    pattern (lib/path.ml[128,4432+34]..lib/path.ml[128,4432+35])
                                      Tpat_any
                                  ]
                                  None
                            expression (lib/path.ml[128,4432+40]..lib/path.ml[128,4432+51])
                              Texp_apply
                              expression (lib/path.ml[128,4432+40]..lib/path.ml[128,4432+45])
                                Texp_ident "heads/1023"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[128,4432+46]..lib/path.ml[128,4432+47])
                                    Texp_ident "p/1027"
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[128,4432+48]..lib/path.ml[128,4432+51])
                                    Texp_ident "acc/1025"
                              ]
                          <case>
                            pattern (lib/path.ml[129,4484+6]..lib/path.ml[129,4484+20])
                              Tpat_value
                              pattern (lib/path.ml[129,4484+6]..lib/path.ml[129,4484+20])
                                Tpat_construct "Papply"
                                [
                                  pattern (lib/path.ml[129,4484+13]..lib/path.ml[129,4484+15])
                                    Tpat_var "p1/1029"
                                  pattern (lib/path.ml[129,4484+17]..lib/path.ml[129,4484+19])
                                    Tpat_var "p2/1030"
                                ]
                                None
                            expression (lib/path.ml[130,4508+8]..lib/path.ml[130,4508+31])
                              Texp_apply
                              expression (lib/path.ml[130,4508+8]..lib/path.ml[130,4508+13])
                                Texp_ident "heads/1023"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[130,4508+14]..lib/path.ml[130,4508+16])
                                    Texp_ident "p1/1029"
                                <arg>
                                  Nolabel
                                  expression (lib/path.ml[130,4508+17]..lib/path.ml[130,4508+31])
                                    Texp_apply
                                    expression (lib/path.ml[130,4508+18]..lib/path.ml[130,4508+23])
                                      Texp_ident "heads/1023"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/path.ml[130,4508+24]..lib/path.ml[130,4508+26])
                                          Texp_ident "p2/1030"
                                      <arg>
                                        Nolabel
                                        expression (lib/path.ml[130,4508+27]..lib/path.ml[130,4508+30])
                                          Texp_ident "acc/1025"
                                    ]
                              ]
                        ]
              ]
              expression (lib/path.ml[131,4540+5]..lib/path.ml[131,4540+15])
                Texp_apply
                expression (lib/path.ml[131,4540+5]..lib/path.ml[131,4540+10])
                  Texp_ident "heads/1023"
                [
                  <arg>
                    Nolabel
                    expression (lib/path.ml[131,4540+11]..lib/path.ml[131,4540+12])
                      Texp_ident "p/1022"
                  <arg>
                    Nolabel
                    expression (lib/path.ml[131,4540+13]..lib/path.ml[131,4540+15])
                      Texp_construct "[]"
                      []
                ]
    ]
  structure_item (lib/path.ml[133,4557+0]..lib/path.ml[136,4660+51])
    Tstr_value Rec
    [
      <def>
        pattern (lib/path.ml[133,4557+8]..lib/path.ml[133,4557+12])
          Tpat_var "last/1031"
        expression (lib/path.ml[133,4557+15]..lib/path.ml[136,4660+51])
          Texp_function
          []
          Tfunction_cases (lib/path.ml[133,4557+15]..lib/path.ml[136,4660+51])
            [
              <case>
                pattern (lib/path.ml[134,4581+4]..lib/path.ml[134,4581+13])
                  Tpat_construct "Pident"
                  [
                    pattern (lib/path.ml[134,4581+11]..lib/path.ml[134,4581+13])
                      Tpat_var "id/1032"
                  ]
                  None
                expression (lib/path.ml[134,4581+17]..lib/path.ml[134,4581+30])
                  Texp_apply
                  expression (lib/path.ml[134,4581+17]..lib/path.ml[134,4581+27])
                    Texp_ident "Ocaml_ocaml_types!.Ident.name"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[134,4581+28]..lib/path.ml[134,4581+30])
                        Texp_ident "id/1032"
                  ]
              <case>
                pattern (lib/path.ml[135,4612+4]..lib/path.ml[135,4612+42])
                  Tpat_or
                  pattern (lib/path.ml[135,4612+4]..lib/path.ml[135,4612+14])
                    Tpat_construct "Pdot"
                    [
                      pattern (lib/path.ml[135,4612+9]..lib/path.ml[135,4612+10])
                        Tpat_any
                      pattern (lib/path.ml[135,4612+12]..lib/path.ml[135,4612+13])
                        Tpat_var "s/1033"
                    ]
                    None
                  pattern (lib/path.ml[135,4612+17]..lib/path.ml[135,4612+42])
                    Tpat_construct "Pextra_ty"
                    [
                      pattern (lib/path.ml[135,4612+28]..lib/path.ml[135,4612+29])
                        Tpat_any
                      pattern (lib/path.ml[135,4612+31]..lib/path.ml[135,4612+41])
                        Tpat_construct "Pcstr_ty"
                        [
                          pattern (lib/path.ml[135,4612+40]..lib/path.ml[135,4612+41])
                            Tpat_var "s/1033"
                        ]
                        None
                    ]
                    None
                expression (lib/path.ml[135,4612+46]..lib/path.ml[135,4612+47])
                  Texp_ident "s/1033"
              <case>
                pattern (lib/path.ml[136,4660+4]..lib/path.ml[136,4660+41])
                  Tpat_or
                  pattern (lib/path.ml[136,4660+4]..lib/path.ml[136,4660+16])
                    Tpat_construct "Papply"
                    [
                      pattern (lib/path.ml[136,4660+11]..lib/path.ml[136,4660+12])
                        Tpat_any
                      pattern (lib/path.ml[136,4660+14]..lib/path.ml[136,4660+15])
                        Tpat_var "p/1035"
                    ]
                    None
                  pattern (lib/path.ml[136,4660+19]..lib/path.ml[136,4660+41])
                    Tpat_construct "Pextra_ty"
                    [
                      pattern (lib/path.ml[136,4660+30]..lib/path.ml[136,4660+31])
                        Tpat_var "p/1035"
                      pattern (lib/path.ml[136,4660+33]..lib/path.ml[136,4660+40])
                        Tpat_construct "Pext_ty"
                        []
                        None
                    ]
                    None
                expression (lib/path.ml[136,4660+45]..lib/path.ml[136,4660+51])
                  Texp_apply
                  expression (lib/path.ml[136,4660+45]..lib/path.ml[136,4660+49])
                    Texp_ident "last/1031"
                  [
                    <arg>
                      Nolabel
                      expression (lib/path.ml[136,4660+50]..lib/path.ml[136,4660+51])
                        Texp_ident "p/1035"
                  ]
            ]
    ]
  structure_item (lib/path.ml[138,4713+0]..lib/path.ml[141,4800+23])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/path.ml[138,4713+4]..lib/path.ml[138,4713+25])
          Tpat_var "is_constructor_typath/1038"
        expression (lib/path.ml[138,4713+26]..lib/path.ml[141,4800+23]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/path.ml[138,4713+26]..lib/path.ml[138,4713+27])
                Tpat_var "p/1040"
          ]
          Tfunction_body
            expression (lib/path.ml[139,4743+2]..lib/path.ml[141,4800+23])
              Texp_match
              expression (lib/path.ml[139,4743+8]..lib/path.ml[139,4743+9])
                Texp_ident "p/1040"
              [
                <case>
                  pattern (lib/path.ml[140,4758+4]..lib/path.ml[140,4758+32])
                    Tpat_or
                    pattern (lib/path.ml[140,4758+4]..lib/path.ml[140,4758+21])
                      Tpat_or
                      pattern (lib/path.ml[140,4758+4]..lib/path.ml[140,4758+12])
                        Tpat_value
                        pattern (lib/path.ml[140,4758+4]..lib/path.ml[140,4758+12])
                          Tpat_construct "Pident"
                          [
                            pattern (lib/path.ml[140,4758+11]..lib/path.ml[140,4758+12])
                              Tpat_any
                          ]
                          None
                      pattern (lib/path.ml[140,4758+15]..lib/path.ml[140,4758+21])
                        Tpat_value
                        pattern (lib/path.ml[140,4758+15]..lib/path.ml[140,4758+21])
                          Tpat_construct "Pdot"
                          [
                            pattern (lib/path.ml[140,4758+20]..lib/path.ml[140,4758+21])
                              Tpat_any
                            pattern (lib/path.ml[140,4758+20]..lib/path.ml[140,4758+21])
                              Tpat_any
                          ]
                          None
                    pattern (lib/path.ml[140,4758+24]..lib/path.ml[140,4758+32])
                      Tpat_value
                      pattern (lib/path.ml[140,4758+24]..lib/path.ml[140,4758+32])
                        Tpat_construct "Papply"
                        [
                          pattern (lib/path.ml[140,4758+31]..lib/path.ml[140,4758+32])
                            Tpat_any
                          pattern (lib/path.ml[140,4758+31]..lib/path.ml[140,4758+32])
                            Tpat_any
                        ]
                        None
                  expression (lib/path.ml[140,4758+36]..lib/path.ml[140,4758+41])
                    Texp_construct "false"
                    []
                <case>
                  pattern (lib/path.ml[141,4800+4]..lib/path.ml[141,4800+15])
                    Tpat_value
                    pattern (lib/path.ml[141,4800+4]..lib/path.ml[141,4800+15])
                      Tpat_construct "Pextra_ty"
                      [
                        pattern (lib/path.ml[141,4800+14]..lib/path.ml[141,4800+15])
                          Tpat_any
                        pattern (lib/path.ml[141,4800+14]..lib/path.ml[141,4800+15])
                          Tpat_any
                      ]
                      None
                  expression (lib/path.ml[141,4800+19]..lib/path.ml[141,4800+23])
                    Texp_construct "true"
                    []
              ]
    ]
  structure_item (lib/path.ml[143,4825+0]..lib/path.ml[146,4887+3])
    Tstr_module
    T/1043
      module_expr (lib/path.ml[143,4825+11]..lib/path.ml[146,4887+3])
        Tmod_structure
        [
          structure_item (lib/path.ml[144,4843+2]..lib/path.ml[144,4843+19])
            Tstr_type Nonrec
            [
              type_declaration t/1041 (lib/path.ml[144,4843+2]..lib/path.ml[144,4843+19])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/path.ml[144,4843+18]..lib/path.ml[144,4843+19])
                      Ttyp_constr "t/292"
                      []
            ]
          structure_item (lib/path.ml[145,4863+2]..lib/path.ml[145,4863+23])
            Tstr_value Nonrec
            [
              <def>
                pattern (lib/path.ml[145,4863+6]..lib/path.ml[145,4863+13])
                  Tpat_var "compare/1042"
                expression (lib/path.ml[145,4863+16]..lib/path.ml[145,4863+23])
                  Texp_ident "compare/424"
            ]
        ]
  structure_item (lib/path.ml[147,4891+0]..lib/path.ml[147,4891+24])
    Tstr_module
    Set/1195
      module_expr (lib/path.ml[147,4891+13]..lib/path.ml[147,4891+24])
        Tmod_apply
        module_expr (lib/path.ml[147,4891+13]..lib/path.ml[147,4891+21])
          module_expr (lib/path.ml[147,4891+13]..lib/path.ml[147,4891+21])
            Tmod_ident "Ocaml_ocaml_types!.Set.Make"
        module_expr (lib/path.ml[147,4891+22]..lib/path.ml[147,4891+23])
          Tmod_ident "T/1043"
  structure_item (lib/path.ml[148,4916+0]..lib/path.ml[148,4916+24])
    Tstr_module
    Map/1297
      module_expr (lib/path.ml[148,4916+13]..lib/path.ml[148,4916+24])
        Tmod_apply
        module_expr (lib/path.ml[148,4916+13]..lib/path.ml[148,4916+21])
          module_expr (lib/path.ml[148,4916+13]..lib/path.ml[148,4916+21])
            Tmod_ident "Stdlib!.Map.Make"
        module_expr (lib/path.ml[148,4916+22]..lib/path.ml[148,4916+23])
          Tmod_ident "T/1043"
]

{<Ocaml_ocaml_types__Path>
 "Map"[module] ->
   CU Stdlib . "Map"[module] . "Make"[module](
   {<Ocaml_ocaml_types__Path.122>
    "compare"[value] -> <Ocaml_ocaml_types__Path.121>;
    "t"[type] -> <Ocaml_ocaml_types__Path.120>;
    })<Ocaml_ocaml_types__Path.124>;
 "Set"[module] ->
   CU Ocaml_ocaml_types . "Set"[module] . "Make"[module](
   {<Ocaml_ocaml_types__Path.122>
    "compare"[value] -> <Ocaml_ocaml_types__Path.121>;
    "t"[type] -> <Ocaml_ocaml_types__Path.120>;
    })<Ocaml_ocaml_types__Path.123>;
 "T"[module] ->
   {<Ocaml_ocaml_types__Path.122>
    "compare"[value] -> <Ocaml_ocaml_types__Path.121>;
    "t"[type] -> <Ocaml_ocaml_types__Path.120>;
    };
 "compare"[value] -> <Ocaml_ocaml_types__Path.34>;
 "compare_extra"[value] -> <Ocaml_ocaml_types__Path.35>;
 "exists_free"[value] -> <Ocaml_ocaml_types__Path.66>;
 "extra_ty"[type] -> <Ocaml_ocaml_types__Path.1>;
 "find_free_opt"[value] -> <Ocaml_ocaml_types__Path.59>;
 "flatten"[value] -> <Ocaml_ocaml_types__Path.97>;
 "head"[value] -> <Ocaml_ocaml_types__Path.94>;
 "heads"[value] -> <Ocaml_ocaml_types__Path.105>;
 "is_constructor_typath"[value] -> <Ocaml_ocaml_types__Path.118>;
 "kfalse"[value] -> <Ocaml_ocaml_types__Path.74>;
 "last"[value] -> <Ocaml_ocaml_types__Path.114>;
 "maybe_escape"[value] -> <Ocaml_ocaml_types__Path.75>;
 "name"[value] -> <Ocaml_ocaml_types__Path.77>;
 "print"[value] -> <Ocaml_ocaml_types__Path.86>;
 "same"[value] -> <Ocaml_ocaml_types__Path.14>;
 "scope"[value] -> <Ocaml_ocaml_types__Path.69>;
 "t"[type] -> <Ocaml_ocaml_types__Path.0>;
 }

(setglobal Ocaml_ocaml_types__Path!
  (letrec
    (same/404
       (function p1/405 p2/406 : int
         (funct-body Ocaml_ocaml_types__Path.same lib/path.ml(25)<ghost>:1247-1767
           (before Ocaml_ocaml_types__Path.same lib/path.ml(26):1257-1767
             (|| (== p1/405 p2/406)
               (catch
                 (switch* p1/405
                  case tag 0:
                   (switch p2/406
                    case tag 0:
                     (let
                       (id2/408 =a (field_imm 0 p2/406)
                        id1/407 =a (field_imm 0 p1/405))
                       (before Ocaml_ocaml_types__Path.same lib/path.ml(28):1323-1341
                         (after Ocaml_ocaml_types__Path.same lib/path.ml(28):1323-1341
                           (apply
                             (field_imm 13
                               (global Ocaml_ocaml_types__Ident!))
                             id1/407 id2/408))))
                    default: (exit 4))
                  case tag 1:
                   (switch p2/406
                    case tag 1:
                     (let
                       (s2/412 =a (field_imm 1 p2/406)
                        p2/411 =a (field_imm 0 p2/406)
                        s1/410 =a (field_imm 1 p1/405)
                        p1/409 =a (field_imm 0 p1/405))
                       (before Ocaml_ocaml_types__Path.same lib/path.ml(30):1384-1405
                         (&&
                           (after Ocaml_ocaml_types__Path.same lib/path.ml(30):1384-1391
                             (caml_string_equal s1/410 s2/412))
                           (after Ocaml_ocaml_types__Path.same lib/path.ml(30):1395-1405
                             (apply same/404 p1/409 p2/411)))))
                    default: (exit 4))
                  case tag 2:
                   (switch p2/406
                    case tag 2:
                     (let
                       (arg2/416 =a (field_imm 1 p2/406)
                        fun2/415 =a (field_imm 0 p2/406)
                        arg1/414 =a (field_imm 1 p1/405)
                        fun1/413 =a (field_imm 0 p1/405))
                       (before Ocaml_ocaml_types__Path.same lib/path.ml(32):1460-1492
                         (&&
                           (after Ocaml_ocaml_types__Path.same lib/path.ml(32):1460-1474
                             (apply same/404 fun1/413 fun2/415))
                           (after Ocaml_ocaml_types__Path.same lib/path.ml(32):1478-1492
                             (apply same/404 arg1/414 arg2/416)))))
                    default: (exit 4))
                  case tag 3:
                   (switch p2/406
                    case tag 3:
                     (let
                       (t2/420 =a (field_imm 1 p2/406)
                        p2/419 =a (field_imm 0 p2/406)
                        t1/418 =a (field_imm 1 p1/405)
                        p1/417 =a (field_imm 0 p1/405))
                       (before Ocaml_ocaml_types__Path.same lib/path.ml(34):1547-1747
                         (let
                           (same_extra/421 =[int]
                              (catch
                                (if t1/418
                                  (let (s1/422 =a (field_imm 0 t1/418))
                                    (catch
                                      (if t2/420
                                        (let (s2/423 =a (field_imm 0 t2/420))
                                          (before Ocaml_ocaml_types__Path.same lib/path.ml(35):1622-1629
                                            (after Ocaml_ocaml_types__Path.same lib/path.ml(35):1622-1629
                                              (caml_string_equal s1/422
                                                s2/423))))
                                        (exit 2))
                                     with (2) (exit 1)))
                                  (catch
                                    (if t2/420 (exit 3)
                                      (before Ocaml_ocaml_types__Path.same lib/path.ml(36):1662-1666
                                        1))
                                   with (3) (exit 1)))
                               with (1)
                                (before Ocaml_ocaml_types__Path.same lib/path.ml(37):1708-1713
                                  0)))
                           (before Ocaml_ocaml_types__Path.same lib/path.ml(38):1723-1747
                             (&& same_extra/421
                               (after Ocaml_ocaml_types__Path.same lib/path.ml(38):1737-1747
                                 (apply same/404 p1/417 p2/419)))))))
                    default: (exit 4)))
                with (4)
                 (before Ocaml_ocaml_types__Path.same lib/path.ml(39):1762-1767
                   0)))))))
    (letrec
      (compare/424
         (function p1/426 p2/427 : int
           (funct-body Ocaml_ocaml_types__Path.compare lib/path.ml(41)<ghost>:1785-2520
             (before Ocaml_ocaml_types__Path.compare lib/path.ml(42):1795-2520
               (if (== p1/426 p2/427)
                 (before Ocaml_ocaml_types__Path.compare lib/path.ml(42):1812-1813
                   0)
                 (before Ocaml_ocaml_types__Path.compare lib/path.ml(43):1821-2520
                   (catch
                     (catch
                       (catch
                         (catch
                           (switch* p1/426
                            case tag 0:
                             (let (id1/428 =a (field_imm 0 p1/426))
                               (catch
                                 (switch p2/427
                                  case tag 0:
                                   (let (id2/429 =a (field_imm 0 p2/427))
                                     (before Ocaml_ocaml_types__Path.compare lib/path.ml(44):1873-1894
                                       (after Ocaml_ocaml_types__Path.compare lib/path.ml(44):1873-1894
                                         (apply
                                           (field_imm 44
                                             (global Ocaml_ocaml_types__Ident!))
                                           id1/428 id2/429))))
                                  default: (exit 11))
                                with (11) (exit 5)))
                            case tag 1:
                             (let (p1/430 =a (field_imm 0 p1/426))
                               (catch
                                 (let (s1/431 =a (field_imm 1 p1/426))
                                   (catch
                                     (switch* p2/427
                                      case tag 0: (exit 14)
                                      case tag 1:
                                       (let
                                         (s2/433 =a (field_imm 1 p2/427)
                                          p2/432 =a (field_imm 0 p2/427))
                                         (before Ocaml_ocaml_types__Path.compare lib/path.ml(46):1937-2010
                                           (let
                                             (h/442 =[int]
                                                (after Ocaml_ocaml_types__Path.compare lib/path.ml(46):1945-1958
                                                  (apply compare/424 p1/430
                                                    p2/432)))
                                             (before Ocaml_ocaml_types__Path.compare lib/path.ml(47):1968-2010
                                               (if (!= h/442 0)
                                                 (before Ocaml_ocaml_types__Path.compare lib/path.ml(47):1983-1984
                                                   h/442)
                                                 (before Ocaml_ocaml_types__Path.compare lib/path.ml(47):1990-2010
                                                   (after Ocaml_ocaml_types__Path.compare lib/path.ml(47):1990-2010
                                                     (apply
                                                       (field_imm 9
                                                         (global Stdlib__String!))
                                                       s1/431 s2/433))))))))
                                      case tag 2: (exit 16)
                                      case tag 3: (exit 16))
                                    with (16) (exit 5)))
                                with (14)
                                 (let (*match*/1995 =a (field_imm 1 p1/426))
                                   (exit 9))))
                            case tag 2:
                             (let (fun1/434 =a (field_imm 0 p1/426))
                               (catch
                                 (let (arg1/435 =a (field_imm 1 p1/426))
                                   (switch* p2/427
                                    case tag 0: (exit 13)
                                    case tag 1: (exit 13)
                                    case tag 2:
                                     (let
                                       (arg2/437 =a (field_imm 1 p2/427)
                                        fun2/436 =a (field_imm 0 p2/427))
                                       (before Ocaml_ocaml_types__Path.compare lib/path.ml(49):2065-2139
                                         (let
                                           (h/512 =[int]
                                              (after Ocaml_ocaml_types__Path.compare lib/path.ml(49):2073-2090
                                                (apply compare/424 fun1/434
                                                  fun2/436)))
                                           (before Ocaml_ocaml_types__Path.compare lib/path.ml(50):2100-2139
                                             (if (!= h/512 0)
                                               (before Ocaml_ocaml_types__Path.compare lib/path.ml(50):2115-2116
                                                 h/512)
                                               (before Ocaml_ocaml_types__Path.compare lib/path.ml(50):2122-2139
                                                 (after Ocaml_ocaml_types__Path.compare lib/path.ml(50):2122-2139
                                                   (apply compare/424
                                                     arg1/435 arg2/437))))))))
                                    case tag 3:
                                     (let
                                       (*match*/1989 =a (field_imm 1 p2/427)
                                        *match*/1988 =a (field_imm 0 p2/427))
                                       (exit 5))))
                                with (13)
                                 (let (*match*/1990 =a (field_imm 1 p1/426))
                                   (exit 9))))
                            case tag 3:
                             (let (p1/438 =a (field_imm 0 p1/426))
                               (catch
                                 (let (t1/439 =a (field_imm 1 p1/426))
                                   (switch* p2/427
                                    case tag 0: (exit 12)
                                    case tag 1: (exit 12)
                                    case tag 2:
                                     (let
                                       (*match*/1986 =a (field_imm 1 p2/427)
                                        *match*/1985 =a (field_imm 0 p2/427))
                                       (exit 6))
                                    case tag 3:
                                     (let
                                       (t2/441 =a (field_imm 1 p2/427)
                                        p2/440 =a (field_imm 0 p2/427))
                                       (before Ocaml_ocaml_types__Path.compare lib/path.ml(52):2194-2266
                                         (let
                                           (h/513 =[int]
                                              (after Ocaml_ocaml_types__Path.compare lib/path.ml(52):2202-2221
                                                (apply compare_extra/425
                                                  t1/439 t2/441)))
                                           (before Ocaml_ocaml_types__Path.compare lib/path.ml(53):2231-2266
                                             (if (!= h/513 0)
                                               (before Ocaml_ocaml_types__Path.compare lib/path.ml(53):2246-2247
                                                 h/513)
                                               (before Ocaml_ocaml_types__Path.compare lib/path.ml(53):2253-2266
                                                 (after Ocaml_ocaml_types__Path.compare lib/path.ml(53):2253-2266
                                                   (apply compare/424 p1/438
                                                     p2/440))))))))))
                                with (12)
                                 (let (*match*/1987 =a (field_imm 1 p1/426))
                                   (exit 9)))))
                          with (9)
                           (switch* p2/427
                            case tag 0:
                             (let (*match*/1996 =a (field_imm 0 p2/427))
                               (exit 6))
                            case tag 1: (exit 8)))
                        with (8)
                         (let
                           (*match*/2002 =a (field_imm 1 p2/427)
                            *match*/2001 =a (field_imm 0 p2/427))
                           (exit 6)))
                      with (5)
                       (before Ocaml_ocaml_types__Path.compare lib/path.ml(57):2391-2393
                         -1))
                    with (6)
                     (before Ocaml_ocaml_types__Path.compare lib/path.ml(61):2519-2520
                       1)))))))
        compare_extra/425
          (function t1/514 t2/515 : int
            (funct-body Ocaml_ocaml_types__Path.compare_extra lib/path.ml(62)<ghost>:2539-2724
              (before Ocaml_ocaml_types__Path.compare_extra lib/path.ml(63):2549-2724
                (if t1/514
                  (let (s1/516 =a (field_imm 0 t1/514))
                    (if t2/515
                      (let (s2/517 =a (field_imm 0 t2/515))
                        (before Ocaml_ocaml_types__Path.compare_extra lib/path.ml(64):2601-2621
                          (after Ocaml_ocaml_types__Path.compare_extra lib/path.ml(64):2601-2621
                            (apply (field_imm 9 (global Stdlib__String!))
                              s1/516 s2/517))))
                      (before Ocaml_ocaml_types__Path.compare_extra lib/path.ml(68):2687-2689
                        -1)))
                  (if t2/515
                    (let (*match*/2003 =a (field_imm 0 t2/515))
                      (before Ocaml_ocaml_types__Path.compare_extra lib/path.ml(70):2723-2724
                        1))
                    (before Ocaml_ocaml_types__Path.compare_extra lib/path.ml(66):2652-2653
                      0)))))))
      (letrec
        (find_free_opt/518
           (function ids/519 param/592
             (funct-body Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(72)<ghost>:2748-3010
               (catch
                 (catch
                   (switch* param/592
                    case tag 0:
                     (let (id/520 =a (field_imm 0 param/592))
                       (before Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(73):2780-2813
                         (after Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(73):2780-2813
                           (apply (field_imm 39 (global Stdlib__List!))
                             (after Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(73):2794-2809
                               (apply
                                 (field_imm 13
                                   (global Ocaml_ocaml_types__Ident!))
                                 id/520))
                             ids/519))))
                    case tag 1: (exit 18)
                    case tag 2:
                     (let
                       (p2/524 =a (field_imm 1 param/592)
                        p1/523 =a (field_imm 0 param/592))
                       (before Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(75):2893-3010
                         (let
                           (res/591 =
                              (after Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(76):2911-2931
                                (apply find_free_opt/518 ids/519 p1/523)))
                           (if res/591
                             (let (*match*/2004 =a (field_imm 0 res/591))
                               (before Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(78):2999-3002
                                 res/591))
                             (before Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(77):2953-2973
                               (after Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(77):2953-2973
                                 (apply find_free_opt/518 ids/519 p2/524)))))))
                    case tag 3: (exit 18))
                  with (18)
                   (let
                     (*match*/2007 =a (field_imm 1 param/592)
                      p/2006 =a (field_imm 0 param/592))
                     (exit 17 p/2006)))
                with (17 p/521)
                 (before Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(74):2851-2870
                   (after Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(74):2851-2870
                     (apply find_free_opt/518 ids/519 p/521)))))))
        (let
          (exists_free/593 =
             (function ids/595 p/596 : int
               (funct-body Ocaml_ocaml_types__Path.exists_free lib/path.ml(81)<ghost>:3028-3100
                 (before Ocaml_ocaml_types__Path.exists_free lib/path.ml(82):3038-3100
                   (let
                     (*match*/2009 =
                        (after Ocaml_ocaml_types__Path.exists_free lib/path.ml(82):3044-3063
                          (apply find_free_opt/518 ids/595 p/596)))
                     (catch
                       (if *match*/2009 (exit 19)
                         (before Ocaml_ocaml_types__Path.exists_free lib/path.ml(83):3081-3086
                           0))
                      with (19)
                       (before Ocaml_ocaml_types__Path.exists_free lib/path.ml(84):3096-3100
                         1)))))))
          (letrec
            (scope/597
               (function param/634 : int
                 (funct-body Ocaml_ocaml_types__Path.scope lib/path.ml(86):3118-3255
                   (catch
                     (catch
                       (switch* param/634
                        case tag 0:
                         (let (id/598 =a (field_imm 0 param/634))
                           (before Ocaml_ocaml_types__Path.scope lib/path.ml(87):3144-3158
                             (after Ocaml_ocaml_types__Path.scope lib/path.ml(87):3144-3158
                               (apply
                                 (field_imm 15
                                   (global Ocaml_ocaml_types__Ident!))
                                 id/598))))
                        case tag 1: (exit 21)
                        case tag 2:
                         (let
                           (p2/602 =a (field_imm 1 param/634)
                            p1/601 =a (field_imm 0 param/634))
                           (before Ocaml_ocaml_types__Path.scope lib/path.ml(89):3226-3255
                             (after Ocaml_ocaml_types__Path.scope lib/path.ml(89):3226-3255
                               (apply (field_imm 10 (global Stdlib__Int!))
                                 (after Ocaml_ocaml_types__Path.scope lib/path.ml(89):3234-3244
                                   (apply scope/597 p1/601))
                                 (after Ocaml_ocaml_types__Path.scope lib/path.ml(89):3245-3255
                                   (apply scope/597 p2/602))))))
                        case tag 3: (exit 21))
                      with (21)
                       (let
                         (*match*/2012 =a (field_imm 1 param/634)
                          p/2011 =a (field_imm 0 param/634))
                         (exit 20 p/2011)))
                    with (20 p/599)
                     (before Ocaml_ocaml_types__Path.scope lib/path.ml(88):3196-3203
                       (after Ocaml_ocaml_types__Path.scope lib/path.ml(88):3196-3203
                         (apply scope/597 p/599)))))))
            (let
              (kfalse/635 =
                 (function param/637 : int
                   (funct-body Ocaml_ocaml_types__Path.kfalse lib/path.ml(91)<ghost>:3268-3277
                     (before Ocaml_ocaml_types__Path.kfalse lib/path.ml(91):3272-3277
                       0)))
               maybe_escape/638 =
                 (function s/640
                   (funct-body Ocaml_ocaml_types__Path.maybe_escape lib/path.ml(93)<ghost>:3296-3301
                     (before Ocaml_ocaml_types__Path.maybe_escape lib/path.ml(93):3300-3301
                       s/640))))
              (letrec
                (name/641
                   (function *opt*/653 param/652
                     (funct-body Ocaml_ocaml_types__Path.name lib/path.ml(96)<ghost>:3368-3696
                       (let
                         (paren/642 =
                            (if *opt*/653 (field_imm 0 *opt*/653)
                              (before Ocaml_ocaml_types__Path.name lib/path.ml(96):3376-3382
                                kfalse/635)))
                         (catch
                           (switch* param/652
                            case tag 0:
                             (let (id/643 =a (field_imm 0 param/652))
                               (before Ocaml_ocaml_types__Path.name lib/path.ml(97):3412-3440
                                 (after Ocaml_ocaml_types__Path.name lib/path.ml(97):3412-3440
                                   (apply maybe_escape/638
                                     (after Ocaml_ocaml_types__Path.name lib/path.ml(97):3425-3440
                                       (apply
                                         (field_imm 8
                                           (global Ocaml_ocaml_types__Ident!))
                                         id/643))))))
                            case tag 1:
                             (let
                               (s/2017 =a (field_imm 1 param/652)
                                p/2016 =a (field_imm 0 param/652))
                               (exit 22 p/2016 s/2017))
                            case tag 2:
                             (let
                               (p2/649 =a (field_imm 1 param/652)
                                p1/648 =a (field_imm 0 param/652))
                               (before Ocaml_ocaml_types__Path.name lib/path.ml(101):3609-3652
                                 (after Ocaml_ocaml_types__Path.name lib/path.ml(101):3609-3652
                                   (apply (field_imm 27 (global Stdlib!))
                                     (after Ocaml_ocaml_types__Path.name lib/path.ml(101):3609-3623
                                       (apply name/641
                                         (makeblock 0 paren/642) p1/648))
                                     (after Ocaml_ocaml_types__Path.name lib/path.ml(101):3626-3652
                                       (apply (field_imm 27 (global Stdlib!))
                                         "("
                                         (after Ocaml_ocaml_types__Path.name lib/path.ml(101):3632-3652
                                           (apply
                                             (field_imm 27 (global Stdlib!))
                                             (after Ocaml_ocaml_types__Path.name lib/path.ml(101):3632-3646
                                               (apply name/641
                                                 (makeblock 0 paren/642)
                                                 p2/649))
                                             ")"))))))))
                            case tag 3:
                             (let
                               (*match*/2018 =a (field_imm 1 param/652)
                                p/650 =a (field_imm 0 param/652))
                               (if *match*/2018
                                 (let
                                   (p/2014 =a p/650
                                    s/2015 =a (field_imm 0 *match*/2018))
                                   (exit 22 p/2014 s/2015))
                                 (before Ocaml_ocaml_types__Path.name lib/path.ml(102):3683-3696
                                   (after Ocaml_ocaml_types__Path.name lib/path.ml(102):3683-3696
                                     (apply name/641 (makeblock 0 paren/642)
                                       p/650))))))
                          with (22 p/644 s/645)
                           (before Ocaml_ocaml_types__Path.name lib/path.ml(99):3493-3586
                             (let
                               (s/651 =
                                  (after Ocaml_ocaml_types__Path.name lib/path.ml(99):3501-3515
                                    (apply maybe_escape/638 s/645)))
                               (before Ocaml_ocaml_types__Path.name lib/path.ml(100):3525-3586
                                 (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3525-3586
                                   (apply (field_imm 27 (global Stdlib!))
                                     (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3525-3538
                                       (apply name/641
                                         (makeblock 0 paren/642) p/644))
                                     (if
                                       (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3544-3551
                                         (apply paren/642 s/651))
                                       (before Ocaml_ocaml_types__Path.name lib/path.ml(100):3557-3573
                                         (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3557-3573
                                           (apply
                                             (field_imm 27 (global Stdlib!))
                                             ".( "
                                             (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3565-3573
                                               (apply
                                                 (field_imm 27
                                                   (global Stdlib!))
                                                 s/651 " )")))))
                                       (before Ocaml_ocaml_types__Path.name lib/path.ml(100):3579-3586
                                         (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3579-3586
                                           (apply
                                             (field_imm 27 (global Stdlib!))
                                             "." s/651))))))))))))))
                (letrec
                  (print/654
                     (function ppf/655 param/1003 : int
                       (funct-body Ocaml_ocaml_types__Path.print lib/path.ml(104)<ghost>:3712-3972
                         (catch
                           (switch* param/1003
                            case tag 0:
                             (let (id/656 =a (field_imm 0 param/1003))
                               (before Ocaml_ocaml_types__Path.print lib/path.ml(105):3744-3773
                                 (after Ocaml_ocaml_types__Path.print lib/path.ml(105):3744-3773
                                   (apply
                                     (field_imm 20
                                       (global Ocaml_ocaml_types__Ident!))
                                     ppf/655 id/656))))
                            case tag 1:
                             (let
                               (s/2022 =a (field_imm 1 param/1003)
                                p/2021 =a (field_imm 0 param/1003))
                               (exit 23 p/2021 s/2022))
                            case tag 2:
                             (let
                               (p2/662 =a (field_imm 1 param/1003)
                                p1/661 =a (field_imm 0 param/1003))
                               (before Ocaml_ocaml_types__Path.print lib/path.ml(108):3885-3930
                                 (after Ocaml_ocaml_types__Path.print lib/path.ml(108):3885-3930
                                   (apply
                                     (field_imm 138 (global Stdlib__Format!))
                                     ppf/655
                                     [0:
                                      [15: [12: '(' [15: [12: ')' 0]]]]
                                      "%a(%a)"]
                                     print/654 p1/661 print/654 p2/662))))
                            case tag 3:
                             (let
                               (*match*/2023 =a (field_imm 1 param/1003)
                                p/663 =a (field_imm 0 param/1003))
                               (if *match*/2023
                                 (let
                                   (p/2019 =a p/663
                                    s/2020 =a (field_imm 0 *match*/2023))
                                   (exit 23 p/2019 s/2020))
                                 (before Ocaml_ocaml_types__Path.print lib/path.ml(109):3961-3972
                                   (after Ocaml_ocaml_types__Path.print lib/path.ml(109):3961-3972
                                     (apply print/654 ppf/655 p/663))))))
                          with (23 p/657 s/658)
                           (before Ocaml_ocaml_types__Path.print lib/path.ml(107):3826-3862
                             (after Ocaml_ocaml_types__Path.print lib/path.ml(107):3826-3862
                               (apply
                                 (field_imm 138 (global Stdlib__Format!))
                                 ppf/655
                                 [0: [15: [12: '.' [2: 0 0]]] "%a.%s"]
                                 print/654 p/657 s/658)))))))
                  (letrec
                    (head/1004
                       (function param/1008
                         (funct-body Ocaml_ocaml_types__Path.head lib/path.ml(111):3989-4090
                           (catch
                             (catch
                               (switch* param/1008
                                case tag 0:
                                 (let (id/1005 =a (field_imm 0 param/1008))
                                   (before Ocaml_ocaml_types__Path.head lib/path.ml(112):4015-4017
                                     id/1005))
                                case tag 1: (exit 25)
                                case tag 2:
                                 (let
                                   (*match*/2027 =a (field_imm 1 param/1008)
                                    *match*/2026 =a (field_imm 0 param/1008))
                                   (before Ocaml_ocaml_types__Path.head lib/path.ml(114):4078-4090
                                     (raise
                                       (after Ocaml_ocaml_types__Path.head lib/path.ml(114):4078-4090
                                         (makeblock 0
                                           (global Assert_failure/28!)
                                           [0: "lib/path.ml" 114 16])))))
                                case tag 3: (exit 25))
                              with (25)
                               (let
                                 (*match*/2028 =a (field_imm 1 param/1008)
                                  p/2025 =a (field_imm 0 param/1008))
                                 (exit 24 p/2025)))
                            with (24 p/1006)
                             (before Ocaml_ocaml_types__Path.head lib/path.ml(113):4055-4061
                               (after Ocaml_ocaml_types__Path.head lib/path.ml(113):4055-4061
                                 (apply head/1004 p/1006)))))))
                    (let
                      (flatten/1009 =
                         (letrec
                           (flatten/1010
                              (function acc/1011 param/1018
                                (funct-body Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(117)<ghost>:4124-4321
                                  (catch
                                    (switch* param/1018
                                     case tag 0:
                                      (let
                                        (id/1012 =a (field_imm 0 param/1018))
                                        (before Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(118):4158-4171
                                          (makeblock 0 17724
                                            (makeblock 0 id/1012 acc/1011))))
                                     case tag 1:
                                      (let
                                        (s/2033 =a (field_imm 1 param/1018)
                                         p/2032 =a (field_imm 0 param/1018))
                                        (exit 26 p/2032 s/2033))
                                     case tag 2:
                                      (let
                                        (*match*/2035 =a
                                           (field_imm 1 param/1018)
                                         *match*/2034 =a
                                           (field_imm 0 param/1018))
                                        (before Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(120):4260-4275
                                          437034030))
                                     case tag 3:
                                      (let
                                        (*match*/2036 =a
                                           (field_imm 1 param/1018)
                                         p/1017 =a (field_imm 0 param/1018))
                                        (if *match*/2036
                                          (let
                                            (p/2030 =a p/1017
                                             s/2031 =a
                                               (field_imm 0 *match*/2036))
                                            (exit 26 p/2030 s/2031))
                                          (before Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(121):4308-4321
                                            (after Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(121):4308-4321
                                              (apply flatten/1010 acc/1011
                                                p/1017))))))
                                   with (26 p/1013 s/1014)
                                    (before Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(119):4221-4241
                                      (after Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(119):4221-4241
                                        (apply flatten/1010
                                          (makeblock 0 s/1014 acc/1011)
                                          p/1013)))))))
                           (before Ocaml_ocaml_types__Path.flatten lib/path.ml(123):4329-4350
                             (function t/1019
                               (funct-body Ocaml_ocaml_types__Path.flatten.(fun) lib/path.ml(123):4329-4350
                                 (before Ocaml_ocaml_types__Path.flatten.(fun) lib/path.ml(123):4338-4350
                                   (after Ocaml_ocaml_types__Path.flatten.(fun) lib/path.ml(123):4338-4350
                                     (apply flatten/1010 0 t/1019)))))))
                       heads/1020 =
                         (function p/1022
                           (funct-body Ocaml_ocaml_types__Path.heads lib/path.ml(125)<ghost>:4362-4555
                             (before Ocaml_ocaml_types__Path.heads lib/path.ml(126):4368-4555
                               (letrec
                                 (heads/1023
                                    (function p/1024 acc/1025
                                      (funct-body Ocaml_ocaml_types__Path.heads.heads lib/path.ml(126)<ghost>:4382-4539
                                        (before Ocaml_ocaml_types__Path.heads.heads lib/path.ml(126):4390-4539
                                          (catch
                                            (catch
                                              (switch* p/1024
                                               case tag 0:
                                                (let
                                                  (id/1026 =a
                                                     (field_imm 0 p/1024))
                                                  (before Ocaml_ocaml_types__Path.heads.heads lib/path.ml(127):4422-4431
                                                    (makeblock 0 id/1026
                                                      acc/1025)))
                                               case tag 1: (exit 28)
                                               case tag 2:
                                                (let
                                                  (p2/1030 =a
                                                     (field_imm 1 p/1024)
                                                   p1/1029 =a
                                                     (field_imm 0 p/1024))
                                                  (before Ocaml_ocaml_types__Path.heads.heads lib/path.ml(130):4516-4539
                                                    (after Ocaml_ocaml_types__Path.heads.heads lib/path.ml(130):4516-4539
                                                      (apply heads/1023
                                                        p1/1029
                                                        (after Ocaml_ocaml_types__Path.heads.heads lib/path.ml(130):4525-4539
                                                          (apply heads/1023
                                                            p2/1030 acc/1025))))))
                                               case tag 3: (exit 28))
                                             with (28)
                                              (let
                                                (*match*/2039 =a
                                                   (field_imm 1 p/1024)
                                                 p/2038 =a
                                                   (field_imm 0 p/1024))
                                                (exit 27 p/2038)))
                                           with (27 p/1027)
                                            (before Ocaml_ocaml_types__Path.heads.heads lib/path.ml(128):4472-4483
                                              (after Ocaml_ocaml_types__Path.heads.heads lib/path.ml(128):4472-4483
                                                (apply heads/1023 p/1027
                                                  acc/1025))))))))
                                 (before Ocaml_ocaml_types__Path.heads lib/path.ml(131):4545-4555
                                   (after Ocaml_ocaml_types__Path.heads lib/path.ml(131):4545-4555
                                     (apply heads/1023 p/1022 0))))))))
                      (letrec
                        (last/1031
                           (function param/1037
                             (funct-body Ocaml_ocaml_types__Path.last lib/path.ml(133):4572-4711
                               (catch
                                 (catch
                                   (switch* param/1037
                                    case tag 0:
                                     (let
                                       (id/1032 =a (field_imm 0 param/1037))
                                       (before Ocaml_ocaml_types__Path.last lib/path.ml(134):4598-4611
                                         (after Ocaml_ocaml_types__Path.last lib/path.ml(134):4598-4611
                                           (apply
                                             (field_imm 8
                                               (global Ocaml_ocaml_types__Ident!))
                                             id/1032))))
                                    case tag 1:
                                     (let
                                       (s/2042 =a (field_imm 1 param/1037)
                                        *match*/2045 =a
                                          (field_imm 0 param/1037))
                                       (exit 29 s/2042))
                                    case tag 2:
                                     (let
                                       (p/2044 =a (field_imm 1 param/1037)
                                        *match*/2046 =a
                                          (field_imm 0 param/1037))
                                       (exit 30 p/2044))
                                    case tag 3:
                                     (let
                                       (*match*/2047 =a
                                          (field_imm 1 param/1037))
                                       (if *match*/2047
                                         (let
                                           (s/2041 =a
                                              (field_imm 0 *match*/2047))
                                           (exit 29 s/2041))
                                         (let
                                           (p/2043 =a
                                              (field_imm 0 param/1037))
                                           (exit 30 p/2043)))))
                                  with (29 s/1033)
                                   (before Ocaml_ocaml_types__Path.last lib/path.ml(135):4658-4659
                                     s/1033))
                                with (30 p/1035)
                                 (before Ocaml_ocaml_types__Path.last lib/path.ml(136):4705-4711
                                   (after Ocaml_ocaml_types__Path.last lib/path.ml(136):4705-4711
                                     (apply last/1031 p/1035)))))))
                        (let
                          (is_constructor_typath/1038 =
                             (function p/1040 : int
                               (funct-body Ocaml_ocaml_types__Path.is_constructor_typath lib/path.ml(138)<ghost>:4739-4823
                                 (before Ocaml_ocaml_types__Path.is_constructor_typath lib/path.ml(139):4745-4823
                                   (catch
                                     (switch p/1040
                                      case tag 3:
                                       (let
                                         (*match*/2049 =a
                                            (field_imm 1 p/1040)
                                          *match*/2048 =a
                                            (field_imm 0 p/1040))
                                         (before Ocaml_ocaml_types__Path.is_constructor_typath lib/path.ml(141):4819-4823
                                           1))
                                      default: (exit 31))
                                    with (31)
                                     (before Ocaml_ocaml_types__Path.is_constructor_typath lib/path.ml(140):4794-4799
                                       0)))))
                           T/1043 =
                             (let (compare/1042 = compare/424)
                               (pseudo Ocaml_ocaml_types__Path.T lib/path.ml(143):4836-4890
                                 (makeblock 0 compare/1042)))
                           Set/1195 =
                             (apply
                               (let
                                 (let/2055 =
                                    (field_imm 0
                                      (global Ocaml_ocaml_types__Set!)))
                                 (field_imm 0
                                   (global Ocaml_ocaml_types__Set!)))
                               T/1043)
                           Map/1297 =
                             (apply
                               (let
                                 (let/2056 =
                                    (field_imm 0 (global Stdlib__Map!)))
                                 (field_imm 0 (global Stdlib__Map!)))
                               T/1043))
                          (pseudo <unknown location>
                            (makeblock 0 same/404 compare/424
                              compare_extra/425 find_free_opt/518
                              exists_free/593 scope/597 kfalse/635
                              maybe_escape/638 name/641 print/654 head/1004
                              flatten/1009 heads/1020 last/1031
                              is_constructor_typath/1038 T/1043 Set/1195
                              Map/1297)))))))))))))))
(setglobal Ocaml_ocaml_types__Path!
  (letrec
    (same/404
       (function p1/405 p2/406 : int
         (funct-body Ocaml_ocaml_types__Path.same lib/path.ml(25)<ghost>:1247-1767
           (before Ocaml_ocaml_types__Path.same lib/path.ml(26):1257-1767
             (|| (== p1/405 p2/406)
               (catch
                 (switch* p1/405
                  case tag 0:
                   (switch p2/406
                    case tag 0:
                     (let
                       (id2/408 =a (field_imm 0 p2/406)
                        id1/407 =a (field_imm 0 p1/405))
                       (before Ocaml_ocaml_types__Path.same lib/path.ml(28):1323-1341
                         (after Ocaml_ocaml_types__Path.same lib/path.ml(28):1323-1341
                           (apply
                             (field_imm 13
                               (global Ocaml_ocaml_types__Ident!))
                             id1/407 id2/408))))
                    default: (exit 4))
                  case tag 1:
                   (switch p2/406
                    case tag 1:
                     (let
                       (s2/412 =a (field_imm 1 p2/406)
                        p2/411 =a (field_imm 0 p2/406)
                        s1/410 =a (field_imm 1 p1/405)
                        p1/409 =a (field_imm 0 p1/405))
                       (before Ocaml_ocaml_types__Path.same lib/path.ml(30):1384-1405
                         (&&
                           (after Ocaml_ocaml_types__Path.same lib/path.ml(30):1384-1391
                             (caml_string_equal s1/410 s2/412))
                           (after Ocaml_ocaml_types__Path.same lib/path.ml(30):1395-1405
                             (apply same/404 p1/409 p2/411)))))
                    default: (exit 4))
                  case tag 2:
                   (switch p2/406
                    case tag 2:
                     (let
                       (arg2/416 =a (field_imm 1 p2/406)
                        fun2/415 =a (field_imm 0 p2/406)
                        arg1/414 =a (field_imm 1 p1/405)
                        fun1/413 =a (field_imm 0 p1/405))
                       (before Ocaml_ocaml_types__Path.same lib/path.ml(32):1460-1492
                         (&&
                           (after Ocaml_ocaml_types__Path.same lib/path.ml(32):1460-1474
                             (apply same/404 fun1/413 fun2/415))
                           (after Ocaml_ocaml_types__Path.same lib/path.ml(32):1478-1492
                             (apply same/404 arg1/414 arg2/416)))))
                    default: (exit 4))
                  case tag 3:
                   (switch p2/406
                    case tag 3:
                     (let
                       (t2/420 =a (field_imm 1 p2/406)
                        p2/419 =a (field_imm 0 p2/406)
                        t1/418 =a (field_imm 1 p1/405)
                        p1/417 =a (field_imm 0 p1/405))
                       (before Ocaml_ocaml_types__Path.same lib/path.ml(34):1547-1747
                         (let
                           (same_extra/421 =[int]
                              (catch
                                (if t1/418
                                  (let (s1/422 =a (field_imm 0 t1/418))
                                    (if t2/420
                                      (let (s2/423 =a (field_imm 0 t2/420))
                                        (before Ocaml_ocaml_types__Path.same lib/path.ml(35):1622-1629
                                          (after Ocaml_ocaml_types__Path.same lib/path.ml(35):1622-1629
                                            (caml_string_equal s1/422 s2/423))))
                                      (exit 1)))
                                  (if t2/420 (exit 1)
                                    (before Ocaml_ocaml_types__Path.same lib/path.ml(36):1662-1666
                                      1)))
                               with (1)
                                (before Ocaml_ocaml_types__Path.same lib/path.ml(37):1708-1713
                                  0)))
                           (before Ocaml_ocaml_types__Path.same lib/path.ml(38):1723-1747
                             (&& same_extra/421
                               (after Ocaml_ocaml_types__Path.same lib/path.ml(38):1737-1747
                                 (apply same/404 p1/417 p2/419)))))))
                    default: (exit 4)))
                with (4)
                 (before Ocaml_ocaml_types__Path.same lib/path.ml(39):1762-1767
                   0)))))))
    (letrec
      (compare/424
         (function p1/426 p2/427 : int
           (funct-body Ocaml_ocaml_types__Path.compare lib/path.ml(41)<ghost>:1785-2520
             (before Ocaml_ocaml_types__Path.compare lib/path.ml(42):1795-2520
               (if (== p1/426 p2/427)
                 (before Ocaml_ocaml_types__Path.compare lib/path.ml(42):1812-1813
                   0)
                 (before Ocaml_ocaml_types__Path.compare lib/path.ml(43):1821-2520
                   (catch
                     (catch
                       (catch
                         (switch* p1/426
                          case tag 0:
                           (let (id1/428 =a (field_imm 0 p1/426))
                             (switch p2/427
                              case tag 0:
                               (let (id2/429 =a (field_imm 0 p2/427))
                                 (before Ocaml_ocaml_types__Path.compare lib/path.ml(44):1873-1894
                                   (after Ocaml_ocaml_types__Path.compare lib/path.ml(44):1873-1894
                                     (apply
                                       (field_imm 44
                                         (global Ocaml_ocaml_types__Ident!))
                                       id1/428 id2/429))))
                              default: (exit 5)))
                          case tag 1:
                           (let
                             (p1/430 =a (field_imm 0 p1/426)
                              s1/431 =a (field_imm 1 p1/426))
                             (switch* p2/427
                              case tag 0: (exit 9)
                              case tag 1:
                               (let
                                 (s2/433 =a (field_imm 1 p2/427)
                                  p2/432 =a (field_imm 0 p2/427))
                                 (before Ocaml_ocaml_types__Path.compare lib/path.ml(46):1937-2010
                                   (let
                                     (h/442 =[int]
                                        (after Ocaml_ocaml_types__Path.compare lib/path.ml(46):1945-1958
                                          (apply compare/424 p1/430 p2/432)))
                                     (before Ocaml_ocaml_types__Path.compare lib/path.ml(47):1968-2010
                                       (if (!= h/442 0)
                                         (before Ocaml_ocaml_types__Path.compare lib/path.ml(47):1983-1984
                                           h/442)
                                         (before Ocaml_ocaml_types__Path.compare lib/path.ml(47):1990-2010
                                           (after Ocaml_ocaml_types__Path.compare lib/path.ml(47):1990-2010
                                             (apply
                                               (field_imm 9
                                                 (global Stdlib__String!))
                                               s1/431 s2/433))))))))
                              case tag 2: (exit 5)
                              case tag 3: (exit 5)))
                          case tag 2:
                           (let (fun1/434 =a (field_imm 0 p1/426))
                             (catch
                               (let (arg1/435 =a (field_imm 1 p1/426))
                                 (switch* p2/427
                                  case tag 0: (exit 13)
                                  case tag 1: (exit 13)
                                  case tag 2:
                                   (let
                                     (arg2/437 =a (field_imm 1 p2/427)
                                      fun2/436 =a (field_imm 0 p2/427))
                                     (before Ocaml_ocaml_types__Path.compare lib/path.ml(49):2065-2139
                                       (let
                                         (h/512 =[int]
                                            (after Ocaml_ocaml_types__Path.compare lib/path.ml(49):2073-2090
                                              (apply compare/424 fun1/434
                                                fun2/436)))
                                         (before Ocaml_ocaml_types__Path.compare lib/path.ml(50):2100-2139
                                           (if (!= h/512 0)
                                             (before Ocaml_ocaml_types__Path.compare lib/path.ml(50):2115-2116
                                               h/512)
                                             (before Ocaml_ocaml_types__Path.compare lib/path.ml(50):2122-2139
                                               (after Ocaml_ocaml_types__Path.compare lib/path.ml(50):2122-2139
                                                 (apply compare/424 arg1/435
                                                   arg2/437))))))))
                                  case tag 3: (exit 5)))
                              with (13) (exit 9)))
                          case tag 3:
                           (let (p1/438 =a (field_imm 0 p1/426))
                             (catch
                               (let (t1/439 =a (field_imm 1 p1/426))
                                 (switch* p2/427
                                  case tag 0: (exit 12)
                                  case tag 1: (exit 12)
                                  case tag 2: (exit 6)
                                  case tag 3:
                                   (let
                                     (t2/441 =a (field_imm 1 p2/427)
                                      p2/440 =a (field_imm 0 p2/427))
                                     (before Ocaml_ocaml_types__Path.compare lib/path.ml(52):2194-2266
                                       (let
                                         (h/513 =[int]
                                            (after Ocaml_ocaml_types__Path.compare lib/path.ml(52):2202-2221
                                              (apply compare_extra/425 t1/439
                                                t2/441)))
                                         (before Ocaml_ocaml_types__Path.compare lib/path.ml(53):2231-2266
                                           (if (!= h/513 0)
                                             (before Ocaml_ocaml_types__Path.compare lib/path.ml(53):2246-2247
                                               h/513)
                                             (before Ocaml_ocaml_types__Path.compare lib/path.ml(53):2253-2266
                                               (after Ocaml_ocaml_types__Path.compare lib/path.ml(53):2253-2266
                                                 (apply compare/424 p1/438
                                                   p2/440))))))))))
                              with (12) (exit 9))))
                        with (9)
                         (switch* p2/427
                          case tag 0: (exit 6)
                          case tag 1: (exit 6)))
                      with (5)
                       (before Ocaml_ocaml_types__Path.compare lib/path.ml(57):2391-2393
                         -1))
                    with (6)
                     (before Ocaml_ocaml_types__Path.compare lib/path.ml(61):2519-2520
                       1)))))))
        compare_extra/425
          (function t1/514 t2/515 : int
            (funct-body Ocaml_ocaml_types__Path.compare_extra lib/path.ml(62)<ghost>:2539-2724
              (before Ocaml_ocaml_types__Path.compare_extra lib/path.ml(63):2549-2724
                (if t1/514
                  (let (s1/516 =a (field_imm 0 t1/514))
                    (if t2/515
                      (let (s2/517 =a (field_imm 0 t2/515))
                        (before Ocaml_ocaml_types__Path.compare_extra lib/path.ml(64):2601-2621
                          (after Ocaml_ocaml_types__Path.compare_extra lib/path.ml(64):2601-2621
                            (apply (field_imm 9 (global Stdlib__String!))
                              s1/516 s2/517))))
                      (before Ocaml_ocaml_types__Path.compare_extra lib/path.ml(68):2687-2689
                        -1)))
                  (if t2/515
                    (before Ocaml_ocaml_types__Path.compare_extra lib/path.ml(70):2723-2724
                      1)
                    (before Ocaml_ocaml_types__Path.compare_extra lib/path.ml(66):2652-2653
                      0)))))))
      (letrec
        (find_free_opt/518
           (function ids/519 param/592
             (funct-body Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(72)<ghost>:2748-3010
               (catch
                 (switch* param/592
                  case tag 0:
                   (let (id/520 =a (field_imm 0 param/592))
                     (before Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(73):2780-2813
                       (after Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(73):2780-2813
                         (apply (field_imm 39 (global Stdlib__List!))
                           (after Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(73):2794-2809
                             (apply
                               (field_imm 13
                                 (global Ocaml_ocaml_types__Ident!))
                               id/520))
                           ids/519))))
                  case tag 1: (exit 18)
                  case tag 2:
                   (let
                     (p2/524 =a (field_imm 1 param/592)
                      p1/523 =a (field_imm 0 param/592))
                     (before Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(75):2893-3010
                       (let
                         (res/591 =
                            (after Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(76):2911-2931
                              (apply find_free_opt/518 ids/519 p1/523)))
                         (if res/591
                           (before Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(78):2999-3002
                             res/591)
                           (before Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(77):2953-2973
                             (after Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(77):2953-2973
                               (apply find_free_opt/518 ids/519 p2/524)))))))
                  case tag 3: (exit 18))
                with (18)
                 (let (p/2006 =a (field_imm 0 param/592) p/2057 = p/2006)
                   (before Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(74):2851-2870
                     (after Ocaml_ocaml_types__Path.find_free_opt lib/path.ml(74):2851-2870
                       (apply find_free_opt/518 ids/519 p/2057))))))))
        (let
          (exists_free/593 =
             (function ids/595 p/596 : int
               (funct-body Ocaml_ocaml_types__Path.exists_free lib/path.ml(81)<ghost>:3028-3100
                 (before Ocaml_ocaml_types__Path.exists_free lib/path.ml(82):3038-3100
                   (let
                     (*match*/2009 =
                        (after Ocaml_ocaml_types__Path.exists_free lib/path.ml(82):3044-3063
                          (apply find_free_opt/518 ids/595 p/596)))
                     (if *match*/2009
                       (before Ocaml_ocaml_types__Path.exists_free lib/path.ml(84):3096-3100
                         1)
                       (before Ocaml_ocaml_types__Path.exists_free lib/path.ml(83):3081-3086
                         0)))))))
          (letrec
            (scope/597
               (function param/634 : int
                 (funct-body Ocaml_ocaml_types__Path.scope lib/path.ml(86):3118-3255
                   (catch
                     (switch* param/634
                      case tag 0:
                       (let (id/598 =a (field_imm 0 param/634))
                         (before Ocaml_ocaml_types__Path.scope lib/path.ml(87):3144-3158
                           (after Ocaml_ocaml_types__Path.scope lib/path.ml(87):3144-3158
                             (apply
                               (field_imm 15
                                 (global Ocaml_ocaml_types__Ident!))
                               id/598))))
                      case tag 1: (exit 21)
                      case tag 2:
                       (let
                         (p2/602 =a (field_imm 1 param/634)
                          p1/601 =a (field_imm 0 param/634))
                         (before Ocaml_ocaml_types__Path.scope lib/path.ml(89):3226-3255
                           (after Ocaml_ocaml_types__Path.scope lib/path.ml(89):3226-3255
                             (apply (field_imm 10 (global Stdlib__Int!))
                               (after Ocaml_ocaml_types__Path.scope lib/path.ml(89):3234-3244
                                 (apply scope/597 p1/601))
                               (after Ocaml_ocaml_types__Path.scope lib/path.ml(89):3245-3255
                                 (apply scope/597 p2/602))))))
                      case tag 3: (exit 21))
                    with (21)
                     (let (p/2011 =a (field_imm 0 param/634) p/2058 = p/2011)
                       (before Ocaml_ocaml_types__Path.scope lib/path.ml(88):3196-3203
                         (after Ocaml_ocaml_types__Path.scope lib/path.ml(88):3196-3203
                           (apply scope/597 p/2058))))))))
            (let
              (kfalse/635 =
                 (function param/637 : int
                   (funct-body Ocaml_ocaml_types__Path.kfalse lib/path.ml(91)<ghost>:3268-3277
                     (before Ocaml_ocaml_types__Path.kfalse lib/path.ml(91):3272-3277
                       0)))
               maybe_escape/638 =
                 (function s/640
                   (funct-body Ocaml_ocaml_types__Path.maybe_escape lib/path.ml(93)<ghost>:3296-3301
                     (before Ocaml_ocaml_types__Path.maybe_escape lib/path.ml(93):3300-3301
                       s/640))))
              (letrec
                (name/641
                   (function *opt*/653 param/652
                     (funct-body Ocaml_ocaml_types__Path.name lib/path.ml(96)<ghost>:3368-3696
                       (let
                         (paren/642 =
                            (if *opt*/653 (field_imm 0 *opt*/653)
                              (before Ocaml_ocaml_types__Path.name lib/path.ml(96):3376-3382
                                kfalse/635)))
                         (catch
                           (switch* param/652
                            case tag 0:
                             (let (id/643 =a (field_imm 0 param/652))
                               (before Ocaml_ocaml_types__Path.name lib/path.ml(97):3412-3440
                                 (after Ocaml_ocaml_types__Path.name lib/path.ml(97):3412-3440
                                   (apply maybe_escape/638
                                     (after Ocaml_ocaml_types__Path.name lib/path.ml(97):3425-3440
                                       (apply
                                         (field_imm 8
                                           (global Ocaml_ocaml_types__Ident!))
                                         id/643))))))
                            case tag 1:
                             (let
                               (s/2017 =a (field_imm 1 param/652)
                                p/2016 =a (field_imm 0 param/652))
                               (exit 22 p/2016 s/2017))
                            case tag 2:
                             (let
                               (p2/649 =a (field_imm 1 param/652)
                                p1/648 =a (field_imm 0 param/652))
                               (before Ocaml_ocaml_types__Path.name lib/path.ml(101):3609-3652
                                 (after Ocaml_ocaml_types__Path.name lib/path.ml(101):3609-3652
                                   (apply (field_imm 27 (global Stdlib!))
                                     (after Ocaml_ocaml_types__Path.name lib/path.ml(101):3609-3623
                                       (apply name/641
                                         (makeblock 0 paren/642) p1/648))
                                     (after Ocaml_ocaml_types__Path.name lib/path.ml(101):3626-3652
                                       (apply (field_imm 27 (global Stdlib!))
                                         "("
                                         (after Ocaml_ocaml_types__Path.name lib/path.ml(101):3632-3652
                                           (apply
                                             (field_imm 27 (global Stdlib!))
                                             (after Ocaml_ocaml_types__Path.name lib/path.ml(101):3632-3646
                                               (apply name/641
                                                 (makeblock 0 paren/642)
                                                 p2/649))
                                             ")"))))))))
                            case tag 3:
                             (let
                               (*match*/2018 =a (field_imm 1 param/652)
                                p/650 =a (field_imm 0 param/652))
                               (if *match*/2018
                                 (let
                                   (p/2014 =a p/650
                                    s/2015 =a (field_imm 0 *match*/2018))
                                   (exit 22 p/2014 s/2015))
                                 (before Ocaml_ocaml_types__Path.name lib/path.ml(102):3683-3696
                                   (after Ocaml_ocaml_types__Path.name lib/path.ml(102):3683-3696
                                     (apply name/641 (makeblock 0 paren/642)
                                       p/650))))))
                          with (22 p/644 s/645)
                           (before Ocaml_ocaml_types__Path.name lib/path.ml(99):3493-3586
                             (let
                               (s/651 =
                                  (after Ocaml_ocaml_types__Path.name lib/path.ml(99):3501-3515
                                    (apply maybe_escape/638 s/645)))
                               (before Ocaml_ocaml_types__Path.name lib/path.ml(100):3525-3586
                                 (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3525-3586
                                   (apply (field_imm 27 (global Stdlib!))
                                     (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3525-3538
                                       (apply name/641
                                         (makeblock 0 paren/642) p/644))
                                     (if
                                       (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3544-3551
                                         (apply paren/642 s/651))
                                       (before Ocaml_ocaml_types__Path.name lib/path.ml(100):3557-3573
                                         (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3557-3573
                                           (apply
                                             (field_imm 27 (global Stdlib!))
                                             ".( "
                                             (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3565-3573
                                               (apply
                                                 (field_imm 27
                                                   (global Stdlib!))
                                                 s/651 " )")))))
                                       (before Ocaml_ocaml_types__Path.name lib/path.ml(100):3579-3586
                                         (after Ocaml_ocaml_types__Path.name lib/path.ml(100):3579-3586
                                           (apply
                                             (field_imm 27 (global Stdlib!))
                                             "." s/651))))))))))))))
                (letrec
                  (print/654
                     (function ppf/655 param/1003 : int
                       (funct-body Ocaml_ocaml_types__Path.print lib/path.ml(104)<ghost>:3712-3972
                         (catch
                           (switch* param/1003
                            case tag 0:
                             (let (id/656 =a (field_imm 0 param/1003))
                               (before Ocaml_ocaml_types__Path.print lib/path.ml(105):3744-3773
                                 (after Ocaml_ocaml_types__Path.print lib/path.ml(105):3744-3773
                                   (apply
                                     (field_imm 20
                                       (global Ocaml_ocaml_types__Ident!))
                                     ppf/655 id/656))))
                            case tag 1:
                             (let
                               (s/2022 =a (field_imm 1 param/1003)
                                p/2021 =a (field_imm 0 param/1003))
                               (exit 23 p/2021 s/2022))
                            case tag 2:
                             (let
                               (p2/662 =a (field_imm 1 param/1003)
                                p1/661 =a (field_imm 0 param/1003))
                               (before Ocaml_ocaml_types__Path.print lib/path.ml(108):3885-3930
                                 (after Ocaml_ocaml_types__Path.print lib/path.ml(108):3885-3930
                                   (apply
                                     (field_imm 138 (global Stdlib__Format!))
                                     ppf/655
                                     [0:
                                      [15: [12: '(' [15: [12: ')' 0]]]]
                                      "%a(%a)"]
                                     print/654 p1/661 print/654 p2/662))))
                            case tag 3:
                             (let
                               (*match*/2023 =a (field_imm 1 param/1003)
                                p/663 =a (field_imm 0 param/1003))
                               (if *match*/2023
                                 (let
                                   (p/2019 =a p/663
                                    s/2020 =a (field_imm 0 *match*/2023))
                                   (exit 23 p/2019 s/2020))
                                 (before Ocaml_ocaml_types__Path.print lib/path.ml(109):3961-3972
                                   (after Ocaml_ocaml_types__Path.print lib/path.ml(109):3961-3972
                                     (apply print/654 ppf/655 p/663))))))
                          with (23 p/657 s/658)
                           (before Ocaml_ocaml_types__Path.print lib/path.ml(107):3826-3862
                             (after Ocaml_ocaml_types__Path.print lib/path.ml(107):3826-3862
                               (apply
                                 (field_imm 138 (global Stdlib__Format!))
                                 ppf/655
                                 [0: [15: [12: '.' [2: 0 0]]] "%a.%s"]
                                 print/654 p/657 s/658)))))))
                  (letrec
                    (head/1004
                       (function param/1008
                         (funct-body Ocaml_ocaml_types__Path.head lib/path.ml(111):3989-4090
                           (catch
                             (switch* param/1008
                              case tag 0:
                               (let (id/1005 =a (field_imm 0 param/1008))
                                 (before Ocaml_ocaml_types__Path.head lib/path.ml(112):4015-4017
                                   id/1005))
                              case tag 1: (exit 25)
                              case tag 2:
                               (before Ocaml_ocaml_types__Path.head lib/path.ml(114):4078-4090
                                 (raise
                                   (after Ocaml_ocaml_types__Path.head lib/path.ml(114):4078-4090
                                     (makeblock 0 (global Assert_failure/28!)
                                       [0: "lib/path.ml" 114 16]))))
                              case tag 3: (exit 25))
                            with (25)
                             (let
                               (p/2025 =a (field_imm 0 param/1008)
                                p/2059 = p/2025)
                               (before Ocaml_ocaml_types__Path.head lib/path.ml(113):4055-4061
                                 (after Ocaml_ocaml_types__Path.head lib/path.ml(113):4055-4061
                                   (apply head/1004 p/2059))))))))
                    (let
                      (flatten/1009 =
                         (letrec
                           (flatten/1010
                              (function acc/1011 param/1018
                                (funct-body Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(117)<ghost>:4124-4321
                                  (catch
                                    (switch* param/1018
                                     case tag 0:
                                      (let
                                        (id/1012 =a (field_imm 0 param/1018))
                                        (before Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(118):4158-4171
                                          (makeblock 0 17724
                                            (makeblock 0 id/1012 acc/1011))))
                                     case tag 1:
                                      (let
                                        (s/2033 =a (field_imm 1 param/1018)
                                         p/2032 =a (field_imm 0 param/1018))
                                        (exit 26 p/2032 s/2033))
                                     case tag 2:
                                      (before Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(120):4260-4275
                                        437034030)
                                     case tag 3:
                                      (let
                                        (*match*/2036 =a
                                           (field_imm 1 param/1018)
                                         p/1017 =a (field_imm 0 param/1018))
                                        (if *match*/2036
                                          (let
                                            (p/2030 =a p/1017
                                             s/2031 =a
                                               (field_imm 0 *match*/2036))
                                            (exit 26 p/2030 s/2031))
                                          (before Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(121):4308-4321
                                            (after Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(121):4308-4321
                                              (apply flatten/1010 acc/1011
                                                p/1017))))))
                                   with (26 p/1013 s/1014)
                                    (before Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(119):4221-4241
                                      (after Ocaml_ocaml_types__Path.flatten.flatten lib/path.ml(119):4221-4241
                                        (apply flatten/1010
                                          (makeblock 0 s/1014 acc/1011)
                                          p/1013)))))))
                           (before Ocaml_ocaml_types__Path.flatten lib/path.ml(123):4329-4350
                             (function t/1019
                               (funct-body Ocaml_ocaml_types__Path.flatten.(fun) lib/path.ml(123):4329-4350
                                 (before Ocaml_ocaml_types__Path.flatten.(fun) lib/path.ml(123):4338-4350
                                   (after Ocaml_ocaml_types__Path.flatten.(fun) lib/path.ml(123):4338-4350
                                     (apply flatten/1010 0 t/1019)))))))
                       heads/1020 =
                         (function p/1022
                           (funct-body Ocaml_ocaml_types__Path.heads lib/path.ml(125)<ghost>:4362-4555
                             (before Ocaml_ocaml_types__Path.heads lib/path.ml(126):4368-4555
                               (letrec
                                 (heads/1023
                                    (function p/1024 acc/1025
                                      (funct-body Ocaml_ocaml_types__Path.heads.heads lib/path.ml(126)<ghost>:4382-4539
                                        (before Ocaml_ocaml_types__Path.heads.heads lib/path.ml(126):4390-4539
                                          (catch
                                            (switch* p/1024
                                             case tag 0:
                                              (let
                                                (id/1026 =a
                                                   (field_imm 0 p/1024))
                                                (before Ocaml_ocaml_types__Path.heads.heads lib/path.ml(127):4422-4431
                                                  (makeblock 0 id/1026
                                                    acc/1025)))
                                             case tag 1: (exit 28)
                                             case tag 2:
                                              (let
                                                (p2/1030 =a
                                                   (field_imm 1 p/1024)
                                                 p1/1029 =a
                                                   (field_imm 0 p/1024))
                                                (before Ocaml_ocaml_types__Path.heads.heads lib/path.ml(130):4516-4539
                                                  (after Ocaml_ocaml_types__Path.heads.heads lib/path.ml(130):4516-4539
                                                    (apply heads/1023 p1/1029
                                                      (after Ocaml_ocaml_types__Path.heads.heads lib/path.ml(130):4525-4539
                                                        (apply heads/1023
                                                          p2/1030 acc/1025))))))
                                             case tag 3: (exit 28))
                                           with (28)
                                            (let
                                              (p/2038 =a (field_imm 0 p/1024)
                                               p/2060 = p/2038)
                                              (before Ocaml_ocaml_types__Path.heads.heads lib/path.ml(128):4472-4483
                                                (after Ocaml_ocaml_types__Path.heads.heads lib/path.ml(128):4472-4483
                                                  (apply heads/1023 p/2060
                                                    acc/1025)))))))))
                                 (before Ocaml_ocaml_types__Path.heads lib/path.ml(131):4545-4555
                                   (after Ocaml_ocaml_types__Path.heads lib/path.ml(131):4545-4555
                                     (apply heads/1023 p/1022 0))))))))
                      (letrec
                        (last/1031
                           (function param/1037
                             (funct-body Ocaml_ocaml_types__Path.last lib/path.ml(133):4572-4711
                               (catch
                                 (catch
                                   (switch* param/1037
                                    case tag 0:
                                     (let
                                       (id/1032 =a (field_imm 0 param/1037))
                                       (before Ocaml_ocaml_types__Path.last lib/path.ml(134):4598-4611
                                         (after Ocaml_ocaml_types__Path.last lib/path.ml(134):4598-4611
                                           (apply
                                             (field_imm 8
                                               (global Ocaml_ocaml_types__Ident!))
                                             id/1032))))
                                    case tag 1:
                                     (let
                                       (s/2042 =a (field_imm 1 param/1037))
                                       (exit 29 s/2042))
                                    case tag 2:
                                     (let
                                       (p/2044 =a (field_imm 1 param/1037))
                                       (exit 30 p/2044))
                                    case tag 3:
                                     (let
                                       (*match*/2047 =a
                                          (field_imm 1 param/1037))
                                       (if *match*/2047
                                         (let
                                           (s/2041 =a
                                              (field_imm 0 *match*/2047))
                                           (exit 29 s/2041))
                                         (let
                                           (p/2043 =a
                                              (field_imm 0 param/1037))
                                           (exit 30 p/2043)))))
                                  with (29 s/1033)
                                   (before Ocaml_ocaml_types__Path.last lib/path.ml(135):4658-4659
                                     s/1033))
                                with (30 p/1035)
                                 (before Ocaml_ocaml_types__Path.last lib/path.ml(136):4705-4711
                                   (after Ocaml_ocaml_types__Path.last lib/path.ml(136):4705-4711
                                     (apply last/1031 p/1035)))))))
                        (let
                          (is_constructor_typath/1038 =
                             (function p/1040 : int
                               (funct-body Ocaml_ocaml_types__Path.is_constructor_typath lib/path.ml(138)<ghost>:4739-4823
                                 (before Ocaml_ocaml_types__Path.is_constructor_typath lib/path.ml(139):4745-4823
                                   (switch p/1040
                                    case tag 3:
                                     (before Ocaml_ocaml_types__Path.is_constructor_typath lib/path.ml(141):4819-4823
                                       1)
                                    default:
                                     (before Ocaml_ocaml_types__Path.is_constructor_typath lib/path.ml(140):4794-4799
                                       0)))))
                           T/1043 =
                             (let (compare/1042 = compare/424)
                               (pseudo Ocaml_ocaml_types__Path.T lib/path.ml(143):4836-4890
                                 (makeblock 0 compare/1042)))
                           Set/1195 =
                             (apply
                               (let
                                 (let/2055 =
                                    (field_imm 0
                                      (global Ocaml_ocaml_types__Set!)))
                                 (field_imm 0
                                   (global Ocaml_ocaml_types__Set!)))
                               T/1043)
                           Map/1297 =
                             (apply
                               (let
                                 (let/2056 =
                                    (field_imm 0 (global Stdlib__Map!)))
                                 (field_imm 0 (global Stdlib__Map!)))
                               T/1043))
                          (pseudo <unknown location>
                            (makeblock 0 same/404 compare/424
                              compare_extra/425 find_free_opt/518
                              exists_free/593 scope/597 kfalse/635
                              maybe_escape/638 name/641 print/654 head/1004
                              flatten/1009 heads/1020 last/1031
                              is_constructor_typath/1038 T/1043 Set/1195
                              Map/1297)))))))))))))))
