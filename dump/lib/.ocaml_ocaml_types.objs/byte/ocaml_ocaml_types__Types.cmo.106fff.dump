[
  structure_item (lib/types.ml[18,1127+0]..[18,1127+13])
    Pstr_open Fresh
    module_expr (lib/types.ml[18,1127+5]..[18,1127+13])
      Pmod_ident "Asttypes" (lib/types.ml[18,1127+5]..[18,1127+13])
  structure_item (lib/types.ml[22,1188+0]..[81,3206+73])
    Pstr_type Rec
    [
      type_declaration "transient_expr" (lib/types.ml[22,1188+5]..[22,1188+19]) (lib/types.ml[22,1188+0]..[26,1287+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[23,1210+4]..[23,1210+28])
                Mutable
                "desc" (lib/types.ml[23,1210+12]..[23,1210+16])                core_type (lib/types.ml[23,1210+18]..[23,1210+27])
                  Ptyp_constr "type_desc" (lib/types.ml[23,1210+18]..[23,1210+27])
                  []
              (lib/types.ml[24,1239+4]..[24,1239+23])
                Mutable
                "level" (lib/types.ml[24,1239+12]..[24,1239+17])                core_type (lib/types.ml[24,1239+19]..[24,1239+22])
                  Ptyp_constr "int" (lib/types.ml[24,1239+19]..[24,1239+22])
                  []
              (lib/types.ml[25,1263+4]..[25,1263+23])
                Mutable
                "scope" (lib/types.ml[25,1263+12]..[25,1263+17])                core_type (lib/types.ml[25,1263+19]..[25,1263+22])
                  Ptyp_constr "int" (lib/types.ml[25,1263+19]..[25,1263+22])
                  []
              (lib/types.ml[26,1287+4]..[26,1287+11])
                Immutable
                "id" (lib/types.ml[26,1287+4]..[26,1287+6])                core_type (lib/types.ml[26,1287+8]..[26,1287+11])
                  Ptyp_constr "int" (lib/types.ml[26,1287+8]..[26,1287+11])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "type_expr" (lib/types.ml[28,1302+4]..[28,1302+13]) (lib/types.ml[28,1302+0]..[28,1302+30])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/types.ml[28,1302+16]..[28,1302+30])
              Ptyp_constr "transient_expr" (lib/types.ml[28,1302+16]..[28,1302+30])
              []
      type_declaration "type_desc" (lib/types.ml[30,1334+4]..[30,1334+13]) (lib/types.ml[30,1334+0]..[43,1814+55])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[31,1350+4]..[31,1350+25])
                "Tvar" (lib/types.ml[31,1350+4]..[31,1350+8])
                [
                  core_type (lib/types.ml[31,1350+12]..[31,1350+25])
                    Ptyp_constr "option" (lib/types.ml[31,1350+19]..[31,1350+25])
                    [
                      core_type (lib/types.ml[31,1350+12]..[31,1350+18])
                        Ptyp_constr "string" (lib/types.ml[31,1350+12]..[31,1350+18])
                        []
                    ]
                ]
                None
              (lib/types.ml[32,1376+2]..[32,1376+60])
                "Tarrow" (lib/types.ml[32,1376+4]..[32,1376+10])
                [
                  core_type (lib/types.ml[32,1376+14]..[32,1376+23])
                    Ptyp_constr "arg_label" (lib/types.ml[32,1376+14]..[32,1376+23])
                    []
                  core_type (lib/types.ml[32,1376+26]..[32,1376+35])
                    Ptyp_constr "type_expr" (lib/types.ml[32,1376+26]..[32,1376+35])
                    []
                  core_type (lib/types.ml[32,1376+38]..[32,1376+47])
                    Ptyp_constr "type_expr" (lib/types.ml[32,1376+38]..[32,1376+47])
                    []
                  core_type (lib/types.ml[32,1376+50]..[32,1376+60])
                    Ptyp_constr "commutable" (lib/types.ml[32,1376+50]..[32,1376+60])
                    []
                ]
                None
              (lib/types.ml[33,1437+2]..[33,1437+28])
                "Ttuple" (lib/types.ml[33,1437+4]..[33,1437+10])
                [
                  core_type (lib/types.ml[33,1437+14]..[33,1437+28])
                    Ptyp_constr "list" (lib/types.ml[33,1437+24]..[33,1437+28])
                    [
                      core_type (lib/types.ml[33,1437+14]..[33,1437+23])
                        Ptyp_constr "type_expr" (lib/types.ml[33,1437+14]..[33,1437+23])
                        []
                    ]
                ]
                None
              (lib/types.ml[34,1466+2]..[34,1466+56])
                "Tconstr" (lib/types.ml[34,1466+4]..[34,1466+11])
                [
                  core_type (lib/types.ml[34,1466+15]..[34,1466+21])
                    Ptyp_constr "Path.t" (lib/types.ml[34,1466+15]..[34,1466+21])
                    []
                  core_type (lib/types.ml[34,1466+24]..[34,1466+38])
                    Ptyp_constr "list" (lib/types.ml[34,1466+34]..[34,1466+38])
                    [
                      core_type (lib/types.ml[34,1466+24]..[34,1466+33])
                        Ptyp_constr "type_expr" (lib/types.ml[34,1466+24]..[34,1466+33])
                        []
                    ]
                  core_type (lib/types.ml[34,1466+41]..[34,1466+56])
                    Ptyp_constr "ref" (lib/types.ml[34,1466+53]..[34,1466+56])
                    [
                      core_type (lib/types.ml[34,1466+41]..[34,1466+52])
                        Ptyp_constr "abbrev_memo" (lib/types.ml[34,1466+41]..[34,1466+52])
                        []
                    ]
                ]
                None
              (lib/types.ml[35,1523+2]..[35,1523+63])
                "Tobject" (lib/types.ml[35,1523+4]..[35,1523+11])
                [
                  core_type (lib/types.ml[35,1523+15]..[35,1523+24])
                    Ptyp_constr "type_expr" (lib/types.ml[35,1523+15]..[35,1523+24])
                    []
                  core_type (lib/types.ml[35,1523+27]..[35,1523+63])
                    Ptyp_constr "ref" (lib/types.ml[35,1523+60]..[35,1523+63])
                    [
                      core_type (lib/types.ml[35,1523+27]..[35,1523+59])
                        Ptyp_constr "option" (lib/types.ml[35,1523+53]..[35,1523+59])
                        [
                          core_type (lib/types.ml[35,1523+28]..[35,1523+51])
                            Ptyp_tuple
                            [
                              core_type (lib/types.ml[35,1523+28]..[35,1523+34])
                                Ptyp_constr "Path.t" (lib/types.ml[35,1523+28]..[35,1523+34])
                                []
                              core_type (lib/types.ml[35,1523+37]..[35,1523+51])
                                Ptyp_constr "list" (lib/types.ml[35,1523+47]..[35,1523+51])
                                [
                                  core_type (lib/types.ml[35,1523+37]..[35,1523+46])
                                    Ptyp_constr "type_expr" (lib/types.ml[35,1523+37]..[35,1523+46])
                                    []
                                ]
                            ]
                        ]
                    ]
                ]
                None
              (lib/types.ml[36,1587+2]..[36,1587+57])
                "Tfield" (lib/types.ml[36,1587+4]..[36,1587+10])
                [
                  core_type (lib/types.ml[36,1587+14]..[36,1587+20])
                    Ptyp_constr "string" (lib/types.ml[36,1587+14]..[36,1587+20])
                    []
                  core_type (lib/types.ml[36,1587+23]..[36,1587+33])
                    Ptyp_constr "field_kind" (lib/types.ml[36,1587+23]..[36,1587+33])
                    []
                  core_type (lib/types.ml[36,1587+36]..[36,1587+45])
                    Ptyp_constr "type_expr" (lib/types.ml[36,1587+36]..[36,1587+45])
                    []
                  core_type (lib/types.ml[36,1587+48]..[36,1587+57])
                    Ptyp_constr "type_expr" (lib/types.ml[36,1587+48]..[36,1587+57])
                    []
                ]
                None
              (lib/types.ml[37,1645+2]..[37,1645+8])
                "Tnil" (lib/types.ml[37,1645+4]..[37,1645+8])
                []
                None
              (lib/types.ml[38,1654+2]..[38,1654+22])
                "Tlink" (lib/types.ml[38,1654+4]..[38,1654+9])
                [
                  core_type (lib/types.ml[38,1654+13]..[38,1654+22])
                    Ptyp_constr "type_expr" (lib/types.ml[38,1654+13]..[38,1654+22])
                    []
                ]
                None
              (lib/types.ml[39,1677+2]..[39,1677+42])
                "Tsubst" (lib/types.ml[39,1677+4]..[39,1677+10])
                [
                  core_type (lib/types.ml[39,1677+14]..[39,1677+23])
                    Ptyp_constr "type_expr" (lib/types.ml[39,1677+14]..[39,1677+23])
                    []
                  core_type (lib/types.ml[39,1677+26]..[39,1677+42])
                    Ptyp_constr "option" (lib/types.ml[39,1677+36]..[39,1677+42])
                    [
                      core_type (lib/types.ml[39,1677+26]..[39,1677+35])
                        Ptyp_constr "type_expr" (lib/types.ml[39,1677+26]..[39,1677+35])
                        []
                    ]
                ]
                None
              (lib/types.ml[40,1720+2]..[40,1720+24])
                "Tvariant" (lib/types.ml[40,1720+4]..[40,1720+12])
                [
                  core_type (lib/types.ml[40,1720+16]..[40,1720+24])
                    Ptyp_constr "row_desc" (lib/types.ml[40,1720+16]..[40,1720+24])
                    []
                ]
                None
              (lib/types.ml[41,1745+2]..[41,1745+28])
                "Tunivar" (lib/types.ml[41,1745+4]..[41,1745+11])
                [
                  core_type (lib/types.ml[41,1745+15]..[41,1745+28])
                    Ptyp_constr "option" (lib/types.ml[41,1745+22]..[41,1745+28])
                    [
                      core_type (lib/types.ml[41,1745+15]..[41,1745+21])
                        Ptyp_constr "string" (lib/types.ml[41,1745+15]..[41,1745+21])
                        []
                    ]
                ]
                None
              (lib/types.ml[42,1774+2]..[42,1774+39])
                "Tpoly" (lib/types.ml[42,1774+4]..[42,1774+9])
                [
                  core_type (lib/types.ml[42,1774+13]..[42,1774+22])
                    Ptyp_constr "type_expr" (lib/types.ml[42,1774+13]..[42,1774+22])
                    []
                  core_type (lib/types.ml[42,1774+25]..[42,1774+39])
                    Ptyp_constr "list" (lib/types.ml[42,1774+35]..[42,1774+39])
                    [
                      core_type (lib/types.ml[42,1774+25]..[42,1774+34])
                        Ptyp_constr "type_expr" (lib/types.ml[42,1774+25]..[42,1774+34])
                        []
                    ]
                ]
                None
              (lib/types.ml[43,1814+2]..[43,1814+55])
                "Tpackage" (lib/types.ml[43,1814+4]..[43,1814+12])
                [
                  core_type (lib/types.ml[43,1814+16]..[43,1814+22])
                    Ptyp_constr "Path.t" (lib/types.ml[43,1814+16]..[43,1814+22])
                    []
                  core_type (lib/types.ml[43,1814+25]..[43,1814+55])
                    Ptyp_constr "list" (lib/types.ml[43,1814+51]..[43,1814+55])
                    [
                      core_type (lib/types.ml[43,1814+26]..[43,1814+49])
                        Ptyp_tuple
                        [
                          core_type (lib/types.ml[43,1814+26]..[43,1814+37])
                            Ptyp_constr "Longident.t" (lib/types.ml[43,1814+26]..[43,1814+37])
                            []
                          core_type (lib/types.ml[43,1814+40]..[43,1814+49])
                            Ptyp_constr "type_expr" (lib/types.ml[43,1814+40]..[43,1814+49])
                            []
                        ]
                    ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "row_desc" (lib/types.ml[45,1871+4]..[45,1871+12]) (lib/types.ml[45,1871+0]..[50,2024+50])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[46,1886+6]..[46,1886+43])
                Immutable
                "row_fields" (lib/types.ml[46,1886+6]..[46,1886+16])                core_type (lib/types.ml[46,1886+18]..[46,1886+42])
                  Ptyp_constr "list" (lib/types.ml[46,1886+38]..[46,1886+42])
                  [
                    core_type (lib/types.ml[46,1886+19]..[46,1886+36])
                      Ptyp_tuple
                      [
                        core_type (lib/types.ml[46,1886+19]..[46,1886+24])
                          Ptyp_constr "label" (lib/types.ml[46,1886+19]..[46,1886+24])
                          []
                        core_type (lib/types.ml[46,1886+27]..[46,1886+36])
                          Ptyp_constr "row_field" (lib/types.ml[46,1886+27]..[46,1886+36])
                          []
                      ]
                  ]
              (lib/types.ml[47,1930+6]..[47,1930+26])
                Immutable
                "row_more" (lib/types.ml[47,1930+6]..[47,1930+14])                core_type (lib/types.ml[47,1930+16]..[47,1930+25])
                  Ptyp_constr "type_expr" (lib/types.ml[47,1930+16]..[47,1930+25])
                  []
              (lib/types.ml[48,1957+6]..[48,1957+23])
                Immutable
                "row_closed" (lib/types.ml[48,1957+6]..[48,1957+16])                core_type (lib/types.ml[48,1957+18]..[48,1957+22])
                  Ptyp_constr "bool" (lib/types.ml[48,1957+18]..[48,1957+22])
                  []
              (lib/types.ml[49,1981+6]..[49,1981+42])
                Immutable
                "row_fixed" (lib/types.ml[49,1981+6]..[49,1981+15])                core_type (lib/types.ml[49,1981+17]..[49,1981+41])
                  Ptyp_constr "option" (lib/types.ml[49,1981+35]..[49,1981+41])
                  [
                    core_type (lib/types.ml[49,1981+17]..[49,1981+34])
                      Ptyp_constr "fixed_explanation" (lib/types.ml[49,1981+17]..[49,1981+34])
                      []
                  ]
              (lib/types.ml[50,2024+6]..[50,2024+48])
                Immutable
                "row_name" (lib/types.ml[50,2024+6]..[50,2024+14])                core_type (lib/types.ml[50,2024+16]..[50,2024+48])
                  Ptyp_constr "option" (lib/types.ml[50,2024+42]..[50,2024+48])
                  [
                    core_type (lib/types.ml[50,2024+17]..[50,2024+40])
                      Ptyp_tuple
                      [
                        core_type (lib/types.ml[50,2024+17]..[50,2024+23])
                          Ptyp_constr "Path.t" (lib/types.ml[50,2024+17]..[50,2024+23])
                          []
                        core_type (lib/types.ml[50,2024+26]..[50,2024+40])
                          Ptyp_constr "list" (lib/types.ml[50,2024+36]..[50,2024+40])
                          [
                            core_type (lib/types.ml[50,2024+26]..[50,2024+35])
                              Ptyp_constr "type_expr" (lib/types.ml[50,2024+26]..[50,2024+35])
                              []
                          ]
                      ]
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "fixed_explanation" (lib/types.ml[51,2075+4]..[51,2075+21]) (lib/types.ml[51,2075+0]..[52,2099+67])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[52,2099+2]..[52,2099+23])
                "Univar" (lib/types.ml[52,2099+4]..[52,2099+10])
                [
                  core_type (lib/types.ml[52,2099+14]..[52,2099+23])
                    Ptyp_constr "type_expr" (lib/types.ml[52,2099+14]..[52,2099+23])
                    []
                ]
                None
              (lib/types.ml[52,2099+24]..[52,2099+39])
                "Fixed_private" (lib/types.ml[52,2099+26]..[52,2099+39])
                []
                None
              (lib/types.ml[52,2099+40]..[52,2099+59])
                "Reified" (lib/types.ml[52,2099+42]..[52,2099+49])
                [
                  core_type (lib/types.ml[52,2099+53]..[52,2099+59])
                    Ptyp_constr "Path.t" (lib/types.ml[52,2099+53]..[52,2099+59])
                    []
                ]
                None
              (lib/types.ml[52,2099+60]..[52,2099+67])
                "Rigid" (lib/types.ml[52,2099+62]..[52,2099+67])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "row_field" (lib/types.ml[53,2167+4]..[53,2167+13]) (lib/types.ml[53,2167+0]..[53,2167+37])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/types.ml[53,2167+16]..[53,2167+37])
              Ptyp_constr "row_field_gen" (lib/types.ml[53,2167+24]..[53,2167+37])
              [
                core_type (lib/types.ml[53,2167+16]..[53,2167+23])
                  Ptyp_variant closed=Closed
                  [
                    Rtag "some" true
                      []
                  ]
                  None
              ]
      type_declaration "row_field_gen" (lib/types.ml[54,2205+6]..[54,2205+19]) (lib/types.ml[54,2205+0]..[62,2495+36])
        ptype_params =
          [
            core_type (lib/types.ml[54,2205+4]..[54,2205+5])
              Ptyp_any
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[55,2227+4]..[55,2227+59])
                "RFpresent" (lib/types.ml[55,2227+4]..[55,2227+13])
                [
                  core_type (lib/types.ml[55,2227+16]..[55,2227+32])
                    Ptyp_constr "option" (lib/types.ml[55,2227+26]..[55,2227+32])
                    [
                      core_type (lib/types.ml[55,2227+16]..[55,2227+25])
                        Ptyp_constr "type_expr" (lib/types.ml[55,2227+16]..[55,2227+25])
                        []
                    ]
                ]
                Some
                  core_type (lib/types.ml[55,2227+36]..[55,2227+59])
                    Ptyp_constr "row_field_gen" (lib/types.ml[55,2227+46]..[55,2227+59])
                    [
                      core_type (lib/types.ml[55,2227+36]..[55,2227+45])
                        Ptyp_variant closed=Open
                        [
                          Rtag "some" true
                            []
                        ]
                        None
                    ]
              (lib/types.ml[56,2287+2]..[60,2381+74])
                "RFeither" (lib/types.ml[56,2287+4]..[56,2287+12])
                [
                  (lib/types.ml[57,2302+8]..[57,2302+21])
                    Immutable
                    "no_arg" (lib/types.ml[57,2302+8]..[57,2302+14])                    core_type (lib/types.ml[57,2302+16]..[57,2302+20])
                      Ptyp_constr "bool" (lib/types.ml[57,2302+16]..[57,2302+20])
                      []
                  (lib/types.ml[58,2324+8]..[58,2324+33])
                    Immutable
                    "arg_type" (lib/types.ml[58,2324+8]..[58,2324+16])                    core_type (lib/types.ml[58,2324+18]..[58,2324+32])
                      Ptyp_constr "list" (lib/types.ml[58,2324+28]..[58,2324+32])
                      [
                        core_type (lib/types.ml[58,2324+18]..[58,2324+27])
                          Ptyp_constr "type_expr" (lib/types.ml[58,2324+18]..[58,2324+27])
                          []
                      ]
                  (lib/types.ml[59,2358+8]..[59,2358+22])
                    Immutable
                    "matched" (lib/types.ml[59,2358+8]..[59,2358+15])                    core_type (lib/types.ml[59,2358+17]..[59,2358+21])
                      Ptyp_constr "bool" (lib/types.ml[59,2358+17]..[59,2358+21])
                      []
                  (lib/types.ml[60,2381+8]..[60,2381+46])
                    Immutable
                    "ext" (lib/types.ml[60,2381+8]..[60,2381+11])                    core_type (lib/types.ml[60,2381+13]..[60,2381+46])
                      Ptyp_constr "ref" (lib/types.ml[60,2381+43]..[60,2381+46])
                      [
                        core_type (lib/types.ml[60,2381+13]..[60,2381+42])
                          Ptyp_constr "row_field_gen" (lib/types.ml[60,2381+29]..[60,2381+42])
                          [
                            core_type (lib/types.ml[60,2381+13]..[60,2381+28])
                              Ptyp_variant closed=Closed
                              [
                                Rtag "some" true
                                  []
                                Rtag "none" true
                                  []
                              ]
                              None
                          ]
                      ]
                ]
                Some
                  core_type (lib/types.ml[60,2381+51]..[60,2381+74])
                    Ptyp_constr "row_field_gen" (lib/types.ml[60,2381+61]..[60,2381+74])
                    [
                      core_type (lib/types.ml[60,2381+51]..[60,2381+60])
                        Ptyp_variant closed=Open
                        [
                          Rtag "some" true
                            []
                        ]
                        None
                    ]
              (lib/types.ml[61,2456+2]..[61,2456+38])
                "RFabsent" (lib/types.ml[61,2456+4]..[61,2456+12])
                []
                Some
                  core_type (lib/types.ml[61,2456+15]..[61,2456+38])
                    Ptyp_constr "row_field_gen" (lib/types.ml[61,2456+25]..[61,2456+38])
                    [
                      core_type (lib/types.ml[61,2456+15]..[61,2456+24])
                        Ptyp_variant closed=Open
                        [
                          Rtag "some" true
                            []
                        ]
                        None
                    ]
              (lib/types.ml[62,2495+2]..[62,2495+36])
                "RFnone" (lib/types.ml[62,2495+4]..[62,2495+10])
                []
                Some
                  core_type (lib/types.ml[62,2495+13]..[62,2495+36])
                    Ptyp_constr "row_field_gen" (lib/types.ml[62,2495+23]..[62,2495+36])
                    [
                      core_type (lib/types.ml[62,2495+13]..[62,2495+22])
                        Ptyp_variant closed=Open
                        [
                          Rtag "none" true
                            []
                        ]
                        None
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "abbrev_memo" (lib/types.ml[64,2533+4]..[64,2533+15]) (lib/types.ml[64,2533+0]..[67,2633+28])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[65,2551+4]..[65,2551+8])
                "Mnil" (lib/types.ml[65,2551+4]..[65,2551+8])
                []
                None
              (lib/types.ml[66,2560+2]..[66,2560+72])
                "Mcons" (lib/types.ml[66,2560+4]..[66,2560+9])
                [
                  core_type (lib/types.ml[66,2560+13]..[66,2560+25])
                    Ptyp_constr "private_flag" (lib/types.ml[66,2560+13]..[66,2560+25])
                    []
                  core_type (lib/types.ml[66,2560+28]..[66,2560+34])
                    Ptyp_constr "Path.t" (lib/types.ml[66,2560+28]..[66,2560+34])
                    []
                  core_type (lib/types.ml[66,2560+37]..[66,2560+46])
                    Ptyp_constr "type_expr" (lib/types.ml[66,2560+37]..[66,2560+46])
                    []
                  core_type (lib/types.ml[66,2560+49]..[66,2560+58])
                    Ptyp_constr "type_expr" (lib/types.ml[66,2560+49]..[66,2560+58])
                    []
                  core_type (lib/types.ml[66,2560+61]..[66,2560+72])
                    Ptyp_constr "abbrev_memo" (lib/types.ml[66,2560+61]..[66,2560+72])
                    []
                ]
                None
              (lib/types.ml[67,2633+2]..[67,2633+28])
                "Mlink" (lib/types.ml[67,2633+4]..[67,2633+9])
                [
                  core_type (lib/types.ml[67,2633+13]..[67,2633+28])
                    Ptyp_constr "ref" (lib/types.ml[67,2633+25]..[67,2633+28])
                    [
                      core_type (lib/types.ml[67,2633+13]..[67,2633+24])
                        Ptyp_constr "abbrev_memo" (lib/types.ml[67,2633+13]..[67,2633+24])
                        []
                    ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "any" (lib/types.ml[69,2663+4]..[69,2663+7]) (lib/types.ml[69,2663+0]..[69,2663+32])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/types.ml[69,2663+10]..[69,2663+32])
              Ptyp_variant closed=Closed
              [
                Rtag "some" true
                  []
                Rtag "none" true
                  []
                Rtag "var" true
                  []
              ]
              None
      type_declaration "field_kind" (lib/types.ml[70,2696+4]..[70,2696+14]) (lib/types.ml[70,2696+0]..[70,2696+44])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/types.ml[70,2696+17]..[70,2696+44])
              Ptyp_constr "field_kind_gen" (lib/types.ml[70,2696+30]..[70,2696+44])
              [
                core_type (lib/types.ml[70,2696+17]..[70,2696+29])
                  Ptyp_variant closed=Closed
                  [
                    Rtag "some" true
                      []
                    Rtag "var" true
                      []
                  ]
                  None
              ]
      type_declaration "field_kind_gen" (lib/types.ml[71,2741+6]..[71,2741+20]) (lib/types.ml[71,2741+0]..[75,2987+40])
        ptype_params =
          [
            core_type (lib/types.ml[71,2741+4]..[71,2741+5])
              Ptyp_any
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[72,2764+4]..[72,2764+79])
                "FKvar" (lib/types.ml[72,2764+4]..[72,2764+9])
                [
                  (lib/types.ml[72,2764+13]..[72,2764+51])
                    Mutable
                    "field_kind" (lib/types.ml[72,2764+21]..[72,2764+31])                    core_type (lib/types.ml[72,2764+33]..[72,2764+51])
                      Ptyp_constr "field_kind_gen" (lib/types.ml[72,2764+37]..[72,2764+51])
                      [
                        core_type (lib/types.ml[72,2764+33]..[72,2764+36])
                          Ptyp_constr "any" (lib/types.ml[72,2764+33]..[72,2764+36])
                          []
                      ]
                ]
                Some
                  core_type (lib/types.ml[72,2764+56]..[72,2764+79])
                    Ptyp_constr "field_kind_gen" (lib/types.ml[72,2764+65]..[72,2764+79])
                    [
                      core_type (lib/types.ml[72,2764+56]..[72,2764+64])
                        Ptyp_variant closed=Open
                        [
                          Rtag "var" true
                            []
                        ]
                        None
                    ]
              (lib/types.ml[73,2844+2]..[73,2844+40])
                "FKprivate" (lib/types.ml[73,2844+4]..[73,2844+13])
                []
                Some
                  core_type (lib/types.ml[73,2844+16]..[73,2844+40])
                    Ptyp_constr "field_kind_gen" (lib/types.ml[73,2844+26]..[73,2844+40])
                    [
                      core_type (lib/types.ml[73,2844+16]..[73,2844+25])
                        Ptyp_variant closed=Open
                        [
                          Rtag "none" true
                            []
                        ]
                        None
                    ]
              (lib/types.ml[74,2925+2]..[74,2925+40])
                "FKpublic" (lib/types.ml[74,2925+4]..[74,2925+12])
                []
                Some
                  core_type (lib/types.ml[74,2925+16]..[74,2925+40])
                    Ptyp_constr "field_kind_gen" (lib/types.ml[74,2925+26]..[74,2925+40])
                    [
                      core_type (lib/types.ml[74,2925+16]..[74,2925+25])
                        Ptyp_variant closed=Open
                        [
                          Rtag "some" true
                            []
                        ]
                        None
                    ]
              (lib/types.ml[75,2987+2]..[75,2987+40])
                "FKabsent" (lib/types.ml[75,2987+4]..[75,2987+12])
                []
                Some
                  core_type (lib/types.ml[75,2987+16]..[75,2987+40])
                    Ptyp_constr "field_kind_gen" (lib/types.ml[75,2987+26]..[75,2987+40])
                    [
                      core_type (lib/types.ml[75,2987+16]..[75,2987+25])
                        Ptyp_variant closed=Open
                        [
                          Rtag "some" true
                            []
                        ]
                        None
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "commutable" (lib/types.ml[77,3058+4]..[77,3058+14]) (lib/types.ml[77,3058+0]..[77,3058+44])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/types.ml[77,3058+17]..[77,3058+44])
              Ptyp_constr "commutable_gen" (lib/types.ml[77,3058+30]..[77,3058+44])
              [
                core_type (lib/types.ml[77,3058+17]..[77,3058+29])
                  Ptyp_variant closed=Closed
                  [
                    Rtag "some" true
                      []
                    Rtag "var" true
                      []
                  ]
                  None
              ]
      type_declaration "commutable_gen" (lib/types.ml[78,3103+6]..[78,3103+20]) (lib/types.ml[78,3103+0]..[81,3206+73])
        ptype_params =
          [
            core_type (lib/types.ml[78,3103+4]..[78,3103+5])
              Ptyp_any
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[79,3126+4]..[79,3126+39])
                "Cok" (lib/types.ml[79,3126+4]..[79,3126+7])
                []
                Some
                  core_type (lib/types.ml[79,3126+15]..[79,3126+39])
                    Ptyp_constr "commutable_gen" (lib/types.ml[79,3126+25]..[79,3126+39])
                    [
                      core_type (lib/types.ml[79,3126+15]..[79,3126+24])
                        Ptyp_variant closed=Open
                        [
                          Rtag "some" true
                            []
                        ]
                        None
                    ]
              (lib/types.ml[80,3166+2]..[80,3166+39])
                "Cunknown" (lib/types.ml[80,3166+4]..[80,3166+12])
                []
                Some
                  core_type (lib/types.ml[80,3166+15]..[80,3166+39])
                    Ptyp_constr "commutable_gen" (lib/types.ml[80,3166+25]..[80,3166+39])
                    [
                      core_type (lib/types.ml[80,3166+15]..[80,3166+24])
                        Ptyp_variant closed=Open
                        [
                          Rtag "none" true
                            []
                        ]
                        None
                    ]
              (lib/types.ml[81,3206+2]..[81,3206+73])
                "Cvar" (lib/types.ml[81,3206+4]..[81,3206+8])
                [
                  (lib/types.ml[81,3206+12]..[81,3206+45])
                    Mutable
                    "commu" (lib/types.ml[81,3206+20]..[81,3206+25])                    core_type (lib/types.ml[81,3206+27]..[81,3206+45])
                      Ptyp_constr "commutable_gen" (lib/types.ml[81,3206+31]..[81,3206+45])
                      [
                        core_type (lib/types.ml[81,3206+27]..[81,3206+30])
                          Ptyp_constr "any" (lib/types.ml[81,3206+27]..[81,3206+30])
                          []
                      ]
                ]
                Some
                  core_type (lib/types.ml[81,3206+50]..[81,3206+73])
                    Ptyp_constr "commutable_gen" (lib/types.ml[81,3206+59]..[81,3206+73])
                    [
                      core_type (lib/types.ml[81,3206+50]..[81,3206+58])
                        Ptyp_variant closed=Open
                        [
                          Rtag "var" true
                            []
                        ]
                        None
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[83,3281+0]..[88,3420+3])
    Pstr_module
    "TransientTypeOps" (lib/types.ml[83,3281+7]..[83,3281+23])
      module_expr (lib/types.ml[83,3281+26]..[88,3420+3])
        Pmod_structure
        [
          structure_item (lib/types.ml[84,3314+2]..[84,3314+20])
            Pstr_type Rec
            [
              type_declaration "t" (lib/types.ml[84,3314+7]..[84,3314+8]) (lib/types.ml[84,3314+2]..[84,3314+20])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/types.ml[84,3314+11]..[84,3314+20])
                      Ptyp_constr "type_expr" (lib/types.ml[84,3314+11]..[84,3314+20])
                      []
            ]
          structure_item (lib/types.ml[85,3335+2]..[85,3335+35])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[85,3335+6]..[85,3335+13])
                  Ppat_var "compare" (lib/types.ml[85,3335+6]..[85,3335+13])
                expression (lib/types.ml[85,3335+14]..[85,3335+35]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[85,3335+14]..[85,3335+16])
                      Nolabel
                      None
                      pattern (lib/types.ml[85,3335+14]..[85,3335+16])
                        Ppat_var "t1" (lib/types.ml[85,3335+14]..[85,3335+16])
                    Pparam_val (lib/types.ml[85,3335+17]..[85,3335+19])
                      Nolabel
                      None
                      pattern (lib/types.ml[85,3335+17]..[85,3335+19])
                        Ppat_var "t2" (lib/types.ml[85,3335+17]..[85,3335+19])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[85,3335+22]..[85,3335+35])
                      Pexp_apply
                      expression (lib/types.ml[85,3335+28]..[85,3335+29])
                        Pexp_ident "-" (lib/types.ml[85,3335+28]..[85,3335+29])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[85,3335+22]..[85,3335+27])
                            Pexp_field
                            expression (lib/types.ml[85,3335+22]..[85,3335+24])
                              Pexp_ident "t1" (lib/types.ml[85,3335+22]..[85,3335+24])
                            "id" (lib/types.ml[85,3335+25]..[85,3335+27])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[85,3335+30]..[85,3335+35])
                            Pexp_field
                            expression (lib/types.ml[85,3335+30]..[85,3335+32])
                              Pexp_ident "t2" (lib/types.ml[85,3335+30]..[85,3335+32])
                            "id" (lib/types.ml[85,3335+33]..[85,3335+35])
                      ]
            ]
          structure_item (lib/types.ml[86,3371+2]..[86,3371+19])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[86,3371+6]..[86,3371+10])
                  Ppat_var "hash" (lib/types.ml[86,3371+6]..[86,3371+10])
                expression (lib/types.ml[86,3371+11]..[86,3371+19]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[86,3371+11]..[86,3371+12])
                      Nolabel
                      None
                      pattern (lib/types.ml[86,3371+11]..[86,3371+12])
                        Ppat_var "t" (lib/types.ml[86,3371+11]..[86,3371+12])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[86,3371+15]..[86,3371+19])
                      Pexp_field
                      expression (lib/types.ml[86,3371+15]..[86,3371+16])
                        Pexp_ident "t" (lib/types.ml[86,3371+15]..[86,3371+16])
                      "id" (lib/types.ml[86,3371+17]..[86,3371+19])
            ]
          structure_item (lib/types.ml[87,3391+2]..[87,3391+28])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[87,3391+6]..[87,3391+11])
                  Ppat_var "equal" (lib/types.ml[87,3391+6]..[87,3391+11])
                expression (lib/types.ml[87,3391+12]..[87,3391+28]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[87,3391+12]..[87,3391+14])
                      Nolabel
                      None
                      pattern (lib/types.ml[87,3391+12]..[87,3391+14])
                        Ppat_var "t1" (lib/types.ml[87,3391+12]..[87,3391+14])
                    Pparam_val (lib/types.ml[87,3391+15]..[87,3391+17])
                      Nolabel
                      None
                      pattern (lib/types.ml[87,3391+15]..[87,3391+17])
                        Ppat_var "t2" (lib/types.ml[87,3391+15]..[87,3391+17])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[87,3391+20]..[87,3391+28])
                      Pexp_apply
                      expression (lib/types.ml[87,3391+23]..[87,3391+25])
                        Pexp_ident "==" (lib/types.ml[87,3391+23]..[87,3391+25])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[87,3391+20]..[87,3391+22])
                            Pexp_ident "t1" (lib/types.ml[87,3391+20]..[87,3391+22])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[87,3391+26]..[87,3391+28])
                            Pexp_ident "t2" (lib/types.ml[87,3391+26]..[87,3391+28])
                      ]
            ]
        ]
  structure_item (lib/types.ml[92,3432+0]..[92,3432+22])
    Pstr_module
    "Uid" (lib/types.ml[92,3432+7]..[92,3432+10])
      module_expr (lib/types.ml[92,3432+13]..[92,3432+22])
        Pmod_ident "Shape.Uid" (lib/types.ml[92,3432+13]..[92,3432+22])
  structure_item (lib/types.ml[96,3502+0]..[96,3502+39])
    Pstr_module
    "MethSet" (lib/types.ml[96,3502+7]..[96,3502+14])
      module_expr (lib/types.ml[96,3502+17]..[96,3502+39])
        Pmod_ident "Misc.Stdlib.String.Set" (lib/types.ml[96,3502+17]..[96,3502+39])
  structure_item (lib/types.ml[97,3542+0]..[97,3542+38])
    Pstr_module
    "VarSet" (lib/types.ml[97,3542+7]..[97,3542+13])
      module_expr (lib/types.ml[97,3542+16]..[97,3542+38])
        Pmod_ident "Misc.Stdlib.String.Set" (lib/types.ml[97,3542+16]..[97,3542+38])
  structure_item (lib/types.ml[99,3582+0]..[99,3582+37])
    Pstr_module
    "Meths" (lib/types.ml[99,3582+7]..[99,3582+12])
      module_expr (lib/types.ml[99,3582+15]..[99,3582+37])
        Pmod_ident "Misc.Stdlib.String.Map" (lib/types.ml[99,3582+15]..[99,3582+37])
  structure_item (lib/types.ml[100,3620+0]..[100,3620+36])
    Pstr_module
    "Vars" (lib/types.ml[100,3620+7]..[100,3620+11])
      module_expr (lib/types.ml[100,3620+14]..[100,3620+36])
        Pmod_ident "Misc.Stdlib.String.Map" (lib/types.ml[100,3620+14]..[100,3620+36])
  structure_item (lib/types.ml[105,3685+0]..[135,4710+26])
    Pstr_type Rec
    [
      type_declaration "value_description" (lib/types.ml[105,3685+5]..[105,3685+22]) (lib/types.ml[105,3685+0]..[111,3887+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[106,3710+4]..[106,3710+24])
                Immutable
                "val_type" (lib/types.ml[106,3710+4]..[106,3710+12])                core_type (lib/types.ml[106,3710+14]..[106,3710+23])
                  Ptyp_constr "type_expr" (lib/types.ml[106,3710+14]..[106,3710+23])
                  []
              (lib/types.ml[107,3774+4]..[107,3774+25])
                Immutable
                "val_kind" (lib/types.ml[107,3774+4]..[107,3774+12])                core_type (lib/types.ml[107,3774+14]..[107,3774+24])
                  Ptyp_constr "value_kind" (lib/types.ml[107,3774+14]..[107,3774+24])
                  []
              (lib/types.ml[108,3800+4]..[108,3800+24])
                Immutable
                "val_loc" (lib/types.ml[108,3800+4]..[108,3800+11])                core_type (lib/types.ml[108,3800+13]..[108,3800+23])
                  Ptyp_constr "Location.t" (lib/types.ml[108,3800+13]..[108,3800+23])
                  []
              (lib/types.ml[109,3825+4]..[109,3825+41])
                Immutable
                "val_attributes" (lib/types.ml[109,3825+4]..[109,3825+18])                core_type (lib/types.ml[109,3825+20]..[109,3825+40])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[109,3825+20]..[109,3825+40])
                  []
              (lib/types.ml[110,3867+4]..[110,3867+19])
                Immutable
                "val_uid" (lib/types.ml[110,3867+4]..[110,3867+11])                core_type (lib/types.ml[110,3867+13]..[110,3867+18])
                  Ptyp_constr "Uid.t" (lib/types.ml[110,3867+13]..[110,3867+18])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "value_kind" (lib/types.ml[113,3892+4]..[113,3892+14]) (lib/types.ml[113,3892+0]..[120,4229+57])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[114,3909+4]..[114,3909+11])
                "Val_reg" (lib/types.ml[114,3909+4]..[114,3909+11])
                []
                None
              (lib/types.ml[115,3969+2]..[115,3969+37])
                "Val_prim" (lib/types.ml[115,3969+4]..[115,3969+12])
                [
                  core_type (lib/types.ml[115,3969+16]..[115,3969+37])
                    Ptyp_constr "Primitive.description" (lib/types.ml[115,3969+16]..[115,3969+37])
                    []
                ]
                None
              (lib/types.ml[116,4025+2]..[116,4025+37])
                "Val_ivar" (lib/types.ml[116,4025+4]..[116,4025+12])
                [
                  core_type (lib/types.ml[116,4025+16]..[116,4025+28])
                    Ptyp_constr "mutable_flag" (lib/types.ml[116,4025+16]..[116,4025+28])
                    []
                  core_type (lib/types.ml[116,4025+31]..[116,4025+37])
                    Ptyp_constr "string" (lib/types.ml[116,4025+31]..[116,4025+37])
                    []
                ]
                None
              (lib/types.ml[117,4101+2]..[118,4117+60])
                "Val_self" (lib/types.ml[117,4101+4]..[117,4101+12])
                [
                  core_type (lib/types.ml[118,4117+6]..[118,4117+21])
                    Ptyp_constr "class_signature" (lib/types.ml[118,4117+6]..[118,4117+21])
                    []
                  core_type (lib/types.ml[118,4117+24]..[118,4117+34])
                    Ptyp_constr "self_meths" (lib/types.ml[118,4117+24]..[118,4117+34])
                    []
                  core_type (lib/types.ml[118,4117+37]..[118,4117+51])
                    Ptyp_constr "Vars.t" (lib/types.ml[118,4117+45]..[118,4117+51])
                    [
                      core_type (lib/types.ml[118,4117+37]..[118,4117+44])
                        Ptyp_constr "Ident.t" (lib/types.ml[118,4117+37]..[118,4117+44])
                        []
                    ]
                  core_type (lib/types.ml[118,4117+54]..[118,4117+60])
                    Ptyp_constr "string" (lib/types.ml[118,4117+54]..[118,4117+60])
                    []
                ]
                None
              (lib/types.ml[120,4229+2]..[120,4229+57])
                "Val_anc" (lib/types.ml[120,4229+4]..[120,4229+11])
                [
                  core_type (lib/types.ml[120,4229+15]..[120,4229+30])
                    Ptyp_constr "class_signature" (lib/types.ml[120,4229+15]..[120,4229+30])
                    []
                  core_type (lib/types.ml[120,4229+33]..[120,4229+48])
                    Ptyp_constr "Meths.t" (lib/types.ml[120,4229+41]..[120,4229+48])
                    [
                      core_type (lib/types.ml[120,4229+33]..[120,4229+40])
                        Ptyp_constr "Ident.t" (lib/types.ml[120,4229+33]..[120,4229+40])
                        []
                    ]
                  core_type (lib/types.ml[120,4229+51]..[120,4229+57])
                    Ptyp_constr "string" (lib/types.ml[120,4229+51]..[120,4229+57])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "self_meths" (lib/types.ml[123,4343+4]..[123,4343+14]) (lib/types.ml[123,4343+0]..[125,4397+39])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[124,4360+2]..[124,4360+36])
                "Self_concrete" (lib/types.ml[124,4360+4]..[124,4360+17])
                [
                  core_type (lib/types.ml[124,4360+21]..[124,4360+36])
                    Ptyp_constr "Meths.t" (lib/types.ml[124,4360+29]..[124,4360+36])
                    [
                      core_type (lib/types.ml[124,4360+21]..[124,4360+28])
                        Ptyp_constr "Ident.t" (lib/types.ml[124,4360+21]..[124,4360+28])
                        []
                    ]
                ]
                None
              (lib/types.ml[125,4397+2]..[125,4397+39])
                "Self_virtual" (lib/types.ml[125,4397+4]..[125,4397+16])
                [
                  core_type (lib/types.ml[125,4397+20]..[125,4397+39])
                    Ptyp_constr "ref" (lib/types.ml[125,4397+36]..[125,4397+39])
                    [
                      core_type (lib/types.ml[125,4397+20]..[125,4397+35])
                        Ptyp_constr "Meths.t" (lib/types.ml[125,4397+28]..[125,4397+35])
                        [
                          core_type (lib/types.ml[125,4397+20]..[125,4397+27])
                            Ptyp_constr "Ident.t" (lib/types.ml[125,4397+20]..[125,4397+27])
                            []
                        ]
                    ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_signature" (lib/types.ml[127,4438+4]..[127,4438+19]) (lib/types.ml[127,4438+0]..[131,4597+78])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[128,4460+4]..[128,4460+25])
                Immutable
                "csig_self" (lib/types.ml[128,4460+4]..[128,4460+13])                core_type (lib/types.ml[128,4460+15]..[128,4460+24])
                  Ptyp_constr "type_expr" (lib/types.ml[128,4460+15]..[128,4460+24])
                  []
              (lib/types.ml[129,4486+4]..[129,4486+37])
                Mutable
                "csig_self_row" (lib/types.ml[129,4486+12]..[129,4486+25])                core_type (lib/types.ml[129,4486+27]..[129,4486+36])
                  Ptyp_constr "type_expr" (lib/types.ml[129,4486+27]..[129,4486+36])
                  []
              (lib/types.ml[130,4524+4]..[130,4524+72])
                Mutable
                "csig_vars" (lib/types.ml[130,4524+12]..[130,4524+21])                core_type (lib/types.ml[130,4524+23]..[130,4524+71])
                  Ptyp_constr "Vars.t" (lib/types.ml[130,4524+65]..[130,4524+71])
                  [
                    core_type (lib/types.ml[130,4524+24]..[130,4524+63])
                      Ptyp_tuple
                      [
                        core_type (lib/types.ml[130,4524+24]..[130,4524+36])
                          Ptyp_constr "mutable_flag" (lib/types.ml[130,4524+24]..[130,4524+36])
                          []
                        core_type (lib/types.ml[130,4524+39]..[130,4524+51])
                          Ptyp_constr "virtual_flag" (lib/types.ml[130,4524+39]..[130,4524+51])
                          []
                        core_type (lib/types.ml[130,4524+54]..[130,4524+63])
                          Ptyp_constr "type_expr" (lib/types.ml[130,4524+54]..[130,4524+63])
                          []
                      ]
                  ]
              (lib/types.ml[131,4597+4]..[131,4597+76])
                Mutable
                "csig_meths" (lib/types.ml[131,4597+12]..[131,4597+22])                core_type (lib/types.ml[131,4597+24]..[131,4597+75])
                  Ptyp_constr "Meths.t" (lib/types.ml[131,4597+68]..[131,4597+75])
                  [
                    core_type (lib/types.ml[131,4597+25]..[131,4597+66])
                      Ptyp_tuple
                      [
                        core_type (lib/types.ml[131,4597+25]..[131,4597+39])
                          Ptyp_constr "method_privacy" (lib/types.ml[131,4597+25]..[131,4597+39])
                          []
                        core_type (lib/types.ml[131,4597+42]..[131,4597+54])
                          Ptyp_constr "virtual_flag" (lib/types.ml[131,4597+42]..[131,4597+54])
                          []
                        core_type (lib/types.ml[131,4597+57]..[131,4597+66])
                          Ptyp_constr "type_expr" (lib/types.ml[131,4597+57]..[131,4597+66])
                          []
                      ]
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "method_privacy" (lib/types.ml[133,4677+4]..[133,4677+18]) (lib/types.ml[133,4677+0]..[135,4710+26])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[134,4698+2]..[134,4698+11])
                "Mpublic" (lib/types.ml[134,4698+4]..[134,4698+11])
                []
                None
              (lib/types.ml[135,4710+2]..[135,4710+26])
                "Mprivate" (lib/types.ml[135,4710+4]..[135,4710+12])
                [
                  core_type (lib/types.ml[135,4710+16]..[135,4710+26])
                    Ptyp_constr "field_kind" (lib/types.ml[135,4710+16]..[135,4710+26])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[157,5365+0]..[203,7132+3])
    Pstr_module
    "Variance" (lib/types.ml[157,5365+7]..[157,5365+15])
      module_expr (lib/types.ml[157,5365+18]..[203,7132+3])
        Pmod_structure
        [
          structure_item (lib/types.ml[158,5390+2]..[158,5390+14])
            Pstr_type Rec
            [
              type_declaration "t" (lib/types.ml[158,5390+7]..[158,5390+8]) (lib/types.ml[158,5390+2]..[158,5390+14])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/types.ml[158,5390+11]..[158,5390+14])
                      Ptyp_constr "int" (lib/types.ml[158,5390+11]..[158,5390+14])
                      []
            ]
          structure_item (lib/types.ml[159,5405+2]..[159,5405+63])
            Pstr_type Rec
            [
              type_declaration "f" (lib/types.ml[159,5405+7]..[159,5405+8]) (lib/types.ml[159,5405+2]..[159,5405+63])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (lib/types.ml[159,5405+11]..[159,5405+18])
                        "May_pos" (lib/types.ml[159,5405+11]..[159,5405+18])
                        []
                        None
                      (lib/types.ml[159,5405+19]..[159,5405+28])
                        "May_neg" (lib/types.ml[159,5405+21]..[159,5405+28])
                        []
                        None
                      (lib/types.ml[159,5405+29]..[159,5405+39])
                        "May_weak" (lib/types.ml[159,5405+31]..[159,5405+39])
                        []
                        None
                      (lib/types.ml[159,5405+40]..[159,5405+45])
                        "Inj" (lib/types.ml[159,5405+42]..[159,5405+45])
                        []
                        None
                      (lib/types.ml[159,5405+46]..[159,5405+51])
                        "Pos" (lib/types.ml[159,5405+48]..[159,5405+51])
                        []
                        None
                      (lib/types.ml[159,5405+52]..[159,5405+57])
                        "Neg" (lib/types.ml[159,5405+54]..[159,5405+57])
                        []
                        None
                      (lib/types.ml[159,5405+58]..[159,5405+63])
                        "Inv" (lib/types.ml[159,5405+60]..[159,5405+63])
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (lib/types.ml[160,5469+2]..[167,5622+15])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[160,5469+6]..[160,5469+12])
                  Ppat_var "single" (lib/types.ml[160,5469+6]..[160,5469+12])
                expression (lib/types.ml[160,5469+15]..[167,5622+15])
                  Pexp_function
                  []
                  None
                  Pfunction_cases (lib/types.ml[160,5469+15]..[167,5622+15])
                    [
                      <case>
                        pattern (lib/types.ml[161,5493+6]..[161,5493+13])
                          Ppat_construct "May_pos" (lib/types.ml[161,5493+6]..[161,5493+13])
                          None
                        expression (lib/types.ml[161,5493+17]..[161,5493+18])
                          Pexp_constant PConst_int (1,None)
                      <case>
                        pattern (lib/types.ml[162,5512+6]..[162,5512+13])
                          Ppat_construct "May_neg" (lib/types.ml[162,5512+6]..[162,5512+13])
                          None
                        expression (lib/types.ml[162,5512+17]..[162,5512+22])
                          Pexp_apply
                          expression (lib/types.ml[162,5512+19]..[162,5512+20])
                            Pexp_ident "+" (lib/types.ml[162,5512+19]..[162,5512+20])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[162,5512+17]..[162,5512+18])
                                Pexp_constant PConst_int (2,None)
                            <arg>
                            Nolabel
                              expression (lib/types.ml[162,5512+21]..[162,5512+22])
                                Pexp_constant PConst_int (4,None)
                          ]
                      <case>
                        pattern (lib/types.ml[163,5535+6]..[163,5535+14])
                          Ppat_construct "May_weak" (lib/types.ml[163,5535+6]..[163,5535+14])
                          None
                        expression (lib/types.ml[163,5535+18]..[163,5535+19])
                          Pexp_constant PConst_int (4,None)
                      <case>
                        pattern (lib/types.ml[164,5555+6]..[164,5555+9])
                          Ppat_construct "Inj" (lib/types.ml[164,5555+6]..[164,5555+9])
                          None
                        expression (lib/types.ml[164,5555+13]..[164,5555+14])
                          Pexp_constant PConst_int (8,None)
                      <case>
                        pattern (lib/types.ml[165,5570+6]..[165,5570+9])
                          Ppat_construct "Pos" (lib/types.ml[165,5570+6]..[165,5570+9])
                          None
                        expression (lib/types.ml[165,5570+13]..[165,5570+23])
                          Pexp_apply
                          expression (lib/types.ml[165,5570+20]..[165,5570+21])
                            Pexp_ident "+" (lib/types.ml[165,5570+20]..[165,5570+21])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[165,5570+13]..[165,5570+19])
                                Pexp_apply
                                expression (lib/types.ml[165,5570+16]..[165,5570+17])
                                  Pexp_ident "+" (lib/types.ml[165,5570+16]..[165,5570+17])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[165,5570+13]..[165,5570+15])
                                      Pexp_constant PConst_int (16,None)
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[165,5570+18]..[165,5570+19])
                                      Pexp_constant PConst_int (8,None)
                                ]
                            <arg>
                            Nolabel
                              expression (lib/types.ml[165,5570+22]..[165,5570+23])
                                Pexp_constant PConst_int (1,None)
                          ]
                      <case>
                        pattern (lib/types.ml[166,5594+6]..[166,5594+9])
                          Ppat_construct "Neg" (lib/types.ml[166,5594+6]..[166,5594+9])
                          None
                        expression (lib/types.ml[166,5594+13]..[166,5594+27])
                          Pexp_apply
                          expression (lib/types.ml[166,5594+24]..[166,5594+25])
                            Pexp_ident "+" (lib/types.ml[166,5594+24]..[166,5594+25])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[166,5594+13]..[166,5594+23])
                                Pexp_apply
                                expression (lib/types.ml[166,5594+20]..[166,5594+21])
                                  Pexp_ident "+" (lib/types.ml[166,5594+20]..[166,5594+21])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[166,5594+13]..[166,5594+19])
                                      Pexp_apply
                                      expression (lib/types.ml[166,5594+16]..[166,5594+17])
                                        Pexp_ident "+" (lib/types.ml[166,5594+16]..[166,5594+17])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[166,5594+13]..[166,5594+15])
                                            Pexp_constant PConst_int (32,None)
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[166,5594+18]..[166,5594+19])
                                            Pexp_constant PConst_int (8,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[166,5594+22]..[166,5594+23])
                                      Pexp_constant PConst_int (4,None)
                                ]
                            <arg>
                            Nolabel
                              expression (lib/types.ml[166,5594+26]..[166,5594+27])
                                Pexp_constant PConst_int (2,None)
                          ]
                      <case>
                        pattern (lib/types.ml[167,5622+6]..[167,5622+9])
                          Ppat_construct "Inv" (lib/types.ml[167,5622+6]..[167,5622+9])
                          None
                        expression (lib/types.ml[167,5622+13]..[167,5622+15])
                          Pexp_constant PConst_int (63,None)
                    ]
            ]
          structure_item (lib/types.ml[168,5638+2]..[168,5638+29])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[168,5638+6]..[168,5638+11])
                  Ppat_var "union" (lib/types.ml[168,5638+6]..[168,5638+11])
                expression (lib/types.ml[168,5638+12]..[168,5638+29]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[168,5638+12]..[168,5638+14])
                      Nolabel
                      None
                      pattern (lib/types.ml[168,5638+12]..[168,5638+14])
                        Ppat_var "v1" (lib/types.ml[168,5638+12]..[168,5638+14])
                    Pparam_val (lib/types.ml[168,5638+15]..[168,5638+17])
                      Nolabel
                      None
                      pattern (lib/types.ml[168,5638+15]..[168,5638+17])
                        Ppat_var "v2" (lib/types.ml[168,5638+15]..[168,5638+17])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[168,5638+20]..[168,5638+29])
                      Pexp_apply
                      expression (lib/types.ml[168,5638+23]..[168,5638+26])
                        Pexp_ident "lor" (lib/types.ml[168,5638+23]..[168,5638+26])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[168,5638+20]..[168,5638+22])
                            Pexp_ident "v1" (lib/types.ml[168,5638+20]..[168,5638+22])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[168,5638+27]..[168,5638+29])
                            Pexp_ident "v2" (lib/types.ml[168,5638+27]..[168,5638+29])
                      ]
            ]
          structure_item (lib/types.ml[169,5668+2]..[169,5668+30])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[169,5668+6]..[169,5668+11])
                  Ppat_var "inter" (lib/types.ml[169,5668+6]..[169,5668+11])
                expression (lib/types.ml[169,5668+12]..[169,5668+30]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[169,5668+12]..[169,5668+14])
                      Nolabel
                      None
                      pattern (lib/types.ml[169,5668+12]..[169,5668+14])
                        Ppat_var "v1" (lib/types.ml[169,5668+12]..[169,5668+14])
                    Pparam_val (lib/types.ml[169,5668+15]..[169,5668+17])
                      Nolabel
                      None
                      pattern (lib/types.ml[169,5668+15]..[169,5668+17])
                        Ppat_var "v2" (lib/types.ml[169,5668+15]..[169,5668+17])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[169,5668+20]..[169,5668+30])
                      Pexp_apply
                      expression (lib/types.ml[169,5668+23]..[169,5668+27])
                        Pexp_ident "land" (lib/types.ml[169,5668+23]..[169,5668+27])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[169,5668+20]..[169,5668+22])
                            Pexp_ident "v1" (lib/types.ml[169,5668+20]..[169,5668+22])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[169,5668+28]..[169,5668+30])
                            Pexp_ident "v2" (lib/types.ml[169,5668+28]..[169,5668+30])
                      ]
            ]
          structure_item (lib/types.ml[170,5699+2]..[170,5699+38])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[170,5699+6]..[170,5699+12])
                  Ppat_var "subset" (lib/types.ml[170,5699+6]..[170,5699+12])
                expression (lib/types.ml[170,5699+13]..[170,5699+38]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[170,5699+13]..[170,5699+15])
                      Nolabel
                      None
                      pattern (lib/types.ml[170,5699+13]..[170,5699+15])
                        Ppat_var "v1" (lib/types.ml[170,5699+13]..[170,5699+15])
                    Pparam_val (lib/types.ml[170,5699+16]..[170,5699+18])
                      Nolabel
                      None
                      pattern (lib/types.ml[170,5699+16]..[170,5699+18])
                        Ppat_var "v2" (lib/types.ml[170,5699+16]..[170,5699+18])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[170,5699+21]..[170,5699+38])
                      Pexp_apply
                      expression (lib/types.ml[170,5699+33]..[170,5699+34])
                        Pexp_ident "=" (lib/types.ml[170,5699+33]..[170,5699+34])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[170,5699+22]..[170,5699+32])
                            Pexp_apply
                            expression (lib/types.ml[170,5699+25]..[170,5699+29])
                              Pexp_ident "land" (lib/types.ml[170,5699+25]..[170,5699+29])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[170,5699+22]..[170,5699+24])
                                  Pexp_ident "v1" (lib/types.ml[170,5699+22]..[170,5699+24])
                              <arg>
                              Nolabel
                                expression (lib/types.ml[170,5699+30]..[170,5699+32])
                                  Pexp_ident "v2" (lib/types.ml[170,5699+30]..[170,5699+32])
                            ]
                        <arg>
                        Nolabel
                          expression (lib/types.ml[170,5699+35]..[170,5699+37])
                            Pexp_ident "v1" (lib/types.ml[170,5699+35]..[170,5699+37])
                      ]
            ]
          structure_item (lib/types.ml[171,5738+2]..[171,5738+32])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[171,5738+6]..[171,5738+8])
                  Ppat_var "eq" (lib/types.ml[171,5738+6]..[171,5738+8])
                expression (lib/types.ml[171,5738+9]..[171,5738+32]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[171,5738+9]..[171,5738+17])
                      Nolabel
                      None
                      pattern (lib/types.ml[171,5738+9]..[171,5738+17])
                        Ppat_constraint
                        pattern (lib/types.ml[171,5738+10]..[171,5738+12])
                          Ppat_var "v1" (lib/types.ml[171,5738+10]..[171,5738+12])
                        core_type (lib/types.ml[171,5738+15]..[171,5738+16])
                          Ptyp_constr "t" (lib/types.ml[171,5738+15]..[171,5738+16])
                          []
                    Pparam_val (lib/types.ml[171,5738+18]..[171,5738+20])
                      Nolabel
                      None
                      pattern (lib/types.ml[171,5738+18]..[171,5738+20])
                        Ppat_var "v2" (lib/types.ml[171,5738+18]..[171,5738+20])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[171,5738+23]..[171,5738+32])
                      Pexp_apply
                      expression (lib/types.ml[171,5738+27]..[171,5738+28])
                        Pexp_ident "=" (lib/types.ml[171,5738+27]..[171,5738+28])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[171,5738+24]..[171,5738+26])
                            Pexp_ident "v1" (lib/types.ml[171,5738+24]..[171,5738+26])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[171,5738+29]..[171,5738+31])
                            Pexp_ident "v2" (lib/types.ml[171,5738+29]..[171,5738+31])
                      ]
            ]
          structure_item (lib/types.ml[172,5771+2]..[172,5771+34])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[172,5771+6]..[172,5771+9])
                  Ppat_var "set" (lib/types.ml[172,5771+6]..[172,5771+9])
                expression (lib/types.ml[172,5771+10]..[172,5771+34]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[172,5771+10]..[172,5771+11])
                      Nolabel
                      None
                      pattern (lib/types.ml[172,5771+10]..[172,5771+11])
                        Ppat_var "x" (lib/types.ml[172,5771+10]..[172,5771+11])
                    Pparam_val (lib/types.ml[172,5771+12]..[172,5771+13])
                      Nolabel
                      None
                      pattern (lib/types.ml[172,5771+12]..[172,5771+13])
                        Ppat_var "v" (lib/types.ml[172,5771+12]..[172,5771+13])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[172,5771+16]..[172,5771+34])
                      Pexp_apply
                      expression (lib/types.ml[172,5771+16]..[172,5771+21])
                        Pexp_ident "union" (lib/types.ml[172,5771+16]..[172,5771+21])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[172,5771+22]..[172,5771+23])
                            Pexp_ident "v" (lib/types.ml[172,5771+22]..[172,5771+23])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[172,5771+24]..[172,5771+34])
                            Pexp_apply
                            expression (lib/types.ml[172,5771+25]..[172,5771+31])
                              Pexp_ident "single" (lib/types.ml[172,5771+25]..[172,5771+31])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[172,5771+32]..[172,5771+33])
                                  Pexp_ident "x" (lib/types.ml[172,5771+32]..[172,5771+33])
                            ]
                      ]
            ]
          structure_item (lib/types.ml[173,5806+2]..[173,5806+45])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[173,5806+6]..[173,5806+12])
                  Ppat_var "set_if" (lib/types.ml[173,5806+6]..[173,5806+12])
                expression (lib/types.ml[173,5806+13]..[173,5806+45]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[173,5806+13]..[173,5806+14])
                      Nolabel
                      None
                      pattern (lib/types.ml[173,5806+13]..[173,5806+14])
                        Ppat_var "b" (lib/types.ml[173,5806+13]..[173,5806+14])
                    Pparam_val (lib/types.ml[173,5806+15]..[173,5806+16])
                      Nolabel
                      None
                      pattern (lib/types.ml[173,5806+15]..[173,5806+16])
                        Ppat_var "x" (lib/types.ml[173,5806+15]..[173,5806+16])
                    Pparam_val (lib/types.ml[173,5806+17]..[173,5806+18])
                      Nolabel
                      None
                      pattern (lib/types.ml[173,5806+17]..[173,5806+18])
                        Ppat_var "v" (lib/types.ml[173,5806+17]..[173,5806+18])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[173,5806+21]..[173,5806+45])
                      Pexp_ifthenelse
                      expression (lib/types.ml[173,5806+24]..[173,5806+25])
                        Pexp_ident "b" (lib/types.ml[173,5806+24]..[173,5806+25])
                      expression (lib/types.ml[173,5806+31]..[173,5806+38])
                        Pexp_apply
                        expression (lib/types.ml[173,5806+31]..[173,5806+34])
                          Pexp_ident "set" (lib/types.ml[173,5806+31]..[173,5806+34])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[173,5806+35]..[173,5806+36])
                              Pexp_ident "x" (lib/types.ml[173,5806+35]..[173,5806+36])
                          <arg>
                          Nolabel
                            expression (lib/types.ml[173,5806+37]..[173,5806+38])
                              Pexp_ident "v" (lib/types.ml[173,5806+37]..[173,5806+38])
                        ]
                      Some
                        expression (lib/types.ml[173,5806+44]..[173,5806+45])
                          Pexp_ident "v" (lib/types.ml[173,5806+44]..[173,5806+45])
            ]
          structure_item (lib/types.ml[174,5852+2]..[174,5852+31])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[174,5852+6]..[174,5852+9])
                  Ppat_var "mem" (lib/types.ml[174,5852+6]..[174,5852+9])
                expression (lib/types.ml[174,5852+10]..[174,5852+31]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[174,5852+10]..[174,5852+11])
                      Nolabel
                      None
                      pattern (lib/types.ml[174,5852+10]..[174,5852+11])
                        Ppat_var "x" (lib/types.ml[174,5852+10]..[174,5852+11])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[174,5852+14]..[174,5852+31])
                      Pexp_apply
                      expression (lib/types.ml[174,5852+14]..[174,5852+20])
                        Pexp_ident "subset" (lib/types.ml[174,5852+14]..[174,5852+20])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[174,5852+21]..[174,5852+31])
                            Pexp_apply
                            expression (lib/types.ml[174,5852+22]..[174,5852+28])
                              Pexp_ident "single" (lib/types.ml[174,5852+22]..[174,5852+28])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[174,5852+29]..[174,5852+30])
                                  Pexp_ident "x" (lib/types.ml[174,5852+29]..[174,5852+30])
                            ]
                      ]
            ]
          structure_item (lib/types.ml[175,5884+2]..[175,5884+14])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[175,5884+6]..[175,5884+10])
                  Ppat_var "null" (lib/types.ml[175,5884+6]..[175,5884+10])
                expression (lib/types.ml[175,5884+13]..[175,5884+14])
                  Pexp_constant PConst_int (0,None)
            ]
          structure_item (lib/types.ml[176,5899+2]..[176,5899+17])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[176,5899+6]..[176,5899+13])
                  Ppat_var "unknown" (lib/types.ml[176,5899+6]..[176,5899+13])
                expression (lib/types.ml[176,5899+16]..[176,5899+17])
                  Pexp_constant PConst_int (7,None)
            ]
          structure_item (lib/types.ml[177,5917+2]..[177,5917+23])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[177,5917+6]..[177,5917+10])
                  Ppat_var "full" (lib/types.ml[177,5917+6]..[177,5917+10])
                expression (lib/types.ml[177,5917+13]..[177,5917+23])
                  Pexp_apply
                  expression (lib/types.ml[177,5917+13]..[177,5917+19])
                    Pexp_ident "single" (lib/types.ml[177,5917+13]..[177,5917+19])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[177,5917+20]..[177,5917+23])
                        Pexp_construct "Inv" (lib/types.ml[177,5917+20]..[177,5917+23])
                        None
                  ]
            ]
          structure_item (lib/types.ml[178,5941+2]..[178,5941+28])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[178,5941+6]..[178,5941+15])
                  Ppat_var "covariant" (lib/types.ml[178,5941+6]..[178,5941+15])
                expression (lib/types.ml[178,5941+18]..[178,5941+28])
                  Pexp_apply
                  expression (lib/types.ml[178,5941+18]..[178,5941+24])
                    Pexp_ident "single" (lib/types.ml[178,5941+18]..[178,5941+24])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[178,5941+25]..[178,5941+28])
                        Pexp_construct "Pos" (lib/types.ml[178,5941+25]..[178,5941+28])
                        None
                  ]
            ]
          structure_item (lib/types.ml[179,5970+2]..[180,5994+50])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[179,5970+6]..[179,5970+10])
                  Ppat_var "swap" (lib/types.ml[179,5970+6]..[179,5970+10])
                expression (lib/types.ml[179,5970+11]..[180,5994+50]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[179,5970+11]..[179,5970+13])
                      Nolabel
                      None
                      pattern (lib/types.ml[179,5970+11]..[179,5970+13])
                        Ppat_var "f1" (lib/types.ml[179,5970+11]..[179,5970+13])
                    Pparam_val (lib/types.ml[179,5970+14]..[179,5970+16])
                      Nolabel
                      None
                      pattern (lib/types.ml[179,5970+14]..[179,5970+16])
                        Ppat_var "f2" (lib/types.ml[179,5970+14]..[179,5970+16])
                    Pparam_val (lib/types.ml[179,5970+17]..[179,5970+18])
                      Nolabel
                      None
                      pattern (lib/types.ml[179,5970+17]..[179,5970+18])
                        Ppat_var "v" (lib/types.ml[179,5970+17]..[179,5970+18])
                    Pparam_val (lib/types.ml[179,5970+19]..[179,5970+21])
                      Nolabel
                      None
                      pattern (lib/types.ml[179,5970+19]..[179,5970+21])
                        Ppat_var "v'" (lib/types.ml[179,5970+19]..[179,5970+21])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[180,5994+4]..[180,5994+50])
                      Pexp_apply
                      expression (lib/types.ml[180,5994+4]..[180,5994+10])
                        Pexp_ident "set_if" (lib/types.ml[180,5994+4]..[180,5994+10])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[180,5994+11]..[180,5994+21])
                            Pexp_apply
                            expression (lib/types.ml[180,5994+12]..[180,5994+15])
                              Pexp_ident "mem" (lib/types.ml[180,5994+12]..[180,5994+15])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[180,5994+16]..[180,5994+18])
                                  Pexp_ident "f2" (lib/types.ml[180,5994+16]..[180,5994+18])
                              <arg>
                              Nolabel
                                expression (lib/types.ml[180,5994+19]..[180,5994+20])
                                  Pexp_ident "v" (lib/types.ml[180,5994+19]..[180,5994+20])
                            ]
                        <arg>
                        Nolabel
                          expression (lib/types.ml[180,5994+22]..[180,5994+24])
                            Pexp_ident "f1" (lib/types.ml[180,5994+22]..[180,5994+24])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[180,5994+25]..[180,5994+50])
                            Pexp_apply
                            expression (lib/types.ml[180,5994+26]..[180,5994+32])
                              Pexp_ident "set_if" (lib/types.ml[180,5994+26]..[180,5994+32])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[180,5994+33]..[180,5994+43])
                                  Pexp_apply
                                  expression (lib/types.ml[180,5994+34]..[180,5994+37])
                                    Pexp_ident "mem" (lib/types.ml[180,5994+34]..[180,5994+37])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/types.ml[180,5994+38]..[180,5994+40])
                                        Pexp_ident "f1" (lib/types.ml[180,5994+38]..[180,5994+40])
                                    <arg>
                                    Nolabel
                                      expression (lib/types.ml[180,5994+41]..[180,5994+42])
                                        Pexp_ident "v" (lib/types.ml[180,5994+41]..[180,5994+42])
                                  ]
                              <arg>
                              Nolabel
                                expression (lib/types.ml[180,5994+44]..[180,5994+46])
                                  Pexp_ident "f2" (lib/types.ml[180,5994+44]..[180,5994+46])
                              <arg>
                              Nolabel
                                expression (lib/types.ml[180,5994+47]..[180,5994+49])
                                  Pexp_ident "v'" (lib/types.ml[180,5994+47]..[180,5994+49])
                            ]
                      ]
            ]
          structure_item (lib/types.ml[181,6045+2]..[183,6128+46])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[181,6045+6]..[181,6045+15])
                  Ppat_var "conjugate" (lib/types.ml[181,6045+6]..[181,6045+15])
                expression (lib/types.ml[181,6045+16]..[183,6128+46]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[181,6045+16]..[181,6045+17])
                      Nolabel
                      None
                      pattern (lib/types.ml[181,6045+16]..[181,6045+17])
                        Ppat_var "v" (lib/types.ml[181,6045+16]..[181,6045+17])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[182,6065+4]..[183,6128+46])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lib/types.ml[182,6065+8]..[182,6065+10])
                            Ppat_var "v'" (lib/types.ml[182,6065+8]..[182,6065+10])
                          expression (lib/types.ml[182,6065+13]..[182,6065+59])
                            Pexp_apply
                            expression (lib/types.ml[182,6065+13]..[182,6065+18])
                              Pexp_ident "inter" (lib/types.ml[182,6065+13]..[182,6065+18])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[182,6065+19]..[182,6065+20])
                                  Pexp_ident "v" (lib/types.ml[182,6065+19]..[182,6065+20])
                              <arg>
                              Nolabel
                                expression (lib/types.ml[182,6065+21]..[182,6065+59])
                                  Pexp_apply
                                  expression (lib/types.ml[182,6065+22]..[182,6065+27])
                                    Pexp_ident "union" (lib/types.ml[182,6065+22]..[182,6065+27])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/types.ml[182,6065+28]..[182,6065+40])
                                        Pexp_apply
                                        expression (lib/types.ml[182,6065+29]..[182,6065+35])
                                          Pexp_ident "single" (lib/types.ml[182,6065+29]..[182,6065+35])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/types.ml[182,6065+36]..[182,6065+39])
                                              Pexp_construct "Inj" (lib/types.ml[182,6065+36]..[182,6065+39])
                                              None
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (lib/types.ml[182,6065+41]..[182,6065+58])
                                        Pexp_apply
                                        expression (lib/types.ml[182,6065+42]..[182,6065+48])
                                          Pexp_ident "single" (lib/types.ml[182,6065+42]..[182,6065+48])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/types.ml[182,6065+49]..[182,6065+57])
                                              Pexp_construct "May_weak" (lib/types.ml[182,6065+49]..[182,6065+57])
                                              None
                                        ]
                                  ]
                            ]
                      ]
                      expression (lib/types.ml[183,6128+4]..[183,6128+46])
                        Pexp_apply
                        expression (lib/types.ml[183,6128+4]..[183,6128+8])
                          Pexp_ident "swap" (lib/types.ml[183,6128+4]..[183,6128+8])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[183,6128+9]..[183,6128+12])
                              Pexp_construct "Pos" (lib/types.ml[183,6128+9]..[183,6128+12])
                              None
                          <arg>
                          Nolabel
                            expression (lib/types.ml[183,6128+13]..[183,6128+16])
                              Pexp_construct "Neg" (lib/types.ml[183,6128+13]..[183,6128+16])
                              None
                          <arg>
                          Nolabel
                            expression (lib/types.ml[183,6128+17]..[183,6128+18])
                              Pexp_ident "v" (lib/types.ml[183,6128+17]..[183,6128+18])
                          <arg>
                          Nolabel
                            expression (lib/types.ml[183,6128+19]..[183,6128+46])
                              Pexp_apply
                              expression (lib/types.ml[183,6128+20]..[183,6128+24])
                                Pexp_ident "swap" (lib/types.ml[183,6128+20]..[183,6128+24])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[183,6128+25]..[183,6128+32])
                                    Pexp_construct "May_pos" (lib/types.ml[183,6128+25]..[183,6128+32])
                                    None
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[183,6128+33]..[183,6128+40])
                                    Pexp_construct "May_neg" (lib/types.ml[183,6128+33]..[183,6128+40])
                                    None
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[183,6128+41]..[183,6128+42])
                                    Pexp_ident "v" (lib/types.ml[183,6128+41]..[183,6128+42])
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[183,6128+43]..[183,6128+45])
                                    Pexp_ident "v'" (lib/types.ml[183,6128+43]..[183,6128+45])
                              ]
                        ]
            ]
          structure_item (lib/types.ml[184,6175+2]..[195,6726+76])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[184,6175+6]..[184,6175+13])
                  Ppat_var "compose" (lib/types.ml[184,6175+6]..[184,6175+13])
                expression (lib/types.ml[184,6175+14]..[195,6726+76]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[184,6175+14]..[184,6175+16])
                      Nolabel
                      None
                      pattern (lib/types.ml[184,6175+14]..[184,6175+16])
                        Ppat_var "v1" (lib/types.ml[184,6175+14]..[184,6175+16])
                    Pparam_val (lib/types.ml[184,6175+17]..[184,6175+19])
                      Nolabel
                      None
                      pattern (lib/types.ml[184,6175+17]..[184,6175+19])
                        Ppat_var "v2" (lib/types.ml[184,6175+17]..[184,6175+19])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[185,6197+4]..[195,6726+76])
                      Pexp_ifthenelse
                      expression (lib/types.ml[185,6197+7]..[185,6197+31])
                        Pexp_apply
                        expression (lib/types.ml[185,6197+18]..[185,6197+20])
                          Pexp_ident "&&" (lib/types.ml[185,6197+18]..[185,6197+20])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[185,6197+7]..[185,6197+17])
                              Pexp_apply
                              expression (lib/types.ml[185,6197+7]..[185,6197+10])
                                Pexp_ident "mem" (lib/types.ml[185,6197+7]..[185,6197+10])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[185,6197+11]..[185,6197+14])
                                    Pexp_construct "Inv" (lib/types.ml[185,6197+11]..[185,6197+14])
                                    None
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[185,6197+15]..[185,6197+17])
                                    Pexp_ident "v1" (lib/types.ml[185,6197+15]..[185,6197+17])
                              ]
                          <arg>
                          Nolabel
                            expression (lib/types.ml[185,6197+21]..[185,6197+31])
                              Pexp_apply
                              expression (lib/types.ml[185,6197+21]..[185,6197+24])
                                Pexp_ident "mem" (lib/types.ml[185,6197+21]..[185,6197+24])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[185,6197+25]..[185,6197+28])
                                    Pexp_construct "Inj" (lib/types.ml[185,6197+25]..[185,6197+28])
                                    None
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[185,6197+29]..[185,6197+31])
                                    Pexp_ident "v2" (lib/types.ml[185,6197+29]..[185,6197+31])
                              ]
                        ]
                      expression (lib/types.ml[185,6197+37]..[185,6197+41])
                        Pexp_ident "full" (lib/types.ml[185,6197+37]..[185,6197+41])
                      Some
                        expression (lib/types.ml[186,6244+4]..[195,6726+76])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/types.ml[186,6244+8]..[186,6244+10])
                                Ppat_var "mp" (lib/types.ml[186,6244+8]..[186,6244+10])
                              expression (lib/types.ml[187,6257+6]..[187,6257+74])
                                Pexp_apply
                                expression (lib/types.ml[187,6257+39]..[187,6257+41])
                                  Pexp_ident "||" (lib/types.ml[187,6257+39]..[187,6257+41])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[187,6257+6]..[187,6257+38])
                                      Pexp_apply
                                      expression (lib/types.ml[187,6257+21]..[187,6257+23])
                                        Pexp_ident "&&" (lib/types.ml[187,6257+21]..[187,6257+23])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[187,6257+6]..[187,6257+20])
                                            Pexp_apply
                                            expression (lib/types.ml[187,6257+6]..[187,6257+9])
                                              Pexp_ident "mem" (lib/types.ml[187,6257+6]..[187,6257+9])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[187,6257+10]..[187,6257+17])
                                                  Pexp_construct "May_pos" (lib/types.ml[187,6257+10]..[187,6257+17])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[187,6257+18]..[187,6257+20])
                                                  Pexp_ident "v1" (lib/types.ml[187,6257+18]..[187,6257+20])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[187,6257+24]..[187,6257+38])
                                            Pexp_apply
                                            expression (lib/types.ml[187,6257+24]..[187,6257+27])
                                              Pexp_ident "mem" (lib/types.ml[187,6257+24]..[187,6257+27])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[187,6257+28]..[187,6257+35])
                                                  Pexp_construct "May_pos" (lib/types.ml[187,6257+28]..[187,6257+35])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[187,6257+36]..[187,6257+38])
                                                  Pexp_ident "v2" (lib/types.ml[187,6257+36]..[187,6257+38])
                                            ]
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[187,6257+42]..[187,6257+74])
                                      Pexp_apply
                                      expression (lib/types.ml[187,6257+57]..[187,6257+59])
                                        Pexp_ident "&&" (lib/types.ml[187,6257+57]..[187,6257+59])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[187,6257+42]..[187,6257+56])
                                            Pexp_apply
                                            expression (lib/types.ml[187,6257+42]..[187,6257+45])
                                              Pexp_ident "mem" (lib/types.ml[187,6257+42]..[187,6257+45])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[187,6257+46]..[187,6257+53])
                                                  Pexp_construct "May_neg" (lib/types.ml[187,6257+46]..[187,6257+53])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[187,6257+54]..[187,6257+56])
                                                  Pexp_ident "v1" (lib/types.ml[187,6257+54]..[187,6257+56])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[187,6257+60]..[187,6257+74])
                                            Pexp_apply
                                            expression (lib/types.ml[187,6257+60]..[187,6257+63])
                                              Pexp_ident "mem" (lib/types.ml[187,6257+60]..[187,6257+63])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[187,6257+64]..[187,6257+71])
                                                  Pexp_construct "May_neg" (lib/types.ml[187,6257+64]..[187,6257+71])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[187,6257+72]..[187,6257+74])
                                                  Pexp_ident "v2" (lib/types.ml[187,6257+72]..[187,6257+74])
                                            ]
                                      ]
                                ]
                            <def>
                              pattern (lib/types.ml[188,6332+8]..[188,6332+10])
                                Ppat_var "mn" (lib/types.ml[188,6332+8]..[188,6332+10])
                              expression (lib/types.ml[189,6345+6]..[189,6345+74])
                                Pexp_apply
                                expression (lib/types.ml[189,6345+39]..[189,6345+41])
                                  Pexp_ident "||" (lib/types.ml[189,6345+39]..[189,6345+41])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[189,6345+6]..[189,6345+38])
                                      Pexp_apply
                                      expression (lib/types.ml[189,6345+21]..[189,6345+23])
                                        Pexp_ident "&&" (lib/types.ml[189,6345+21]..[189,6345+23])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[189,6345+6]..[189,6345+20])
                                            Pexp_apply
                                            expression (lib/types.ml[189,6345+6]..[189,6345+9])
                                              Pexp_ident "mem" (lib/types.ml[189,6345+6]..[189,6345+9])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[189,6345+10]..[189,6345+17])
                                                  Pexp_construct "May_pos" (lib/types.ml[189,6345+10]..[189,6345+17])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[189,6345+18]..[189,6345+20])
                                                  Pexp_ident "v1" (lib/types.ml[189,6345+18]..[189,6345+20])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[189,6345+24]..[189,6345+38])
                                            Pexp_apply
                                            expression (lib/types.ml[189,6345+24]..[189,6345+27])
                                              Pexp_ident "mem" (lib/types.ml[189,6345+24]..[189,6345+27])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[189,6345+28]..[189,6345+35])
                                                  Pexp_construct "May_neg" (lib/types.ml[189,6345+28]..[189,6345+35])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[189,6345+36]..[189,6345+38])
                                                  Pexp_ident "v2" (lib/types.ml[189,6345+36]..[189,6345+38])
                                            ]
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[189,6345+42]..[189,6345+74])
                                      Pexp_apply
                                      expression (lib/types.ml[189,6345+57]..[189,6345+59])
                                        Pexp_ident "&&" (lib/types.ml[189,6345+57]..[189,6345+59])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[189,6345+42]..[189,6345+56])
                                            Pexp_apply
                                            expression (lib/types.ml[189,6345+42]..[189,6345+45])
                                              Pexp_ident "mem" (lib/types.ml[189,6345+42]..[189,6345+45])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[189,6345+46]..[189,6345+53])
                                                  Pexp_construct "May_neg" (lib/types.ml[189,6345+46]..[189,6345+53])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[189,6345+54]..[189,6345+56])
                                                  Pexp_ident "v1" (lib/types.ml[189,6345+54]..[189,6345+56])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[189,6345+60]..[189,6345+74])
                                            Pexp_apply
                                            expression (lib/types.ml[189,6345+60]..[189,6345+63])
                                              Pexp_ident "mem" (lib/types.ml[189,6345+60]..[189,6345+63])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[189,6345+64]..[189,6345+71])
                                                  Pexp_construct "May_pos" (lib/types.ml[189,6345+64]..[189,6345+71])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[189,6345+72]..[189,6345+74])
                                                  Pexp_ident "v2" (lib/types.ml[189,6345+72]..[189,6345+74])
                                            ]
                                      ]
                                ]
                            <def>
                              pattern (lib/types.ml[190,6420+8]..[190,6420+10])
                                Ppat_var "mw" (lib/types.ml[190,6420+8]..[190,6420+10])
                              expression (lib/types.ml[190,6420+13]..[190,6420+75])
                                Pexp_apply
                                expression (lib/types.ml[190,6420+43]..[190,6420+45])
                                  Pexp_ident "||" (lib/types.ml[190,6420+43]..[190,6420+45])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[190,6420+13]..[190,6420+42])
                                      Pexp_apply
                                      expression (lib/types.ml[190,6420+29]..[190,6420+31])
                                        Pexp_ident "&&" (lib/types.ml[190,6420+29]..[190,6420+31])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[190,6420+13]..[190,6420+28])
                                            Pexp_apply
                                            expression (lib/types.ml[190,6420+13]..[190,6420+16])
                                              Pexp_ident "mem" (lib/types.ml[190,6420+13]..[190,6420+16])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[190,6420+17]..[190,6420+25])
                                                  Pexp_construct "May_weak" (lib/types.ml[190,6420+17]..[190,6420+25])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[190,6420+26]..[190,6420+28])
                                                  Pexp_ident "v1" (lib/types.ml[190,6420+26]..[190,6420+28])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[190,6420+32]..[190,6420+42])
                                            Pexp_apply
                                            expression (lib/types.ml[190,6420+35]..[190,6420+37])
                                              Pexp_ident "<>" (lib/types.ml[190,6420+35]..[190,6420+37])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[190,6420+32]..[190,6420+34])
                                                  Pexp_ident "v2" (lib/types.ml[190,6420+32]..[190,6420+34])
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[190,6420+38]..[190,6420+42])
                                                  Pexp_ident "null" (lib/types.ml[190,6420+38]..[190,6420+42])
                                            ]
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[190,6420+46]..[190,6420+75])
                                      Pexp_apply
                                      expression (lib/types.ml[190,6420+57]..[190,6420+59])
                                        Pexp_ident "&&" (lib/types.ml[190,6420+57]..[190,6420+59])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[190,6420+46]..[190,6420+56])
                                            Pexp_apply
                                            expression (lib/types.ml[190,6420+49]..[190,6420+51])
                                              Pexp_ident "<>" (lib/types.ml[190,6420+49]..[190,6420+51])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[190,6420+46]..[190,6420+48])
                                                  Pexp_ident "v1" (lib/types.ml[190,6420+46]..[190,6420+48])
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[190,6420+52]..[190,6420+56])
                                                  Pexp_ident "null" (lib/types.ml[190,6420+52]..[190,6420+56])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[190,6420+60]..[190,6420+75])
                                            Pexp_apply
                                            expression (lib/types.ml[190,6420+60]..[190,6420+63])
                                              Pexp_ident "mem" (lib/types.ml[190,6420+60]..[190,6420+63])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[190,6420+64]..[190,6420+72])
                                                  Pexp_construct "May_weak" (lib/types.ml[190,6420+64]..[190,6420+72])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[190,6420+73]..[190,6420+75])
                                                  Pexp_ident "v2" (lib/types.ml[190,6420+73]..[190,6420+75])
                                            ]
                                      ]
                                ]
                            <def>
                              pattern (lib/types.ml[191,6496+8]..[191,6496+11])
                                Ppat_var "inj" (lib/types.ml[191,6496+8]..[191,6496+11])
                              expression (lib/types.ml[191,6496+14]..[191,6496+38])
                                Pexp_apply
                                expression (lib/types.ml[191,6496+25]..[191,6496+27])
                                  Pexp_ident "&&" (lib/types.ml[191,6496+25]..[191,6496+27])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[191,6496+14]..[191,6496+24])
                                      Pexp_apply
                                      expression (lib/types.ml[191,6496+14]..[191,6496+17])
                                        Pexp_ident "mem" (lib/types.ml[191,6496+14]..[191,6496+17])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[191,6496+18]..[191,6496+21])
                                            Pexp_construct "Inj" (lib/types.ml[191,6496+18]..[191,6496+21])
                                            None
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[191,6496+22]..[191,6496+24])
                                            Pexp_ident "v1" (lib/types.ml[191,6496+22]..[191,6496+24])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[191,6496+28]..[191,6496+38])
                                      Pexp_apply
                                      expression (lib/types.ml[191,6496+28]..[191,6496+31])
                                        Pexp_ident "mem" (lib/types.ml[191,6496+28]..[191,6496+31])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[191,6496+32]..[191,6496+35])
                                            Pexp_construct "Inj" (lib/types.ml[191,6496+32]..[191,6496+35])
                                            None
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[191,6496+36]..[191,6496+38])
                                            Pexp_ident "v2" (lib/types.ml[191,6496+36]..[191,6496+38])
                                      ]
                                ]
                            <def>
                              pattern (lib/types.ml[192,6535+8]..[192,6535+11])
                                Ppat_var "pos" (lib/types.ml[192,6535+8]..[192,6535+11])
                              expression (lib/types.ml[192,6535+14]..[192,6535+66])
                                Pexp_apply
                                expression (lib/types.ml[192,6535+39]..[192,6535+41])
                                  Pexp_ident "||" (lib/types.ml[192,6535+39]..[192,6535+41])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[192,6535+14]..[192,6535+38])
                                      Pexp_apply
                                      expression (lib/types.ml[192,6535+25]..[192,6535+27])
                                        Pexp_ident "&&" (lib/types.ml[192,6535+25]..[192,6535+27])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[192,6535+14]..[192,6535+24])
                                            Pexp_apply
                                            expression (lib/types.ml[192,6535+14]..[192,6535+17])
                                              Pexp_ident "mem" (lib/types.ml[192,6535+14]..[192,6535+17])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[192,6535+18]..[192,6535+21])
                                                  Pexp_construct "Pos" (lib/types.ml[192,6535+18]..[192,6535+21])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[192,6535+22]..[192,6535+24])
                                                  Pexp_ident "v1" (lib/types.ml[192,6535+22]..[192,6535+24])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[192,6535+28]..[192,6535+38])
                                            Pexp_apply
                                            expression (lib/types.ml[192,6535+28]..[192,6535+31])
                                              Pexp_ident "mem" (lib/types.ml[192,6535+28]..[192,6535+31])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[192,6535+32]..[192,6535+35])
                                                  Pexp_construct "Pos" (lib/types.ml[192,6535+32]..[192,6535+35])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[192,6535+36]..[192,6535+38])
                                                  Pexp_ident "v2" (lib/types.ml[192,6535+36]..[192,6535+38])
                                            ]
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[192,6535+42]..[192,6535+66])
                                      Pexp_apply
                                      expression (lib/types.ml[192,6535+53]..[192,6535+55])
                                        Pexp_ident "&&" (lib/types.ml[192,6535+53]..[192,6535+55])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[192,6535+42]..[192,6535+52])
                                            Pexp_apply
                                            expression (lib/types.ml[192,6535+42]..[192,6535+45])
                                              Pexp_ident "mem" (lib/types.ml[192,6535+42]..[192,6535+45])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[192,6535+46]..[192,6535+49])
                                                  Pexp_construct "Neg" (lib/types.ml[192,6535+46]..[192,6535+49])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[192,6535+50]..[192,6535+52])
                                                  Pexp_ident "v1" (lib/types.ml[192,6535+50]..[192,6535+52])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[192,6535+56]..[192,6535+66])
                                            Pexp_apply
                                            expression (lib/types.ml[192,6535+56]..[192,6535+59])
                                              Pexp_ident "mem" (lib/types.ml[192,6535+56]..[192,6535+59])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[192,6535+60]..[192,6535+63])
                                                  Pexp_construct "Neg" (lib/types.ml[192,6535+60]..[192,6535+63])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[192,6535+64]..[192,6535+66])
                                                  Pexp_ident "v2" (lib/types.ml[192,6535+64]..[192,6535+66])
                                            ]
                                      ]
                                ]
                            <def>
                              pattern (lib/types.ml[193,6602+8]..[193,6602+11])
                                Ppat_var "neg" (lib/types.ml[193,6602+8]..[193,6602+11])
                              expression (lib/types.ml[193,6602+14]..[193,6602+66])
                                Pexp_apply
                                expression (lib/types.ml[193,6602+39]..[193,6602+41])
                                  Pexp_ident "||" (lib/types.ml[193,6602+39]..[193,6602+41])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[193,6602+14]..[193,6602+38])
                                      Pexp_apply
                                      expression (lib/types.ml[193,6602+25]..[193,6602+27])
                                        Pexp_ident "&&" (lib/types.ml[193,6602+25]..[193,6602+27])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[193,6602+14]..[193,6602+24])
                                            Pexp_apply
                                            expression (lib/types.ml[193,6602+14]..[193,6602+17])
                                              Pexp_ident "mem" (lib/types.ml[193,6602+14]..[193,6602+17])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[193,6602+18]..[193,6602+21])
                                                  Pexp_construct "Pos" (lib/types.ml[193,6602+18]..[193,6602+21])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[193,6602+22]..[193,6602+24])
                                                  Pexp_ident "v1" (lib/types.ml[193,6602+22]..[193,6602+24])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[193,6602+28]..[193,6602+38])
                                            Pexp_apply
                                            expression (lib/types.ml[193,6602+28]..[193,6602+31])
                                              Pexp_ident "mem" (lib/types.ml[193,6602+28]..[193,6602+31])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[193,6602+32]..[193,6602+35])
                                                  Pexp_construct "Neg" (lib/types.ml[193,6602+32]..[193,6602+35])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[193,6602+36]..[193,6602+38])
                                                  Pexp_ident "v2" (lib/types.ml[193,6602+36]..[193,6602+38])
                                            ]
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[193,6602+42]..[193,6602+66])
                                      Pexp_apply
                                      expression (lib/types.ml[193,6602+53]..[193,6602+55])
                                        Pexp_ident "&&" (lib/types.ml[193,6602+53]..[193,6602+55])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[193,6602+42]..[193,6602+52])
                                            Pexp_apply
                                            expression (lib/types.ml[193,6602+42]..[193,6602+45])
                                              Pexp_ident "mem" (lib/types.ml[193,6602+42]..[193,6602+45])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[193,6602+46]..[193,6602+49])
                                                  Pexp_construct "Neg" (lib/types.ml[193,6602+46]..[193,6602+49])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[193,6602+50]..[193,6602+52])
                                                  Pexp_ident "v1" (lib/types.ml[193,6602+50]..[193,6602+52])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[193,6602+56]..[193,6602+66])
                                            Pexp_apply
                                            expression (lib/types.ml[193,6602+56]..[193,6602+59])
                                              Pexp_ident "mem" (lib/types.ml[193,6602+56]..[193,6602+59])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[193,6602+60]..[193,6602+63])
                                                  Pexp_construct "Pos" (lib/types.ml[193,6602+60]..[193,6602+63])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[193,6602+64]..[193,6602+66])
                                                  Pexp_ident "v2" (lib/types.ml[193,6602+64]..[193,6602+66])
                                            ]
                                      ]
                                ]
                          ]
                          expression (lib/types.ml[194,6672+4]..[195,6726+76])
                            Pexp_apply
                            expression (lib/types.ml[194,6672+4]..[194,6672+18])
                              Pexp_ident "List.fold_left" (lib/types.ml[194,6672+4]..[194,6672+18])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[194,6672+19]..[194,6672+48])
                                  Pexp_function
                                  [
                                    Pparam_val (lib/types.ml[194,6672+24]..[194,6672+25])
                                      Nolabel
                                      None
                                      pattern (lib/types.ml[194,6672+24]..[194,6672+25])
                                        Ppat_var "v" (lib/types.ml[194,6672+24]..[194,6672+25])
                                    Pparam_val (lib/types.ml[194,6672+26]..[194,6672+31])
                                      Nolabel
                                      None
                                      pattern (lib/types.ml[194,6672+26]..[194,6672+31])
                                        Ppat_tuple
                                        [
                                          pattern (lib/types.ml[194,6672+27]..[194,6672+28])
                                            Ppat_var "b" (lib/types.ml[194,6672+27]..[194,6672+28])
                                          pattern (lib/types.ml[194,6672+29]..[194,6672+30])
                                            Ppat_var "f" (lib/types.ml[194,6672+29]..[194,6672+30])
                                        ]
                                  ]
                                  None
                                  Pfunction_body
                                    expression (lib/types.ml[194,6672+35]..[194,6672+47])
                                      Pexp_apply
                                      expression (lib/types.ml[194,6672+35]..[194,6672+41])
                                        Pexp_ident "set_if" (lib/types.ml[194,6672+35]..[194,6672+41])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[194,6672+42]..[194,6672+43])
                                            Pexp_ident "b" (lib/types.ml[194,6672+42]..[194,6672+43])
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[194,6672+44]..[194,6672+45])
                                            Pexp_ident "f" (lib/types.ml[194,6672+44]..[194,6672+45])
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[194,6672+46]..[194,6672+47])
                                            Pexp_ident "v" (lib/types.ml[194,6672+46]..[194,6672+47])
                                      ]
                              <arg>
                              Nolabel
                                expression (lib/types.ml[194,6672+49]..[194,6672+53])
                                  Pexp_ident "null" (lib/types.ml[194,6672+49]..[194,6672+53])
                              <arg>
                              Nolabel
                                expression (lib/types.ml[195,6726+6]..[195,6726+76])
                                  Pexp_construct "::" (lib/types.ml[195,6726+7]..[195,6726+76]) ghost
                                  Some
                                    expression (lib/types.ml[195,6726+7]..[195,6726+76]) ghost
                                      Pexp_tuple
                                      [
                                        expression (lib/types.ml[195,6726+7]..[195,6726+18])
                                          Pexp_tuple
                                          [
                                            expression (lib/types.ml[195,6726+7]..[195,6726+9])
                                              Pexp_ident "mp" (lib/types.ml[195,6726+7]..[195,6726+9])
                                            expression (lib/types.ml[195,6726+11]..[195,6726+18])
                                              Pexp_construct "May_pos" (lib/types.ml[195,6726+11]..[195,6726+18])
                                              None
                                          ]
                                        expression (lib/types.ml[195,6726+20]..[195,6726+76]) ghost
                                          Pexp_construct "::" (lib/types.ml[195,6726+20]..[195,6726+76]) ghost
                                          Some
                                            expression (lib/types.ml[195,6726+20]..[195,6726+76]) ghost
                                              Pexp_tuple
                                              [
                                                expression (lib/types.ml[195,6726+20]..[195,6726+31])
                                                  Pexp_tuple
                                                  [
                                                    expression (lib/types.ml[195,6726+20]..[195,6726+22])
                                                      Pexp_ident "mn" (lib/types.ml[195,6726+20]..[195,6726+22])
                                                    expression (lib/types.ml[195,6726+24]..[195,6726+31])
                                                      Pexp_construct "May_neg" (lib/types.ml[195,6726+24]..[195,6726+31])
                                                      None
                                                  ]
                                                expression (lib/types.ml[195,6726+33]..[195,6726+76]) ghost
                                                  Pexp_construct "::" (lib/types.ml[195,6726+33]..[195,6726+76]) ghost
                                                  Some
                                                    expression (lib/types.ml[195,6726+33]..[195,6726+76]) ghost
                                                      Pexp_tuple
                                                      [
                                                        expression (lib/types.ml[195,6726+33]..[195,6726+45])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/types.ml[195,6726+33]..[195,6726+35])
                                                              Pexp_ident "mw" (lib/types.ml[195,6726+33]..[195,6726+35])
                                                            expression (lib/types.ml[195,6726+37]..[195,6726+45])
                                                              Pexp_construct "May_weak" (lib/types.ml[195,6726+37]..[195,6726+45])
                                                              None
                                                          ]
                                                        expression (lib/types.ml[195,6726+47]..[195,6726+76]) ghost
                                                          Pexp_construct "::" (lib/types.ml[195,6726+47]..[195,6726+76]) ghost
                                                          Some
                                                            expression (lib/types.ml[195,6726+47]..[195,6726+76]) ghost
                                                              Pexp_tuple
                                                              [
                                                                expression (lib/types.ml[195,6726+47]..[195,6726+55])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (lib/types.ml[195,6726+47]..[195,6726+50])
                                                                      Pexp_ident "inj" (lib/types.ml[195,6726+47]..[195,6726+50])
                                                                    expression (lib/types.ml[195,6726+52]..[195,6726+55])
                                                                      Pexp_construct "Inj" (lib/types.ml[195,6726+52]..[195,6726+55])
                                                                      None
                                                                  ]
                                                                expression (lib/types.ml[195,6726+57]..[195,6726+76]) ghost
                                                                  Pexp_construct "::" (lib/types.ml[195,6726+57]..[195,6726+76]) ghost
                                                                  Some
                                                                    expression (lib/types.ml[195,6726+57]..[195,6726+76]) ghost
                                                                      Pexp_tuple
                                                                      [
expression (lib/types.ml[195,6726+57]..[195,6726+65])
  Pexp_tuple
  [
    expression (lib/types.ml[195,6726+57]..[195,6726+60])
      Pexp_ident "pos" (lib/types.ml[195,6726+57]..[195,6726+60])
    expression (lib/types.ml[195,6726+62]..[195,6726+65])
      Pexp_construct "Pos" (lib/types.ml[195,6726+62]..[195,6726+65])
      None
  ]
expression (lib/types.ml[195,6726+67]..[195,6726+76]) ghost
  Pexp_construct "::" (lib/types.ml[195,6726+67]..[195,6726+76]) ghost
  Some
    expression (lib/types.ml[195,6726+67]..[195,6726+76]) ghost
      Pexp_tuple
      [
        expression (lib/types.ml[195,6726+67]..[195,6726+75])
          Pexp_tuple
          [
            expression (lib/types.ml[195,6726+67]..[195,6726+70])
              Pexp_ident "neg" (lib/types.ml[195,6726+67]..[195,6726+70])
            expression (lib/types.ml[195,6726+72]..[195,6726+75])
              Pexp_construct "Neg" (lib/types.ml[195,6726+72]..[195,6726+75])
              None
          ]
        expression (lib/types.ml[195,6726+75]..[195,6726+76]) ghost
          Pexp_construct "[]" (lib/types.ml[195,6726+75]..[195,6726+76]) ghost
          None
      ]
                                                                      ]
                                                              ]
                                                      ]
                                              ]
                                      ]
                            ]
            ]
          structure_item (lib/types.ml[196,6803+2]..[197,6824+64])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[196,6803+6]..[196,6803+16])
                  Ppat_var "strengthen" (lib/types.ml[196,6803+6]..[196,6803+16])
                expression (lib/types.ml[196,6803+17]..[197,6824+64]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[196,6803+17]..[196,6803+18])
                      Nolabel
                      None
                      pattern (lib/types.ml[196,6803+17]..[196,6803+18])
                        Ppat_var "v" (lib/types.ml[196,6803+17]..[196,6803+18])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[197,6824+4]..[197,6824+64])
                      Pexp_ifthenelse
                      expression (lib/types.ml[197,6824+7]..[197,6824+20])
                        Pexp_apply
                        expression (lib/types.ml[197,6824+7]..[197,6824+10])
                          Pexp_ident "mem" (lib/types.ml[197,6824+7]..[197,6824+10])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[197,6824+11]..[197,6824+18])
                              Pexp_construct "May_neg" (lib/types.ml[197,6824+11]..[197,6824+18])
                              None
                          <arg>
                          Nolabel
                            expression (lib/types.ml[197,6824+19]..[197,6824+20])
                              Pexp_ident "v" (lib/types.ml[197,6824+19]..[197,6824+20])
                        ]
                      expression (lib/types.ml[197,6824+26]..[197,6824+27])
                        Pexp_ident "v" (lib/types.ml[197,6824+26]..[197,6824+27])
                      Some
                        expression (lib/types.ml[197,6824+33]..[197,6824+64])
                          Pexp_apply
                          expression (lib/types.ml[197,6824+35]..[197,6824+39])
                            Pexp_ident "land" (lib/types.ml[197,6824+35]..[197,6824+39])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[197,6824+33]..[197,6824+34])
                                Pexp_ident "v" (lib/types.ml[197,6824+33]..[197,6824+34])
                            <arg>
                            Nolabel
                              expression (lib/types.ml[197,6824+40]..[197,6824+64])
                                Pexp_apply
                                expression (lib/types.ml[197,6824+46]..[197,6824+47])
                                  Pexp_ident "-" (lib/types.ml[197,6824+46]..[197,6824+47])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[197,6824+41]..[197,6824+45])
                                      Pexp_ident "full" (lib/types.ml[197,6824+41]..[197,6824+45])
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[197,6824+48]..[197,6824+63])
                                      Pexp_apply
                                      expression (lib/types.ml[197,6824+48]..[197,6824+54])
                                        Pexp_ident "single" (lib/types.ml[197,6824+48]..[197,6824+54])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/types.ml[197,6824+55]..[197,6824+63])
                                            Pexp_construct "May_weak" (lib/types.ml[197,6824+55]..[197,6824+63])
                                            None
                                      ]
                                ]
                          ]
            ]
          structure_item (lib/types.ml[198,6889+2]..[198,6889+50])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[198,6889+6]..[198,6889+15])
                  Ppat_var "get_upper" (lib/types.ml[198,6889+6]..[198,6889+15])
                expression (lib/types.ml[198,6889+16]..[198,6889+50]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[198,6889+16]..[198,6889+17])
                      Nolabel
                      None
                      pattern (lib/types.ml[198,6889+16]..[198,6889+17])
                        Ppat_var "v" (lib/types.ml[198,6889+16]..[198,6889+17])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[198,6889+20]..[198,6889+50])
                      Pexp_tuple
                      [
                        expression (lib/types.ml[198,6889+21]..[198,6889+34])
                          Pexp_apply
                          expression (lib/types.ml[198,6889+21]..[198,6889+24])
                            Pexp_ident "mem" (lib/types.ml[198,6889+21]..[198,6889+24])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[198,6889+25]..[198,6889+32])
                                Pexp_construct "May_pos" (lib/types.ml[198,6889+25]..[198,6889+32])
                                None
                            <arg>
                            Nolabel
                              expression (lib/types.ml[198,6889+33]..[198,6889+34])
                                Pexp_ident "v" (lib/types.ml[198,6889+33]..[198,6889+34])
                          ]
                        expression (lib/types.ml[198,6889+36]..[198,6889+49])
                          Pexp_apply
                          expression (lib/types.ml[198,6889+36]..[198,6889+39])
                            Pexp_ident "mem" (lib/types.ml[198,6889+36]..[198,6889+39])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[198,6889+40]..[198,6889+47])
                                Pexp_construct "May_neg" (lib/types.ml[198,6889+40]..[198,6889+47])
                                None
                            <arg>
                            Nolabel
                              expression (lib/types.ml[198,6889+48]..[198,6889+49])
                                Pexp_ident "v" (lib/types.ml[198,6889+48]..[198,6889+49])
                          ]
                      ]
            ]
          structure_item (lib/types.ml[199,6940+2]..[199,6940+53])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[199,6940+6]..[199,6940+15])
                  Ppat_var "get_lower" (lib/types.ml[199,6940+6]..[199,6940+15])
                expression (lib/types.ml[199,6940+16]..[199,6940+53]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[199,6940+16]..[199,6940+17])
                      Nolabel
                      None
                      pattern (lib/types.ml[199,6940+16]..[199,6940+17])
                        Ppat_var "v" (lib/types.ml[199,6940+16]..[199,6940+17])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[199,6940+20]..[199,6940+53])
                      Pexp_tuple
                      [
                        expression (lib/types.ml[199,6940+21]..[199,6940+30])
                          Pexp_apply
                          expression (lib/types.ml[199,6940+21]..[199,6940+24])
                            Pexp_ident "mem" (lib/types.ml[199,6940+21]..[199,6940+24])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[199,6940+25]..[199,6940+28])
                                Pexp_construct "Pos" (lib/types.ml[199,6940+25]..[199,6940+28])
                                None
                            <arg>
                            Nolabel
                              expression (lib/types.ml[199,6940+29]..[199,6940+30])
                                Pexp_ident "v" (lib/types.ml[199,6940+29]..[199,6940+30])
                          ]
                        expression (lib/types.ml[199,6940+32]..[199,6940+41])
                          Pexp_apply
                          expression (lib/types.ml[199,6940+32]..[199,6940+35])
                            Pexp_ident "mem" (lib/types.ml[199,6940+32]..[199,6940+35])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[199,6940+36]..[199,6940+39])
                                Pexp_construct "Neg" (lib/types.ml[199,6940+36]..[199,6940+39])
                                None
                            <arg>
                            Nolabel
                              expression (lib/types.ml[199,6940+40]..[199,6940+41])
                                Pexp_ident "v" (lib/types.ml[199,6940+40]..[199,6940+41])
                          ]
                        expression (lib/types.ml[199,6940+43]..[199,6940+52])
                          Pexp_apply
                          expression (lib/types.ml[199,6940+43]..[199,6940+46])
                            Pexp_ident "mem" (lib/types.ml[199,6940+43]..[199,6940+46])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[199,6940+47]..[199,6940+50])
                                Pexp_construct "Inj" (lib/types.ml[199,6940+47]..[199,6940+50])
                                None
                            <arg>
                            Nolabel
                              expression (lib/types.ml[199,6940+51]..[199,6940+52])
                                Pexp_ident "v" (lib/types.ml[199,6940+51]..[199,6940+52])
                          ]
                      ]
            ]
          structure_item (lib/types.ml[200,6994+2]..[202,7100+31])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[200,6994+6]..[200,6994+23])
                  Ppat_var "unknown_signature" (lib/types.ml[200,6994+6]..[200,6994+23])
                expression (lib/types.ml[200,6994+24]..[202,7100+31]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[200,6994+24]..[200,6994+34])
                      Labelled "injective"
                      None
                      pattern (lib/types.ml[200,6994+25]..[200,6994+34])
                        Ppat_var "injective" (lib/types.ml[200,6994+25]..[200,6994+34])
                    Pparam_val (lib/types.ml[200,6994+35]..[200,6994+41])
                      Labelled "arity"
                      None
                      pattern (lib/types.ml[200,6994+36]..[200,6994+41])
                        Ppat_var "arity" (lib/types.ml[200,6994+36]..[200,6994+41])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[201,7038+4]..[202,7100+31])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lib/types.ml[201,7038+8]..[201,7038+9])
                            Ppat_var "v" (lib/types.ml[201,7038+8]..[201,7038+9])
                          expression (lib/types.ml[201,7038+12]..[201,7038+58])
                            Pexp_ifthenelse
                            expression (lib/types.ml[201,7038+15]..[201,7038+24])
                              Pexp_ident "injective" (lib/types.ml[201,7038+15]..[201,7038+24])
                            expression (lib/types.ml[201,7038+30]..[201,7038+45])
                              Pexp_apply
                              expression (lib/types.ml[201,7038+30]..[201,7038+33])
                                Pexp_ident "set" (lib/types.ml[201,7038+30]..[201,7038+33])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[201,7038+34]..[201,7038+37])
                                    Pexp_construct "Inj" (lib/types.ml[201,7038+34]..[201,7038+37])
                                    None
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[201,7038+38]..[201,7038+45])
                                    Pexp_ident "unknown" (lib/types.ml[201,7038+38]..[201,7038+45])
                              ]
                            Some
                              expression (lib/types.ml[201,7038+51]..[201,7038+58])
                                Pexp_ident "unknown" (lib/types.ml[201,7038+51]..[201,7038+58])
                      ]
                      expression (lib/types.ml[202,7100+4]..[202,7100+31])
                        Pexp_apply
                        expression (lib/types.ml[202,7100+4]..[202,7100+23])
                          Pexp_ident "Misc.replicate_list" (lib/types.ml[202,7100+4]..[202,7100+23])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[202,7100+24]..[202,7100+25])
                              Pexp_ident "v" (lib/types.ml[202,7100+24]..[202,7100+25])
                          <arg>
                          Nolabel
                            expression (lib/types.ml[202,7100+26]..[202,7100+31])
                              Pexp_ident "arity" (lib/types.ml[202,7100+26]..[202,7100+31])
                        ]
            ]
        ]
  structure_item (lib/types.ml[205,7137+0]..[229,7905+3])
    Pstr_module
    "Separability" (lib/types.ml[205,7137+7]..[205,7137+19])
      module_expr (lib/types.ml[205,7137+22]..[229,7905+3])
        Pmod_structure
        [
          structure_item (lib/types.ml[206,7166+2]..[206,7166+30])
            Pstr_type Rec
            [
              type_declaration "t" (lib/types.ml[206,7166+7]..[206,7166+8]) (lib/types.ml[206,7166+2]..[206,7166+30])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (lib/types.ml[206,7166+11]..[206,7166+14])
                        "Ind" (lib/types.ml[206,7166+11]..[206,7166+14])
                        []
                        None
                      (lib/types.ml[206,7166+15]..[206,7166+20])
                        "Sep" (lib/types.ml[206,7166+17]..[206,7166+20])
                        []
                        None
                      (lib/types.ml[206,7166+21]..[206,7166+30])
                        "Deepsep" (lib/types.ml[206,7166+23]..[206,7166+30])
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (lib/types.ml[207,7197+2]..[207,7197+25])
            Pstr_type Rec
            [
              type_declaration "signature" (lib/types.ml[207,7197+7]..[207,7197+16]) (lib/types.ml[207,7197+2]..[207,7197+25])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/types.ml[207,7197+19]..[207,7197+25])
                      Ptyp_constr "list" (lib/types.ml[207,7197+21]..[207,7197+25])
                      [
                        core_type (lib/types.ml[207,7197+19]..[207,7197+20])
                          Ptyp_constr "t" (lib/types.ml[207,7197+19]..[207,7197+20])
                          []
                      ]
            ]
          structure_item (lib/types.ml[208,7223+2]..[208,7223+32])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[208,7223+6]..[208,7223+8])
                  Ppat_var "eq" (lib/types.ml[208,7223+6]..[208,7223+8])
                expression (lib/types.ml[208,7223+9]..[208,7223+32]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[208,7223+9]..[208,7223+17])
                      Nolabel
                      None
                      pattern (lib/types.ml[208,7223+9]..[208,7223+17])
                        Ppat_constraint
                        pattern (lib/types.ml[208,7223+10]..[208,7223+12])
                          Ppat_var "m1" (lib/types.ml[208,7223+10]..[208,7223+12])
                        core_type (lib/types.ml[208,7223+15]..[208,7223+16])
                          Ptyp_constr "t" (lib/types.ml[208,7223+15]..[208,7223+16])
                          []
                    Pparam_val (lib/types.ml[208,7223+18]..[208,7223+20])
                      Nolabel
                      None
                      pattern (lib/types.ml[208,7223+18]..[208,7223+20])
                        Ppat_var "m2" (lib/types.ml[208,7223+18]..[208,7223+20])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[208,7223+23]..[208,7223+32])
                      Pexp_apply
                      expression (lib/types.ml[208,7223+27]..[208,7223+28])
                        Pexp_ident "=" (lib/types.ml[208,7223+27]..[208,7223+28])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[208,7223+24]..[208,7223+26])
                            Pexp_ident "m1" (lib/types.ml[208,7223+24]..[208,7223+26])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[208,7223+29]..[208,7223+31])
                            Pexp_ident "m2" (lib/types.ml[208,7223+29]..[208,7223+31])
                      ]
            ]
          structure_item (lib/types.ml[209,7256+2]..[212,7308+18])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[209,7256+6]..[209,7256+10])
                  Ppat_var "rank" (lib/types.ml[209,7256+6]..[209,7256+10])
                expression (lib/types.ml[209,7256+13]..[212,7308+18])
                  Pexp_function
                  []
                  None
                  Pfunction_cases (lib/types.ml[209,7256+13]..[212,7308+18])
                    [
                      <case>
                        pattern (lib/types.ml[210,7278+6]..[210,7278+9])
                          Ppat_construct "Ind" (lib/types.ml[210,7278+6]..[210,7278+9])
                          None
                        expression (lib/types.ml[210,7278+13]..[210,7278+14])
                          Pexp_constant PConst_int (0,None)
                      <case>
                        pattern (lib/types.ml[211,7293+6]..[211,7293+9])
                          Ppat_construct "Sep" (lib/types.ml[211,7293+6]..[211,7293+9])
                          None
                        expression (lib/types.ml[211,7293+13]..[211,7293+14])
                          Pexp_constant PConst_int (1,None)
                      <case>
                        pattern (lib/types.ml[212,7308+6]..[212,7308+13])
                          Ppat_construct "Deepsep" (lib/types.ml[212,7308+6]..[212,7308+13])
                          None
                        expression (lib/types.ml[212,7308+17]..[212,7308+18])
                          Pexp_constant PConst_int (2,None)
                    ]
            ]
          structure_item (lib/types.ml[213,7327+2]..[213,7327+49])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[213,7327+6]..[213,7327+13])
                  Ppat_var "compare" (lib/types.ml[213,7327+6]..[213,7327+13])
                expression (lib/types.ml[213,7327+14]..[213,7327+49]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[213,7327+14]..[213,7327+16])
                      Nolabel
                      None
                      pattern (lib/types.ml[213,7327+14]..[213,7327+16])
                        Ppat_var "m1" (lib/types.ml[213,7327+14]..[213,7327+16])
                    Pparam_val (lib/types.ml[213,7327+17]..[213,7327+19])
                      Nolabel
                      None
                      pattern (lib/types.ml[213,7327+17]..[213,7327+19])
                        Ppat_var "m2" (lib/types.ml[213,7327+17]..[213,7327+19])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[213,7327+22]..[213,7327+49])
                      Pexp_apply
                      expression (lib/types.ml[213,7327+22]..[213,7327+29])
                        Pexp_ident "compare" (lib/types.ml[213,7327+22]..[213,7327+29])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[213,7327+30]..[213,7327+39])
                            Pexp_apply
                            expression (lib/types.ml[213,7327+31]..[213,7327+35])
                              Pexp_ident "rank" (lib/types.ml[213,7327+31]..[213,7327+35])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[213,7327+36]..[213,7327+38])
                                  Pexp_ident "m1" (lib/types.ml[213,7327+36]..[213,7327+38])
                            ]
                        <arg>
                        Nolabel
                          expression (lib/types.ml[213,7327+40]..[213,7327+49])
                            Pexp_apply
                            expression (lib/types.ml[213,7327+41]..[213,7327+45])
                              Pexp_ident "rank" (lib/types.ml[213,7327+41]..[213,7327+45])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[213,7327+46]..[213,7327+48])
                                  Pexp_ident "m2" (lib/types.ml[213,7327+46]..[213,7327+48])
                            ]
                      ]
            ]
          structure_item (lib/types.ml[214,7377+2]..[214,7377+55])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[214,7377+6]..[214,7377+9])
                  Ppat_var "max" (lib/types.ml[214,7377+6]..[214,7377+9])
                expression (lib/types.ml[214,7377+10]..[214,7377+55]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[214,7377+10]..[214,7377+12])
                      Nolabel
                      None
                      pattern (lib/types.ml[214,7377+10]..[214,7377+12])
                        Ppat_var "m1" (lib/types.ml[214,7377+10]..[214,7377+12])
                    Pparam_val (lib/types.ml[214,7377+13]..[214,7377+15])
                      Nolabel
                      None
                      pattern (lib/types.ml[214,7377+13]..[214,7377+15])
                        Ppat_var "m2" (lib/types.ml[214,7377+13]..[214,7377+15])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[214,7377+18]..[214,7377+55])
                      Pexp_ifthenelse
                      expression (lib/types.ml[214,7377+21]..[214,7377+39])
                        Pexp_apply
                        expression (lib/types.ml[214,7377+29]..[214,7377+31])
                          Pexp_ident ">=" (lib/types.ml[214,7377+29]..[214,7377+31])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[214,7377+21]..[214,7377+28])
                              Pexp_apply
                              expression (lib/types.ml[214,7377+21]..[214,7377+25])
                                Pexp_ident "rank" (lib/types.ml[214,7377+21]..[214,7377+25])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[214,7377+26]..[214,7377+28])
                                    Pexp_ident "m1" (lib/types.ml[214,7377+26]..[214,7377+28])
                              ]
                          <arg>
                          Nolabel
                            expression (lib/types.ml[214,7377+32]..[214,7377+39])
                              Pexp_apply
                              expression (lib/types.ml[214,7377+32]..[214,7377+36])
                                Pexp_ident "rank" (lib/types.ml[214,7377+32]..[214,7377+36])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[214,7377+37]..[214,7377+39])
                                    Pexp_ident "m2" (lib/types.ml[214,7377+37]..[214,7377+39])
                              ]
                        ]
                      expression (lib/types.ml[214,7377+45]..[214,7377+47])
                        Pexp_ident "m1" (lib/types.ml[214,7377+45]..[214,7377+47])
                      Some
                        expression (lib/types.ml[214,7377+53]..[214,7377+55])
                          Pexp_ident "m2" (lib/types.ml[214,7377+53]..[214,7377+55])
            ]
          structure_item (lib/types.ml[216,7434+2]..[219,7537+45])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[216,7434+6]..[216,7434+11])
                  Ppat_var "print" (lib/types.ml[216,7434+6]..[216,7434+11])
                expression (lib/types.ml[216,7434+12]..[219,7537+45]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[216,7434+12]..[216,7434+15])
                      Nolabel
                      None
                      pattern (lib/types.ml[216,7434+12]..[216,7434+15])
                        Ppat_var "ppf" (lib/types.ml[216,7434+12]..[216,7434+15])
                  ]
                  None
                  Pfunction_cases (lib/types.ml[216,7434+18]..[219,7537+45])
                    [
                      <case>
                        pattern (lib/types.ml[217,7461+6]..[217,7461+9])
                          Ppat_construct "Ind" (lib/types.ml[217,7461+6]..[217,7461+9])
                          None
                        expression (lib/types.ml[217,7461+13]..[217,7461+37])
                          Pexp_apply
                          expression (lib/types.ml[217,7461+13]..[217,7461+27])
                            Pexp_ident "Format.fprintf" (lib/types.ml[217,7461+13]..[217,7461+27])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[217,7461+28]..[217,7461+31])
                                Pexp_ident "ppf" (lib/types.ml[217,7461+28]..[217,7461+31])
                            <arg>
                            Nolabel
                              expression (lib/types.ml[217,7461+32]..[217,7461+37])
                                Pexp_constant PConst_string("Ind",(lib/types.ml[217,7461+33]..[217,7461+36]),None)
                          ]
                      <case>
                        pattern (lib/types.ml[218,7499+6]..[218,7499+9])
                          Ppat_construct "Sep" (lib/types.ml[218,7499+6]..[218,7499+9])
                          None
                        expression (lib/types.ml[218,7499+13]..[218,7499+37])
                          Pexp_apply
                          expression (lib/types.ml[218,7499+13]..[218,7499+27])
                            Pexp_ident "Format.fprintf" (lib/types.ml[218,7499+13]..[218,7499+27])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[218,7499+28]..[218,7499+31])
                                Pexp_ident "ppf" (lib/types.ml[218,7499+28]..[218,7499+31])
                            <arg>
                            Nolabel
                              expression (lib/types.ml[218,7499+32]..[218,7499+37])
                                Pexp_constant PConst_string("Sep",(lib/types.ml[218,7499+33]..[218,7499+36]),None)
                          ]
                      <case>
                        pattern (lib/types.ml[219,7537+6]..[219,7537+13])
                          Ppat_construct "Deepsep" (lib/types.ml[219,7537+6]..[219,7537+13])
                          None
                        expression (lib/types.ml[219,7537+17]..[219,7537+45])
                          Pexp_apply
                          expression (lib/types.ml[219,7537+17]..[219,7537+31])
                            Pexp_ident "Format.fprintf" (lib/types.ml[219,7537+17]..[219,7537+31])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[219,7537+32]..[219,7537+35])
                                Pexp_ident "ppf" (lib/types.ml[219,7537+32]..[219,7537+35])
                            <arg>
                            Nolabel
                              expression (lib/types.ml[219,7537+36]..[219,7537+45])
                                Pexp_constant PConst_string("Deepsep",(lib/types.ml[219,7537+37]..[219,7537+44]),None)
                          ]
                    ]
            ]
          structure_item (lib/types.ml[221,7584+2]..[224,7704+48])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[221,7584+6]..[221,7584+21])
                  Ppat_var "print_signature" (lib/types.ml[221,7584+6]..[221,7584+21])
                expression (lib/types.ml[221,7584+22]..[224,7704+48]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[221,7584+22]..[221,7584+25])
                      Nolabel
                      None
                      pattern (lib/types.ml[221,7584+22]..[221,7584+25])
                        Ppat_var "ppf" (lib/types.ml[221,7584+22]..[221,7584+25])
                    Pparam_val (lib/types.ml[221,7584+26]..[221,7584+31])
                      Nolabel
                      None
                      pattern (lib/types.ml[221,7584+26]..[221,7584+31])
                        Ppat_var "modes" (lib/types.ml[221,7584+26]..[221,7584+31])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[222,7618+4]..[224,7704+48])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lib/types.ml[222,7618+8]..[222,7618+14])
                            Ppat_var "pp_sep" (lib/types.ml[222,7618+8]..[222,7618+14])
                          expression (lib/types.ml[222,7618+15]..[222,7618+48]) ghost
                            Pexp_function
                            [
                              Pparam_val (lib/types.ml[222,7618+15]..[222,7618+18])
                                Nolabel
                                None
                                pattern (lib/types.ml[222,7618+15]..[222,7618+18])
                                  Ppat_var "ppf" (lib/types.ml[222,7618+15]..[222,7618+18])
                              Pparam_val (lib/types.ml[222,7618+19]..[222,7618+21])
                                Nolabel
                                None
                                pattern (lib/types.ml[222,7618+19]..[222,7618+21])
                                  Ppat_construct "()" (lib/types.ml[222,7618+19]..[222,7618+21])
                                  None
                            ]
                            None
                            Pfunction_body
                              expression (lib/types.ml[222,7618+24]..[222,7618+48])
                                Pexp_apply
                                expression (lib/types.ml[222,7618+24]..[222,7618+38])
                                  Pexp_ident "Format.fprintf" (lib/types.ml[222,7618+24]..[222,7618+38])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[222,7618+39]..[222,7618+42])
                                      Pexp_ident "ppf" (lib/types.ml[222,7618+39]..[222,7618+42])
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[222,7618+43]..[222,7618+48])
                                      Pexp_constant PConst_string(",@,",(lib/types.ml[222,7618+44]..[222,7618+47]),None)
                                ]
                      ]
                      expression (lib/types.ml[223,7670+4]..[224,7704+48])
                        Pexp_apply
                        expression (lib/types.ml[223,7670+4]..[223,7670+18])
                          Pexp_ident "Format.fprintf" (lib/types.ml[223,7670+4]..[223,7670+18])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[223,7670+19]..[223,7670+22])
                              Pexp_ident "ppf" (lib/types.ml[223,7670+19]..[223,7670+22])
                          <arg>
                          Nolabel
                            expression (lib/types.ml[223,7670+23]..[223,7670+33])
                              Pexp_constant PConst_string("@[(%a)@]",(lib/types.ml[223,7670+24]..[223,7670+32]),None)
                          <arg>
                          Nolabel
                            expression (lib/types.ml[224,7704+6]..[224,7704+42])
                              Pexp_apply
                              expression (lib/types.ml[224,7704+7]..[224,7704+27])
                                Pexp_ident "Format.pp_print_list" (lib/types.ml[224,7704+7]..[224,7704+27])
                              [
                                <arg>
                                Labelled "pp_sep"
                                  expression (lib/types.ml[224,7704+29]..[224,7704+35])
                                    Pexp_ident "pp_sep" (lib/types.ml[224,7704+29]..[224,7704+35])
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[224,7704+36]..[224,7704+41])
                                    Pexp_ident "print" (lib/types.ml[224,7704+36]..[224,7704+41])
                              ]
                          <arg>
                          Nolabel
                            expression (lib/types.ml[224,7704+43]..[224,7704+48])
                              Pexp_ident "modes" (lib/types.ml[224,7704+43]..[224,7704+48])
                        ]
            ]
          structure_item (lib/types.ml[226,7754+2]..[228,7862+42])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[226,7754+6]..[226,7754+23])
                  Ppat_var "default_signature" (lib/types.ml[226,7754+6]..[226,7754+23])
                expression (lib/types.ml[226,7754+24]..[228,7862+42]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[226,7754+24]..[226,7754+30])
                      Labelled "arity"
                      None
                      pattern (lib/types.ml[226,7754+25]..[226,7754+30])
                        Ppat_var "arity" (lib/types.ml[226,7754+25]..[226,7754+30])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[227,7787+4]..[228,7862+42])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lib/types.ml[227,7787+8]..[227,7787+20])
                            Ppat_var "default_mode" (lib/types.ml[227,7787+8]..[227,7787+20])
                          expression (lib/types.ml[227,7787+23]..[227,7787+71])
                            Pexp_ifthenelse
                            expression (lib/types.ml[227,7787+26]..[227,7787+49])
                              Pexp_ident "Config.flat_float_array" (lib/types.ml[227,7787+26]..[227,7787+49])
                            expression (lib/types.ml[227,7787+55]..[227,7787+62])
                              Pexp_construct "Deepsep" (lib/types.ml[227,7787+55]..[227,7787+62])
                              None
                            Some
                              expression (lib/types.ml[227,7787+68]..[227,7787+71])
                                Pexp_construct "Ind" (lib/types.ml[227,7787+68]..[227,7787+71])
                                None
                      ]
                      expression (lib/types.ml[228,7862+4]..[228,7862+42])
                        Pexp_apply
                        expression (lib/types.ml[228,7862+4]..[228,7862+23])
                          Pexp_ident "Misc.replicate_list" (lib/types.ml[228,7862+4]..[228,7862+23])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[228,7862+24]..[228,7862+36])
                              Pexp_ident "default_mode" (lib/types.ml[228,7862+24]..[228,7862+36])
                          <arg>
                          Nolabel
                            expression (lib/types.ml[228,7862+37]..[228,7862+42])
                              Pexp_ident "arity" (lib/types.ml[228,7862+37]..[228,7862+42])
                        ]
            ]
        ]
  structure_item (lib/types.ml[233,7934+0]..[296,9783+41])
    Pstr_type Rec
    [
      type_declaration "type_declaration" (lib/types.ml[233,7934+5]..[233,7934+21]) (lib/types.ml[233,7934+0]..[248,8410+2])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[234,7958+4]..[234,7958+32])
                Immutable
                "type_params" (lib/types.ml[234,7958+4]..[234,7958+15])                core_type (lib/types.ml[234,7958+17]..[234,7958+31])
                  Ptyp_constr "list" (lib/types.ml[234,7958+27]..[234,7958+31])
                  [
                    core_type (lib/types.ml[234,7958+17]..[234,7958+26])
                      Ptyp_constr "type_expr" (lib/types.ml[234,7958+17]..[234,7958+26])
                      []
                  ]
              (lib/types.ml[235,7991+4]..[235,7991+20])
                Immutable
                "type_arity" (lib/types.ml[235,7991+4]..[235,7991+14])                core_type (lib/types.ml[235,7991+16]..[235,7991+19])
                  Ptyp_constr "int" (lib/types.ml[235,7991+16]..[235,7991+19])
                  []
              (lib/types.ml[236,8012+4]..[236,8012+30])
                Immutable
                "type_kind" (lib/types.ml[236,8012+4]..[236,8012+13])                core_type (lib/types.ml[236,8012+15]..[236,8012+29])
                  Ptyp_constr "type_decl_kind" (lib/types.ml[236,8012+15]..[236,8012+29])
                  []
              (lib/types.ml[237,8043+4]..[237,8043+31])
                Immutable
                "type_private" (lib/types.ml[237,8043+4]..[237,8043+16])                core_type (lib/types.ml[237,8043+18]..[237,8043+30])
                  Ptyp_constr "private_flag" (lib/types.ml[237,8043+18]..[237,8043+30])
                  []
              (lib/types.ml[238,8075+4]..[238,8075+36])
                Immutable
                "type_manifest" (lib/types.ml[238,8075+4]..[238,8075+17])                core_type (lib/types.ml[238,8075+19]..[238,8075+35])
                  Ptyp_constr "option" (lib/types.ml[238,8075+29]..[238,8075+35])
                  [
                    core_type (lib/types.ml[238,8075+19]..[238,8075+28])
                      Ptyp_constr "type_expr" (lib/types.ml[238,8075+19]..[238,8075+28])
                      []
                  ]
              (lib/types.ml[239,8112+4]..[239,8112+35])
                Immutable
                "type_variance" (lib/types.ml[239,8112+4]..[239,8112+17])                core_type (lib/types.ml[239,8112+19]..[239,8112+34])
                  Ptyp_constr "list" (lib/types.ml[239,8112+30]..[239,8112+34])
                  [
                    core_type (lib/types.ml[239,8112+19]..[239,8112+29])
                      Ptyp_constr "Variance.t" (lib/types.ml[239,8112+19]..[239,8112+29])
                      []
                  ]
              (lib/types.ml[240,8148+4]..[240,8148+43])
                Immutable
                "type_separability" (lib/types.ml[240,8148+4]..[240,8148+21])                core_type (lib/types.ml[240,8148+23]..[240,8148+42])
                  Ptyp_constr "list" (lib/types.ml[240,8148+38]..[240,8148+42])
                  [
                    core_type (lib/types.ml[240,8148+23]..[240,8148+37])
                      Ptyp_constr "Separability.t" (lib/types.ml[240,8148+23]..[240,8148+37])
                      []
                  ]
              (lib/types.ml[241,8192+4]..[241,8192+26])
                Immutable
                "type_is_newtype" (lib/types.ml[241,8192+4]..[241,8192+19])                core_type (lib/types.ml[241,8192+21]..[241,8192+25])
                  Ptyp_constr "bool" (lib/types.ml[241,8192+21]..[241,8192+25])
                  []
              (lib/types.ml[242,8219+4]..[242,8219+30])
                Immutable
                "type_expansion_scope" (lib/types.ml[242,8219+4]..[242,8219+24])                core_type (lib/types.ml[242,8219+26]..[242,8219+29])
                  Ptyp_constr "int" (lib/types.ml[242,8219+26]..[242,8219+29])
                  []
              (lib/types.ml[243,8250+4]..[243,8250+25])
                Immutable
                "type_loc" (lib/types.ml[243,8250+4]..[243,8250+12])                core_type (lib/types.ml[243,8250+14]..[243,8250+24])
                  Ptyp_constr "Location.t" (lib/types.ml[243,8250+14]..[243,8250+24])
                  []
              (lib/types.ml[244,8276+4]..[244,8276+42])
                Immutable
                "type_attributes" (lib/types.ml[244,8276+4]..[244,8276+19])                core_type (lib/types.ml[244,8276+21]..[244,8276+41])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[244,8276+21]..[244,8276+41])
                  []
              (lib/types.ml[245,8319+4]..[245,8319+37])
                Immutable
                "type_immediate" (lib/types.ml[245,8319+4]..[245,8319+18])                core_type (lib/types.ml[245,8319+20]..[245,8319+36])
                  Ptyp_constr "Type_immediacy.t" (lib/types.ml[245,8319+20]..[245,8319+36])
                  []
              (lib/types.ml[246,8357+4]..[246,8357+31])
                Immutable
                "type_unboxed_default" (lib/types.ml[246,8357+4]..[246,8357+24])                core_type (lib/types.ml[246,8357+26]..[246,8357+30])
                  Ptyp_constr "bool" (lib/types.ml[246,8357+26]..[246,8357+30])
                  []
              (lib/types.ml[247,8389+4]..[247,8389+20])
                Immutable
                "type_uid" (lib/types.ml[247,8389+4]..[247,8389+12])                core_type (lib/types.ml[247,8389+14]..[247,8389+19])
                  Ptyp_constr "Uid.t" (lib/types.ml[247,8389+14]..[247,8389+19])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "type_decl_kind" (lib/types.ml[250,8414+4]..[250,8414+18]) (lib/types.ml[250,8414+0]..[250,8414+75])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/types.ml[250,8414+21]..[250,8414+75])
              Ptyp_constr "type_kind" (lib/types.ml[250,8414+66]..[250,8414+75])
              [
                core_type (lib/types.ml[250,8414+22]..[250,8414+39])
                  Ptyp_constr "label_declaration" (lib/types.ml[250,8414+22]..[250,8414+39])
                  []
                core_type (lib/types.ml[250,8414+41]..[250,8414+64])
                  Ptyp_constr "constructor_declaration" (lib/types.ml[250,8414+41]..[250,8414+64])
                  []
              ]
      type_declaration "type_kind" (lib/types.ml[252,8491+18]..[252,8491+27]) (lib/types.ml[252,8491+0]..[256,8663+13])
        ptype_params =
          [
            core_type (lib/types.ml[252,8491+5]..[252,8491+9])
              Ptyp_var lbl
            core_type (lib/types.ml[252,8491+11]..[252,8491+16])
              Ptyp_var cstr
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[253,8521+4]..[253,8521+32])
                "Type_abstract" (lib/types.ml[253,8521+4]..[253,8521+17])
                [
                  core_type (lib/types.ml[253,8521+21]..[253,8521+32])
                    Ptyp_constr "type_origin" (lib/types.ml[253,8521+21]..[253,8521+32])
                    []
                ]
                None
              (lib/types.ml[254,8554+2]..[254,8554+52])
                "Type_record" (lib/types.ml[254,8554+4]..[254,8554+15])
                [
                  core_type (lib/types.ml[254,8554+19]..[254,8554+28])
                    Ptyp_constr "list" (lib/types.ml[254,8554+24]..[254,8554+28])
                    [
                      core_type (lib/types.ml[254,8554+19]..[254,8554+23])
                        Ptyp_var lbl
                    ]
                  core_type (lib/types.ml[254,8554+31]..[254,8554+52])
                    Ptyp_constr "record_representation" (lib/types.ml[254,8554+31]..[254,8554+52])
                    []
                ]
                None
              (lib/types.ml[255,8607+2]..[255,8607+55])
                "Type_variant" (lib/types.ml[255,8607+4]..[255,8607+16])
                [
                  core_type (lib/types.ml[255,8607+20]..[255,8607+30])
                    Ptyp_constr "list" (lib/types.ml[255,8607+26]..[255,8607+30])
                    [
                      core_type (lib/types.ml[255,8607+20]..[255,8607+25])
                        Ptyp_var cstr
                    ]
                  core_type (lib/types.ml[255,8607+33]..[255,8607+55])
                    Ptyp_constr "variant_representation" (lib/types.ml[255,8607+33]..[255,8607+55])
                    []
                ]
                None
              (lib/types.ml[256,8663+2]..[256,8663+13])
                "Type_open" (lib/types.ml[256,8663+4]..[256,8663+13])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "type_origin" (lib/types.ml[258,8678+4]..[258,8678+15]) (lib/types.ml[258,8678+0]..[261,8736+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[259,8696+4]..[259,8696+14])
                "Definition" (lib/types.ml[259,8696+4]..[259,8696+14])
                []
                None
              (lib/types.ml[260,8711+2]..[260,8711+24])
                "Rec_check_regularity" (lib/types.ml[260,8711+4]..[260,8711+24])
                []
                None
              (lib/types.ml[261,8736+2]..[261,8736+25])
                "Existential" (lib/types.ml[261,8736+4]..[261,8736+15])
                [
                  core_type (lib/types.ml[261,8736+19]..[261,8736+25])
                    Ptyp_constr "string" (lib/types.ml[261,8736+19]..[261,8736+25])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "record_representation" (lib/types.ml[263,8763+4]..[263,8763+25]) (lib/types.ml[263,8763+0]..[268,9076+30])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[264,8791+4]..[264,8791+18])
                "Record_regular" (lib/types.ml[264,8791+4]..[264,8791+18])
                []
                None
              (lib/types.ml[265,8867+2]..[265,8867+16])
                "Record_float" (lib/types.ml[265,8867+4]..[265,8867+16])
                []
                None
              (lib/types.ml[266,8935+2]..[266,8935+26])
                "Record_unboxed" (lib/types.ml[266,8935+4]..[266,8935+18])
                [
                  core_type (lib/types.ml[266,8935+22]..[266,8935+26])
                    Ptyp_constr "bool" (lib/types.ml[266,8935+22]..[266,8935+26])
                    []
                ]
                None
              (lib/types.ml[267,9015+2]..[267,9015+25])
                "Record_inlined" (lib/types.ml[267,9015+4]..[267,9015+18])
                [
                  core_type (lib/types.ml[267,9015+22]..[267,9015+25])
                    Ptyp_constr "int" (lib/types.ml[267,9015+22]..[267,9015+25])
                    []
                ]
                None
              (lib/types.ml[268,9076+2]..[268,9076+30])
                "Record_extension" (lib/types.ml[268,9076+4]..[268,9076+20])
                [
                  core_type (lib/types.ml[268,9076+24]..[268,9076+30])
                    Ptyp_constr "Path.t" (lib/types.ml[268,9076+24]..[268,9076+30])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "variant_representation" (lib/types.ml[270,9154+4]..[270,9154+26]) (lib/types.ml[270,9154+0]..[272,9249+19])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[271,9183+4]..[271,9183+19])
                "Variant_regular" (lib/types.ml[271,9183+4]..[271,9183+19])
                []
                None
              (lib/types.ml[272,9249+2]..[272,9249+19])
                "Variant_unboxed" (lib/types.ml[272,9249+4]..[272,9249+19])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "label_declaration" (lib/types.ml[274,9322+4]..[274,9322+21]) (lib/types.ml[274,9322+0]..[282,9508+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[276,9350+4]..[276,9350+19])
                Immutable
                "ld_id" (lib/types.ml[276,9350+4]..[276,9350+9])                core_type (lib/types.ml[276,9350+11]..[276,9350+18])
                  Ptyp_constr "Ident.t" (lib/types.ml[276,9350+11]..[276,9350+18])
                  []
              (lib/types.ml[277,9370+4]..[277,9370+29])
                Immutable
                "ld_mutable" (lib/types.ml[277,9370+4]..[277,9370+14])                core_type (lib/types.ml[277,9370+16]..[277,9370+28])
                  Ptyp_constr "mutable_flag" (lib/types.ml[277,9370+16]..[277,9370+28])
                  []
              (lib/types.ml[278,9400+4]..[278,9400+23])
                Immutable
                "ld_type" (lib/types.ml[278,9400+4]..[278,9400+11])                core_type (lib/types.ml[278,9400+13]..[278,9400+22])
                  Ptyp_constr "type_expr" (lib/types.ml[278,9400+13]..[278,9400+22])
                  []
              (lib/types.ml[279,9424+4]..[279,9424+23])
                Immutable
                "ld_loc" (lib/types.ml[279,9424+4]..[279,9424+10])                core_type (lib/types.ml[279,9424+12]..[279,9424+22])
                  Ptyp_constr "Location.t" (lib/types.ml[279,9424+12]..[279,9424+22])
                  []
              (lib/types.ml[280,9448+4]..[280,9448+40])
                Immutable
                "ld_attributes" (lib/types.ml[280,9448+4]..[280,9448+17])                core_type (lib/types.ml[280,9448+19]..[280,9448+39])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[280,9448+19]..[280,9448+39])
                  []
              (lib/types.ml[281,9489+4]..[281,9489+18])
                Immutable
                "ld_uid" (lib/types.ml[281,9489+4]..[281,9489+10])                core_type (lib/types.ml[281,9489+12]..[281,9489+17])
                  Ptyp_constr "Uid.t" (lib/types.ml[281,9489+12]..[281,9489+17])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "constructor_declaration" (lib/types.ml[284,9513+4]..[284,9513+27]) (lib/types.ml[284,9513+0]..[292,9717+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[286,9547+4]..[286,9547+19])
                Immutable
                "cd_id" (lib/types.ml[286,9547+4]..[286,9547+9])                core_type (lib/types.ml[286,9547+11]..[286,9547+18])
                  Ptyp_constr "Ident.t" (lib/types.ml[286,9547+11]..[286,9547+18])
                  []
              (lib/types.ml[287,9567+4]..[287,9567+35])
                Immutable
                "cd_args" (lib/types.ml[287,9567+4]..[287,9567+11])                core_type (lib/types.ml[287,9567+13]..[287,9567+34])
                  Ptyp_constr "constructor_arguments" (lib/types.ml[287,9567+13]..[287,9567+34])
                  []
              (lib/types.ml[288,9603+4]..[288,9603+29])
                Immutable
                "cd_res" (lib/types.ml[288,9603+4]..[288,9603+10])                core_type (lib/types.ml[288,9603+12]..[288,9603+28])
                  Ptyp_constr "option" (lib/types.ml[288,9603+22]..[288,9603+28])
                  [
                    core_type (lib/types.ml[288,9603+12]..[288,9603+21])
                      Ptyp_constr "type_expr" (lib/types.ml[288,9603+12]..[288,9603+21])
                      []
                  ]
              (lib/types.ml[289,9633+4]..[289,9633+23])
                Immutable
                "cd_loc" (lib/types.ml[289,9633+4]..[289,9633+10])                core_type (lib/types.ml[289,9633+12]..[289,9633+22])
                  Ptyp_constr "Location.t" (lib/types.ml[289,9633+12]..[289,9633+22])
                  []
              (lib/types.ml[290,9657+4]..[290,9657+40])
                Immutable
                "cd_attributes" (lib/types.ml[290,9657+4]..[290,9657+17])                core_type (lib/types.ml[290,9657+19]..[290,9657+39])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[290,9657+19]..[290,9657+39])
                  []
              (lib/types.ml[291,9698+4]..[291,9698+18])
                Immutable
                "cd_uid" (lib/types.ml[291,9698+4]..[291,9698+10])                core_type (lib/types.ml[291,9698+12]..[291,9698+17])
                  Ptyp_constr "Uid.t" (lib/types.ml[291,9698+12]..[291,9698+17])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "constructor_arguments" (lib/types.ml[294,9722+4]..[294,9722+25]) (lib/types.ml[294,9722+0]..[296,9783+41])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[295,9750+2]..[295,9750+32])
                "Cstr_tuple" (lib/types.ml[295,9750+4]..[295,9750+14])
                [
                  core_type (lib/types.ml[295,9750+18]..[295,9750+32])
                    Ptyp_constr "list" (lib/types.ml[295,9750+28]..[295,9750+32])
                    [
                      core_type (lib/types.ml[295,9750+18]..[295,9750+27])
                        Ptyp_constr "type_expr" (lib/types.ml[295,9750+18]..[295,9750+27])
                        []
                    ]
                ]
                None
              (lib/types.ml[296,9783+2]..[296,9783+41])
                "Cstr_record" (lib/types.ml[296,9783+4]..[296,9783+15])
                [
                  core_type (lib/types.ml[296,9783+19]..[296,9783+41])
                    Ptyp_constr "list" (lib/types.ml[296,9783+37]..[296,9783+41])
                    [
                      core_type (lib/types.ml[296,9783+19]..[296,9783+36])
                        Ptyp_constr "label_declaration" (lib/types.ml[296,9783+19]..[296,9783+36])
                        []
                    ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[298,9826+0]..[312,10227+16])
    Pstr_type Rec
    [
      type_declaration "extension_constructor" (lib/types.ml[298,9826+5]..[298,9826+26]) (lib/types.ml[298,9826+0]..[307,10110+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[299,9855+4]..[299,9855+26])
                Immutable
                "ext_type_path" (lib/types.ml[299,9855+4]..[299,9855+17])                core_type (lib/types.ml[299,9855+19]..[299,9855+25])
                  Ptyp_constr "Path.t" (lib/types.ml[299,9855+19]..[299,9855+25])
                  []
              (lib/types.ml[300,9882+4]..[300,9882+36])
                Immutable
                "ext_type_params" (lib/types.ml[300,9882+4]..[300,9882+19])                core_type (lib/types.ml[300,9882+21]..[300,9882+35])
                  Ptyp_constr "list" (lib/types.ml[300,9882+31]..[300,9882+35])
                  [
                    core_type (lib/types.ml[300,9882+21]..[300,9882+30])
                      Ptyp_constr "type_expr" (lib/types.ml[300,9882+21]..[300,9882+30])
                      []
                  ]
              (lib/types.ml[301,9919+4]..[301,9919+36])
                Immutable
                "ext_args" (lib/types.ml[301,9919+4]..[301,9919+12])                core_type (lib/types.ml[301,9919+14]..[301,9919+35])
                  Ptyp_constr "constructor_arguments" (lib/types.ml[301,9919+14]..[301,9919+35])
                  []
              (lib/types.ml[302,9956+4]..[302,9956+35])
                Immutable
                "ext_ret_type" (lib/types.ml[302,9956+4]..[302,9956+16])                core_type (lib/types.ml[302,9956+18]..[302,9956+34])
                  Ptyp_constr "option" (lib/types.ml[302,9956+28]..[302,9956+34])
                  [
                    core_type (lib/types.ml[302,9956+18]..[302,9956+27])
                      Ptyp_constr "type_expr" (lib/types.ml[302,9956+18]..[302,9956+27])
                      []
                  ]
              (lib/types.ml[303,9992+4]..[303,9992+30])
                Immutable
                "ext_private" (lib/types.ml[303,9992+4]..[303,9992+15])                core_type (lib/types.ml[303,9992+17]..[303,9992+29])
                  Ptyp_constr "private_flag" (lib/types.ml[303,9992+17]..[303,9992+29])
                  []
              (lib/types.ml[304,10023+4]..[304,10023+24])
                Immutable
                "ext_loc" (lib/types.ml[304,10023+4]..[304,10023+11])                core_type (lib/types.ml[304,10023+13]..[304,10023+23])
                  Ptyp_constr "Location.t" (lib/types.ml[304,10023+13]..[304,10023+23])
                  []
              (lib/types.ml[305,10048+4]..[305,10048+41])
                Immutable
                "ext_attributes" (lib/types.ml[305,10048+4]..[305,10048+18])                core_type (lib/types.ml[305,10048+20]..[305,10048+40])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[305,10048+20]..[305,10048+40])
                  []
              (lib/types.ml[306,10090+4]..[306,10090+19])
                Immutable
                "ext_uid" (lib/types.ml[306,10090+4]..[306,10090+11])                core_type (lib/types.ml[306,10090+13]..[306,10090+18])
                  Ptyp_constr "Uid.t" (lib/types.ml[306,10090+13]..[306,10090+18])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "type_transparence" (lib/types.ml[309,10115+4]..[309,10115+21]) (lib/types.ml[309,10115+0]..[312,10227+16])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[310,10139+4]..[310,10139+15])
                "Type_public" (lib/types.ml[310,10139+4]..[310,10139+15])
                []
                None
              (lib/types.ml[311,10189+2]..[311,10189+12])
                "Type_new" (lib/types.ml[311,10189+4]..[311,10189+12])
                []
                None
              (lib/types.ml[312,10227+2]..[312,10227+16])
                "Type_private" (lib/types.ml[312,10227+4]..[312,10227+16])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[316,10315+0]..[319,10425+51])
    Pstr_type Rec
    [
      type_declaration "class_type" (lib/types.ml[316,10315+5]..[316,10315+15]) (lib/types.ml[316,10315+0]..[319,10425+51])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[317,10333+4]..[317,10333+54])
                "Cty_constr" (lib/types.ml[317,10333+4]..[317,10333+14])
                [
                  core_type (lib/types.ml[317,10333+18]..[317,10333+24])
                    Ptyp_constr "Path.t" (lib/types.ml[317,10333+18]..[317,10333+24])
                    []
                  core_type (lib/types.ml[317,10333+27]..[317,10333+41])
                    Ptyp_constr "list" (lib/types.ml[317,10333+37]..[317,10333+41])
                    [
                      core_type (lib/types.ml[317,10333+27]..[317,10333+36])
                        Ptyp_constr "type_expr" (lib/types.ml[317,10333+27]..[317,10333+36])
                        []
                    ]
                  core_type (lib/types.ml[317,10333+44]..[317,10333+54])
                    Ptyp_constr "class_type" (lib/types.ml[317,10333+44]..[317,10333+54])
                    []
                ]
                None
              (lib/types.ml[318,10388+2]..[318,10388+36])
                "Cty_signature" (lib/types.ml[318,10388+4]..[318,10388+17])
                [
                  core_type (lib/types.ml[318,10388+21]..[318,10388+36])
                    Ptyp_constr "class_signature" (lib/types.ml[318,10388+21]..[318,10388+36])
                    []
                ]
                None
              (lib/types.ml[319,10425+2]..[319,10425+51])
                "Cty_arrow" (lib/types.ml[319,10425+4]..[319,10425+13])
                [
                  core_type (lib/types.ml[319,10425+17]..[319,10425+26])
                    Ptyp_constr "arg_label" (lib/types.ml[319,10425+17]..[319,10425+26])
                    []
                  core_type (lib/types.ml[319,10425+29]..[319,10425+38])
                    Ptyp_constr "type_expr" (lib/types.ml[319,10425+29]..[319,10425+38])
                    []
                  core_type (lib/types.ml[319,10425+41]..[319,10425+51])
                    Ptyp_constr "class_type" (lib/types.ml[319,10425+41]..[319,10425+51])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[321,10478+0]..[330,10744+2])
    Pstr_type Rec
    [
      type_declaration "class_declaration" (lib/types.ml[321,10478+5]..[321,10478+22]) (lib/types.ml[321,10478+0]..[330,10744+2])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[322,10503+4]..[322,10503+31])
                Immutable
                "cty_params" (lib/types.ml[322,10503+4]..[322,10503+14])                core_type (lib/types.ml[322,10503+16]..[322,10503+30])
                  Ptyp_constr "list" (lib/types.ml[322,10503+26]..[322,10503+30])
                  [
                    core_type (lib/types.ml[322,10503+16]..[322,10503+25])
                      Ptyp_constr "type_expr" (lib/types.ml[322,10503+16]..[322,10503+25])
                      []
                  ]
              (lib/types.ml[323,10535+4]..[323,10535+33])
                Mutable
                "cty_type" (lib/types.ml[323,10535+12]..[323,10535+20])                core_type (lib/types.ml[323,10535+22]..[323,10535+32])
                  Ptyp_constr "class_type" (lib/types.ml[323,10535+22]..[323,10535+32])
                  []
              (lib/types.ml[324,10569+4]..[324,10569+21])
                Immutable
                "cty_path" (lib/types.ml[324,10569+4]..[324,10569+12])                core_type (lib/types.ml[324,10569+14]..[324,10569+20])
                  Ptyp_constr "Path.t" (lib/types.ml[324,10569+14]..[324,10569+20])
                  []
              (lib/types.ml[325,10591+4]..[325,10591+30])
                Immutable
                "cty_new" (lib/types.ml[325,10591+4]..[325,10591+11])                core_type (lib/types.ml[325,10591+13]..[325,10591+29])
                  Ptyp_constr "option" (lib/types.ml[325,10591+23]..[325,10591+29])
                  [
                    core_type (lib/types.ml[325,10591+13]..[325,10591+22])
                      Ptyp_constr "type_expr" (lib/types.ml[325,10591+13]..[325,10591+22])
                      []
                  ]
              (lib/types.ml[326,10622+4]..[326,10622+34])
                Immutable
                "cty_variance" (lib/types.ml[326,10622+4]..[326,10622+16])                core_type (lib/types.ml[326,10622+18]..[326,10622+33])
                  Ptyp_constr "list" (lib/types.ml[326,10622+29]..[326,10622+33])
                  [
                    core_type (lib/types.ml[326,10622+18]..[326,10622+28])
                      Ptyp_constr "Variance.t" (lib/types.ml[326,10622+18]..[326,10622+28])
                      []
                  ]
              (lib/types.ml[327,10657+4]..[327,10657+24])
                Immutable
                "cty_loc" (lib/types.ml[327,10657+4]..[327,10657+11])                core_type (lib/types.ml[327,10657+13]..[327,10657+23])
                  Ptyp_constr "Location.t" (lib/types.ml[327,10657+13]..[327,10657+23])
                  []
              (lib/types.ml[328,10682+4]..[328,10682+41])
                Immutable
                "cty_attributes" (lib/types.ml[328,10682+4]..[328,10682+18])                core_type (lib/types.ml[328,10682+20]..[328,10682+40])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[328,10682+20]..[328,10682+40])
                  []
              (lib/types.ml[329,10724+4]..[329,10724+19])
                Immutable
                "cty_uid" (lib/types.ml[329,10724+4]..[329,10724+11])                core_type (lib/types.ml[329,10724+13]..[329,10724+18])
                  Ptyp_constr "Uid.t" (lib/types.ml[329,10724+13]..[329,10724+18])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[332,10748+0]..[341,11025+3])
    Pstr_type Rec
    [
      type_declaration "class_type_declaration" (lib/types.ml[332,10748+5]..[332,10748+27]) (lib/types.ml[332,10748+0]..[341,11025+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[333,10778+4]..[333,10778+32])
                Immutable
                "clty_params" (lib/types.ml[333,10778+4]..[333,10778+15])                core_type (lib/types.ml[333,10778+17]..[333,10778+31])
                  Ptyp_constr "list" (lib/types.ml[333,10778+27]..[333,10778+31])
                  [
                    core_type (lib/types.ml[333,10778+17]..[333,10778+26])
                      Ptyp_constr "type_expr" (lib/types.ml[333,10778+17]..[333,10778+26])
                      []
                  ]
              (lib/types.ml[334,10811+4]..[334,10811+26])
                Immutable
                "clty_type" (lib/types.ml[334,10811+4]..[334,10811+13])                core_type (lib/types.ml[334,10811+15]..[334,10811+25])
                  Ptyp_constr "class_type" (lib/types.ml[334,10811+15]..[334,10811+25])
                  []
              (lib/types.ml[335,10838+4]..[335,10838+22])
                Immutable
                "clty_path" (lib/types.ml[335,10838+4]..[335,10838+13])                core_type (lib/types.ml[335,10838+15]..[335,10838+21])
                  Ptyp_constr "Path.t" (lib/types.ml[335,10838+15]..[335,10838+21])
                  []
              (lib/types.ml[336,10861+4]..[336,10861+37])
                Immutable
                "clty_hash_type" (lib/types.ml[336,10861+4]..[336,10861+18])                core_type (lib/types.ml[336,10861+20]..[336,10861+36])
                  Ptyp_constr "type_declaration" (lib/types.ml[336,10861+20]..[336,10861+36])
                  []
              (lib/types.ml[337,10899+4]..[337,10899+35])
                Immutable
                "clty_variance" (lib/types.ml[337,10899+4]..[337,10899+17])                core_type (lib/types.ml[337,10899+19]..[337,10899+34])
                  Ptyp_constr "list" (lib/types.ml[337,10899+30]..[337,10899+34])
                  [
                    core_type (lib/types.ml[337,10899+19]..[337,10899+29])
                      Ptyp_constr "Variance.t" (lib/types.ml[337,10899+19]..[337,10899+29])
                      []
                  ]
              (lib/types.ml[338,10935+4]..[338,10935+25])
                Immutable
                "clty_loc" (lib/types.ml[338,10935+4]..[338,10935+12])                core_type (lib/types.ml[338,10935+14]..[338,10935+24])
                  Ptyp_constr "Location.t" (lib/types.ml[338,10935+14]..[338,10935+24])
                  []
              (lib/types.ml[339,10961+4]..[339,10961+42])
                Immutable
                "clty_attributes" (lib/types.ml[339,10961+4]..[339,10961+19])                core_type (lib/types.ml[339,10961+21]..[339,10961+41])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[339,10961+21]..[339,10961+41])
                  []
              (lib/types.ml[340,11004+4]..[340,11004+20])
                Immutable
                "clty_uid" (lib/types.ml[340,11004+4]..[340,11004+12])                core_type (lib/types.ml[340,11004+14]..[340,11004+19])
                  Ptyp_constr "Uid.t" (lib/types.ml[340,11004+14]..[340,11004+19])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[345,11078+0]..[347,11109+10])
    Pstr_type Rec
    [
      type_declaration "visibility" (lib/types.ml[345,11078+5]..[345,11078+15]) (lib/types.ml[345,11078+0]..[347,11109+10])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[346,11096+2]..[346,11096+12])
                "Exported" (lib/types.ml[346,11096+4]..[346,11096+12])
                []
                None
              (lib/types.ml[347,11109+2]..[347,11109+10])
                "Hidden" (lib/types.ml[347,11109+4]..[347,11109+10])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[349,11121+0]..[399,12695+18])
    Pstr_type Rec
    [
      type_declaration "module_type" (lib/types.ml[349,11121+5]..[349,11121+16]) (lib/types.ml[349,11121+0]..[353,11246+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[350,11140+4]..[350,11140+23])
                "Mty_ident" (lib/types.ml[350,11140+4]..[350,11140+13])
                [
                  core_type (lib/types.ml[350,11140+17]..[350,11140+23])
                    Ptyp_constr "Path.t" (lib/types.ml[350,11140+17]..[350,11140+23])
                    []
                ]
                None
              (lib/types.ml[351,11164+2]..[351,11164+30])
                "Mty_signature" (lib/types.ml[351,11164+4]..[351,11164+17])
                [
                  core_type (lib/types.ml[351,11164+21]..[351,11164+30])
                    Ptyp_constr "signature" (lib/types.ml[351,11164+21]..[351,11164+30])
                    []
                ]
                None
              (lib/types.ml[352,11195+2]..[352,11195+50])
                "Mty_functor" (lib/types.ml[352,11195+4]..[352,11195+15])
                [
                  core_type (lib/types.ml[352,11195+19]..[352,11195+36])
                    Ptyp_constr "functor_parameter" (lib/types.ml[352,11195+19]..[352,11195+36])
                    []
                  core_type (lib/types.ml[352,11195+39]..[352,11195+50])
                    Ptyp_constr "module_type" (lib/types.ml[352,11195+39]..[352,11195+50])
                    []
                ]
                None
              (lib/types.ml[353,11246+2]..[353,11246+23])
                "Mty_alias" (lib/types.ml[353,11246+4]..[353,11246+13])
                [
                  core_type (lib/types.ml[353,11246+17]..[353,11246+23])
                    Ptyp_constr "Path.t" (lib/types.ml[353,11246+17]..[353,11246+23])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "functor_parameter" (lib/types.ml[355,11271+4]..[355,11271+21]) (lib/types.ml[355,11271+0]..[357,11304+41])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[356,11295+2]..[356,11295+8])
                "Unit" (lib/types.ml[356,11295+4]..[356,11295+8])
                []
                None
              (lib/types.ml[357,11304+2]..[357,11304+41])
                "Named" (lib/types.ml[357,11304+4]..[357,11304+9])
                [
                  core_type (lib/types.ml[357,11304+13]..[357,11304+27])
                    Ptyp_constr "option" (lib/types.ml[357,11304+21]..[357,11304+27])
                    [
                      core_type (lib/types.ml[357,11304+13]..[357,11304+20])
                        Ptyp_constr "Ident.t" (lib/types.ml[357,11304+13]..[357,11304+20])
                        []
                    ]
                  core_type (lib/types.ml[357,11304+30]..[357,11304+41])
                    Ptyp_constr "module_type" (lib/types.ml[357,11304+30]..[357,11304+41])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_presence" (lib/types.ml[359,11347+4]..[359,11347+19]) (lib/types.ml[359,11347+0]..[361,11384+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[360,11369+2]..[360,11369+14])
                "Mp_present" (lib/types.ml[360,11369+4]..[360,11369+14])
                []
                None
              (lib/types.ml[361,11384+2]..[361,11384+13])
                "Mp_absent" (lib/types.ml[361,11384+4]..[361,11384+13])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "signature" (lib/types.ml[363,11399+4]..[363,11399+13]) (lib/types.ml[363,11399+0]..[363,11399+35])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/types.ml[363,11399+16]..[363,11399+35])
              Ptyp_constr "list" (lib/types.ml[363,11399+31]..[363,11399+35])
              [
                core_type (lib/types.ml[363,11399+16]..[363,11399+30])
                  Ptyp_constr "signature_item" (lib/types.ml[363,11399+16]..[363,11399+30])
                  []
              ]
      type_declaration "signature_item" (lib/types.ml[365,11436+4]..[365,11436+18]) (lib/types.ml[365,11436+0]..[373,11890+80])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[366,11457+4]..[366,11457+57])
                "Sig_value" (lib/types.ml[366,11457+4]..[366,11457+13])
                [
                  core_type (lib/types.ml[366,11457+17]..[366,11457+24])
                    Ptyp_constr "Ident.t" (lib/types.ml[366,11457+17]..[366,11457+24])
                    []
                  core_type (lib/types.ml[366,11457+27]..[366,11457+44])
                    Ptyp_constr "value_description" (lib/types.ml[366,11457+27]..[366,11457+44])
                    []
                  core_type (lib/types.ml[366,11457+47]..[366,11457+57])
                    Ptyp_constr "visibility" (lib/types.ml[366,11457+47]..[366,11457+57])
                    []
                ]
                None
              (lib/types.ml[367,11515+2]..[367,11515+68])
                "Sig_type" (lib/types.ml[367,11515+4]..[367,11515+12])
                [
                  core_type (lib/types.ml[367,11515+16]..[367,11515+23])
                    Ptyp_constr "Ident.t" (lib/types.ml[367,11515+16]..[367,11515+23])
                    []
                  core_type (lib/types.ml[367,11515+26]..[367,11515+42])
                    Ptyp_constr "type_declaration" (lib/types.ml[367,11515+26]..[367,11515+42])
                    []
                  core_type (lib/types.ml[367,11515+45]..[367,11515+55])
                    Ptyp_constr "rec_status" (lib/types.ml[367,11515+45]..[367,11515+55])
                    []
                  core_type (lib/types.ml[367,11515+58]..[367,11515+68])
                    Ptyp_constr "visibility" (lib/types.ml[367,11515+58]..[367,11515+68])
                    []
                ]
                None
              (lib/types.ml[368,11584+2]..[368,11584+75])
                "Sig_typext" (lib/types.ml[368,11584+4]..[368,11584+14])
                [
                  core_type (lib/types.ml[368,11584+18]..[368,11584+25])
                    Ptyp_constr "Ident.t" (lib/types.ml[368,11584+18]..[368,11584+25])
                    []
                  core_type (lib/types.ml[368,11584+28]..[368,11584+49])
                    Ptyp_constr "extension_constructor" (lib/types.ml[368,11584+28]..[368,11584+49])
                    []
                  core_type (lib/types.ml[368,11584+52]..[368,11584+62])
                    Ptyp_constr "ext_status" (lib/types.ml[368,11584+52]..[368,11584+62])
                    []
                  core_type (lib/types.ml[368,11584+65]..[368,11584+75])
                    Ptyp_constr "visibility" (lib/types.ml[368,11584+65]..[368,11584+75])
                    []
                ]
                None
              (lib/types.ml[369,11660+2]..[370,11678+78])
                "Sig_module" (lib/types.ml[369,11660+4]..[369,11660+14])
                [
                  core_type (lib/types.ml[370,11678+6]..[370,11678+13])
                    Ptyp_constr "Ident.t" (lib/types.ml[370,11678+6]..[370,11678+13])
                    []
                  core_type (lib/types.ml[370,11678+16]..[370,11678+31])
                    Ptyp_constr "module_presence" (lib/types.ml[370,11678+16]..[370,11678+31])
                    []
                  core_type (lib/types.ml[370,11678+34]..[370,11678+52])
                    Ptyp_constr "module_declaration" (lib/types.ml[370,11678+34]..[370,11678+52])
                    []
                  core_type (lib/types.ml[370,11678+55]..[370,11678+65])
                    Ptyp_constr "rec_status" (lib/types.ml[370,11678+55]..[370,11678+65])
                    []
                  core_type (lib/types.ml[370,11678+68]..[370,11678+78])
                    Ptyp_constr "visibility" (lib/types.ml[370,11678+68]..[370,11678+78])
                    []
                ]
                None
              (lib/types.ml[371,11757+2]..[371,11757+61])
                "Sig_modtype" (lib/types.ml[371,11757+4]..[371,11757+15])
                [
                  core_type (lib/types.ml[371,11757+19]..[371,11757+26])
                    Ptyp_constr "Ident.t" (lib/types.ml[371,11757+19]..[371,11757+26])
                    []
                  core_type (lib/types.ml[371,11757+29]..[371,11757+48])
                    Ptyp_constr "modtype_declaration" (lib/types.ml[371,11757+29]..[371,11757+48])
                    []
                  core_type (lib/types.ml[371,11757+51]..[371,11757+61])
                    Ptyp_constr "visibility" (lib/types.ml[371,11757+51]..[371,11757+61])
                    []
                ]
                None
              (lib/types.ml[372,11819+2]..[372,11819+70])
                "Sig_class" (lib/types.ml[372,11819+4]..[372,11819+13])
                [
                  core_type (lib/types.ml[372,11819+17]..[372,11819+24])
                    Ptyp_constr "Ident.t" (lib/types.ml[372,11819+17]..[372,11819+24])
                    []
                  core_type (lib/types.ml[372,11819+27]..[372,11819+44])
                    Ptyp_constr "class_declaration" (lib/types.ml[372,11819+27]..[372,11819+44])
                    []
                  core_type (lib/types.ml[372,11819+47]..[372,11819+57])
                    Ptyp_constr "rec_status" (lib/types.ml[372,11819+47]..[372,11819+57])
                    []
                  core_type (lib/types.ml[372,11819+60]..[372,11819+70])
                    Ptyp_constr "visibility" (lib/types.ml[372,11819+60]..[372,11819+70])
                    []
                ]
                None
              (lib/types.ml[373,11890+2]..[373,11890+80])
                "Sig_class_type" (lib/types.ml[373,11890+4]..[373,11890+18])
                [
                  core_type (lib/types.ml[373,11890+22]..[373,11890+29])
                    Ptyp_constr "Ident.t" (lib/types.ml[373,11890+22]..[373,11890+29])
                    []
                  core_type (lib/types.ml[373,11890+32]..[373,11890+54])
                    Ptyp_constr "class_type_declaration" (lib/types.ml[373,11890+32]..[373,11890+54])
                    []
                  core_type (lib/types.ml[373,11890+57]..[373,11890+67])
                    Ptyp_constr "rec_status" (lib/types.ml[373,11890+57]..[373,11890+67])
                    []
                  core_type (lib/types.ml[373,11890+70]..[373,11890+80])
                    Ptyp_constr "visibility" (lib/types.ml[373,11890+70]..[373,11890+80])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_declaration" (lib/types.ml[375,11972+4]..[375,11972+22]) (lib/types.ml[375,11972+0]..[381,12111+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[377,12001+4]..[377,12001+25])
                Immutable
                "md_type" (lib/types.ml[377,12001+4]..[377,12001+11])                core_type (lib/types.ml[377,12001+13]..[377,12001+24])
                  Ptyp_constr "module_type" (lib/types.ml[377,12001+13]..[377,12001+24])
                  []
              (lib/types.ml[378,12027+4]..[378,12027+40])
                Immutable
                "md_attributes" (lib/types.ml[378,12027+4]..[378,12027+17])                core_type (lib/types.ml[378,12027+19]..[378,12027+39])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[378,12027+19]..[378,12027+39])
                  []
              (lib/types.ml[379,12068+4]..[379,12068+23])
                Immutable
                "md_loc" (lib/types.ml[379,12068+4]..[379,12068+10])                core_type (lib/types.ml[379,12068+12]..[379,12068+22])
                  Ptyp_constr "Location.t" (lib/types.ml[379,12068+12]..[379,12068+22])
                  []
              (lib/types.ml[380,12092+4]..[380,12092+18])
                Immutable
                "md_uid" (lib/types.ml[380,12092+4]..[380,12092+10])                core_type (lib/types.ml[380,12092+12]..[380,12092+17])
                  Ptyp_constr "Uid.t" (lib/types.ml[380,12092+12]..[380,12092+17])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "modtype_declaration" (lib/types.ml[383,12116+4]..[383,12116+23]) (lib/types.ml[383,12116+0]..[389,12289+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[385,12146+4]..[385,12146+33])
                Immutable
                "mtd_type" (lib/types.ml[385,12146+4]..[385,12146+12])                core_type (lib/types.ml[385,12146+14]..[385,12146+32])
                  Ptyp_constr "option" (lib/types.ml[385,12146+26]..[385,12146+32])
                  [
                    core_type (lib/types.ml[385,12146+14]..[385,12146+25])
                      Ptyp_constr "module_type" (lib/types.ml[385,12146+14]..[385,12146+25])
                      []
                  ]
              (lib/types.ml[386,12202+4]..[386,12202+41])
                Immutable
                "mtd_attributes" (lib/types.ml[386,12202+4]..[386,12202+18])                core_type (lib/types.ml[386,12202+20]..[386,12202+40])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[386,12202+20]..[386,12202+40])
                  []
              (lib/types.ml[387,12244+4]..[387,12244+24])
                Immutable
                "mtd_loc" (lib/types.ml[387,12244+4]..[387,12244+11])                core_type (lib/types.ml[387,12244+13]..[387,12244+23])
                  Ptyp_constr "Location.t" (lib/types.ml[387,12244+13]..[387,12244+23])
                  []
              (lib/types.ml[388,12269+4]..[388,12269+19])
                Immutable
                "mtd_uid" (lib/types.ml[388,12269+4]..[388,12269+11])                core_type (lib/types.ml[388,12269+13]..[388,12269+18])
                  Ptyp_constr "Uid.t" (lib/types.ml[388,12269+13]..[388,12269+18])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "rec_status" (lib/types.ml[391,12294+4]..[391,12294+14]) (lib/types.ml[391,12294+0]..[394,12442+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[392,12311+4]..[392,12311+12])
                "Trec_not" (lib/types.ml[392,12311+4]..[392,12311+12])
                []
                None
              (lib/types.ml[393,12378+2]..[393,12378+14])
                "Trec_first" (lib/types.ml[393,12378+4]..[393,12378+14])
                []
                None
              (lib/types.ml[394,12442+2]..[394,12442+13])
                "Trec_next" (lib/types.ml[394,12442+4]..[394,12442+13])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "ext_status" (lib/types.ml[396,12524+4]..[396,12524+14]) (lib/types.ml[396,12524+0]..[399,12695+18])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[397,12541+4]..[397,12541+14])
                "Text_first" (lib/types.ml[397,12541+4]..[397,12541+14])
                []
                None
              (lib/types.ml[398,12616+2]..[398,12616+13])
                "Text_next" (lib/types.ml[398,12616+4]..[398,12616+13])
                []
                None
              (lib/types.ml[399,12695+2]..[399,12695+18])
                "Text_exception" (lib/types.ml[399,12695+4]..[399,12695+18])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[405,12840+0]..[426,13953+35])
    Pstr_type Rec
    [
      type_declaration "constructor_description" (lib/types.ml[405,12840+5]..[405,12840+28]) (lib/types.ml[405,12840+0]..[420,13696+4])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[406,12871+4]..[406,12871+22])
                Immutable
                "cstr_name" (lib/types.ml[406,12871+4]..[406,12871+13])                core_type (lib/types.ml[406,12871+15]..[406,12871+21])
                  Ptyp_constr "string" (lib/types.ml[406,12871+15]..[406,12871+21])
                  []
              (lib/types.ml[407,12934+4]..[407,12934+24])
                Immutable
                "cstr_res" (lib/types.ml[407,12934+4]..[407,12934+12])                core_type (lib/types.ml[407,12934+14]..[407,12934+23])
                  Ptyp_constr "type_expr" (lib/types.ml[407,12934+14]..[407,12934+23])
                  []
              (lib/types.ml[408,12999+4]..[408,12999+38])
                Immutable
                "cstr_existentials" (lib/types.ml[408,12999+4]..[408,12999+21])                core_type (lib/types.ml[408,12999+23]..[408,12999+37])
                  Ptyp_constr "list" (lib/types.ml[408,12999+33]..[408,12999+37])
                  [
                    core_type (lib/types.ml[408,12999+23]..[408,12999+32])
                      Ptyp_constr "type_expr" (lib/types.ml[408,12999+23]..[408,12999+32])
                      []
                  ]
              (lib/types.ml[409,13066+4]..[409,13066+30])
                Immutable
                "cstr_args" (lib/types.ml[409,13066+4]..[409,13066+13])                core_type (lib/types.ml[409,13066+15]..[409,13066+29])
                  Ptyp_constr "list" (lib/types.ml[409,13066+25]..[409,13066+29])
                  [
                    core_type (lib/types.ml[409,13066+15]..[409,13066+24])
                      Ptyp_constr "type_expr" (lib/types.ml[409,13066+15]..[409,13066+24])
                      []
                  ]
              (lib/types.ml[410,13134+4]..[410,13134+20])
                Immutable
                "cstr_arity" (lib/types.ml[410,13134+4]..[410,13134+14])                core_type (lib/types.ml[410,13134+16]..[410,13134+19])
                  Ptyp_constr "int" (lib/types.ml[410,13134+16]..[410,13134+19])
                  []
              (lib/types.ml[411,13200+4]..[411,13200+30])
                Immutable
                "cstr_tag" (lib/types.ml[411,13200+4]..[411,13200+12])                core_type (lib/types.ml[411,13200+14]..[411,13200+29])
                  Ptyp_constr "constructor_tag" (lib/types.ml[411,13200+14]..[411,13200+29])
                  []
              (lib/types.ml[412,13266+4]..[412,13266+21])
                Immutable
                "cstr_consts" (lib/types.ml[412,13266+4]..[412,13266+15])                core_type (lib/types.ml[412,13266+17]..[412,13266+20])
                  Ptyp_constr "int" (lib/types.ml[412,13266+17]..[412,13266+20])
                  []
              (lib/types.ml[413,13344+4]..[413,13344+24])
                Immutable
                "cstr_nonconsts" (lib/types.ml[413,13344+4]..[413,13344+18])                core_type (lib/types.ml[413,13344+20]..[413,13344+23])
                  Ptyp_constr "int" (lib/types.ml[413,13344+20]..[413,13344+23])
                  []
              (lib/types.ml[414,13423+4]..[414,13423+27])
                Immutable
                "cstr_generalized" (lib/types.ml[414,13423+4]..[414,13423+20])                core_type (lib/types.ml[414,13423+22]..[414,13423+26])
                  Ptyp_constr "bool" (lib/types.ml[414,13423+22]..[414,13423+26])
                  []
              (lib/types.ml[415,13494+4]..[415,13494+31])
                Immutable
                "cstr_private" (lib/types.ml[415,13494+4]..[415,13494+16])                core_type (lib/types.ml[415,13494+18]..[415,13494+30])
                  Ptyp_constr "private_flag" (lib/types.ml[415,13494+18]..[415,13494+30])
                  []
              (lib/types.ml[416,13563+4]..[416,13563+25])
                Immutable
                "cstr_loc" (lib/types.ml[416,13563+4]..[416,13563+12])                core_type (lib/types.ml[416,13563+14]..[416,13563+24])
                  Ptyp_constr "Location.t" (lib/types.ml[416,13563+14]..[416,13563+24])
                  []
              (lib/types.ml[417,13589+4]..[417,13589+42])
                Immutable
                "cstr_attributes" (lib/types.ml[417,13589+4]..[417,13589+19])                core_type (lib/types.ml[417,13589+21]..[417,13589+41])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[417,13589+21]..[417,13589+41])
                  []
              (lib/types.ml[418,13632+4]..[418,13632+42])
                Immutable
                "cstr_inlined" (lib/types.ml[418,13632+4]..[418,13632+16])                core_type (lib/types.ml[418,13632+18]..[418,13632+41])
                  Ptyp_constr "option" (lib/types.ml[418,13632+35]..[418,13632+41])
                  [
                    core_type (lib/types.ml[418,13632+18]..[418,13632+34])
                      Ptyp_constr "type_declaration" (lib/types.ml[418,13632+18]..[418,13632+34])
                      []
                  ]
              (lib/types.ml[419,13675+4]..[419,13675+20])
                Immutable
                "cstr_uid" (lib/types.ml[419,13675+4]..[419,13675+12])                core_type (lib/types.ml[419,13675+14]..[419,13675+19])
                  Ptyp_constr "Uid.t" (lib/types.ml[419,13675+14]..[419,13675+19])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "constructor_tag" (lib/types.ml[422,13702+4]..[422,13702+19]) (lib/types.ml[422,13702+0]..[426,13953+35])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[423,13724+4]..[423,13724+24])
                "Cstr_constant" (lib/types.ml[423,13724+4]..[423,13724+17])
                [
                  core_type (lib/types.ml[423,13724+21]..[423,13724+24])
                    Ptyp_constr "int" (lib/types.ml[423,13724+21]..[423,13724+24])
                    []
                ]
                None
              (lib/types.ml[424,13800+2]..[424,13800+21])
                "Cstr_block" (lib/types.ml[424,13800+4]..[424,13800+14])
                [
                  core_type (lib/types.ml[424,13800+18]..[424,13800+21])
                    Ptyp_constr "int" (lib/types.ml[424,13800+18]..[424,13800+21])
                    []
                ]
                None
              (lib/types.ml[425,13876+2]..[425,13876+16])
                "Cstr_unboxed" (lib/types.ml[425,13876+4]..[425,13876+16])
                []
                None
              (lib/types.ml[426,13953+2]..[426,13953+35])
                "Cstr_extension" (lib/types.ml[426,13953+4]..[426,13953+18])
                [
                  core_type (lib/types.ml[426,13953+22]..[426,13953+28])
                    Ptyp_constr "Path.t" (lib/types.ml[426,13953+22]..[426,13953+28])
                    []
                  core_type (lib/types.ml[426,13953+31]..[426,13953+35])
                    Ptyp_constr "bool" (lib/types.ml[426,13953+31]..[426,13953+35])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[429,14100+0]..[436,14378+76])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[429,14100+4]..[429,14100+13])
          Ppat_var "equal_tag" (lib/types.ml[429,14100+4]..[429,14100+13])
        expression (lib/types.ml[429,14100+14]..[436,14378+76]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[429,14100+14]..[429,14100+16])
              Nolabel
              None
              pattern (lib/types.ml[429,14100+14]..[429,14100+16])
                Ppat_var "t1" (lib/types.ml[429,14100+14]..[429,14100+16])
            Pparam_val (lib/types.ml[429,14100+17]..[429,14100+19])
              Nolabel
              None
              pattern (lib/types.ml[429,14100+17]..[429,14100+19])
                Ppat_var "t2" (lib/types.ml[429,14100+17]..[429,14100+19])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[430,14122+2]..[436,14378+76])
              Pexp_match
              expression (lib/types.ml[430,14122+8]..[430,14122+16])
                Pexp_tuple
                [
                  expression (lib/types.ml[430,14122+9]..[430,14122+11])
                    Pexp_ident "t1" (lib/types.ml[430,14122+9]..[430,14122+11])
                  expression (lib/types.ml[430,14122+13]..[430,14122+15])
                    Pexp_ident "t2" (lib/types.ml[430,14122+13]..[430,14122+15])
                ]
              [
                <case>
                  pattern (lib/types.ml[431,14144+4]..[431,14144+38])
                    Ppat_tuple
                    [
                      pattern (lib/types.ml[431,14144+4]..[431,14144+20])
                        Ppat_construct "Cstr_constant" (lib/types.ml[431,14144+4]..[431,14144+17])
                        Some
                          []
                          pattern (lib/types.ml[431,14144+18]..[431,14144+20])
                            Ppat_var "i1" (lib/types.ml[431,14144+18]..[431,14144+20])
                      pattern (lib/types.ml[431,14144+22]..[431,14144+38])
                        Ppat_construct "Cstr_constant" (lib/types.ml[431,14144+22]..[431,14144+35])
                        Some
                          []
                          pattern (lib/types.ml[431,14144+36]..[431,14144+38])
                            Ppat_var "i2" (lib/types.ml[431,14144+36]..[431,14144+38])
                    ]
                  expression (lib/types.ml[431,14144+42]..[431,14144+49])
                    Pexp_apply
                    expression (lib/types.ml[431,14144+45]..[431,14144+46])
                      Pexp_ident "=" (lib/types.ml[431,14144+45]..[431,14144+46])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[431,14144+42]..[431,14144+44])
                          Pexp_ident "i2" (lib/types.ml[431,14144+42]..[431,14144+44])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[431,14144+47]..[431,14144+49])
                          Pexp_ident "i1" (lib/types.ml[431,14144+47]..[431,14144+49])
                    ]
                <case>
                  pattern (lib/types.ml[432,14194+4]..[432,14194+32])
                    Ppat_tuple
                    [
                      pattern (lib/types.ml[432,14194+4]..[432,14194+17])
                        Ppat_construct "Cstr_block" (lib/types.ml[432,14194+4]..[432,14194+14])
                        Some
                          []
                          pattern (lib/types.ml[432,14194+15]..[432,14194+17])
                            Ppat_var "i1" (lib/types.ml[432,14194+15]..[432,14194+17])
                      pattern (lib/types.ml[432,14194+19]..[432,14194+32])
                        Ppat_construct "Cstr_block" (lib/types.ml[432,14194+19]..[432,14194+29])
                        Some
                          []
                          pattern (lib/types.ml[432,14194+30]..[432,14194+32])
                            Ppat_var "i2" (lib/types.ml[432,14194+30]..[432,14194+32])
                    ]
                  expression (lib/types.ml[432,14194+36]..[432,14194+43])
                    Pexp_apply
                    expression (lib/types.ml[432,14194+39]..[432,14194+40])
                      Pexp_ident "=" (lib/types.ml[432,14194+39]..[432,14194+40])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[432,14194+36]..[432,14194+38])
                          Pexp_ident "i2" (lib/types.ml[432,14194+36]..[432,14194+38])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[432,14194+41]..[432,14194+43])
                          Pexp_ident "i1" (lib/types.ml[432,14194+41]..[432,14194+43])
                    ]
                <case>
                  pattern (lib/types.ml[433,14238+4]..[433,14238+30])
                    Ppat_tuple
                    [
                      pattern (lib/types.ml[433,14238+4]..[433,14238+16])
                        Ppat_construct "Cstr_unboxed" (lib/types.ml[433,14238+4]..[433,14238+16])
                        None
                      pattern (lib/types.ml[433,14238+18]..[433,14238+30])
                        Ppat_construct "Cstr_unboxed" (lib/types.ml[433,14238+18]..[433,14238+30])
                        None
                    ]
                  expression (lib/types.ml[433,14238+34]..[433,14238+38])
                    Pexp_construct "true" (lib/types.ml[433,14238+34]..[433,14238+38])
                    None
                <case>
                  pattern (lib/types.ml[434,14277+4]..[434,14277+58])
                    Ppat_tuple
                    [
                      pattern (lib/types.ml[434,14277+4]..[434,14277+30])
                        Ppat_construct "Cstr_extension" (lib/types.ml[434,14277+4]..[434,14277+18])
                        Some
                          []
                          pattern (lib/types.ml[434,14277+19]..[434,14277+30])
                            Ppat_tuple
                            [
                              pattern (lib/types.ml[434,14277+20]..[434,14277+25])
                                Ppat_var "path1" (lib/types.ml[434,14277+20]..[434,14277+25])
                              pattern (lib/types.ml[434,14277+27]..[434,14277+29])
                                Ppat_var "b1" (lib/types.ml[434,14277+27]..[434,14277+29])
                            ]
                      pattern (lib/types.ml[434,14277+32]..[434,14277+58])
                        Ppat_construct "Cstr_extension" (lib/types.ml[434,14277+32]..[434,14277+46])
                        Some
                          []
                          pattern (lib/types.ml[434,14277+47]..[434,14277+58])
                            Ppat_tuple
                            [
                              pattern (lib/types.ml[434,14277+48]..[434,14277+53])
                                Ppat_var "path2" (lib/types.ml[434,14277+48]..[434,14277+53])
                              pattern (lib/types.ml[434,14277+55]..[434,14277+57])
                                Ppat_var "b2" (lib/types.ml[434,14277+55]..[434,14277+57])
                            ]
                    ]
                  expression (lib/types.ml[435,14339+6]..[435,14339+38])
                    Pexp_apply
                    expression (lib/types.ml[435,14339+28]..[435,14339+30])
                      Pexp_ident "&&" (lib/types.ml[435,14339+28]..[435,14339+30])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[435,14339+6]..[435,14339+27])
                          Pexp_apply
                          expression (lib/types.ml[435,14339+6]..[435,14339+15])
                            Pexp_ident "Path.same" (lib/types.ml[435,14339+6]..[435,14339+15])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[435,14339+16]..[435,14339+21])
                                Pexp_ident "path1" (lib/types.ml[435,14339+16]..[435,14339+21])
                            <arg>
                            Nolabel
                              expression (lib/types.ml[435,14339+22]..[435,14339+27])
                                Pexp_ident "path2" (lib/types.ml[435,14339+22]..[435,14339+27])
                          ]
                      <arg>
                      Nolabel
                        expression (lib/types.ml[435,14339+31]..[435,14339+38])
                          Pexp_apply
                          expression (lib/types.ml[435,14339+34]..[435,14339+35])
                            Pexp_ident "=" (lib/types.ml[435,14339+34]..[435,14339+35])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[435,14339+31]..[435,14339+33])
                                Pexp_ident "b1" (lib/types.ml[435,14339+31]..[435,14339+33])
                            <arg>
                            Nolabel
                              expression (lib/types.ml[435,14339+36]..[435,14339+38])
                                Pexp_ident "b2" (lib/types.ml[435,14339+36]..[435,14339+38])
                          ]
                    ]
                <case>
                  pattern (lib/types.ml[436,14378+4]..[436,14378+67])
                    Ppat_tuple
                    [
                      pattern (lib/types.ml[436,14378+4]..[436,14378+64])
                        Ppat_or
                        pattern (lib/types.ml[436,14378+5]..[436,14378+46])
                          Ppat_or
                          pattern (lib/types.ml[436,14378+5]..[436,14378+33])
                            Ppat_or
                            pattern (lib/types.ml[436,14378+5]..[436,14378+20])
                              Ppat_construct "Cstr_constant" (lib/types.ml[436,14378+5]..[436,14378+18])
                              Some
                                []
                                pattern (lib/types.ml[436,14378+19]..[436,14378+20])
                                  Ppat_any
                            pattern (lib/types.ml[436,14378+21]..[436,14378+33])
                              Ppat_construct "Cstr_block" (lib/types.ml[436,14378+21]..[436,14378+31])
                              Some
                                []
                                pattern (lib/types.ml[436,14378+32]..[436,14378+33])
                                  Ppat_any
                          pattern (lib/types.ml[436,14378+34]..[436,14378+46])
                            Ppat_construct "Cstr_unboxed" (lib/types.ml[436,14378+34]..[436,14378+46])
                            None
                        pattern (lib/types.ml[436,14378+47]..[436,14378+63])
                          Ppat_construct "Cstr_extension" (lib/types.ml[436,14378+47]..[436,14378+61])
                          Some
                            []
                            pattern (lib/types.ml[436,14378+62]..[436,14378+63])
                              Ppat_any
                      pattern (lib/types.ml[436,14378+66]..[436,14378+67])
                        Ppat_any
                    ]
                  expression (lib/types.ml[436,14378+71]..[436,14378+76])
                    Pexp_construct "false" (lib/types.ml[436,14378+71]..[436,14378+76])
                    None
              ]
    ]
  structure_item (lib/types.ml[438,14456+0]..[445,14707+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[438,14456+4]..[438,14456+20])
          Ppat_var "may_equal_constr" (lib/types.ml[438,14456+4]..[438,14456+20])
        expression (lib/types.ml[438,14456+21]..[445,14707+29]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[438,14456+21]..[438,14456+23])
              Nolabel
              None
              pattern (lib/types.ml[438,14456+21]..[438,14456+23])
                Ppat_var "c1" (lib/types.ml[438,14456+21]..[438,14456+23])
            Pparam_val (lib/types.ml[438,14456+24]..[438,14456+26])
              Nolabel
              None
              pattern (lib/types.ml[438,14456+24]..[438,14456+26])
                Ppat_var "c2" (lib/types.ml[438,14456+24]..[438,14456+26])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[439,14485+2]..[445,14707+29])
              Pexp_apply
              expression (lib/types.ml[440,14517+2]..[440,14517+4])
                Pexp_ident "&&" (lib/types.ml[440,14517+2]..[440,14517+4])
              [
                <arg>
                Nolabel
                  expression (lib/types.ml[439,14485+2]..[439,14485+31])
                    Pexp_apply
                    expression (lib/types.ml[439,14485+16]..[439,14485+17])
                      Pexp_ident "=" (lib/types.ml[439,14485+16]..[439,14485+17])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[439,14485+2]..[439,14485+15])
                          Pexp_field
                          expression (lib/types.ml[439,14485+2]..[439,14485+4])
                            Pexp_ident "c1" (lib/types.ml[439,14485+2]..[439,14485+4])
                          "cstr_arity" (lib/types.ml[439,14485+5]..[439,14485+15])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[439,14485+18]..[439,14485+31])
                          Pexp_field
                          expression (lib/types.ml[439,14485+18]..[439,14485+20])
                            Pexp_ident "c2" (lib/types.ml[439,14485+18]..[439,14485+20])
                          "cstr_arity" (lib/types.ml[439,14485+21]..[439,14485+31])
                    ]
                <arg>
                Nolabel
                  expression (lib/types.ml[440,14517+5]..[445,14707+29])
                    Pexp_match
                    expression (lib/types.ml[440,14517+12]..[440,14517+35])
                      Pexp_tuple
                      [
                        expression (lib/types.ml[440,14517+12]..[440,14517+23])
                          Pexp_field
                          expression (lib/types.ml[440,14517+12]..[440,14517+14])
                            Pexp_ident "c1" (lib/types.ml[440,14517+12]..[440,14517+14])
                          "cstr_tag" (lib/types.ml[440,14517+15]..[440,14517+23])
                        expression (lib/types.ml[440,14517+24]..[440,14517+35])
                          Pexp_field
                          expression (lib/types.ml[440,14517+24]..[440,14517+26])
                            Pexp_ident "c2" (lib/types.ml[440,14517+24]..[440,14517+26])
                          "cstr_tag" (lib/types.ml[440,14517+27]..[440,14517+35])
                      ]
                    [
                      <case>
                        pattern (lib/types.ml[441,14558+7]..[441,14558+40])
                          Ppat_tuple
                          [
                            pattern (lib/types.ml[441,14558+7]..[441,14558+23])
                              Ppat_construct "Cstr_extension" (lib/types.ml[441,14558+7]..[441,14558+21])
                              Some
                                []
                                pattern (lib/types.ml[441,14558+22]..[441,14558+23])
                                  Ppat_any
                            pattern (lib/types.ml[441,14558+24]..[441,14558+40])
                              Ppat_construct "Cstr_extension" (lib/types.ml[441,14558+24]..[441,14558+38])
                              Some
                                []
                                pattern (lib/types.ml[441,14558+39]..[441,14558+40])
                                  Ppat_any
                          ]
                        expression (lib/types.ml[443,14672+9]..[443,14672+13])
                          Pexp_construct "true" (lib/types.ml[443,14672+9]..[443,14672+13])
                          None
                      <case>
                        pattern (lib/types.ml[444,14686+7]..[444,14686+17])
                          Ppat_tuple
                          [
                            pattern (lib/types.ml[444,14686+7]..[444,14686+11])
                              Ppat_var "tag1" (lib/types.ml[444,14686+7]..[444,14686+11])
                            pattern (lib/types.ml[444,14686+13]..[444,14686+17])
                              Ppat_var "tag2" (lib/types.ml[444,14686+13]..[444,14686+17])
                          ]
                        expression (lib/types.ml[445,14707+9]..[445,14707+28])
                          Pexp_apply
                          expression (lib/types.ml[445,14707+9]..[445,14707+18])
                            Pexp_ident "equal_tag" (lib/types.ml[445,14707+9]..[445,14707+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[445,14707+19]..[445,14707+23])
                                Pexp_ident "tag1" (lib/types.ml[445,14707+19]..[445,14707+23])
                            <arg>
                            Nolabel
                              expression (lib/types.ml[445,14707+24]..[445,14707+28])
                                Pexp_ident "tag2" (lib/types.ml[445,14707+24]..[445,14707+28])
                          ]
                    ]
              ]
    ]
  structure_item (lib/types.ml[447,14738+0]..[454,14943+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[447,14738+4]..[447,14738+19])
          Ppat_var "item_visibility" (lib/types.ml[447,14738+4]..[447,14738+19])
        expression (lib/types.ml[447,14738+22]..[454,14943+40])
          Pexp_function
          []
          None
          Pfunction_cases (lib/types.ml[447,14738+22]..[454,14943+40])
            [
              <case>
                pattern (lib/types.ml[448,14769+4]..[454,14943+33])
                  Ppat_or
                  pattern (lib/types.ml[448,14769+4]..[453,14914+28])
                    Ppat_or
                    pattern (lib/types.ml[448,14769+4]..[452,14886+27])
                      Ppat_or
                      pattern (lib/types.ml[448,14769+4]..[451,14853+32])
                        Ppat_or
                        pattern (lib/types.ml[448,14769+4]..[450,14823+29])
                          Ppat_or
                          pattern (lib/types.ml[448,14769+4]..[449,14795+27])
                            Ppat_or
                            pattern (lib/types.ml[448,14769+4]..[448,14769+25])
                              Ppat_construct "Sig_value" (lib/types.ml[448,14769+4]..[448,14769+13])
                              Some
                                []
                                pattern (lib/types.ml[448,14769+14]..[448,14769+25])
                                  Ppat_tuple
                                  [
                                    pattern (lib/types.ml[448,14769+15]..[448,14769+16])
                                      Ppat_any
                                    pattern (lib/types.ml[448,14769+18]..[448,14769+19])
                                      Ppat_any
                                    pattern (lib/types.ml[448,14769+21]..[448,14769+24])
                                      Ppat_var "vis" (lib/types.ml[448,14769+21]..[448,14769+24])
                                  ]
                            pattern (lib/types.ml[449,14795+4]..[449,14795+27])
                              Ppat_construct "Sig_type" (lib/types.ml[449,14795+4]..[449,14795+12])
                              Some
                                []
                                pattern (lib/types.ml[449,14795+13]..[449,14795+27])
                                  Ppat_tuple
                                  [
                                    pattern (lib/types.ml[449,14795+14]..[449,14795+15])
                                      Ppat_any
                                    pattern (lib/types.ml[449,14795+17]..[449,14795+18])
                                      Ppat_any
                                    pattern (lib/types.ml[449,14795+20]..[449,14795+21])
                                      Ppat_any
                                    pattern (lib/types.ml[449,14795+23]..[449,14795+26])
                                      Ppat_var "vis" (lib/types.ml[449,14795+23]..[449,14795+26])
                                  ]
                          pattern (lib/types.ml[450,14823+4]..[450,14823+29])
                            Ppat_construct "Sig_typext" (lib/types.ml[450,14823+4]..[450,14823+14])
                            Some
                              []
                              pattern (lib/types.ml[450,14823+15]..[450,14823+29])
                                Ppat_tuple
                                [
                                  pattern (lib/types.ml[450,14823+16]..[450,14823+17])
                                    Ppat_any
                                  pattern (lib/types.ml[450,14823+19]..[450,14823+20])
                                    Ppat_any
                                  pattern (lib/types.ml[450,14823+22]..[450,14823+23])
                                    Ppat_any
                                  pattern (lib/types.ml[450,14823+25]..[450,14823+28])
                                    Ppat_var "vis" (lib/types.ml[450,14823+25]..[450,14823+28])
                                ]
                        pattern (lib/types.ml[451,14853+4]..[451,14853+32])
                          Ppat_construct "Sig_module" (lib/types.ml[451,14853+4]..[451,14853+14])
                          Some
                            []
                            pattern (lib/types.ml[451,14853+15]..[451,14853+32])
                              Ppat_tuple
                              [
                                pattern (lib/types.ml[451,14853+16]..[451,14853+17])
                                  Ppat_any
                                pattern (lib/types.ml[451,14853+19]..[451,14853+20])
                                  Ppat_any
                                pattern (lib/types.ml[451,14853+22]..[451,14853+23])
                                  Ppat_any
                                pattern (lib/types.ml[451,14853+25]..[451,14853+26])
                                  Ppat_any
                                pattern (lib/types.ml[451,14853+28]..[451,14853+31])
                                  Ppat_var "vis" (lib/types.ml[451,14853+28]..[451,14853+31])
                              ]
                      pattern (lib/types.ml[452,14886+4]..[452,14886+27])
                        Ppat_construct "Sig_modtype" (lib/types.ml[452,14886+4]..[452,14886+15])
                        Some
                          []
                          pattern (lib/types.ml[452,14886+16]..[452,14886+27])
                            Ppat_tuple
                            [
                              pattern (lib/types.ml[452,14886+17]..[452,14886+18])
                                Ppat_any
                              pattern (lib/types.ml[452,14886+20]..[452,14886+21])
                                Ppat_any
                              pattern (lib/types.ml[452,14886+23]..[452,14886+26])
                                Ppat_var "vis" (lib/types.ml[452,14886+23]..[452,14886+26])
                            ]
                    pattern (lib/types.ml[453,14914+4]..[453,14914+28])
                      Ppat_construct "Sig_class" (lib/types.ml[453,14914+4]..[453,14914+13])
                      Some
                        []
                        pattern (lib/types.ml[453,14914+14]..[453,14914+28])
                          Ppat_tuple
                          [
                            pattern (lib/types.ml[453,14914+15]..[453,14914+16])
                              Ppat_any
                            pattern (lib/types.ml[453,14914+18]..[453,14914+19])
                              Ppat_any
                            pattern (lib/types.ml[453,14914+21]..[453,14914+22])
                              Ppat_any
                            pattern (lib/types.ml[453,14914+24]..[453,14914+27])
                              Ppat_var "vis" (lib/types.ml[453,14914+24]..[453,14914+27])
                          ]
                  pattern (lib/types.ml[454,14943+4]..[454,14943+33])
                    Ppat_construct "Sig_class_type" (lib/types.ml[454,14943+4]..[454,14943+18])
                    Some
                      []
                      pattern (lib/types.ml[454,14943+19]..[454,14943+33])
                        Ppat_tuple
                        [
                          pattern (lib/types.ml[454,14943+20]..[454,14943+21])
                            Ppat_any
                          pattern (lib/types.ml[454,14943+23]..[454,14943+24])
                            Ppat_any
                          pattern (lib/types.ml[454,14943+26]..[454,14943+27])
                            Ppat_any
                          pattern (lib/types.ml[454,14943+29]..[454,14943+32])
                            Ppat_var "vis" (lib/types.ml[454,14943+29]..[454,14943+32])
                        ]
                expression (lib/types.ml[454,14943+37]..[454,14943+40])
                  Pexp_ident "vis" (lib/types.ml[454,14943+37]..[454,14943+40])
            ]
    ]
  structure_item (lib/types.ml[456,14985+0]..[468,15635+4])
    Pstr_type Rec
    [
      type_declaration "label_description" (lib/types.ml[456,14985+5]..[456,14985+22]) (lib/types.ml[456,14985+0]..[468,15635+4])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/types.ml[457,15010+4]..[457,15010+21])
                Immutable
                "lbl_name" (lib/types.ml[457,15010+4]..[457,15010+12])                core_type (lib/types.ml[457,15010+14]..[457,15010+20])
                  Ptyp_constr "string" (lib/types.ml[457,15010+14]..[457,15010+20])
                  []
              (lib/types.ml[458,15067+4]..[458,15067+23])
                Immutable
                "lbl_res" (lib/types.ml[458,15067+4]..[458,15067+11])                core_type (lib/types.ml[458,15067+13]..[458,15067+22])
                  Ptyp_constr "type_expr" (lib/types.ml[458,15067+13]..[458,15067+22])
                  []
              (lib/types.ml[459,15132+4]..[459,15132+23])
                Immutable
                "lbl_arg" (lib/types.ml[459,15132+4]..[459,15132+11])                core_type (lib/types.ml[459,15132+13]..[459,15132+22])
                  Ptyp_constr "type_expr" (lib/types.ml[459,15132+13]..[459,15132+22])
                  []
              (lib/types.ml[460,15199+4]..[460,15199+26])
                Immutable
                "lbl_mut" (lib/types.ml[460,15199+4]..[460,15199+11])                core_type (lib/types.ml[460,15199+13]..[460,15199+25])
                  Ptyp_constr "mutable_flag" (lib/types.ml[460,15199+13]..[460,15199+25])
                  []
              (lib/types.ml[461,15270+4]..[461,15270+17])
                Immutable
                "lbl_pos" (lib/types.ml[461,15270+4]..[461,15270+11])                core_type (lib/types.ml[461,15270+13]..[461,15270+16])
                  Ptyp_constr "int" (lib/types.ml[461,15270+13]..[461,15270+16])
                  []
              (lib/types.ml[462,15334+4]..[462,15334+37])
                Immutable
                "lbl_all" (lib/types.ml[462,15334+4]..[462,15334+11])                core_type (lib/types.ml[462,15334+13]..[462,15334+36])
                  Ptyp_constr "array" (lib/types.ml[462,15334+31]..[462,15334+36])
                  [
                    core_type (lib/types.ml[462,15334+13]..[462,15334+30])
                      Ptyp_constr "label_description" (lib/types.ml[462,15334+13]..[462,15334+30])
                      []
                  ]
              (lib/types.ml[463,15408+4]..[463,15408+38])
                Immutable
                "lbl_repres" (lib/types.ml[463,15408+4]..[463,15408+14])                core_type (lib/types.ml[463,15408+16]..[463,15408+37])
                  Ptyp_constr "record_representation" (lib/types.ml[463,15408+16]..[463,15408+37])
                  []
              (lib/types.ml[464,15485+4]..[464,15485+30])
                Immutable
                "lbl_private" (lib/types.ml[464,15485+4]..[464,15485+15])                core_type (lib/types.ml[464,15485+17]..[464,15485+29])
                  Ptyp_constr "private_flag" (lib/types.ml[464,15485+17]..[464,15485+29])
                  []
              (lib/types.ml[465,15548+4]..[465,15548+24])
                Immutable
                "lbl_loc" (lib/types.ml[465,15548+4]..[465,15548+11])                core_type (lib/types.ml[465,15548+13]..[465,15548+23])
                  Ptyp_constr "Location.t" (lib/types.ml[465,15548+13]..[465,15548+23])
                  []
              (lib/types.ml[466,15573+4]..[466,15573+41])
                Immutable
                "lbl_attributes" (lib/types.ml[466,15573+4]..[466,15573+18])                core_type (lib/types.ml[466,15573+20]..[466,15573+40])
                  Ptyp_constr "Parsetree.attributes" (lib/types.ml[466,15573+20]..[466,15573+40])
                  []
              (lib/types.ml[467,15615+4]..[467,15615+19])
                Immutable
                "lbl_uid" (lib/types.ml[467,15615+4]..[467,15615+11])                core_type (lib/types.ml[467,15615+13]..[467,15615+18])
                  Ptyp_constr "Uid.t" (lib/types.ml[467,15615+13]..[467,15615+18])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[470,15641+0]..[478,16023+43])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[470,15641+8]..[470,15641+31])
          Ppat_var "bound_value_identifiers" (lib/types.ml[470,15641+8]..[470,15641+31])
        expression (lib/types.ml[470,15641+34]..[478,16023+43])
          Pexp_function
          []
          None
          Pfunction_cases (lib/types.ml[470,15641+34]..[478,16023+43])
            [
              <case>
                pattern (lib/types.ml[471,15684+4]..[471,15684+6])
                  Ppat_construct "[]" (lib/types.ml[471,15684+4]..[471,15684+6])
                  None
                expression (lib/types.ml[471,15684+10]..[471,15684+12])
                  Pexp_construct "[]" (lib/types.ml[471,15684+10]..[471,15684+12])
                  None
              <case>
                pattern (lib/types.ml[472,15697+4]..[472,15697+49])
                  Ppat_construct "::" (lib/types.ml[472,15697+43]..[472,15697+45])
                  Some
                    []
                    pattern (lib/types.ml[472,15697+4]..[472,15697+49]) ghost
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[472,15697+4]..[472,15697+42])
                          Ppat_construct "Sig_value" (lib/types.ml[472,15697+4]..[472,15697+13])
                          Some
                            []
                            pattern (lib/types.ml[472,15697+13]..[472,15697+42])
                              Ppat_tuple
                              [
                                pattern (lib/types.ml[472,15697+14]..[472,15697+16])
                                  Ppat_var "id" (lib/types.ml[472,15697+14]..[472,15697+16])
                                pattern (lib/types.ml[472,15697+18]..[472,15697+38])
                                  Ppat_record Closed
                                  [
                                    "val_kind" (lib/types.ml[472,15697+19]..[472,15697+27])
                                      pattern (lib/types.ml[472,15697+30]..[472,15697+37])
                                        Ppat_construct "Val_reg" (lib/types.ml[472,15697+30]..[472,15697+37])
                                        None
                                  ]
                                pattern (lib/types.ml[472,15697+40]..[472,15697+41])
                                  Ppat_any
                              ]
                        pattern (lib/types.ml[472,15697+46]..[472,15697+49])
                          Ppat_var "rem" (lib/types.ml[472,15697+46]..[472,15697+49])
                      ]
                expression (lib/types.ml[473,15750+6]..[473,15750+39])
                  Pexp_construct "::" (lib/types.ml[473,15750+9]..[473,15750+11])
                  Some
                    expression (lib/types.ml[473,15750+6]..[473,15750+39]) ghost
                      Pexp_tuple
                      [
                        expression (lib/types.ml[473,15750+6]..[473,15750+8])
                          Pexp_ident "id" (lib/types.ml[473,15750+6]..[473,15750+8])
                        expression (lib/types.ml[473,15750+12]..[473,15750+39])
                          Pexp_apply
                          expression (lib/types.ml[473,15750+12]..[473,15750+35])
                            Pexp_ident "bound_value_identifiers" (lib/types.ml[473,15750+12]..[473,15750+35])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[473,15750+36]..[473,15750+39])
                                Pexp_ident "rem" (lib/types.ml[473,15750+36]..[473,15750+39])
                          ]
                      ]
              <case>
                pattern (lib/types.ml[474,15790+4]..[474,15790+34])
                  Ppat_construct "::" (lib/types.ml[474,15790+28]..[474,15790+30])
                  Some
                    []
                    pattern (lib/types.ml[474,15790+4]..[474,15790+34]) ghost
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[474,15790+4]..[474,15790+27])
                          Ppat_construct "Sig_typext" (lib/types.ml[474,15790+4]..[474,15790+14])
                          Some
                            []
                            pattern (lib/types.ml[474,15790+14]..[474,15790+27])
                              Ppat_tuple
                              [
                                pattern (lib/types.ml[474,15790+15]..[474,15790+17])
                                  Ppat_var "id" (lib/types.ml[474,15790+15]..[474,15790+17])
                                pattern (lib/types.ml[474,15790+19]..[474,15790+20])
                                  Ppat_any
                                pattern (lib/types.ml[474,15790+22]..[474,15790+23])
                                  Ppat_any
                                pattern (lib/types.ml[474,15790+25]..[474,15790+26])
                                  Ppat_any
                              ]
                        pattern (lib/types.ml[474,15790+31]..[474,15790+34])
                          Ppat_var "rem" (lib/types.ml[474,15790+31]..[474,15790+34])
                      ]
                expression (lib/types.ml[474,15790+38]..[474,15790+71])
                  Pexp_construct "::" (lib/types.ml[474,15790+41]..[474,15790+43])
                  Some
                    expression (lib/types.ml[474,15790+38]..[474,15790+71]) ghost
                      Pexp_tuple
                      [
                        expression (lib/types.ml[474,15790+38]..[474,15790+40])
                          Pexp_ident "id" (lib/types.ml[474,15790+38]..[474,15790+40])
                        expression (lib/types.ml[474,15790+44]..[474,15790+71])
                          Pexp_apply
                          expression (lib/types.ml[474,15790+44]..[474,15790+67])
                            Pexp_ident "bound_value_identifiers" (lib/types.ml[474,15790+44]..[474,15790+67])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[474,15790+68]..[474,15790+71])
                                Pexp_ident "rem" (lib/types.ml[474,15790+68]..[474,15790+71])
                          ]
                      ]
              <case>
                pattern (lib/types.ml[475,15862+4]..[475,15862+46])
                  Ppat_construct "::" (lib/types.ml[475,15862+40]..[475,15862+42])
                  Some
                    []
                    pattern (lib/types.ml[475,15862+4]..[475,15862+46]) ghost
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[475,15862+4]..[475,15862+39])
                          Ppat_construct "Sig_module" (lib/types.ml[475,15862+4]..[475,15862+14])
                          Some
                            []
                            pattern (lib/types.ml[475,15862+14]..[475,15862+39])
                              Ppat_tuple
                              [
                                pattern (lib/types.ml[475,15862+15]..[475,15862+17])
                                  Ppat_var "id" (lib/types.ml[475,15862+15]..[475,15862+17])
                                pattern (lib/types.ml[475,15862+19]..[475,15862+29])
                                  Ppat_construct "Mp_present" (lib/types.ml[475,15862+19]..[475,15862+29])
                                  None
                                pattern (lib/types.ml[475,15862+31]..[475,15862+32])
                                  Ppat_any
                                pattern (lib/types.ml[475,15862+34]..[475,15862+35])
                                  Ppat_any
                                pattern (lib/types.ml[475,15862+37]..[475,15862+38])
                                  Ppat_any
                              ]
                        pattern (lib/types.ml[475,15862+43]..[475,15862+46])
                          Ppat_var "rem" (lib/types.ml[475,15862+43]..[475,15862+46])
                      ]
                expression (lib/types.ml[476,15912+6]..[476,15912+39])
                  Pexp_construct "::" (lib/types.ml[476,15912+9]..[476,15912+11])
                  Some
                    expression (lib/types.ml[476,15912+6]..[476,15912+39]) ghost
                      Pexp_tuple
                      [
                        expression (lib/types.ml[476,15912+6]..[476,15912+8])
                          Pexp_ident "id" (lib/types.ml[476,15912+6]..[476,15912+8])
                        expression (lib/types.ml[476,15912+12]..[476,15912+39])
                          Pexp_apply
                          expression (lib/types.ml[476,15912+12]..[476,15912+35])
                            Pexp_ident "bound_value_identifiers" (lib/types.ml[476,15912+12]..[476,15912+35])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[476,15912+36]..[476,15912+39])
                                Pexp_ident "rem" (lib/types.ml[476,15912+36]..[476,15912+39])
                          ]
                      ]
              <case>
                pattern (lib/types.ml[477,15952+4]..[477,15952+33])
                  Ppat_construct "::" (lib/types.ml[477,15952+27]..[477,15952+29])
                  Some
                    []
                    pattern (lib/types.ml[477,15952+4]..[477,15952+33]) ghost
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[477,15952+4]..[477,15952+26])
                          Ppat_construct "Sig_class" (lib/types.ml[477,15952+4]..[477,15952+13])
                          Some
                            []
                            pattern (lib/types.ml[477,15952+13]..[477,15952+26])
                              Ppat_tuple
                              [
                                pattern (lib/types.ml[477,15952+14]..[477,15952+16])
                                  Ppat_var "id" (lib/types.ml[477,15952+14]..[477,15952+16])
                                pattern (lib/types.ml[477,15952+18]..[477,15952+19])
                                  Ppat_any
                                pattern (lib/types.ml[477,15952+21]..[477,15952+22])
                                  Ppat_any
                                pattern (lib/types.ml[477,15952+24]..[477,15952+25])
                                  Ppat_any
                              ]
                        pattern (lib/types.ml[477,15952+30]..[477,15952+33])
                          Ppat_var "rem" (lib/types.ml[477,15952+30]..[477,15952+33])
                      ]
                expression (lib/types.ml[477,15952+37]..[477,15952+70])
                  Pexp_construct "::" (lib/types.ml[477,15952+40]..[477,15952+42])
                  Some
                    expression (lib/types.ml[477,15952+37]..[477,15952+70]) ghost
                      Pexp_tuple
                      [
                        expression (lib/types.ml[477,15952+37]..[477,15952+39])
                          Pexp_ident "id" (lib/types.ml[477,15952+37]..[477,15952+39])
                        expression (lib/types.ml[477,15952+43]..[477,15952+70])
                          Pexp_apply
                          expression (lib/types.ml[477,15952+43]..[477,15952+66])
                            Pexp_ident "bound_value_identifiers" (lib/types.ml[477,15952+43]..[477,15952+66])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[477,15952+67]..[477,15952+70])
                                Pexp_ident "rem" (lib/types.ml[477,15952+67]..[477,15952+70])
                          ]
                      ]
              <case>
                pattern (lib/types.ml[478,16023+4]..[478,16023+12])
                  Ppat_construct "::" (lib/types.ml[478,16023+6]..[478,16023+8])
                  Some
                    []
                    pattern (lib/types.ml[478,16023+4]..[478,16023+12]) ghost
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[478,16023+4]..[478,16023+5])
                          Ppat_any
                        pattern (lib/types.ml[478,16023+9]..[478,16023+12])
                          Ppat_var "rem" (lib/types.ml[478,16023+9]..[478,16023+12])
                      ]
                expression (lib/types.ml[478,16023+16]..[478,16023+43])
                  Pexp_apply
                  expression (lib/types.ml[478,16023+16]..[478,16023+39])
                    Pexp_ident "bound_value_identifiers" (lib/types.ml[478,16023+16]..[478,16023+39])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[478,16023+40]..[478,16023+43])
                        Pexp_ident "rem" (lib/types.ml[478,16023+40]..[478,16023+43])
                  ]
            ]
    ]
  structure_item (lib/types.ml[480,16068+0]..[488,16302+9])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[480,16068+4]..[480,16068+21])
          Ppat_var "signature_item_id" (lib/types.ml[480,16068+4]..[480,16068+21])
        expression (lib/types.ml[480,16068+24]..[488,16302+9])
          Pexp_function
          []
          None
          Pfunction_cases (lib/types.ml[480,16068+24]..[488,16302+9])
            [
              <case>
                pattern (lib/types.ml[481,16101+4]..[487,16269+32])
                  Ppat_or
                  pattern (lib/types.ml[481,16101+4]..[486,16241+27])
                    Ppat_or
                    pattern (lib/types.ml[481,16101+4]..[485,16214+26])
                      Ppat_or
                      pattern (lib/types.ml[481,16101+4]..[484,16182+31])
                        Ppat_or
                        pattern (lib/types.ml[481,16101+4]..[483,16153+28])
                          Ppat_or
                          pattern (lib/types.ml[481,16101+4]..[482,16126+26])
                            Ppat_or
                            pattern (lib/types.ml[481,16101+4]..[481,16101+24])
                              Ppat_construct "Sig_value" (lib/types.ml[481,16101+4]..[481,16101+13])
                              Some
                                []
                                pattern (lib/types.ml[481,16101+14]..[481,16101+24])
                                  Ppat_tuple
                                  [
                                    pattern (lib/types.ml[481,16101+15]..[481,16101+17])
                                      Ppat_var "id" (lib/types.ml[481,16101+15]..[481,16101+17])
                                    pattern (lib/types.ml[481,16101+19]..[481,16101+20])
                                      Ppat_any
                                    pattern (lib/types.ml[481,16101+22]..[481,16101+23])
                                      Ppat_any
                                  ]
                            pattern (lib/types.ml[482,16126+4]..[482,16126+26])
                              Ppat_construct "Sig_type" (lib/types.ml[482,16126+4]..[482,16126+12])
                              Some
                                []
                                pattern (lib/types.ml[482,16126+13]..[482,16126+26])
                                  Ppat_tuple
                                  [
                                    pattern (lib/types.ml[482,16126+14]..[482,16126+16])
                                      Ppat_var "id" (lib/types.ml[482,16126+14]..[482,16126+16])
                                    pattern (lib/types.ml[482,16126+18]..[482,16126+19])
                                      Ppat_any
                                    pattern (lib/types.ml[482,16126+21]..[482,16126+22])
                                      Ppat_any
                                    pattern (lib/types.ml[482,16126+24]..[482,16126+25])
                                      Ppat_any
                                  ]
                          pattern (lib/types.ml[483,16153+4]..[483,16153+28])
                            Ppat_construct "Sig_typext" (lib/types.ml[483,16153+4]..[483,16153+14])
                            Some
                              []
                              pattern (lib/types.ml[483,16153+15]..[483,16153+28])
                                Ppat_tuple
                                [
                                  pattern (lib/types.ml[483,16153+16]..[483,16153+18])
                                    Ppat_var "id" (lib/types.ml[483,16153+16]..[483,16153+18])
                                  pattern (lib/types.ml[483,16153+20]..[483,16153+21])
                                    Ppat_any
                                  pattern (lib/types.ml[483,16153+23]..[483,16153+24])
                                    Ppat_any
                                  pattern (lib/types.ml[483,16153+26]..[483,16153+27])
                                    Ppat_any
                                ]
                        pattern (lib/types.ml[484,16182+4]..[484,16182+31])
                          Ppat_construct "Sig_module" (lib/types.ml[484,16182+4]..[484,16182+14])
                          Some
                            []
                            pattern (lib/types.ml[484,16182+15]..[484,16182+31])
                              Ppat_tuple
                              [
                                pattern (lib/types.ml[484,16182+16]..[484,16182+18])
                                  Ppat_var "id" (lib/types.ml[484,16182+16]..[484,16182+18])
                                pattern (lib/types.ml[484,16182+20]..[484,16182+21])
                                  Ppat_any
                                pattern (lib/types.ml[484,16182+23]..[484,16182+24])
                                  Ppat_any
                                pattern (lib/types.ml[484,16182+26]..[484,16182+27])
                                  Ppat_any
                                pattern (lib/types.ml[484,16182+29]..[484,16182+30])
                                  Ppat_any
                              ]
                      pattern (lib/types.ml[485,16214+4]..[485,16214+26])
                        Ppat_construct "Sig_modtype" (lib/types.ml[485,16214+4]..[485,16214+15])
                        Some
                          []
                          pattern (lib/types.ml[485,16214+16]..[485,16214+26])
                            Ppat_tuple
                            [
                              pattern (lib/types.ml[485,16214+17]..[485,16214+19])
                                Ppat_var "id" (lib/types.ml[485,16214+17]..[485,16214+19])
                              pattern (lib/types.ml[485,16214+21]..[485,16214+22])
                                Ppat_any
                              pattern (lib/types.ml[485,16214+24]..[485,16214+25])
                                Ppat_any
                            ]
                    pattern (lib/types.ml[486,16241+4]..[486,16241+27])
                      Ppat_construct "Sig_class" (lib/types.ml[486,16241+4]..[486,16241+13])
                      Some
                        []
                        pattern (lib/types.ml[486,16241+14]..[486,16241+27])
                          Ppat_tuple
                          [
                            pattern (lib/types.ml[486,16241+15]..[486,16241+17])
                              Ppat_var "id" (lib/types.ml[486,16241+15]..[486,16241+17])
                            pattern (lib/types.ml[486,16241+19]..[486,16241+20])
                              Ppat_any
                            pattern (lib/types.ml[486,16241+22]..[486,16241+23])
                              Ppat_any
                            pattern (lib/types.ml[486,16241+25]..[486,16241+26])
                              Ppat_any
                          ]
                  pattern (lib/types.ml[487,16269+4]..[487,16269+32])
                    Ppat_construct "Sig_class_type" (lib/types.ml[487,16269+4]..[487,16269+18])
                    Some
                      []
                      pattern (lib/types.ml[487,16269+19]..[487,16269+32])
                        Ppat_tuple
                        [
                          pattern (lib/types.ml[487,16269+20]..[487,16269+22])
                            Ppat_var "id" (lib/types.ml[487,16269+20]..[487,16269+22])
                          pattern (lib/types.ml[487,16269+24]..[487,16269+25])
                            Ppat_any
                          pattern (lib/types.ml[487,16269+27]..[487,16269+28])
                            Ppat_any
                          pattern (lib/types.ml[487,16269+30]..[487,16269+31])
                            Ppat_any
                        ]
                expression (lib/types.ml[488,16302+7]..[488,16302+9])
                  Pexp_ident "id" (lib/types.ml[488,16302+7]..[488,16302+9])
            ]
    ]
  structure_item (lib/types.ml[492,16355+0]..[502,16721+52])
    Pstr_type Rec
    [
      type_declaration "change" (lib/types.ml[492,16355+5]..[492,16355+11]) (lib/types.ml[492,16355+0]..[502,16721+52])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[493,16369+4]..[493,16369+34])
                "Ctype" (lib/types.ml[493,16369+4]..[493,16369+9])
                [
                  core_type (lib/types.ml[493,16369+13]..[493,16369+22])
                    Ptyp_constr "type_expr" (lib/types.ml[493,16369+13]..[493,16369+22])
                    []
                  core_type (lib/types.ml[493,16369+25]..[493,16369+34])
                    Ptyp_constr "type_desc" (lib/types.ml[493,16369+25]..[493,16369+34])
                    []
                ]
                None
              (lib/types.ml[494,16404+2]..[494,16404+50])
                "Ccompress" (lib/types.ml[494,16404+4]..[494,16404+13])
                [
                  core_type (lib/types.ml[494,16404+17]..[494,16404+26])
                    Ptyp_constr "type_expr" (lib/types.ml[494,16404+17]..[494,16404+26])
                    []
                  core_type (lib/types.ml[494,16404+29]..[494,16404+38])
                    Ptyp_constr "type_desc" (lib/types.ml[494,16404+29]..[494,16404+38])
                    []
                  core_type (lib/types.ml[494,16404+41]..[494,16404+50])
                    Ptyp_constr "type_desc" (lib/types.ml[494,16404+41]..[494,16404+50])
                    []
                ]
                None
              (lib/types.ml[495,16455+2]..[495,16455+29])
                "Clevel" (lib/types.ml[495,16455+4]..[495,16455+10])
                [
                  core_type (lib/types.ml[495,16455+14]..[495,16455+23])
                    Ptyp_constr "type_expr" (lib/types.ml[495,16455+14]..[495,16455+23])
                    []
                  core_type (lib/types.ml[495,16455+26]..[495,16455+29])
                    Ptyp_constr "int" (lib/types.ml[495,16455+26]..[495,16455+29])
                    []
                ]
                None
              (lib/types.ml[496,16485+2]..[496,16485+29])
                "Cscope" (lib/types.ml[496,16485+4]..[496,16485+10])
                [
                  core_type (lib/types.ml[496,16485+14]..[496,16485+23])
                    Ptyp_constr "type_expr" (lib/types.ml[496,16485+14]..[496,16485+23])
                    []
                  core_type (lib/types.ml[496,16485+26]..[496,16485+29])
                    Ptyp_constr "int" (lib/types.ml[496,16485+26]..[496,16485+29])
                    []
                ]
                None
              (lib/types.ml[497,16515+2]..[498,16528+77])
                "Cname" (lib/types.ml[497,16515+4]..[497,16515+9])
                [
                  core_type (lib/types.ml[498,16528+6]..[498,16528+42])
                    Ptyp_constr "ref" (lib/types.ml[498,16528+39]..[498,16528+42])
                    [
                      core_type (lib/types.ml[498,16528+6]..[498,16528+38])
                        Ptyp_constr "option" (lib/types.ml[498,16528+32]..[498,16528+38])
                        [
                          core_type (lib/types.ml[498,16528+7]..[498,16528+30])
                            Ptyp_tuple
                            [
                              core_type (lib/types.ml[498,16528+7]..[498,16528+13])
                                Ptyp_constr "Path.t" (lib/types.ml[498,16528+7]..[498,16528+13])
                                []
                              core_type (lib/types.ml[498,16528+16]..[498,16528+30])
                                Ptyp_constr "list" (lib/types.ml[498,16528+26]..[498,16528+30])
                                [
                                  core_type (lib/types.ml[498,16528+16]..[498,16528+25])
                                    Ptyp_constr "type_expr" (lib/types.ml[498,16528+16]..[498,16528+25])
                                    []
                                ]
                            ]
                        ]
                    ]
                  core_type (lib/types.ml[498,16528+45]..[498,16528+77])
                    Ptyp_constr "option" (lib/types.ml[498,16528+71]..[498,16528+77])
                    [
                      core_type (lib/types.ml[498,16528+46]..[498,16528+69])
                        Ptyp_tuple
                        [
                          core_type (lib/types.ml[498,16528+46]..[498,16528+52])
                            Ptyp_constr "Path.t" (lib/types.ml[498,16528+46]..[498,16528+52])
                            []
                          core_type (lib/types.ml[498,16528+55]..[498,16528+69])
                            Ptyp_constr "list" (lib/types.ml[498,16528+65]..[498,16528+69])
                            [
                              core_type (lib/types.ml[498,16528+55]..[498,16528+64])
                                Ptyp_constr "type_expr" (lib/types.ml[498,16528+55]..[498,16528+64])
                                []
                            ]
                        ]
                    ]
                ]
                None
              (lib/types.ml[499,16606+2]..[499,16606+43])
                "Crow" (lib/types.ml[499,16606+4]..[499,16606+8])
                [
                  core_type (lib/types.ml[499,16606+12]..[499,16606+43])
                    Ptyp_constr "ref" (lib/types.ml[499,16606+40]..[499,16606+43])
                    [
                      core_type (lib/types.ml[499,16606+12]..[499,16606+39])
                        Ptyp_constr "row_field_gen" (lib/types.ml[499,16606+26]..[499,16606+39])
                        [
                          core_type (lib/types.ml[499,16606+12]..[499,16606+25])
                            Ptyp_variant closed=Closed
                            [
                              Rtag "none" true
                                []
                              Rtag "some" true
                                []
                            ]
                            None
                        ]
                    ]
                ]
                None
              (lib/types.ml[500,16650+2]..[500,16650+34])
                "Ckind" (lib/types.ml[500,16650+4]..[500,16650+9])
                [
                  core_type (lib/types.ml[500,16650+13]..[500,16650+34])
                    Ptyp_constr "field_kind_gen" (lib/types.ml[500,16650+20]..[500,16650+34])
                    [
                      core_type (lib/types.ml[500,16650+13]..[500,16650+19])
                        Ptyp_variant closed=Closed
                        [
                          Rtag "var" true
                            []
                        ]
                        None
                    ]
                ]
                None
              (lib/types.ml[501,16685+2]..[501,16685+35])
                "Ccommu" (lib/types.ml[501,16685+4]..[501,16685+10])
                [
                  core_type (lib/types.ml[501,16685+14]..[501,16685+35])
                    Ptyp_constr "commutable_gen" (lib/types.ml[501,16685+21]..[501,16685+35])
                    [
                      core_type (lib/types.ml[501,16685+14]..[501,16685+20])
                        Ptyp_variant closed=Closed
                        [
                          Rtag "var" true
                            []
                        ]
                        None
                    ]
                ]
                None
              (lib/types.ml[502,16721+2]..[502,16721+52])
                "Cuniv" (lib/types.ml[502,16721+4]..[502,16721+9])
                [
                  core_type (lib/types.ml[502,16721+13]..[502,16721+33])
                    Ptyp_constr "ref" (lib/types.ml[502,16721+30]..[502,16721+33])
                    [
                      core_type (lib/types.ml[502,16721+13]..[502,16721+29])
                        Ptyp_constr "option" (lib/types.ml[502,16721+23]..[502,16721+29])
                        [
                          core_type (lib/types.ml[502,16721+13]..[502,16721+22])
                            Ptyp_constr "type_expr" (lib/types.ml[502,16721+13]..[502,16721+22])
                            []
                        ]
                    ]
                  core_type (lib/types.ml[502,16721+36]..[502,16721+52])
                    Ptyp_constr "option" (lib/types.ml[502,16721+46]..[502,16721+52])
                    [
                      core_type (lib/types.ml[502,16721+36]..[502,16721+45])
                        Ptyp_constr "type_expr" (lib/types.ml[502,16721+36]..[502,16721+45])
                        []
                    ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[504,16775+0]..[507,16839+11])
    Pstr_type Rec
    [
      type_declaration "changes" (lib/types.ml[504,16775+5]..[504,16775+12]) (lib/types.ml[504,16775+0]..[507,16839+11])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[505,16790+4]..[505,16790+34])
                "Change" (lib/types.ml[505,16790+4]..[505,16790+10])
                [
                  core_type (lib/types.ml[505,16790+14]..[505,16790+20])
                    Ptyp_constr "change" (lib/types.ml[505,16790+14]..[505,16790+20])
                    []
                  core_type (lib/types.ml[505,16790+23]..[505,16790+34])
                    Ptyp_constr "ref" (lib/types.ml[505,16790+31]..[505,16790+34])
                    [
                      core_type (lib/types.ml[505,16790+23]..[505,16790+30])
                        Ptyp_constr "changes" (lib/types.ml[505,16790+23]..[505,16790+30])
                        []
                    ]
                ]
                None
              (lib/types.ml[506,16825+2]..[506,16825+13])
                "Unchanged" (lib/types.ml[506,16825+4]..[506,16825+13])
                []
                None
              (lib/types.ml[507,16839+2]..[507,16839+11])
                "Invalid" (lib/types.ml[507,16839+4]..[507,16839+11])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[509,16852+0]..[509,16852+45])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[509,16852+4]..[509,16852+9])
          Ppat_var "trail" (lib/types.ml[509,16852+4]..[509,16852+9])
        expression (lib/types.ml[509,16852+12]..[509,16852+45])
          Pexp_apply
          expression (lib/types.ml[509,16852+12]..[509,16852+31])
            Pexp_ident "Local_store.s_table" (lib/types.ml[509,16852+12]..[509,16852+31])
          [
            <arg>
            Nolabel
              expression (lib/types.ml[509,16852+32]..[509,16852+35])
                Pexp_ident "ref" (lib/types.ml[509,16852+32]..[509,16852+35])
            <arg>
            Nolabel
              expression (lib/types.ml[509,16852+36]..[509,16852+45])
                Pexp_construct "Unchanged" (lib/types.ml[509,16852+36]..[509,16852+45])
                None
          ]
    ]
  structure_item (lib/types.ml[511,16899+0]..[514,16976+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[511,16899+4]..[511,16899+14])
          Ppat_var "log_change" (lib/types.ml[511,16899+4]..[511,16899+14])
        expression (lib/types.ml[511,16899+15]..[514,16976+13]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[511,16899+15]..[511,16899+17])
              Nolabel
              None
              pattern (lib/types.ml[511,16899+15]..[511,16899+17])
                Ppat_var "ch" (lib/types.ml[511,16899+15]..[511,16899+17])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[512,16919+2]..[514,16976+13])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/types.ml[512,16919+6]..[512,16919+8])
                    Ppat_var "r'" (lib/types.ml[512,16919+6]..[512,16919+8])
                  expression (lib/types.ml[512,16919+11]..[512,16919+24])
                    Pexp_apply
                    expression (lib/types.ml[512,16919+11]..[512,16919+14])
                      Pexp_ident "ref" (lib/types.ml[512,16919+11]..[512,16919+14])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[512,16919+15]..[512,16919+24])
                          Pexp_construct "Unchanged" (lib/types.ml[512,16919+15]..[512,16919+24])
                          None
                    ]
              ]
              expression (lib/types.ml[513,16947+2]..[514,16976+13])
                Pexp_sequence
                expression (lib/types.ml[513,16947+2]..[513,16947+27])
                  Pexp_apply
                  expression (lib/types.ml[513,16947+9]..[513,16947+11])
                    Pexp_ident ":=" (lib/types.ml[513,16947+9]..[513,16947+11])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[513,16947+2]..[513,16947+8])
                        Pexp_apply
                        expression (lib/types.ml[513,16947+2]..[513,16947+3])
                          Pexp_ident "!" (lib/types.ml[513,16947+2]..[513,16947+3])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[513,16947+3]..[513,16947+8])
                              Pexp_ident "trail" (lib/types.ml[513,16947+3]..[513,16947+8])
                        ]
                    <arg>
                    Nolabel
                      expression (lib/types.ml[513,16947+12]..[513,16947+27])
                        Pexp_construct "Change" (lib/types.ml[513,16947+12]..[513,16947+18])
                        Some
                          expression (lib/types.ml[513,16947+19]..[513,16947+27])
                            Pexp_tuple
                            [
                              expression (lib/types.ml[513,16947+20]..[513,16947+22])
                                Pexp_ident "ch" (lib/types.ml[513,16947+20]..[513,16947+22])
                              expression (lib/types.ml[513,16947+24]..[513,16947+26])
                                Pexp_ident "r'" (lib/types.ml[513,16947+24]..[513,16947+26])
                            ]
                  ]
                expression (lib/types.ml[514,16976+2]..[514,16976+13])
                  Pexp_apply
                  expression (lib/types.ml[514,16976+8]..[514,16976+10])
                    Pexp_ident ":=" (lib/types.ml[514,16976+8]..[514,16976+10])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[514,16976+2]..[514,16976+7])
                        Pexp_ident "trail" (lib/types.ml[514,16976+2]..[514,16976+7])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[514,16976+11]..[514,16976+13])
                        Pexp_ident "r'" (lib/types.ml[514,16976+11]..[514,16976+13])
                  ]
    ]
  structure_item (lib/types.ml[518,17041+0]..[521,17089+11])
    Pstr_type Rec
    [
      type_declaration "field_kind_view" (lib/types.ml[518,17041+5]..[518,17041+20]) (lib/types.ml[518,17041+0]..[521,17089+11])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[519,17064+4]..[519,17064+12])
                "Fprivate" (lib/types.ml[519,17064+4]..[519,17064+12])
                []
                None
              (lib/types.ml[520,17077+2]..[520,17077+11])
                "Fpublic" (lib/types.ml[520,17077+4]..[520,17077+11])
                []
                None
              (lib/types.ml[521,17089+2]..[521,17089+11])
                "Fabsent" (lib/types.ml[521,17089+4]..[521,17089+11])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[523,17102+0]..[526,17271+16])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[523,17102+8]..[523,17102+32])
          Ppat_var "field_kind_internal_repr" (lib/types.ml[523,17102+8]..[523,17102+32])
        core_type (lib/types.ml[523,17102+35]..[523,17102+59])
          Ptyp_arrow
          Nolabel
          core_type (lib/types.ml[523,17102+35]..[523,17102+45])
            Ptyp_constr "field_kind" (lib/types.ml[523,17102+35]..[523,17102+45])
            []
          core_type (lib/types.ml[523,17102+49]..[523,17102+59])
            Ptyp_constr "field_kind" (lib/types.ml[523,17102+49]..[523,17102+59])
            []
        expression (lib/types.ml[523,17102+62]..[526,17271+16])
          Pexp_function
          []
          None
          Pfunction_cases (lib/types.ml[523,17102+62]..[526,17271+16])
            [
              <case>
                pattern (lib/types.ml[524,17173+4]..[524,17173+60])
                  Ppat_construct "FKvar" (lib/types.ml[524,17173+4]..[524,17173+9])
                  Some
                    []
                    pattern (lib/types.ml[524,17173+10]..[524,17173+60])
                      Ppat_record Closed
                      [
                        "field_kind" (lib/types.ml[524,17173+11]..[524,17173+21])
                          pattern (lib/types.ml[524,17173+24]..[524,17173+59])
                            Ppat_alias "fk" (lib/types.ml[524,17173+57]..[524,17173+59])
                            pattern (lib/types.ml[524,17173+24]..[524,17173+53])
                              Ppat_or
                              pattern (lib/types.ml[524,17173+24]..[524,17173+42])
                                Ppat_or
                                pattern (lib/types.ml[524,17173+24]..[524,17173+31])
                                  Ppat_construct "FKvar" (lib/types.ml[524,17173+24]..[524,17173+29])
                                  Some
                                    []
                                    pattern (lib/types.ml[524,17173+30]..[524,17173+31])
                                      Ppat_any
                                pattern (lib/types.ml[524,17173+34]..[524,17173+42])
                                  Ppat_construct "FKpublic" (lib/types.ml[524,17173+34]..[524,17173+42])
                                  None
                              pattern (lib/types.ml[524,17173+45]..[524,17173+53])
                                Ppat_construct "FKabsent" (lib/types.ml[524,17173+45]..[524,17173+53])
                                None
                      ]
                expression (lib/types.ml[525,17237+6]..[525,17237+33])
                  Pexp_apply
                  expression (lib/types.ml[525,17237+6]..[525,17237+30])
                    Pexp_ident "field_kind_internal_repr" (lib/types.ml[525,17237+6]..[525,17237+30])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[525,17237+31]..[525,17237+33])
                        Pexp_ident "fk" (lib/types.ml[525,17237+31]..[525,17237+33])
                  ]
              <case>
                pattern (lib/types.ml[526,17271+4]..[526,17271+8])
                  Ppat_var "kind" (lib/types.ml[526,17271+4]..[526,17271+8])
                expression (lib/types.ml[526,17271+12]..[526,17271+16])
                  Pexp_ident "kind" (lib/types.ml[526,17271+12]..[526,17271+16])
            ]
    ]
  structure_item (lib/types.ml[528,17289+0]..[532,17403+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[528,17289+4]..[528,17289+19])
          Ppat_var "field_kind_repr" (lib/types.ml[528,17289+4]..[528,17289+19])
        expression (lib/types.ml[528,17289+20]..[532,17403+23]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[528,17289+20]..[528,17289+22])
              Nolabel
              None
              pattern (lib/types.ml[528,17289+20]..[528,17289+22])
                Ppat_var "fk" (lib/types.ml[528,17289+20]..[528,17289+22])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[529,17314+2]..[532,17403+23])
              Pexp_match
              expression (lib/types.ml[529,17314+8]..[529,17314+35])
                Pexp_apply
                expression (lib/types.ml[529,17314+8]..[529,17314+32])
                  Pexp_ident "field_kind_internal_repr" (lib/types.ml[529,17314+8]..[529,17314+32])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[529,17314+33]..[529,17314+35])
                      Pexp_ident "fk" (lib/types.ml[529,17314+33]..[529,17314+35])
                ]
              [
                <case>
                  pattern (lib/types.ml[530,17355+4]..[530,17355+11])
                    Ppat_construct "FKvar" (lib/types.ml[530,17355+4]..[530,17355+9])
                    Some
                      []
                      pattern (lib/types.ml[530,17355+10]..[530,17355+11])
                        Ppat_any
                  expression (lib/types.ml[530,17355+15]..[530,17355+23])
                    Pexp_construct "Fprivate" (lib/types.ml[530,17355+15]..[530,17355+23])
                    None
                <case>
                  pattern (lib/types.ml[531,17379+4]..[531,17379+12])
                    Ppat_construct "FKpublic" (lib/types.ml[531,17379+4]..[531,17379+12])
                    None
                  expression (lib/types.ml[531,17379+16]..[531,17379+23])
                    Pexp_construct "Fpublic" (lib/types.ml[531,17379+16]..[531,17379+23])
                    None
                <case>
                  pattern (lib/types.ml[532,17403+4]..[532,17403+12])
                    Ppat_construct "FKabsent" (lib/types.ml[532,17403+4]..[532,17403+12])
                    None
                  expression (lib/types.ml[532,17403+16]..[532,17403+23])
                    Pexp_construct "Fabsent" (lib/types.ml[532,17403+16]..[532,17403+23])
                    None
              ]
    ]
  structure_item (lib/types.ml[534,17428+0]..[534,17428+27])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[534,17428+4]..[534,17428+16])
          Ppat_var "field_public" (lib/types.ml[534,17428+4]..[534,17428+16])
        expression (lib/types.ml[534,17428+19]..[534,17428+27])
          Pexp_construct "FKpublic" (lib/types.ml[534,17428+19]..[534,17428+27])
          None
    ]
  structure_item (lib/types.ml[535,17456+0]..[535,17456+27])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[535,17456+4]..[535,17456+16])
          Ppat_var "field_absent" (lib/types.ml[535,17456+4]..[535,17456+16])
        expression (lib/types.ml[535,17456+19]..[535,17456+27])
          Pexp_construct "FKabsent" (lib/types.ml[535,17456+19]..[535,17456+27])
          None
    ]
  structure_item (lib/types.ml[536,17484+0]..[536,17484+51])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[536,17484+4]..[536,17484+17])
          Ppat_var "field_private" (lib/types.ml[536,17484+4]..[536,17484+17])
        expression (lib/types.ml[536,17484+18]..[536,17484+51]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[536,17484+18]..[536,17484+20])
              Nolabel
              None
              pattern (lib/types.ml[536,17484+18]..[536,17484+20])
                Ppat_construct "()" (lib/types.ml[536,17484+18]..[536,17484+20])
                None
          ]
          None
          Pfunction_body
            expression (lib/types.ml[536,17484+23]..[536,17484+51])
              Pexp_construct "FKvar" (lib/types.ml[536,17484+23]..[536,17484+28])
              Some
                expression (lib/types.ml[536,17484+29]..[536,17484+51])
                  Pexp_record
                  [
                    "field_kind" (lib/types.ml[536,17484+30]..[536,17484+40])
                      expression (lib/types.ml[536,17484+41]..[536,17484+50])
                        Pexp_construct "FKprivate" (lib/types.ml[536,17484+41]..[536,17484+50])
                        None
                  ]
                  None
    ]
  structure_item (lib/types.ml[540,17587+0]..[543,17713+15])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[540,17587+8]..[540,17587+19])
          Ppat_var "is_commu_ok" (lib/types.ml[540,17587+8]..[540,17587+19])
        <type> "a" (lib/types.ml[540,17587+27]..[540,17587+28]).
        core_type (lib/types.ml[540,17587+30]..[540,17587+54])
          Ptyp_arrow
          Nolabel
          core_type (lib/types.ml[540,17587+30]..[540,17587+46])
            Ptyp_constr "commutable_gen" (lib/types.ml[540,17587+32]..[540,17587+46])
            [
              core_type (lib/types.ml[540,17587+30]..[540,17587+31])
                Ptyp_constr "a" (lib/types.ml[540,17587+30]..[540,17587+31])
                []
            ]
          core_type (lib/types.ml[540,17587+50]..[540,17587+54])
            Ptyp_constr "bool" (lib/types.ml[540,17587+50]..[540,17587+54])
            []
        expression (lib/types.ml[540,17587+57]..[543,17713+15])
          Pexp_function
          []
          None
          Pfunction_cases (lib/types.ml[540,17587+57]..[543,17713+15])
            [
              <case>
                pattern (lib/types.ml[541,17653+4]..[541,17653+16])
                  Ppat_construct "Cvar" (lib/types.ml[541,17653+4]..[541,17653+8])
                  Some
                    []
                    pattern (lib/types.ml[541,17653+9]..[541,17653+16])
                      Ppat_record Closed
                      [
                        "commu" (lib/types.ml[541,17653+10]..[541,17653+15]) ghost
                          pattern (lib/types.ml[541,17653+10]..[541,17653+15])
                            Ppat_var "commu" (lib/types.ml[541,17653+10]..[541,17653+15])
                      ]
                expression (lib/types.ml[541,17653+20]..[541,17653+37])
                  Pexp_apply
                  expression (lib/types.ml[541,17653+20]..[541,17653+31])
                    Pexp_ident "is_commu_ok" (lib/types.ml[541,17653+20]..[541,17653+31])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[541,17653+32]..[541,17653+37])
                        Pexp_ident "commu" (lib/types.ml[541,17653+32]..[541,17653+37])
                  ]
              <case>
                pattern (lib/types.ml[542,17691+4]..[542,17691+12])
                  Ppat_construct "Cunknown" (lib/types.ml[542,17691+4]..[542,17691+12])
                  None
                expression (lib/types.ml[542,17691+16]..[542,17691+21])
                  Pexp_construct "false" (lib/types.ml[542,17691+16]..[542,17691+21])
                  None
              <case>
                pattern (lib/types.ml[543,17713+4]..[543,17713+7])
                  Ppat_construct "Cok" (lib/types.ml[543,17713+4]..[543,17713+7])
                  None
                expression (lib/types.ml[543,17713+11]..[543,17713+15])
                  Pexp_construct "true" (lib/types.ml[543,17713+11]..[543,17713+15])
                  None
            ]
    ]
  structure_item (lib/types.ml[545,17730+0]..[545,17730+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[545,17730+4]..[545,17730+12])
          Ppat_var "commu_ok" (lib/types.ml[545,17730+4]..[545,17730+12])
        expression (lib/types.ml[545,17730+15]..[545,17730+18])
          Pexp_construct "Cok" (lib/types.ml[545,17730+15]..[545,17730+18])
          None
    ]
  structure_item (lib/types.ml[546,17749+0]..[546,17749+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[546,17749+4]..[546,17749+13])
          Ppat_var "commu_var" (lib/types.ml[546,17749+4]..[546,17749+13])
        expression (lib/types.ml[546,17749+14]..[546,17749+40]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[546,17749+14]..[546,17749+16])
              Nolabel
              None
              pattern (lib/types.ml[546,17749+14]..[546,17749+16])
                Ppat_construct "()" (lib/types.ml[546,17749+14]..[546,17749+16])
                None
          ]
          None
          Pfunction_body
            expression (lib/types.ml[546,17749+19]..[546,17749+40])
              Pexp_construct "Cvar" (lib/types.ml[546,17749+19]..[546,17749+23])
              Some
                expression (lib/types.ml[546,17749+24]..[546,17749+40])
                  Pexp_record
                  [
                    "commu" (lib/types.ml[546,17749+25]..[546,17749+30])
                      expression (lib/types.ml[546,17749+31]..[546,17749+39])
                        Pexp_construct "Cunknown" (lib/types.ml[546,17749+31]..[546,17749+39])
                        None
                  ]
                  None
    ]
  structure_item (lib/types.ml[550,17829+0]..[560,18137+7])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[550,17829+8]..[550,17829+17])
          Ppat_var "repr_link" (lib/types.ml[550,17829+8]..[550,17829+17])
        expression (lib/types.ml[550,17829+18]..[560,18137+7]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[550,17829+18]..[550,17829+33])
              Nolabel
              None
              pattern (lib/types.ml[550,17829+18]..[550,17829+33])
                Ppat_constraint
                pattern (lib/types.ml[550,17829+19]..[550,17829+20])
                  Ppat_var "t" (lib/types.ml[550,17829+19]..[550,17829+20])
                core_type (lib/types.ml[550,17829+23]..[550,17829+32])
                  Ptyp_constr "type_expr" (lib/types.ml[550,17829+23]..[550,17829+32])
                  []
            Pparam_val (lib/types.ml[550,17829+34]..[550,17829+35])
              Nolabel
              None
              pattern (lib/types.ml[550,17829+34]..[550,17829+35])
                Ppat_var "d" (lib/types.ml[550,17829+34]..[550,17829+35])
          ]
          Some
            Pconstraint
              core_type (lib/types.ml[550,17829+38]..[550,17829+60])
                Ptyp_arrow
                Nolabel
                core_type (lib/types.ml[550,17829+38]..[550,17829+47])
                  Ptyp_constr "type_expr" (lib/types.ml[550,17829+38]..[550,17829+47])
                  []
                core_type (lib/types.ml[550,17829+51]..[550,17829+60])
                  Ptyp_constr "type_expr" (lib/types.ml[550,17829+51]..[550,17829+60])
                  []
          Pfunction_cases (lib/types.ml[551,17892+1]..[560,18137+7])
            [
              <case>
                pattern (lib/types.ml[552,17902+3]..[552,17902+26])
                  Ppat_record Closed
                  [
                    "desc" (lib/types.ml[552,17902+4]..[552,17902+8])
                      pattern (lib/types.ml[552,17902+11]..[552,17902+25])
                        Ppat_alias "d'" (lib/types.ml[552,17902+23]..[552,17902+25])
                        pattern (lib/types.ml[552,17902+11]..[552,17902+19])
                          Ppat_construct "Tlink" (lib/types.ml[552,17902+11]..[552,17902+16])
                          Some
                            []
                            pattern (lib/types.ml[552,17902+17]..[552,17902+19])
                              Ppat_var "t'" (lib/types.ml[552,17902+17]..[552,17902+19])
                  ]
                expression (lib/types.ml[553,17932+5]..[553,17932+22])
                  Pexp_apply
                  expression (lib/types.ml[553,17932+5]..[553,17932+14])
                    Pexp_ident "repr_link" (lib/types.ml[553,17932+5]..[553,17932+14])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[553,17932+15]..[553,17932+16])
                        Pexp_ident "t" (lib/types.ml[553,17932+15]..[553,17932+16])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[553,17932+17]..[553,17932+19])
                        Pexp_ident "d'" (lib/types.ml[553,17932+17]..[553,17932+19])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[553,17932+20]..[553,17932+22])
                        Pexp_ident "t'" (lib/types.ml[553,17932+20]..[553,17932+22])
                  ]
              <case>
                pattern (lib/types.ml[554,17955+3]..[554,17955+38])
                  Ppat_record Closed
                  [
                    "desc" (lib/types.ml[554,17955+4]..[554,17955+8])
                      pattern (lib/types.ml[554,17955+11]..[554,17955+37])
                        Ppat_alias "d'" (lib/types.ml[554,17955+35]..[554,17955+37])
                        pattern (lib/types.ml[554,17955+11]..[554,17955+31])
                          Ppat_construct "Tfield" (lib/types.ml[554,17955+11]..[554,17955+17])
                          Some
                            []
                            pattern (lib/types.ml[554,17955+18]..[554,17955+31])
                              Ppat_tuple
                              [
                                pattern (lib/types.ml[554,17955+19]..[554,17955+20])
                                  Ppat_any
                                pattern (lib/types.ml[554,17955+22]..[554,17955+23])
                                  Ppat_var "k" (lib/types.ml[554,17955+22]..[554,17955+23])
                                pattern (lib/types.ml[554,17955+25]..[554,17955+26])
                                  Ppat_any
                                pattern (lib/types.ml[554,17955+28]..[554,17955+30])
                                  Ppat_var "t'" (lib/types.ml[554,17955+28]..[554,17955+30])
                              ]
                  ]
                <when>
                  expression (lib/types.ml[555,17994+8]..[555,17994+45])
                    Pexp_apply
                    expression (lib/types.ml[555,17994+35]..[555,17994+36])
                      Pexp_ident "=" (lib/types.ml[555,17994+35]..[555,17994+36])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[555,17994+8]..[555,17994+34])
                          Pexp_apply
                          expression (lib/types.ml[555,17994+8]..[555,17994+32])
                            Pexp_ident "field_kind_internal_repr" (lib/types.ml[555,17994+8]..[555,17994+32])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[555,17994+33]..[555,17994+34])
                                Pexp_ident "k" (lib/types.ml[555,17994+33]..[555,17994+34])
                          ]
                      <arg>
                      Nolabel
                        expression (lib/types.ml[555,17994+37]..[555,17994+45])
                          Pexp_construct "FKabsent" (lib/types.ml[555,17994+37]..[555,17994+45])
                          None
                    ]
                expression (lib/types.ml[556,18043+5]..[556,18043+22])
                  Pexp_apply
                  expression (lib/types.ml[556,18043+5]..[556,18043+14])
                    Pexp_ident "repr_link" (lib/types.ml[556,18043+5]..[556,18043+14])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[556,18043+15]..[556,18043+16])
                        Pexp_ident "t" (lib/types.ml[556,18043+15]..[556,18043+16])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[556,18043+17]..[556,18043+19])
                        Pexp_ident "d'" (lib/types.ml[556,18043+17]..[556,18043+19])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[556,18043+20]..[556,18043+22])
                        Pexp_ident "t'" (lib/types.ml[556,18043+20]..[556,18043+22])
                  ]
              <case>
                pattern (lib/types.ml[557,18066+3]..[557,18066+5])
                  Ppat_var "t'" (lib/types.ml[557,18066+3]..[557,18066+5])
                expression (lib/types.ml[558,18075+5]..[560,18137+7])
                  Pexp_sequence
                  expression (lib/types.ml[558,18075+5]..[558,18075+42])
                    Pexp_apply
                    expression (lib/types.ml[558,18075+5]..[558,18075+15])
                      Pexp_ident "log_change" (lib/types.ml[558,18075+5]..[558,18075+15])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[558,18075+16]..[558,18075+42])
                          Pexp_construct "Ccompress" (lib/types.ml[558,18075+17]..[558,18075+26])
                          Some
                            expression (lib/types.ml[558,18075+27]..[558,18075+41])
                              Pexp_tuple
                              [
                                expression (lib/types.ml[558,18075+28]..[558,18075+29])
                                  Pexp_ident "t" (lib/types.ml[558,18075+28]..[558,18075+29])
                                expression (lib/types.ml[558,18075+31]..[558,18075+37])
                                  Pexp_field
                                  expression (lib/types.ml[558,18075+31]..[558,18075+32])
                                    Pexp_ident "t" (lib/types.ml[558,18075+31]..[558,18075+32])
                                  "desc" (lib/types.ml[558,18075+33]..[558,18075+37])
                                expression (lib/types.ml[558,18075+39]..[558,18075+40])
                                  Pexp_ident "d" (lib/types.ml[558,18075+39]..[558,18075+40])
                              ]
                    ]
                  expression (lib/types.ml[559,18119+5]..[560,18137+7])
                    Pexp_sequence
                    expression (lib/types.ml[559,18119+5]..[559,18119+16])
                      Pexp_setfield
                      expression (lib/types.ml[559,18119+5]..[559,18119+6])
                        Pexp_ident "t" (lib/types.ml[559,18119+5]..[559,18119+6])
                      "desc" (lib/types.ml[559,18119+7]..[559,18119+11])
                      expression (lib/types.ml[559,18119+15]..[559,18119+16])
                        Pexp_ident "d" (lib/types.ml[559,18119+15]..[559,18119+16])
                    expression (lib/types.ml[560,18137+5]..[560,18137+7])
                      Pexp_ident "t'" (lib/types.ml[560,18137+5]..[560,18137+7])
            ]
    ]
  structure_item (lib/types.ml[562,18146+0]..[568,18338+11])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[562,18146+4]..[562,18146+14])
          Ppat_var "repr_link1" (lib/types.ml[562,18146+4]..[562,18146+14])
        expression (lib/types.ml[562,18146+15]..[568,18338+11]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[562,18146+15]..[562,18146+16])
              Nolabel
              None
              pattern (lib/types.ml[562,18146+15]..[562,18146+16])
                Ppat_var "t" (lib/types.ml[562,18146+15]..[562,18146+16])
          ]
          None
          Pfunction_cases (lib/types.ml[562,18146+19]..[568,18338+11])
            [
              <case>
                pattern (lib/types.ml[563,18174+3]..[563,18174+26])
                  Ppat_record Closed
                  [
                    "desc" (lib/types.ml[563,18174+4]..[563,18174+8])
                      pattern (lib/types.ml[563,18174+11]..[563,18174+25])
                        Ppat_alias "d'" (lib/types.ml[563,18174+23]..[563,18174+25])
                        pattern (lib/types.ml[563,18174+11]..[563,18174+19])
                          Ppat_construct "Tlink" (lib/types.ml[563,18174+11]..[563,18174+16])
                          Some
                            []
                            pattern (lib/types.ml[563,18174+17]..[563,18174+19])
                              Ppat_var "t'" (lib/types.ml[563,18174+17]..[563,18174+19])
                  ]
                expression (lib/types.ml[564,18204+5]..[564,18204+22])
                  Pexp_apply
                  expression (lib/types.ml[564,18204+5]..[564,18204+14])
                    Pexp_ident "repr_link" (lib/types.ml[564,18204+5]..[564,18204+14])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[564,18204+15]..[564,18204+16])
                        Pexp_ident "t" (lib/types.ml[564,18204+15]..[564,18204+16])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[564,18204+17]..[564,18204+19])
                        Pexp_ident "d'" (lib/types.ml[564,18204+17]..[564,18204+19])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[564,18204+20]..[564,18204+22])
                        Pexp_ident "t'" (lib/types.ml[564,18204+20]..[564,18204+22])
                  ]
              <case>
                pattern (lib/types.ml[565,18227+3]..[565,18227+38])
                  Ppat_record Closed
                  [
                    "desc" (lib/types.ml[565,18227+4]..[565,18227+8])
                      pattern (lib/types.ml[565,18227+11]..[565,18227+37])
                        Ppat_alias "d'" (lib/types.ml[565,18227+35]..[565,18227+37])
                        pattern (lib/types.ml[565,18227+11]..[565,18227+31])
                          Ppat_construct "Tfield" (lib/types.ml[565,18227+11]..[565,18227+17])
                          Some
                            []
                            pattern (lib/types.ml[565,18227+18]..[565,18227+31])
                              Ppat_tuple
                              [
                                pattern (lib/types.ml[565,18227+19]..[565,18227+20])
                                  Ppat_any
                                pattern (lib/types.ml[565,18227+22]..[565,18227+23])
                                  Ppat_var "k" (lib/types.ml[565,18227+22]..[565,18227+23])
                                pattern (lib/types.ml[565,18227+25]..[565,18227+26])
                                  Ppat_any
                                pattern (lib/types.ml[565,18227+28]..[565,18227+30])
                                  Ppat_var "t'" (lib/types.ml[565,18227+28]..[565,18227+30])
                              ]
                  ]
                <when>
                  expression (lib/types.ml[566,18266+8]..[566,18266+45])
                    Pexp_apply
                    expression (lib/types.ml[566,18266+35]..[566,18266+36])
                      Pexp_ident "=" (lib/types.ml[566,18266+35]..[566,18266+36])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[566,18266+8]..[566,18266+34])
                          Pexp_apply
                          expression (lib/types.ml[566,18266+8]..[566,18266+32])
                            Pexp_ident "field_kind_internal_repr" (lib/types.ml[566,18266+8]..[566,18266+32])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[566,18266+33]..[566,18266+34])
                                Pexp_ident "k" (lib/types.ml[566,18266+33]..[566,18266+34])
                          ]
                      <arg>
                      Nolabel
                        expression (lib/types.ml[566,18266+37]..[566,18266+45])
                          Pexp_construct "FKabsent" (lib/types.ml[566,18266+37]..[566,18266+45])
                          None
                    ]
                expression (lib/types.ml[567,18315+5]..[567,18315+22])
                  Pexp_apply
                  expression (lib/types.ml[567,18315+5]..[567,18315+14])
                    Pexp_ident "repr_link" (lib/types.ml[567,18315+5]..[567,18315+14])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[567,18315+15]..[567,18315+16])
                        Pexp_ident "t" (lib/types.ml[567,18315+15]..[567,18315+16])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[567,18315+17]..[567,18315+19])
                        Pexp_ident "d'" (lib/types.ml[567,18315+17]..[567,18315+19])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[567,18315+20]..[567,18315+22])
                        Pexp_ident "t'" (lib/types.ml[567,18315+20]..[567,18315+22])
                  ]
              <case>
                pattern (lib/types.ml[568,18338+3]..[568,18338+5])
                  Ppat_var "t'" (lib/types.ml[568,18338+3]..[568,18338+5])
                expression (lib/types.ml[568,18338+9]..[568,18338+11])
                  Pexp_ident "t'" (lib/types.ml[568,18338+9]..[568,18338+11])
            ]
    ]
  structure_item (lib/types.ml[570,18351+0]..[576,18511+9])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[570,18351+4]..[570,18351+8])
          Ppat_var "repr" (lib/types.ml[570,18351+4]..[570,18351+8])
        expression (lib/types.ml[570,18351+9]..[576,18511+9]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[570,18351+9]..[570,18351+10])
              Nolabel
              None
              pattern (lib/types.ml[570,18351+9]..[570,18351+10])
                Ppat_var "t" (lib/types.ml[570,18351+9]..[570,18351+10])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[571,18364+2]..[576,18511+9])
              Pexp_match
              expression (lib/types.ml[571,18364+8]..[571,18364+14])
                Pexp_field
                expression (lib/types.ml[571,18364+8]..[571,18364+9])
                  Pexp_ident "t" (lib/types.ml[571,18364+8]..[571,18364+9])
                "desc" (lib/types.ml[571,18364+10]..[571,18364+14])
              [
                <case>
                  pattern (lib/types.ml[572,18384+3]..[572,18384+11])
                    Ppat_construct "Tlink" (lib/types.ml[572,18384+3]..[572,18384+8])
                    Some
                      []
                      pattern (lib/types.ml[572,18384+9]..[572,18384+11])
                        Ppat_var "t'" (lib/types.ml[572,18384+9]..[572,18384+11])
                  expression (lib/types.ml[573,18399+5]..[573,18399+20])
                    Pexp_apply
                    expression (lib/types.ml[573,18399+5]..[573,18399+15])
                      Pexp_ident "repr_link1" (lib/types.ml[573,18399+5]..[573,18399+15])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[573,18399+16]..[573,18399+17])
                          Pexp_ident "t" (lib/types.ml[573,18399+16]..[573,18399+17])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[573,18399+18]..[573,18399+20])
                          Pexp_ident "t'" (lib/types.ml[573,18399+18]..[573,18399+20])
                    ]
                <case>
                  pattern (lib/types.ml[574,18420+3]..[574,18420+23])
                    Ppat_construct "Tfield" (lib/types.ml[574,18420+3]..[574,18420+9])
                    Some
                      []
                      pattern (lib/types.ml[574,18420+10]..[574,18420+23])
                        Ppat_tuple
                        [
                          pattern (lib/types.ml[574,18420+11]..[574,18420+12])
                            Ppat_any
                          pattern (lib/types.ml[574,18420+14]..[574,18420+15])
                            Ppat_var "k" (lib/types.ml[574,18420+14]..[574,18420+15])
                          pattern (lib/types.ml[574,18420+17]..[574,18420+18])
                            Ppat_any
                          pattern (lib/types.ml[574,18420+20]..[574,18420+22])
                            Ppat_var "t'" (lib/types.ml[574,18420+20]..[574,18420+22])
                        ]
                  <when>
                    expression (lib/types.ml[574,18420+29]..[574,18420+66])
                      Pexp_apply
                      expression (lib/types.ml[574,18420+56]..[574,18420+57])
                        Pexp_ident "=" (lib/types.ml[574,18420+56]..[574,18420+57])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[574,18420+29]..[574,18420+55])
                            Pexp_apply
                            expression (lib/types.ml[574,18420+29]..[574,18420+53])
                              Pexp_ident "field_kind_internal_repr" (lib/types.ml[574,18420+29]..[574,18420+53])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[574,18420+54]..[574,18420+55])
                                  Pexp_ident "k" (lib/types.ml[574,18420+54]..[574,18420+55])
                            ]
                        <arg>
                        Nolabel
                          expression (lib/types.ml[574,18420+58]..[574,18420+66])
                            Pexp_construct "FKabsent" (lib/types.ml[574,18420+58]..[574,18420+66])
                            None
                      ]
                  expression (lib/types.ml[575,18490+5]..[575,18490+20])
                    Pexp_apply
                    expression (lib/types.ml[575,18490+5]..[575,18490+15])
                      Pexp_ident "repr_link1" (lib/types.ml[575,18490+5]..[575,18490+15])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[575,18490+16]..[575,18490+17])
                          Pexp_ident "t" (lib/types.ml[575,18490+16]..[575,18490+17])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[575,18490+18]..[575,18490+20])
                          Pexp_ident "t'" (lib/types.ml[575,18490+18]..[575,18490+20])
                    ]
                <case>
                  pattern (lib/types.ml[576,18511+3]..[576,18511+4])
                    Ppat_any
                  expression (lib/types.ml[576,18511+8]..[576,18511+9])
                    Pexp_ident "t" (lib/types.ml[576,18511+8]..[576,18511+9])
              ]
    ]
  structure_item (lib/types.ml[580,18551+0]..[580,18551+30])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[580,18551+4]..[580,18551+12])
          Ppat_var "get_desc" (lib/types.ml[580,18551+4]..[580,18551+12])
        expression (lib/types.ml[580,18551+13]..[580,18551+30]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[580,18551+13]..[580,18551+14])
              Nolabel
              None
              pattern (lib/types.ml[580,18551+13]..[580,18551+14])
                Ppat_var "t" (lib/types.ml[580,18551+13]..[580,18551+14])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[580,18551+17]..[580,18551+30])
              Pexp_field
              expression (lib/types.ml[580,18551+17]..[580,18551+25])
                Pexp_apply
                expression (lib/types.ml[580,18551+18]..[580,18551+22])
                  Pexp_ident "repr" (lib/types.ml[580,18551+18]..[580,18551+22])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[580,18551+23]..[580,18551+24])
                      Pexp_ident "t" (lib/types.ml[580,18551+23]..[580,18551+24])
                ]
              "desc" (lib/types.ml[580,18551+26]..[580,18551+30])
    ]
  structure_item (lib/types.ml[581,18582+0]..[581,18582+32])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[581,18582+4]..[581,18582+13])
          Ppat_var "get_level" (lib/types.ml[581,18582+4]..[581,18582+13])
        expression (lib/types.ml[581,18582+14]..[581,18582+32]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[581,18582+14]..[581,18582+15])
              Nolabel
              None
              pattern (lib/types.ml[581,18582+14]..[581,18582+15])
                Ppat_var "t" (lib/types.ml[581,18582+14]..[581,18582+15])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[581,18582+18]..[581,18582+32])
              Pexp_field
              expression (lib/types.ml[581,18582+18]..[581,18582+26])
                Pexp_apply
                expression (lib/types.ml[581,18582+19]..[581,18582+23])
                  Pexp_ident "repr" (lib/types.ml[581,18582+19]..[581,18582+23])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[581,18582+24]..[581,18582+25])
                      Pexp_ident "t" (lib/types.ml[581,18582+24]..[581,18582+25])
                ]
              "level" (lib/types.ml[581,18582+27]..[581,18582+32])
    ]
  structure_item (lib/types.ml[582,18615+0]..[582,18615+32])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[582,18615+4]..[582,18615+13])
          Ppat_var "get_scope" (lib/types.ml[582,18615+4]..[582,18615+13])
        expression (lib/types.ml[582,18615+14]..[582,18615+32]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[582,18615+14]..[582,18615+15])
              Nolabel
              None
              pattern (lib/types.ml[582,18615+14]..[582,18615+15])
                Ppat_var "t" (lib/types.ml[582,18615+14]..[582,18615+15])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[582,18615+18]..[582,18615+32])
              Pexp_field
              expression (lib/types.ml[582,18615+18]..[582,18615+26])
                Pexp_apply
                expression (lib/types.ml[582,18615+19]..[582,18615+23])
                  Pexp_ident "repr" (lib/types.ml[582,18615+19]..[582,18615+23])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[582,18615+24]..[582,18615+25])
                      Pexp_ident "t" (lib/types.ml[582,18615+24]..[582,18615+25])
                ]
              "scope" (lib/types.ml[582,18615+27]..[582,18615+32])
    ]
  structure_item (lib/types.ml[583,18648+0]..[583,18648+26])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[583,18648+4]..[583,18648+10])
          Ppat_var "get_id" (lib/types.ml[583,18648+4]..[583,18648+10])
        expression (lib/types.ml[583,18648+11]..[583,18648+26]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[583,18648+11]..[583,18648+12])
              Nolabel
              None
              pattern (lib/types.ml[583,18648+11]..[583,18648+12])
                Ppat_var "t" (lib/types.ml[583,18648+11]..[583,18648+12])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[583,18648+15]..[583,18648+26])
              Pexp_field
              expression (lib/types.ml[583,18648+15]..[583,18648+23])
                Pexp_apply
                expression (lib/types.ml[583,18648+16]..[583,18648+20])
                  Pexp_ident "repr" (lib/types.ml[583,18648+16]..[583,18648+20])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[583,18648+21]..[583,18648+22])
                      Pexp_ident "t" (lib/types.ml[583,18648+21]..[583,18648+22])
                ]
              "id" (lib/types.ml[583,18648+24]..[583,18648+26])
    ]
  structure_item (lib/types.ml[587,18703+0]..[596,19043+3])
    Pstr_module
    "Transient_expr" (lib/types.ml[587,18703+7]..[587,18703+21])
      module_expr (lib/types.ml[587,18703+24]..[596,19043+3])
        Pmod_structure
        [
          structure_item (lib/types.ml[588,18734+2]..[588,18734+62])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[588,18734+6]..[588,18734+12])
                  Ppat_var "create" (lib/types.ml[588,18734+6]..[588,18734+12])
                expression (lib/types.ml[588,18734+13]..[588,18734+62]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[588,18734+13]..[588,18734+17])
                      Nolabel
                      None
                      pattern (lib/types.ml[588,18734+13]..[588,18734+17])
                        Ppat_var "desc" (lib/types.ml[588,18734+13]..[588,18734+17])
                    Pparam_val (lib/types.ml[588,18734+18]..[588,18734+24])
                      Labelled "level"
                      None
                      pattern (lib/types.ml[588,18734+19]..[588,18734+24])
                        Ppat_var "level" (lib/types.ml[588,18734+19]..[588,18734+24])
                    Pparam_val (lib/types.ml[588,18734+25]..[588,18734+31])
                      Labelled "scope"
                      None
                      pattern (lib/types.ml[588,18734+26]..[588,18734+31])
                        Ppat_var "scope" (lib/types.ml[588,18734+26]..[588,18734+31])
                    Pparam_val (lib/types.ml[588,18734+32]..[588,18734+35])
                      Labelled "id"
                      None
                      pattern (lib/types.ml[588,18734+33]..[588,18734+35])
                        Ppat_var "id" (lib/types.ml[588,18734+33]..[588,18734+35])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[588,18734+38]..[588,18734+62])
                      Pexp_record
                      [
                        "desc" (lib/types.ml[588,18734+39]..[588,18734+43]) ghost
                          expression (lib/types.ml[588,18734+39]..[588,18734+43])
                            Pexp_ident "desc" (lib/types.ml[588,18734+39]..[588,18734+43])
                        "level" (lib/types.ml[588,18734+45]..[588,18734+50]) ghost
                          expression (lib/types.ml[588,18734+45]..[588,18734+50])
                            Pexp_ident "level" (lib/types.ml[588,18734+45]..[588,18734+50])
                        "scope" (lib/types.ml[588,18734+52]..[588,18734+57]) ghost
                          expression (lib/types.ml[588,18734+52]..[588,18734+57])
                            Pexp_ident "scope" (lib/types.ml[588,18734+52]..[588,18734+57])
                        "id" (lib/types.ml[588,18734+59]..[588,18734+61]) ghost
                          expression (lib/types.ml[588,18734+59]..[588,18734+61])
                            Pexp_ident "id" (lib/types.ml[588,18734+59]..[588,18734+61])
                      ]
                      None
            ]
          structure_item (lib/types.ml[589,18797+2]..[589,18797+34])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[589,18797+6]..[589,18797+14])
                  Ppat_var "set_desc" (lib/types.ml[589,18797+6]..[589,18797+14])
                expression (lib/types.ml[589,18797+15]..[589,18797+34]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[589,18797+15]..[589,18797+17])
                      Nolabel
                      None
                      pattern (lib/types.ml[589,18797+15]..[589,18797+17])
                        Ppat_var "ty" (lib/types.ml[589,18797+15]..[589,18797+17])
                    Pparam_val (lib/types.ml[589,18797+18]..[589,18797+19])
                      Nolabel
                      None
                      pattern (lib/types.ml[589,18797+18]..[589,18797+19])
                        Ppat_var "d" (lib/types.ml[589,18797+18]..[589,18797+19])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[589,18797+22]..[589,18797+34])
                      Pexp_setfield
                      expression (lib/types.ml[589,18797+22]..[589,18797+24])
                        Pexp_ident "ty" (lib/types.ml[589,18797+22]..[589,18797+24])
                      "desc" (lib/types.ml[589,18797+25]..[589,18797+29])
                      expression (lib/types.ml[589,18797+33]..[589,18797+34])
                        Pexp_ident "d" (lib/types.ml[589,18797+33]..[589,18797+34])
            ]
          structure_item (lib/types.ml[590,18832+2]..[590,18832+69])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[590,18832+6]..[590,18832+19])
                  Ppat_var "set_stub_desc" (lib/types.ml[590,18832+6]..[590,18832+19])
                expression (lib/types.ml[590,18832+20]..[590,18832+69]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[590,18832+20]..[590,18832+22])
                      Nolabel
                      None
                      pattern (lib/types.ml[590,18832+20]..[590,18832+22])
                        Ppat_var "ty" (lib/types.ml[590,18832+20]..[590,18832+22])
                    Pparam_val (lib/types.ml[590,18832+23]..[590,18832+24])
                      Nolabel
                      None
                      pattern (lib/types.ml[590,18832+23]..[590,18832+24])
                        Ppat_var "d" (lib/types.ml[590,18832+23]..[590,18832+24])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[590,18832+27]..[590,18832+69])
                      Pexp_sequence
                      expression (lib/types.ml[590,18832+27]..[590,18832+55])
                        Pexp_assert
                        expression (lib/types.ml[590,18832+34]..[590,18832+55])
                          Pexp_apply
                          expression (lib/types.ml[590,18832+43]..[590,18832+44])
                            Pexp_ident "=" (lib/types.ml[590,18832+43]..[590,18832+44])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[590,18832+35]..[590,18832+42])
                                Pexp_field
                                expression (lib/types.ml[590,18832+35]..[590,18832+37])
                                  Pexp_ident "ty" (lib/types.ml[590,18832+35]..[590,18832+37])
                                "desc" (lib/types.ml[590,18832+38]..[590,18832+42])
                            <arg>
                            Nolabel
                              expression (lib/types.ml[590,18832+45]..[590,18832+54])
                                Pexp_construct "Tvar" (lib/types.ml[590,18832+45]..[590,18832+49])
                                Some
                                  expression (lib/types.ml[590,18832+50]..[590,18832+54])
                                    Pexp_construct "None" (lib/types.ml[590,18832+50]..[590,18832+54])
                                    None
                          ]
                      expression (lib/types.ml[590,18832+57]..[590,18832+69])
                        Pexp_setfield
                        expression (lib/types.ml[590,18832+57]..[590,18832+59])
                          Pexp_ident "ty" (lib/types.ml[590,18832+57]..[590,18832+59])
                        "desc" (lib/types.ml[590,18832+60]..[590,18832+64])
                        expression (lib/types.ml[590,18832+68]..[590,18832+69])
                          Pexp_ident "d" (lib/types.ml[590,18832+68]..[590,18832+69])
            ]
          structure_item (lib/types.ml[591,18902+2]..[591,18902+38])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[591,18902+6]..[591,18902+15])
                  Ppat_var "set_level" (lib/types.ml[591,18902+6]..[591,18902+15])
                expression (lib/types.ml[591,18902+16]..[591,18902+38]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[591,18902+16]..[591,18902+18])
                      Nolabel
                      None
                      pattern (lib/types.ml[591,18902+16]..[591,18902+18])
                        Ppat_var "ty" (lib/types.ml[591,18902+16]..[591,18902+18])
                    Pparam_val (lib/types.ml[591,18902+19]..[591,18902+21])
                      Nolabel
                      None
                      pattern (lib/types.ml[591,18902+19]..[591,18902+21])
                        Ppat_var "lv" (lib/types.ml[591,18902+19]..[591,18902+21])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[591,18902+24]..[591,18902+38])
                      Pexp_setfield
                      expression (lib/types.ml[591,18902+24]..[591,18902+26])
                        Pexp_ident "ty" (lib/types.ml[591,18902+24]..[591,18902+26])
                      "level" (lib/types.ml[591,18902+27]..[591,18902+32])
                      expression (lib/types.ml[591,18902+36]..[591,18902+38])
                        Pexp_ident "lv" (lib/types.ml[591,18902+36]..[591,18902+38])
            ]
          structure_item (lib/types.ml[592,18941+2]..[592,18941+38])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[592,18941+6]..[592,18941+15])
                  Ppat_var "set_scope" (lib/types.ml[592,18941+6]..[592,18941+15])
                expression (lib/types.ml[592,18941+16]..[592,18941+38]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[592,18941+16]..[592,18941+18])
                      Nolabel
                      None
                      pattern (lib/types.ml[592,18941+16]..[592,18941+18])
                        Ppat_var "ty" (lib/types.ml[592,18941+16]..[592,18941+18])
                    Pparam_val (lib/types.ml[592,18941+19]..[592,18941+21])
                      Nolabel
                      None
                      pattern (lib/types.ml[592,18941+19]..[592,18941+21])
                        Ppat_var "sc" (lib/types.ml[592,18941+19]..[592,18941+21])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[592,18941+24]..[592,18941+38])
                      Pexp_setfield
                      expression (lib/types.ml[592,18941+24]..[592,18941+26])
                        Pexp_ident "ty" (lib/types.ml[592,18941+24]..[592,18941+26])
                      "scope" (lib/types.ml[592,18941+27]..[592,18941+32])
                      expression (lib/types.ml[592,18941+36]..[592,18941+38])
                        Pexp_ident "sc" (lib/types.ml[592,18941+36]..[592,18941+38])
            ]
          structure_item (lib/types.ml[593,18980+2]..[593,18980+20])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[593,18980+6]..[593,18980+12])
                  Ppat_var "coerce" (lib/types.ml[593,18980+6]..[593,18980+12])
                expression (lib/types.ml[593,18980+13]..[593,18980+20]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[593,18980+13]..[593,18980+15])
                      Nolabel
                      None
                      pattern (lib/types.ml[593,18980+13]..[593,18980+15])
                        Ppat_var "ty" (lib/types.ml[593,18980+13]..[593,18980+15])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[593,18980+18]..[593,18980+20])
                      Pexp_ident "ty" (lib/types.ml[593,18980+18]..[593,18980+20])
            ]
          structure_item (lib/types.ml[594,19001+2]..[594,19001+17])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[594,19001+6]..[594,19001+10])
                  Ppat_var "repr" (lib/types.ml[594,19001+6]..[594,19001+10])
                expression (lib/types.ml[594,19001+13]..[594,19001+17])
                  Pexp_ident "repr" (lib/types.ml[594,19001+13]..[594,19001+17])
            ]
          structure_item (lib/types.ml[595,19019+2]..[595,19019+23])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/types.ml[595,19019+6]..[595,19019+15])
                  Ppat_var "type_expr" (lib/types.ml[595,19019+6]..[595,19019+15])
                expression (lib/types.ml[595,19019+16]..[595,19019+23]) ghost
                  Pexp_function
                  [
                    Pparam_val (lib/types.ml[595,19019+16]..[595,19019+18])
                      Nolabel
                      None
                      pattern (lib/types.ml[595,19019+16]..[595,19019+18])
                        Ppat_var "ty" (lib/types.ml[595,19019+16]..[595,19019+18])
                  ]
                  None
                  Pfunction_body
                    expression (lib/types.ml[595,19019+21]..[595,19019+23])
                      Pexp_ident "ty" (lib/types.ml[595,19019+21]..[595,19019+23])
            ]
        ]
  structure_item (lib/types.ml[600,19111+0]..[600,19111+50])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[600,19111+4]..[600,19111+11])
          Ppat_var "eq_type" (lib/types.ml[600,19111+4]..[600,19111+11])
        expression (lib/types.ml[600,19111+12]..[600,19111+50]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[600,19111+12]..[600,19111+14])
              Nolabel
              None
              pattern (lib/types.ml[600,19111+12]..[600,19111+14])
                Ppat_var "t1" (lib/types.ml[600,19111+12]..[600,19111+14])
            Pparam_val (lib/types.ml[600,19111+15]..[600,19111+17])
              Nolabel
              None
              pattern (lib/types.ml[600,19111+15]..[600,19111+17])
                Ppat_var "t2" (lib/types.ml[600,19111+15]..[600,19111+17])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[600,19111+20]..[600,19111+50])
              Pexp_apply
              expression (lib/types.ml[600,19111+29]..[600,19111+31])
                Pexp_ident "||" (lib/types.ml[600,19111+29]..[600,19111+31])
              [
                <arg>
                Nolabel
                  expression (lib/types.ml[600,19111+20]..[600,19111+28])
                    Pexp_apply
                    expression (lib/types.ml[600,19111+23]..[600,19111+25])
                      Pexp_ident "==" (lib/types.ml[600,19111+23]..[600,19111+25])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[600,19111+20]..[600,19111+22])
                          Pexp_ident "t1" (lib/types.ml[600,19111+20]..[600,19111+22])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[600,19111+26]..[600,19111+28])
                          Pexp_ident "t2" (lib/types.ml[600,19111+26]..[600,19111+28])
                    ]
                <arg>
                Nolabel
                  expression (lib/types.ml[600,19111+32]..[600,19111+50])
                    Pexp_apply
                    expression (lib/types.ml[600,19111+40]..[600,19111+42])
                      Pexp_ident "==" (lib/types.ml[600,19111+40]..[600,19111+42])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[600,19111+32]..[600,19111+39])
                          Pexp_apply
                          expression (lib/types.ml[600,19111+32]..[600,19111+36])
                            Pexp_ident "repr" (lib/types.ml[600,19111+32]..[600,19111+36])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[600,19111+37]..[600,19111+39])
                                Pexp_ident "t1" (lib/types.ml[600,19111+37]..[600,19111+39])
                          ]
                      <arg>
                      Nolabel
                        expression (lib/types.ml[600,19111+43]..[600,19111+50])
                          Pexp_apply
                          expression (lib/types.ml[600,19111+43]..[600,19111+47])
                            Pexp_ident "repr" (lib/types.ml[600,19111+43]..[600,19111+47])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[600,19111+48]..[600,19111+50])
                                Pexp_ident "t2" (lib/types.ml[600,19111+48]..[600,19111+50])
                          ]
                    ]
              ]
    ]
  structure_item (lib/types.ml[601,19162+0]..[601,19162+56])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[601,19162+4]..[601,19162+16])
          Ppat_var "compare_type" (lib/types.ml[601,19162+4]..[601,19162+16])
        expression (lib/types.ml[601,19162+17]..[601,19162+56]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[601,19162+17]..[601,19162+19])
              Nolabel
              None
              pattern (lib/types.ml[601,19162+17]..[601,19162+19])
                Ppat_var "t1" (lib/types.ml[601,19162+17]..[601,19162+19])
            Pparam_val (lib/types.ml[601,19162+20]..[601,19162+22])
              Nolabel
              None
              pattern (lib/types.ml[601,19162+20]..[601,19162+22])
                Ppat_var "t2" (lib/types.ml[601,19162+20]..[601,19162+22])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[601,19162+25]..[601,19162+56])
              Pexp_apply
              expression (lib/types.ml[601,19162+25]..[601,19162+32])
                Pexp_ident "compare" (lib/types.ml[601,19162+25]..[601,19162+32])
              [
                <arg>
                Nolabel
                  expression (lib/types.ml[601,19162+33]..[601,19162+44])
                    Pexp_apply
                    expression (lib/types.ml[601,19162+34]..[601,19162+40])
                      Pexp_ident "get_id" (lib/types.ml[601,19162+34]..[601,19162+40])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[601,19162+41]..[601,19162+43])
                          Pexp_ident "t1" (lib/types.ml[601,19162+41]..[601,19162+43])
                    ]
                <arg>
                Nolabel
                  expression (lib/types.ml[601,19162+45]..[601,19162+56])
                    Pexp_apply
                    expression (lib/types.ml[601,19162+46]..[601,19162+52])
                      Pexp_ident "get_id" (lib/types.ml[601,19162+46]..[601,19162+52])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[601,19162+53]..[601,19162+55])
                          Pexp_ident "t2" (lib/types.ml[601,19162+53]..[601,19162+55])
                    ]
              ]
    ]
  structure_item (lib/types.ml[605,19268+0]..[607,19360+57])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[605,19268+4]..[605,19268+14])
          Ppat_var "create_row" (lib/types.ml[605,19268+4]..[605,19268+14])
        expression (lib/types.ml[605,19268+15]..[607,19360+57]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[605,19268+15]..[605,19268+22])
              Labelled "fields"
              None
              pattern (lib/types.ml[605,19268+16]..[605,19268+22])
                Ppat_var "fields" (lib/types.ml[605,19268+16]..[605,19268+22])
            Pparam_val (lib/types.ml[605,19268+23]..[605,19268+28])
              Labelled "more"
              None
              pattern (lib/types.ml[605,19268+24]..[605,19268+28])
                Ppat_var "more" (lib/types.ml[605,19268+24]..[605,19268+28])
            Pparam_val (lib/types.ml[605,19268+29]..[605,19268+36])
              Labelled "closed"
              None
              pattern (lib/types.ml[605,19268+30]..[605,19268+36])
                Ppat_var "closed" (lib/types.ml[605,19268+30]..[605,19268+36])
            Pparam_val (lib/types.ml[605,19268+37]..[605,19268+43])
              Labelled "fixed"
              None
              pattern (lib/types.ml[605,19268+38]..[605,19268+43])
                Ppat_var "fixed" (lib/types.ml[605,19268+38]..[605,19268+43])
            Pparam_val (lib/types.ml[605,19268+44]..[605,19268+49])
              Labelled "name"
              None
              pattern (lib/types.ml[605,19268+45]..[605,19268+49])
                Ppat_var "name" (lib/types.ml[605,19268+45]..[605,19268+49])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[606,19320+4]..[607,19360+57])
              Pexp_record
              [
                "row_fields" (lib/types.ml[606,19320+6]..[606,19320+16])
                  expression (lib/types.ml[606,19320+17]..[606,19320+23])
                    Pexp_ident "fields" (lib/types.ml[606,19320+17]..[606,19320+23])
                "row_more" (lib/types.ml[606,19320+25]..[606,19320+33])
                  expression (lib/types.ml[606,19320+34]..[606,19320+38])
                    Pexp_ident "more" (lib/types.ml[606,19320+34]..[606,19320+38])
                "row_closed" (lib/types.ml[607,19360+6]..[607,19360+16])
                  expression (lib/types.ml[607,19360+17]..[607,19360+23])
                    Pexp_ident "closed" (lib/types.ml[607,19360+17]..[607,19360+23])
                "row_fixed" (lib/types.ml[607,19360+25]..[607,19360+34])
                  expression (lib/types.ml[607,19360+35]..[607,19360+40])
                    Pexp_ident "fixed" (lib/types.ml[607,19360+35]..[607,19360+40])
                "row_name" (lib/types.ml[607,19360+42]..[607,19360+50])
                  expression (lib/types.ml[607,19360+51]..[607,19360+55])
                    Pexp_ident "name" (lib/types.ml[607,19360+51]..[607,19360+55])
              ]
              None
    ]
  structure_item (lib/types.ml[610,19471+0]..[615,19600+20])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[610,19471+8]..[610,19471+18])
          Ppat_var "row_fields" (lib/types.ml[610,19471+8]..[610,19471+18])
        expression (lib/types.ml[610,19471+19]..[615,19600+20]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[610,19471+19]..[610,19471+22])
              Nolabel
              None
              pattern (lib/types.ml[610,19471+19]..[610,19471+22])
                Ppat_var "row" (lib/types.ml[610,19471+19]..[610,19471+22])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[611,19496+2]..[615,19600+20])
              Pexp_match
              expression (lib/types.ml[611,19496+8]..[611,19496+29])
                Pexp_apply
                expression (lib/types.ml[611,19496+8]..[611,19496+16])
                  Pexp_ident "get_desc" (lib/types.ml[611,19496+8]..[611,19496+16])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[611,19496+17]..[611,19496+29])
                      Pexp_field
                      expression (lib/types.ml[611,19496+17]..[611,19496+20])
                        Pexp_ident "row" (lib/types.ml[611,19496+17]..[611,19496+20])
                      "row_more" (lib/types.ml[611,19496+21]..[611,19496+29])
                ]
              [
                <case>
                  pattern (lib/types.ml[612,19531+4]..[612,19531+17])
                    Ppat_construct "Tvariant" (lib/types.ml[612,19531+4]..[612,19531+12])
                    Some
                      []
                      pattern (lib/types.ml[612,19531+13]..[612,19531+17])
                        Ppat_var "row'" (lib/types.ml[612,19531+13]..[612,19531+17])
                  expression (lib/types.ml[613,19552+6]..[613,19552+38])
                    Pexp_apply
                    expression (lib/types.ml[613,19552+21]..[613,19552+22])
                      Pexp_ident "@" (lib/types.ml[613,19552+21]..[613,19552+22])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[613,19552+6]..[613,19552+20])
                          Pexp_field
                          expression (lib/types.ml[613,19552+6]..[613,19552+9])
                            Pexp_ident "row" (lib/types.ml[613,19552+6]..[613,19552+9])
                          "row_fields" (lib/types.ml[613,19552+10]..[613,19552+20])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[613,19552+23]..[613,19552+38])
                          Pexp_apply
                          expression (lib/types.ml[613,19552+23]..[613,19552+33])
                            Pexp_ident "row_fields" (lib/types.ml[613,19552+23]..[613,19552+33])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[613,19552+34]..[613,19552+38])
                                Pexp_ident "row'" (lib/types.ml[613,19552+34]..[613,19552+38])
                          ]
                    ]
                <case>
                  pattern (lib/types.ml[614,19591+4]..[614,19591+5])
                    Ppat_any
                  expression (lib/types.ml[615,19600+6]..[615,19600+20])
                    Pexp_field
                    expression (lib/types.ml[615,19600+6]..[615,19600+9])
                      Pexp_ident "row" (lib/types.ml[615,19600+6]..[615,19600+9])
                    "row_fields" (lib/types.ml[615,19600+10]..[615,19600+20])
              ]
    ]
  structure_item (lib/types.ml[617,19622+0]..[620,19735+12])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[617,19622+8]..[617,19622+26])
          Ppat_var "row_repr_no_fields" (lib/types.ml[617,19622+8]..[617,19622+26])
        expression (lib/types.ml[617,19622+27]..[620,19735+12]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[617,19622+27]..[617,19622+30])
              Nolabel
              None
              pattern (lib/types.ml[617,19622+27]..[617,19622+30])
                Ppat_var "row" (lib/types.ml[617,19622+27]..[617,19622+30])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[618,19655+2]..[620,19735+12])
              Pexp_match
              expression (lib/types.ml[618,19655+8]..[618,19655+29])
                Pexp_apply
                expression (lib/types.ml[618,19655+8]..[618,19655+16])
                  Pexp_ident "get_desc" (lib/types.ml[618,19655+8]..[618,19655+16])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[618,19655+17]..[618,19655+29])
                      Pexp_field
                      expression (lib/types.ml[618,19655+17]..[618,19655+20])
                        Pexp_ident "row" (lib/types.ml[618,19655+17]..[618,19655+20])
                      "row_more" (lib/types.ml[618,19655+21]..[618,19655+29])
                ]
              [
                <case>
                  pattern (lib/types.ml[619,19690+4]..[619,19690+17])
                    Ppat_construct "Tvariant" (lib/types.ml[619,19690+4]..[619,19690+12])
                    Some
                      []
                      pattern (lib/types.ml[619,19690+13]..[619,19690+17])
                        Ppat_var "row'" (lib/types.ml[619,19690+13]..[619,19690+17])
                  expression (lib/types.ml[619,19690+21]..[619,19690+44])
                    Pexp_apply
                    expression (lib/types.ml[619,19690+21]..[619,19690+39])
                      Pexp_ident "row_repr_no_fields" (lib/types.ml[619,19690+21]..[619,19690+39])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[619,19690+40]..[619,19690+44])
                          Pexp_ident "row'" (lib/types.ml[619,19690+40]..[619,19690+44])
                    ]
                <case>
                  pattern (lib/types.ml[620,19735+4]..[620,19735+5])
                    Ppat_any
                  expression (lib/types.ml[620,19735+9]..[620,19735+12])
                    Pexp_ident "row" (lib/types.ml[620,19735+9]..[620,19735+12])
              ]
    ]
  structure_item (lib/types.ml[622,19749+0]..[622,19749+52])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[622,19749+4]..[622,19749+12])
          Ppat_var "row_more" (lib/types.ml[622,19749+4]..[622,19749+12])
        expression (lib/types.ml[622,19749+13]..[622,19749+52]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[622,19749+13]..[622,19749+16])
              Nolabel
              None
              pattern (lib/types.ml[622,19749+13]..[622,19749+16])
                Ppat_var "row" (lib/types.ml[622,19749+13]..[622,19749+16])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[622,19749+19]..[622,19749+52])
              Pexp_field
              expression (lib/types.ml[622,19749+19]..[622,19749+43])
                Pexp_apply
                expression (lib/types.ml[622,19749+20]..[622,19749+38])
                  Pexp_ident "row_repr_no_fields" (lib/types.ml[622,19749+20]..[622,19749+38])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[622,19749+39]..[622,19749+42])
                      Pexp_ident "row" (lib/types.ml[622,19749+39]..[622,19749+42])
                ]
              "row_more" (lib/types.ml[622,19749+44]..[622,19749+52])
    ]
  structure_item (lib/types.ml[623,19802+0]..[623,19802+56])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[623,19802+4]..[623,19802+14])
          Ppat_var "row_closed" (lib/types.ml[623,19802+4]..[623,19802+14])
        expression (lib/types.ml[623,19802+15]..[623,19802+56]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[623,19802+15]..[623,19802+18])
              Nolabel
              None
              pattern (lib/types.ml[623,19802+15]..[623,19802+18])
                Ppat_var "row" (lib/types.ml[623,19802+15]..[623,19802+18])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[623,19802+21]..[623,19802+56])
              Pexp_field
              expression (lib/types.ml[623,19802+21]..[623,19802+45])
                Pexp_apply
                expression (lib/types.ml[623,19802+22]..[623,19802+40])
                  Pexp_ident "row_repr_no_fields" (lib/types.ml[623,19802+22]..[623,19802+40])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[623,19802+41]..[623,19802+44])
                      Pexp_ident "row" (lib/types.ml[623,19802+41]..[623,19802+44])
                ]
              "row_closed" (lib/types.ml[623,19802+46]..[623,19802+56])
    ]
  structure_item (lib/types.ml[624,19859+0]..[624,19859+54])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[624,19859+4]..[624,19859+13])
          Ppat_var "row_fixed" (lib/types.ml[624,19859+4]..[624,19859+13])
        expression (lib/types.ml[624,19859+14]..[624,19859+54]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[624,19859+14]..[624,19859+17])
              Nolabel
              None
              pattern (lib/types.ml[624,19859+14]..[624,19859+17])
                Ppat_var "row" (lib/types.ml[624,19859+14]..[624,19859+17])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[624,19859+20]..[624,19859+54])
              Pexp_field
              expression (lib/types.ml[624,19859+20]..[624,19859+44])
                Pexp_apply
                expression (lib/types.ml[624,19859+21]..[624,19859+39])
                  Pexp_ident "row_repr_no_fields" (lib/types.ml[624,19859+21]..[624,19859+39])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[624,19859+40]..[624,19859+43])
                      Pexp_ident "row" (lib/types.ml[624,19859+40]..[624,19859+43])
                ]
              "row_fixed" (lib/types.ml[624,19859+45]..[624,19859+54])
    ]
  structure_item (lib/types.ml[625,19914+0]..[625,19914+52])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[625,19914+4]..[625,19914+12])
          Ppat_var "row_name" (lib/types.ml[625,19914+4]..[625,19914+12])
        expression (lib/types.ml[625,19914+13]..[625,19914+52]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[625,19914+13]..[625,19914+16])
              Nolabel
              None
              pattern (lib/types.ml[625,19914+13]..[625,19914+16])
                Ppat_var "row" (lib/types.ml[625,19914+13]..[625,19914+16])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[625,19914+19]..[625,19914+52])
              Pexp_field
              expression (lib/types.ml[625,19914+19]..[625,19914+43])
                Pexp_apply
                expression (lib/types.ml[625,19914+20]..[625,19914+38])
                  Pexp_ident "row_repr_no_fields" (lib/types.ml[625,19914+20]..[625,19914+38])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[625,19914+39]..[625,19914+42])
                      Pexp_ident "row" (lib/types.ml[625,19914+39]..[625,19914+42])
                ]
              "row_name" (lib/types.ml[625,19914+44]..[625,19914+52])
    ]
  structure_item (lib/types.ml[627,19968+0]..[635,20227+24])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[627,19968+8]..[627,19968+21])
          Ppat_var "get_row_field" (lib/types.ml[627,19968+8]..[627,19968+21])
        expression (lib/types.ml[627,19968+22]..[635,20227+24]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[627,19968+22]..[627,19968+25])
              Nolabel
              None
              pattern (lib/types.ml[627,19968+22]..[627,19968+25])
                Ppat_var "tag" (lib/types.ml[627,19968+22]..[627,19968+25])
            Pparam_val (lib/types.ml[627,19968+26]..[627,19968+29])
              Nolabel
              None
              pattern (lib/types.ml[627,19968+26]..[627,19968+29])
                Ppat_var "row" (lib/types.ml[627,19968+26]..[627,19968+29])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[628,20000+2]..[635,20227+24])
              Pexp_let Rec
              [
                <def>
                  pattern (lib/types.ml[628,20000+10]..[628,20000+14])
                    Ppat_var "find" (lib/types.ml[628,20000+10]..[628,20000+14])
                  expression (lib/types.ml[628,20000+17]..[634,20203+23])
                    Pexp_function
                    []
                    None
                    Pfunction_cases (lib/types.ml[628,20000+17]..[634,20203+23])
                      [
                        <case>
                          pattern (lib/types.ml[629,20026+6]..[629,20026+24])
                            Ppat_construct "::" (lib/types.ml[629,20026+15]..[629,20026+17])
                            Some
                              []
                              pattern (lib/types.ml[629,20026+6]..[629,20026+24]) ghost
                                Ppat_tuple
                                [
                                  pattern (lib/types.ml[629,20026+6]..[629,20026+14])
                                    Ppat_tuple
                                    [
                                      pattern (lib/types.ml[629,20026+7]..[629,20026+11])
                                        Ppat_var "tag'" (lib/types.ml[629,20026+7]..[629,20026+11])
                                      pattern (lib/types.ml[629,20026+12]..[629,20026+13])
                                        Ppat_var "f" (lib/types.ml[629,20026+12]..[629,20026+13])
                                    ]
                                  pattern (lib/types.ml[629,20026+18]..[629,20026+24])
                                    Ppat_var "fields" (lib/types.ml[629,20026+18]..[629,20026+24])
                                ]
                          expression (lib/types.ml[630,20054+8]..[630,20054+45])
                            Pexp_ifthenelse
                            expression (lib/types.ml[630,20054+11]..[630,20054+21])
                              Pexp_apply
                              expression (lib/types.ml[630,20054+15]..[630,20054+16])
                                Pexp_ident "=" (lib/types.ml[630,20054+15]..[630,20054+16])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[630,20054+11]..[630,20054+14])
                                    Pexp_ident "tag" (lib/types.ml[630,20054+11]..[630,20054+14])
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[630,20054+17]..[630,20054+21])
                                    Pexp_ident "tag'" (lib/types.ml[630,20054+17]..[630,20054+21])
                              ]
                            expression (lib/types.ml[630,20054+27]..[630,20054+28])
                              Pexp_ident "f" (lib/types.ml[630,20054+27]..[630,20054+28])
                            Some
                              expression (lib/types.ml[630,20054+34]..[630,20054+45])
                                Pexp_apply
                                expression (lib/types.ml[630,20054+34]..[630,20054+38])
                                  Pexp_ident "find" (lib/types.ml[630,20054+34]..[630,20054+38])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/types.ml[630,20054+39]..[630,20054+45])
                                      Pexp_ident "fields" (lib/types.ml[630,20054+39]..[630,20054+45])
                                ]
                        <case>
                          pattern (lib/types.ml[631,20100+6]..[631,20100+8])
                            Ppat_construct "[]" (lib/types.ml[631,20100+6]..[631,20100+8])
                            None
                          expression (lib/types.ml[632,20112+8]..[634,20203+23])
                            Pexp_match
                            expression (lib/types.ml[632,20112+14]..[632,20112+35])
                              Pexp_apply
                              expression (lib/types.ml[632,20112+14]..[632,20112+22])
                                Pexp_ident "get_desc" (lib/types.ml[632,20112+14]..[632,20112+22])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[632,20112+23]..[632,20112+35])
                                    Pexp_field
                                    expression (lib/types.ml[632,20112+23]..[632,20112+26])
                                      Pexp_ident "row" (lib/types.ml[632,20112+23]..[632,20112+26])
                                    "row_more" (lib/types.ml[632,20112+27]..[632,20112+35])
                              ]
                            [
                              <case>
                                pattern (lib/types.ml[633,20153+10]..[633,20153+23])
                                  Ppat_construct "Tvariant" (lib/types.ml[633,20153+10]..[633,20153+18])
                                  Some
                                    []
                                    pattern (lib/types.ml[633,20153+19]..[633,20153+23])
                                      Ppat_var "row'" (lib/types.ml[633,20153+19]..[633,20153+23])
                                expression (lib/types.ml[633,20153+27]..[633,20153+49])
                                  Pexp_apply
                                  expression (lib/types.ml[633,20153+27]..[633,20153+40])
                                    Pexp_ident "get_row_field" (lib/types.ml[633,20153+27]..[633,20153+40])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/types.ml[633,20153+41]..[633,20153+44])
                                        Pexp_ident "tag" (lib/types.ml[633,20153+41]..[633,20153+44])
                                    <arg>
                                    Nolabel
                                      expression (lib/types.ml[633,20153+45]..[633,20153+49])
                                        Pexp_ident "row'" (lib/types.ml[633,20153+45]..[633,20153+49])
                                  ]
                              <case>
                                pattern (lib/types.ml[634,20203+10]..[634,20203+11])
                                  Ppat_any
                                expression (lib/types.ml[634,20203+15]..[634,20203+23])
                                  Pexp_construct "RFabsent" (lib/types.ml[634,20203+15]..[634,20203+23])
                                  None
                            ]
                      ]
              ]
              expression (lib/types.ml[635,20227+5]..[635,20227+24])
                Pexp_apply
                expression (lib/types.ml[635,20227+5]..[635,20227+9])
                  Pexp_ident "find" (lib/types.ml[635,20227+5]..[635,20227+9])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[635,20227+10]..[635,20227+24])
                      Pexp_field
                      expression (lib/types.ml[635,20227+10]..[635,20227+13])
                        Pexp_ident "row" (lib/types.ml[635,20227+10]..[635,20227+13])
                      "row_fields" (lib/types.ml[635,20227+14]..[635,20227+24])
                ]
    ]
  structure_item (lib/types.ml[637,20253+0]..[640,20360+33])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[637,20253+4]..[637,20253+16])
          Ppat_var "set_row_name" (lib/types.ml[637,20253+4]..[637,20253+16])
        expression (lib/types.ml[637,20253+17]..[640,20360+33]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[637,20253+17]..[637,20253+20])
              Nolabel
              None
              pattern (lib/types.ml[637,20253+17]..[637,20253+20])
                Ppat_var "row" (lib/types.ml[637,20253+17]..[637,20253+20])
            Pparam_val (lib/types.ml[637,20253+21]..[637,20253+29])
              Nolabel
              None
              pattern (lib/types.ml[637,20253+21]..[637,20253+29])
                Ppat_var "row_name" (lib/types.ml[637,20253+21]..[637,20253+29])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[638,20285+2]..[640,20360+33])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/types.ml[638,20285+6]..[638,20285+16])
                    Ppat_var "row_fields" (lib/types.ml[638,20285+6]..[638,20285+16])
                  expression (lib/types.ml[638,20285+19]..[638,20285+33])
                    Pexp_apply
                    expression (lib/types.ml[638,20285+19]..[638,20285+29])
                      Pexp_ident "row_fields" (lib/types.ml[638,20285+19]..[638,20285+29])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[638,20285+30]..[638,20285+33])
                          Pexp_ident "row" (lib/types.ml[638,20285+30]..[638,20285+33])
                    ]
              ]
              expression (lib/types.ml[639,20322+2]..[640,20360+33])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lib/types.ml[639,20322+6]..[639,20322+9])
                      Ppat_var "row" (lib/types.ml[639,20322+6]..[639,20322+9])
                    expression (lib/types.ml[639,20322+12]..[639,20322+34])
                      Pexp_apply
                      expression (lib/types.ml[639,20322+12]..[639,20322+30])
                        Pexp_ident "row_repr_no_fields" (lib/types.ml[639,20322+12]..[639,20322+30])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[639,20322+31]..[639,20322+34])
                            Pexp_ident "row" (lib/types.ml[639,20322+31]..[639,20322+34])
                      ]
                ]
                expression (lib/types.ml[640,20360+2]..[640,20360+33])
                  Pexp_record
                  [
                    "row_fields" (lib/types.ml[640,20360+12]..[640,20360+22]) ghost
                      expression (lib/types.ml[640,20360+12]..[640,20360+22])
                        Pexp_ident "row_fields" (lib/types.ml[640,20360+12]..[640,20360+22])
                    "row_name" (lib/types.ml[640,20360+24]..[640,20360+32]) ghost
                      expression (lib/types.ml[640,20360+24]..[640,20360+32])
                        Pexp_ident "row_name" (lib/types.ml[640,20360+24]..[640,20360+32])
                  ]
                  Some
                    expression (lib/types.ml[640,20360+3]..[640,20360+6])
                      Pexp_ident "row" (lib/types.ml[640,20360+3]..[640,20360+6])
    ]
  structure_item (lib/types.ml[642,20395+0]..[647,20563+52])
    Pstr_type Rec
    [
      type_declaration "row_desc_repr" (lib/types.ml[642,20395+5]..[642,20395+18]) (lib/types.ml[642,20395+0]..[647,20563+52])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[643,20416+4]..[647,20563+52])
                "Row" (lib/types.ml[643,20416+4]..[643,20416+7])
                [
                  (lib/types.ml[643,20416+13]..[643,20416+46])
                    Immutable
                    "fields" (lib/types.ml[643,20416+13]..[643,20416+19])                    core_type (lib/types.ml[643,20416+21]..[643,20416+45])
                      Ptyp_constr "list" (lib/types.ml[643,20416+41]..[643,20416+45])
                      [
                        core_type (lib/types.ml[643,20416+22]..[643,20416+39])
                          Ptyp_tuple
                          [
                            core_type (lib/types.ml[643,20416+22]..[643,20416+27])
                              Ptyp_constr "label" (lib/types.ml[643,20416+22]..[643,20416+27])
                              []
                            core_type (lib/types.ml[643,20416+30]..[643,20416+39])
                              Ptyp_constr "row_field" (lib/types.ml[643,20416+30]..[643,20416+39])
                              []
                          ]
                      ]
                  (lib/types.ml[644,20463+13]..[644,20463+28])
                    Immutable
                    "more" (lib/types.ml[644,20463+13]..[644,20463+17])                    core_type (lib/types.ml[644,20463+18]..[644,20463+27])
                      Ptyp_constr "type_expr" (lib/types.ml[644,20463+18]..[644,20463+27])
                      []
                  (lib/types.ml[645,20492+13]..[645,20492+25])
                    Immutable
                    "closed" (lib/types.ml[645,20492+13]..[645,20492+19])                    core_type (lib/types.ml[645,20492+20]..[645,20492+24])
                      Ptyp_constr "bool" (lib/types.ml[645,20492+20]..[645,20492+24])
                      []
                  (lib/types.ml[646,20518+13]..[646,20518+44])
                    Immutable
                    "fixed" (lib/types.ml[646,20518+13]..[646,20518+18])                    core_type (lib/types.ml[646,20518+19]..[646,20518+43])
                      Ptyp_constr "option" (lib/types.ml[646,20518+37]..[646,20518+43])
                      [
                        core_type (lib/types.ml[646,20518+19]..[646,20518+36])
                          Ptyp_constr "fixed_explanation" (lib/types.ml[646,20518+19]..[646,20518+36])
                          []
                      ]
                  (lib/types.ml[647,20563+13]..[647,20563+50])
                    Immutable
                    "name" (lib/types.ml[647,20563+13]..[647,20563+17])                    core_type (lib/types.ml[647,20563+18]..[647,20563+50])
                      Ptyp_constr "option" (lib/types.ml[647,20563+44]..[647,20563+50])
                      [
                        core_type (lib/types.ml[647,20563+19]..[647,20563+42])
                          Ptyp_tuple
                          [
                            core_type (lib/types.ml[647,20563+19]..[647,20563+25])
                              Ptyp_constr "Path.t" (lib/types.ml[647,20563+19]..[647,20563+25])
                              []
                            core_type (lib/types.ml[647,20563+28]..[647,20563+42])
                              Ptyp_constr "list" (lib/types.ml[647,20563+38]..[647,20563+42])
                              [
                                core_type (lib/types.ml[647,20563+28]..[647,20563+37])
                                  Ptyp_constr "type_expr" (lib/types.ml[647,20563+28]..[647,20563+37])
                                  []
                              ]
                          ]
                      ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[649,20617+0]..[656,20816+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[649,20617+4]..[649,20617+12])
          Ppat_var "row_repr" (lib/types.ml[649,20617+4]..[649,20617+12])
        expression (lib/types.ml[649,20617+13]..[656,20816+29]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[649,20617+13]..[649,20617+16])
              Nolabel
              None
              pattern (lib/types.ml[649,20617+13]..[649,20617+16])
                Ppat_var "row" (lib/types.ml[649,20617+13]..[649,20617+16])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[650,20636+2]..[656,20816+29])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/types.ml[650,20636+6]..[650,20636+12])
                    Ppat_var "fields" (lib/types.ml[650,20636+6]..[650,20636+12])
                  expression (lib/types.ml[650,20636+15]..[650,20636+29])
                    Pexp_apply
                    expression (lib/types.ml[650,20636+15]..[650,20636+25])
                      Pexp_ident "row_fields" (lib/types.ml[650,20636+15]..[650,20636+25])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[650,20636+26]..[650,20636+29])
                          Pexp_ident "row" (lib/types.ml[650,20636+26]..[650,20636+29])
                    ]
              ]
              expression (lib/types.ml[651,20669+2]..[656,20816+29])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lib/types.ml[651,20669+6]..[651,20669+9])
                      Ppat_var "row" (lib/types.ml[651,20669+6]..[651,20669+9])
                    expression (lib/types.ml[651,20669+12]..[651,20669+34])
                      Pexp_apply
                      expression (lib/types.ml[651,20669+12]..[651,20669+30])
                        Pexp_ident "row_repr_no_fields" (lib/types.ml[651,20669+12]..[651,20669+30])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[651,20669+31]..[651,20669+34])
                            Pexp_ident "row" (lib/types.ml[651,20669+31]..[651,20669+34])
                      ]
                ]
                expression (lib/types.ml[652,20707+2]..[656,20816+29])
                  Pexp_construct "Row" (lib/types.ml[652,20707+2]..[652,20707+5])
                  Some
                    expression (lib/types.ml[652,20707+6]..[656,20816+29])
                      Pexp_record
                      [
                        "fields" (lib/types.ml[652,20707+8]..[652,20707+14]) ghost
                          expression (lib/types.ml[652,20707+8]..[652,20707+14])
                            Pexp_ident "fields" (lib/types.ml[652,20707+8]..[652,20707+14])
                        "more" (lib/types.ml[653,20723+8]..[653,20723+12])
                          expression (lib/types.ml[653,20723+15]..[653,20723+27])
                            Pexp_field
                            expression (lib/types.ml[653,20723+15]..[653,20723+18])
                              Pexp_ident "row" (lib/types.ml[653,20723+15]..[653,20723+18])
                            "row_more" (lib/types.ml[653,20723+19]..[653,20723+27])
                        "closed" (lib/types.ml[654,20752+8]..[654,20752+14])
                          expression (lib/types.ml[654,20752+17]..[654,20752+31])
                            Pexp_field
                            expression (lib/types.ml[654,20752+17]..[654,20752+20])
                              Pexp_ident "row" (lib/types.ml[654,20752+17]..[654,20752+20])
                            "row_closed" (lib/types.ml[654,20752+21]..[654,20752+31])
                        "fixed" (lib/types.ml[655,20785+8]..[655,20785+13])
                          expression (lib/types.ml[655,20785+16]..[655,20785+29])
                            Pexp_field
                            expression (lib/types.ml[655,20785+16]..[655,20785+19])
                              Pexp_ident "row" (lib/types.ml[655,20785+16]..[655,20785+19])
                            "row_fixed" (lib/types.ml[655,20785+20]..[655,20785+29])
                        "name" (lib/types.ml[656,20816+8]..[656,20816+12])
                          expression (lib/types.ml[656,20816+15]..[656,20816+27])
                            Pexp_field
                            expression (lib/types.ml[656,20816+15]..[656,20816+18])
                              Pexp_ident "row" (lib/types.ml[656,20816+15]..[656,20816+18])
                            "row_name" (lib/types.ml[656,20816+19]..[656,20816+27])
                      ]
                      None
    ]
  structure_item (lib/types.ml[658,20847+0]..[664,21091+11])
    Pstr_type Rec
    [
      type_declaration "row_field_view" (lib/types.ml[658,20847+5]..[658,20847+19]) (lib/types.ml[658,20847+0]..[664,21091+11])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/types.ml[659,20869+4]..[659,20869+32])
                "Rpresent" (lib/types.ml[659,20869+4]..[659,20869+12])
                [
                  core_type (lib/types.ml[659,20869+16]..[659,20869+32])
                    Ptyp_constr "option" (lib/types.ml[659,20869+26]..[659,20869+32])
                    [
                      core_type (lib/types.ml[659,20869+16]..[659,20869+25])
                        Ptyp_constr "type_expr" (lib/types.ml[659,20869+16]..[659,20869+25])
                        []
                    ]
                ]
                None
              (lib/types.ml[660,20902+2]..[660,20902+43])
                "Reither" (lib/types.ml[660,20902+4]..[660,20902+11])
                [
                  core_type (lib/types.ml[660,20902+15]..[660,20902+19])
                    Ptyp_constr "bool" (lib/types.ml[660,20902+15]..[660,20902+19])
                    []
                  core_type (lib/types.ml[660,20902+22]..[660,20902+36])
                    Ptyp_constr "list" (lib/types.ml[660,20902+32]..[660,20902+36])
                    [
                      core_type (lib/types.ml[660,20902+22]..[660,20902+31])
                        Ptyp_constr "type_expr" (lib/types.ml[660,20902+22]..[660,20902+31])
                        []
                    ]
                  core_type (lib/types.ml[660,20902+39]..[660,20902+43])
                    Ptyp_constr "bool" (lib/types.ml[660,20902+39]..[660,20902+43])
                    []
                ]
                None
              (lib/types.ml[664,21091+2]..[664,21091+11])
                "Rabsent" (lib/types.ml[664,21091+4]..[664,21091+11])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/types.ml[666,21104+0]..[675,21519+24])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[666,21104+8]..[666,21104+26])
          Ppat_var "row_field_repr_aux" (lib/types.ml[666,21104+8]..[666,21104+26])
        expression (lib/types.ml[666,21104+27]..[675,21519+24]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[666,21104+27]..[666,21104+29])
              Nolabel
              None
              pattern (lib/types.ml[666,21104+27]..[666,21104+29])
                Ppat_var "tl" (lib/types.ml[666,21104+27]..[666,21104+29])
          ]
          Some
            Pconstraint
              core_type (lib/types.ml[666,21104+32]..[666,21104+54])
                Ptyp_arrow
                Nolabel
                core_type (lib/types.ml[666,21104+32]..[666,21104+41])
                  Ptyp_constr "row_field" (lib/types.ml[666,21104+32]..[666,21104+41])
                  []
                core_type (lib/types.ml[666,21104+45]..[666,21104+54])
                  Ptyp_constr "row_field" (lib/types.ml[666,21104+45]..[666,21104+54])
                  []
          Pfunction_cases (lib/types.ml[666,21104+57]..[675,21519+24])
            [
              <case>
                pattern (lib/types.ml[667,21170+4]..[667,21170+47])
                  Ppat_construct "RFeither" (lib/types.ml[667,21170+4]..[667,21170+12])
                  Some
                    []
                    pattern (lib/types.ml[667,21170+13]..[667,21170+47])
                      Ppat_alias "r" (lib/types.ml[667,21170+45]..[667,21170+46])
                      pattern (lib/types.ml[667,21170+14]..[667,21170+41])
                        Ppat_record Closed
                        [
                          "ext" (lib/types.ml[667,21170+15]..[667,21170+18])
                            pattern (lib/types.ml[667,21170+21]..[667,21170+40])
                              Ppat_record Closed
                              [
                                "contents" (lib/types.ml[667,21170+22]..[667,21170+30])
                                  pattern (lib/types.ml[667,21170+33]..[667,21170+39])
                                    Ppat_construct "RFnone" (lib/types.ml[667,21170+33]..[667,21170+39])
                                    None
                              ]
                        ]
                expression (lib/types.ml[668,21221+6]..[668,21221+48])
                  Pexp_construct "RFeither" (lib/types.ml[668,21221+6]..[668,21221+14])
                  Some
                    expression (lib/types.ml[668,21221+15]..[668,21221+48])
                      Pexp_record
                      [
                        "arg_type" (lib/types.ml[668,21221+23]..[668,21221+31])
                          expression (lib/types.ml[668,21221+34]..[668,21221+47])
                            Pexp_apply
                            expression (lib/types.ml[668,21221+36]..[668,21221+37])
                              Pexp_ident "@" (lib/types.ml[668,21221+36]..[668,21221+37])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[668,21221+34]..[668,21221+36])
                                  Pexp_ident "tl" (lib/types.ml[668,21221+34]..[668,21221+36])
                              <arg>
                              Nolabel
                                expression (lib/types.ml[668,21221+37]..[668,21221+47])
                                  Pexp_field
                                  expression (lib/types.ml[668,21221+37]..[668,21221+38])
                                    Pexp_ident "r" (lib/types.ml[668,21221+37]..[668,21221+38])
                                  "arg_type" (lib/types.ml[668,21221+39]..[668,21221+47])
                            ]
                      ]
                      Some
                        expression (lib/types.ml[668,21221+16]..[668,21221+17])
                          Pexp_ident "r" (lib/types.ml[668,21221+16]..[668,21221+17])
              <case>
                pattern (lib/types.ml[669,21270+4]..[670,21294+75])
                  Ppat_construct "RFeither" (lib/types.ml[669,21270+4]..[669,21270+12])
                  Some
                    []
                    pattern (lib/types.ml[669,21270+13]..[670,21294+75])
                      Ppat_record Closed
                      [
                        "arg_type" (lib/types.ml[669,21270+14]..[669,21270+22]) ghost
                          pattern (lib/types.ml[669,21270+14]..[669,21270+22])
                            Ppat_var "arg_type" (lib/types.ml[669,21270+14]..[669,21270+22])
                        "ext" (lib/types.ml[670,21294+14]..[670,21294+17])
                          pattern (lib/types.ml[670,21294+20]..[670,21294+74])
                            Ppat_record Closed
                            [
                              "contents" (lib/types.ml[670,21294+21]..[670,21294+29])
                                pattern (lib/types.ml[670,21294+32]..[670,21294+73])
                                  Ppat_alias "rf" (lib/types.ml[670,21294+71]..[670,21294+73])
                                  pattern (lib/types.ml[670,21294+32]..[670,21294+67])
                                    Ppat_or
                                    pattern (lib/types.ml[670,21294+32]..[670,21294+56])
                                      Ppat_or
                                      pattern (lib/types.ml[670,21294+32]..[670,21294+42])
                                        Ppat_construct "RFeither" (lib/types.ml[670,21294+32]..[670,21294+40])
                                        Some
                                          []
                                          pattern (lib/types.ml[670,21294+41]..[670,21294+42])
                                            Ppat_any
                                      pattern (lib/types.ml[670,21294+45]..[670,21294+56])
                                        Ppat_construct "RFpresent" (lib/types.ml[670,21294+45]..[670,21294+54])
                                        Some
                                          []
                                          pattern (lib/types.ml[670,21294+55]..[670,21294+56])
                                            Ppat_any
                                    pattern (lib/types.ml[670,21294+59]..[670,21294+67])
                                      Ppat_construct "RFabsent" (lib/types.ml[670,21294+59]..[670,21294+67])
                                      None
                            ]
                      ]
                expression (lib/types.ml[671,21373+6]..[671,21373+41])
                  Pexp_apply
                  expression (lib/types.ml[671,21373+6]..[671,21373+24])
                    Pexp_ident "row_field_repr_aux" (lib/types.ml[671,21373+6]..[671,21373+24])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[671,21373+25]..[671,21373+38])
                        Pexp_apply
                        expression (lib/types.ml[671,21373+28]..[671,21373+29])
                          Pexp_ident "@" (lib/types.ml[671,21373+28]..[671,21373+29])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[671,21373+26]..[671,21373+28])
                              Pexp_ident "tl" (lib/types.ml[671,21373+26]..[671,21373+28])
                          <arg>
                          Nolabel
                            expression (lib/types.ml[671,21373+29]..[671,21373+37])
                              Pexp_ident "arg_type" (lib/types.ml[671,21373+29]..[671,21373+37])
                        ]
                    <arg>
                    Nolabel
                      expression (lib/types.ml[671,21373+39]..[671,21373+41])
                        Pexp_ident "rf" (lib/types.ml[671,21373+39]..[671,21373+41])
                  ]
              <case>
                pattern (lib/types.ml[672,21415+4]..[672,21415+22])
                  Ppat_construct "RFpresent" (lib/types.ml[672,21415+4]..[672,21415+13])
                  Some
                    []
                    pattern (lib/types.ml[672,21415+14]..[672,21415+22])
                      Ppat_construct "Some" (lib/types.ml[672,21415+15]..[672,21415+19])
                      Some
                        []
                        pattern (lib/types.ml[672,21415+20]..[672,21415+21])
                          Ppat_any
                <when>
                  expression (lib/types.ml[672,21415+28]..[672,21415+36])
                    Pexp_apply
                    expression (lib/types.ml[672,21415+31]..[672,21415+33])
                      Pexp_ident "<>" (lib/types.ml[672,21415+31]..[672,21415+33])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[672,21415+28]..[672,21415+30])
                          Pexp_ident "tl" (lib/types.ml[672,21415+28]..[672,21415+30])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[672,21415+34]..[672,21415+36])
                          Pexp_construct "[]" (lib/types.ml[672,21415+34]..[672,21415+36])
                          None
                    ]
                expression (lib/types.ml[673,21455+6]..[673,21455+35])
                  Pexp_construct "RFpresent" (lib/types.ml[673,21455+6]..[673,21455+15])
                  Some
                    expression (lib/types.ml[673,21455+16]..[673,21455+35])
                      Pexp_construct "Some" (lib/types.ml[673,21455+17]..[673,21455+21])
                      Some
                        expression (lib/types.ml[673,21455+22]..[673,21455+34])
                          Pexp_apply
                          expression (lib/types.ml[673,21455+23]..[673,21455+30])
                            Pexp_ident "List.hd" (lib/types.ml[673,21455+23]..[673,21455+30])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[673,21455+31]..[673,21455+33])
                                Pexp_ident "tl" (lib/types.ml[673,21455+31]..[673,21455+33])
                          ]
              <case>
                pattern (lib/types.ml[674,21491+4]..[674,21491+21])
                  Ppat_alias "rf" (lib/types.ml[674,21491+19]..[674,21491+21])
                  pattern (lib/types.ml[674,21491+4]..[674,21491+15])
                    Ppat_construct "RFpresent" (lib/types.ml[674,21491+4]..[674,21491+13])
                    Some
                      []
                      pattern (lib/types.ml[674,21491+14]..[674,21491+15])
                        Ppat_any
                expression (lib/types.ml[674,21491+25]..[674,21491+27])
                  Pexp_ident "rf" (lib/types.ml[674,21491+25]..[674,21491+27])
              <case>
                pattern (lib/types.ml[675,21519+4]..[675,21519+12])
                  Ppat_construct "RFabsent" (lib/types.ml[675,21519+4]..[675,21519+12])
                  None
                expression (lib/types.ml[675,21519+16]..[675,21519+24])
                  Pexp_construct "RFabsent" (lib/types.ml[675,21519+16]..[675,21519+24])
                  None
            ]
    ]
  structure_item (lib/types.ml[677,21545+0]..[681,21717+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[677,21545+4]..[677,21545+18])
          Ppat_var "row_field_repr" (lib/types.ml[677,21545+4]..[677,21545+18])
        expression (lib/types.ml[677,21545+19]..[681,21717+23]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[677,21545+19]..[677,21545+21])
              Nolabel
              None
              pattern (lib/types.ml[677,21545+19]..[677,21545+21])
                Ppat_var "fi" (lib/types.ml[677,21545+19]..[677,21545+21])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[678,21569+2]..[681,21717+23])
              Pexp_match
              expression (lib/types.ml[678,21569+8]..[678,21569+32])
                Pexp_apply
                expression (lib/types.ml[678,21569+8]..[678,21569+26])
                  Pexp_ident "row_field_repr_aux" (lib/types.ml[678,21569+8]..[678,21569+26])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[678,21569+27]..[678,21569+29])
                      Pexp_construct "[]" (lib/types.ml[678,21569+27]..[678,21569+29])
                      None
                  <arg>
                  Nolabel
                    expression (lib/types.ml[678,21569+30]..[678,21569+32])
                      Pexp_ident "fi" (lib/types.ml[678,21569+30]..[678,21569+32])
                ]
              [
                <case>
                  pattern (lib/types.ml[679,21607+4]..[679,21607+40])
                    Ppat_construct "RFeither" (lib/types.ml[679,21607+4]..[679,21607+12])
                    Some
                      []
                      pattern (lib/types.ml[679,21607+13]..[679,21607+40])
                        Ppat_record Closed
                        [
                          "no_arg" (lib/types.ml[679,21607+14]..[679,21607+20]) ghost
                            pattern (lib/types.ml[679,21607+14]..[679,21607+20])
                              Ppat_var "no_arg" (lib/types.ml[679,21607+14]..[679,21607+20])
                          "arg_type" (lib/types.ml[679,21607+22]..[679,21607+30]) ghost
                            pattern (lib/types.ml[679,21607+22]..[679,21607+30])
                              Ppat_var "arg_type" (lib/types.ml[679,21607+22]..[679,21607+30])
                          "matched" (lib/types.ml[679,21607+32]..[679,21607+39]) ghost
                            pattern (lib/types.ml[679,21607+32]..[679,21607+39])
                              Ppat_var "matched" (lib/types.ml[679,21607+32]..[679,21607+39])
                        ]
                  expression (lib/types.ml[679,21607+44]..[679,21607+79])
                    Pexp_construct "Reither" (lib/types.ml[679,21607+44]..[679,21607+51])
                    Some
                      expression (lib/types.ml[679,21607+52]..[679,21607+79])
                        Pexp_tuple
                        [
                          expression (lib/types.ml[679,21607+53]..[679,21607+59])
                            Pexp_ident "no_arg" (lib/types.ml[679,21607+53]..[679,21607+59])
                          expression (lib/types.ml[679,21607+61]..[679,21607+69])
                            Pexp_ident "arg_type" (lib/types.ml[679,21607+61]..[679,21607+69])
                          expression (lib/types.ml[679,21607+71]..[679,21607+78])
                            Pexp_ident "matched" (lib/types.ml[679,21607+71]..[679,21607+78])
                        ]
                <case>
                  pattern (lib/types.ml[680,21687+4]..[680,21687+15])
                    Ppat_construct "RFpresent" (lib/types.ml[680,21687+4]..[680,21687+13])
                    Some
                      []
                      pattern (lib/types.ml[680,21687+14]..[680,21687+15])
                        Ppat_var "t" (lib/types.ml[680,21687+14]..[680,21687+15])
                  expression (lib/types.ml[680,21687+19]..[680,21687+29])
                    Pexp_construct "Rpresent" (lib/types.ml[680,21687+19]..[680,21687+27])
                    Some
                      expression (lib/types.ml[680,21687+28]..[680,21687+29])
                        Pexp_ident "t" (lib/types.ml[680,21687+28]..[680,21687+29])
                <case>
                  pattern (lib/types.ml[681,21717+4]..[681,21717+12])
                    Ppat_construct "RFabsent" (lib/types.ml[681,21717+4]..[681,21717+12])
                    None
                  expression (lib/types.ml[681,21717+16]..[681,21717+23])
                    Pexp_construct "Rabsent" (lib/types.ml[681,21717+16]..[681,21717+23])
                    None
              ]
    ]
  structure_item (lib/types.ml[683,21742+0]..[688,21956+48])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[683,21742+8]..[683,21742+21])
          Ppat_var "row_field_ext" (lib/types.ml[683,21742+8]..[683,21742+21])
        expression (lib/types.ml[683,21742+22]..[688,21956+48]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[683,21742+22]..[683,21742+38])
              Nolabel
              None
              pattern (lib/types.ml[683,21742+22]..[683,21742+38])
                Ppat_constraint
                pattern (lib/types.ml[683,21742+23]..[683,21742+25])
                  Ppat_var "fi" (lib/types.ml[683,21742+23]..[683,21742+25])
                core_type (lib/types.ml[683,21742+28]..[683,21742+37])
                  Ptyp_constr "row_field" (lib/types.ml[683,21742+28]..[683,21742+37])
                  []
          ]
          None
          Pfunction_body
            expression (lib/types.ml[684,21783+2]..[688,21956+48])
              Pexp_match
              expression (lib/types.ml[684,21783+8]..[684,21783+10])
                Pexp_ident "fi" (lib/types.ml[684,21783+8]..[684,21783+10])
              [
                <case>
                  pattern (lib/types.ml[685,21799+4]..[685,21799+47])
                    Ppat_construct "RFeither" (lib/types.ml[685,21799+4]..[685,21799+12])
                    Some
                      []
                      pattern (lib/types.ml[685,21799+13]..[685,21799+47])
                        Ppat_record Closed
                        [
                          "ext" (lib/types.ml[685,21799+14]..[685,21799+17])
                            pattern (lib/types.ml[685,21799+20]..[685,21799+46])
                              Ppat_alias "ext" (lib/types.ml[685,21799+43]..[685,21799+46])
                              pattern (lib/types.ml[685,21799+20]..[685,21799+39])
                                Ppat_record Closed
                                [
                                  "contents" (lib/types.ml[685,21799+21]..[685,21799+29])
                                    pattern (lib/types.ml[685,21799+32]..[685,21799+38])
                                      Ppat_construct "RFnone" (lib/types.ml[685,21799+32]..[685,21799+38])
                                      None
                                ]
                        ]
                  expression (lib/types.ml[685,21799+51]..[685,21799+54])
                    Pexp_ident "ext" (lib/types.ml[685,21799+51]..[685,21799+54])
                <case>
                  pattern (lib/types.ml[686,21854+4]..[686,21854+75])
                    Ppat_construct "RFeither" (lib/types.ml[686,21854+4]..[686,21854+12])
                    Some
                      []
                      pattern (lib/types.ml[686,21854+13]..[686,21854+75])
                        Ppat_record Closed
                        [
                          "ext" (lib/types.ml[686,21854+14]..[686,21854+17])
                            pattern (lib/types.ml[686,21854+20]..[686,21854+74])
                              Ppat_record Closed
                              [
                                "contents" (lib/types.ml[686,21854+21]..[686,21854+29])
                                  pattern (lib/types.ml[686,21854+32]..[686,21854+73])
                                    Ppat_alias "rf" (lib/types.ml[686,21854+71]..[686,21854+73])
                                    pattern (lib/types.ml[686,21854+32]..[686,21854+67])
                                      Ppat_or
                                      pattern (lib/types.ml[686,21854+32]..[686,21854+56])
                                        Ppat_or
                                        pattern (lib/types.ml[686,21854+32]..[686,21854+42])
                                          Ppat_construct "RFeither" (lib/types.ml[686,21854+32]..[686,21854+40])
                                          Some
                                            []
                                            pattern (lib/types.ml[686,21854+41]..[686,21854+42])
                                              Ppat_any
                                        pattern (lib/types.ml[686,21854+45]..[686,21854+56])
                                          Ppat_construct "RFpresent" (lib/types.ml[686,21854+45]..[686,21854+54])
                                          Some
                                            []
                                            pattern (lib/types.ml[686,21854+55]..[686,21854+56])
                                              Ppat_any
                                      pattern (lib/types.ml[686,21854+59]..[686,21854+67])
                                        Ppat_construct "RFabsent" (lib/types.ml[686,21854+59]..[686,21854+67])
                                        None
                              ]
                        ]
                  expression (lib/types.ml[687,21933+6]..[687,21933+22])
                    Pexp_apply
                    expression (lib/types.ml[687,21933+6]..[687,21933+19])
                      Pexp_ident "row_field_ext" (lib/types.ml[687,21933+6]..[687,21933+19])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[687,21933+20]..[687,21933+22])
                          Pexp_ident "rf" (lib/types.ml[687,21933+20]..[687,21933+22])
                    ]
                <case>
                  pattern (lib/types.ml[688,21956+4]..[688,21956+5])
                    Ppat_any
                  expression (lib/types.ml[688,21956+9]..[688,21956+48])
                    Pexp_apply
                    expression (lib/types.ml[688,21956+9]..[688,21956+25])
                      Pexp_ident "Misc.fatal_error" (lib/types.ml[688,21956+9]..[688,21956+25])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[688,21956+26]..[688,21956+48])
                          Pexp_constant PConst_string("Types.row_field_ext ",(lib/types.ml[688,21956+27]..[688,21956+47]),None)
                    ]
              ]
    ]
  structure_item (lib/types.ml[690,22006+0]..[690,22006+34])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[690,22006+4]..[690,22006+14])
          Ppat_var "rf_present" (lib/types.ml[690,22006+4]..[690,22006+14])
        expression (lib/types.ml[690,22006+15]..[690,22006+34]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[690,22006+15]..[690,22006+18])
              Nolabel
              None
              pattern (lib/types.ml[690,22006+15]..[690,22006+18])
                Ppat_var "oty" (lib/types.ml[690,22006+15]..[690,22006+18])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[690,22006+21]..[690,22006+34])
              Pexp_construct "RFpresent" (lib/types.ml[690,22006+21]..[690,22006+30])
              Some
                expression (lib/types.ml[690,22006+31]..[690,22006+34])
                  Pexp_ident "oty" (lib/types.ml[690,22006+31]..[690,22006+34])
    ]
  structure_item (lib/types.ml[691,22041+0]..[691,22041+24])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[691,22041+4]..[691,22041+13])
          Ppat_var "rf_absent" (lib/types.ml[691,22041+4]..[691,22041+13])
        expression (lib/types.ml[691,22041+16]..[691,22041+24])
          Pexp_construct "RFabsent" (lib/types.ml[691,22041+16]..[691,22041+24])
          None
    ]
  structure_item (lib/types.ml[692,22066+0]..[698,22222+43])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[692,22066+4]..[692,22066+13])
          Ppat_var "rf_either" (lib/types.ml[692,22066+4]..[692,22066+13])
        expression (lib/types.ml[692,22066+14]..[698,22222+43]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[692,22066+14]..[692,22066+25])
              Optional "use_ext_of"
              None
              pattern (lib/types.ml[692,22066+15]..[692,22066+25])
                Ppat_var "use_ext_of" (lib/types.ml[692,22066+15]..[692,22066+25])
            Pparam_val (lib/types.ml[692,22066+26]..[692,22066+33])
              Labelled "no_arg"
              None
              pattern (lib/types.ml[692,22066+27]..[692,22066+33])
                Ppat_var "no_arg" (lib/types.ml[692,22066+27]..[692,22066+33])
            Pparam_val (lib/types.ml[692,22066+34]..[692,22066+42])
              Nolabel
              None
              pattern (lib/types.ml[692,22066+34]..[692,22066+42])
                Ppat_var "arg_type" (lib/types.ml[692,22066+34]..[692,22066+42])
            Pparam_val (lib/types.ml[692,22066+43]..[692,22066+51])
              Labelled "matched"
              None
              pattern (lib/types.ml[692,22066+44]..[692,22066+51])
                Ppat_var "matched" (lib/types.ml[692,22066+44]..[692,22066+51])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[693,22120+2]..[698,22222+43])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/types.ml[693,22120+6]..[693,22120+9])
                    Ppat_var "ext" (lib/types.ml[693,22120+6]..[693,22120+9])
                  expression (lib/types.ml[694,22132+4]..[696,22192+24])
                    Pexp_match
                    expression (lib/types.ml[694,22132+10]..[694,22132+20])
                      Pexp_ident "use_ext_of" (lib/types.ml[694,22132+10]..[694,22132+20])
                    [
                      <case>
                        pattern (lib/types.ml[695,22158+6]..[695,22158+13])
                          Ppat_construct "Some" (lib/types.ml[695,22158+6]..[695,22158+10])
                          Some
                            []
                            pattern (lib/types.ml[695,22158+11]..[695,22158+13])
                              Ppat_var "rf" (lib/types.ml[695,22158+11]..[695,22158+13])
                        expression (lib/types.ml[695,22158+17]..[695,22158+33])
                          Pexp_apply
                          expression (lib/types.ml[695,22158+17]..[695,22158+30])
                            Pexp_ident "row_field_ext" (lib/types.ml[695,22158+17]..[695,22158+30])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[695,22158+31]..[695,22158+33])
                                Pexp_ident "rf" (lib/types.ml[695,22158+31]..[695,22158+33])
                          ]
                      <case>
                        pattern (lib/types.ml[696,22192+6]..[696,22192+10])
                          Ppat_construct "None" (lib/types.ml[696,22192+6]..[696,22192+10])
                          None
                        expression (lib/types.ml[696,22192+14]..[696,22192+24])
                          Pexp_apply
                          expression (lib/types.ml[696,22192+14]..[696,22192+17])
                            Pexp_ident "ref" (lib/types.ml[696,22192+14]..[696,22192+17])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[696,22192+18]..[696,22192+24])
                                Pexp_construct "RFnone" (lib/types.ml[696,22192+18]..[696,22192+24])
                                None
                          ]
                    ]
              ]
              expression (lib/types.ml[698,22222+2]..[698,22222+43])
                Pexp_construct "RFeither" (lib/types.ml[698,22222+2]..[698,22222+10])
                Some
                  expression (lib/types.ml[698,22222+11]..[698,22222+43])
                    Pexp_record
                    [
                      "no_arg" (lib/types.ml[698,22222+12]..[698,22222+18]) ghost
                        expression (lib/types.ml[698,22222+12]..[698,22222+18])
                          Pexp_ident "no_arg" (lib/types.ml[698,22222+12]..[698,22222+18])
                      "arg_type" (lib/types.ml[698,22222+20]..[698,22222+28]) ghost
                        expression (lib/types.ml[698,22222+20]..[698,22222+28])
                          Pexp_ident "arg_type" (lib/types.ml[698,22222+20]..[698,22222+28])
                      "matched" (lib/types.ml[698,22222+30]..[698,22222+37]) ghost
                        expression (lib/types.ml[698,22222+30]..[698,22222+37])
                          Pexp_ident "matched" (lib/types.ml[698,22222+30]..[698,22222+37])
                      "ext" (lib/types.ml[698,22222+39]..[698,22222+42]) ghost
                        expression (lib/types.ml[698,22222+39]..[698,22222+42])
                          Pexp_ident "ext" (lib/types.ml[698,22222+39]..[698,22222+42])
                    ]
                    None
    ]
  structure_item (lib/types.ml[700,22267+0]..[704,22395+75])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[700,22267+4]..[700,22267+16])
          Ppat_var "rf_either_of" (lib/types.ml[700,22267+4]..[700,22267+16])
        expression (lib/types.ml[700,22267+19]..[704,22395+75])
          Pexp_function
          []
          None
          Pfunction_cases (lib/types.ml[700,22267+19]..[704,22395+75])
            [
              <case>
                pattern (lib/types.ml[701,22295+4]..[701,22295+8])
                  Ppat_construct "None" (lib/types.ml[701,22295+4]..[701,22295+8])
                  None
                expression (lib/types.ml[702,22307+6]..[702,22307+72])
                  Pexp_construct "RFeither" (lib/types.ml[702,22307+6]..[702,22307+14])
                  Some
                    expression (lib/types.ml[702,22307+15]..[702,22307+72])
                      Pexp_record
                      [
                        "no_arg" (lib/types.ml[702,22307+16]..[702,22307+22])
                          expression (lib/types.ml[702,22307+23]..[702,22307+27])
                            Pexp_construct "true" (lib/types.ml[702,22307+23]..[702,22307+27])
                            None
                        "arg_type" (lib/types.ml[702,22307+29]..[702,22307+37])
                          expression (lib/types.ml[702,22307+38]..[702,22307+40])
                            Pexp_construct "[]" (lib/types.ml[702,22307+38]..[702,22307+40])
                            None
                        "matched" (lib/types.ml[702,22307+42]..[702,22307+49])
                          expression (lib/types.ml[702,22307+50]..[702,22307+55])
                            Pexp_construct "false" (lib/types.ml[702,22307+50]..[702,22307+55])
                            None
                        "ext" (lib/types.ml[702,22307+57]..[702,22307+60])
                          expression (lib/types.ml[702,22307+61]..[702,22307+71])
                            Pexp_apply
                            expression (lib/types.ml[702,22307+61]..[702,22307+64])
                              Pexp_ident "ref" (lib/types.ml[702,22307+61]..[702,22307+64])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[702,22307+65]..[702,22307+71])
                                  Pexp_construct "RFnone" (lib/types.ml[702,22307+65]..[702,22307+71])
                                  None
                            ]
                      ]
                      None
              <case>
                pattern (lib/types.ml[703,22380+4]..[703,22380+11])
                  Ppat_construct "Some" (lib/types.ml[703,22380+4]..[703,22380+8])
                  Some
                    []
                    pattern (lib/types.ml[703,22380+9]..[703,22380+11])
                      Ppat_var "ty" (lib/types.ml[703,22380+9]..[703,22380+11])
                expression (lib/types.ml[704,22395+6]..[704,22395+75])
                  Pexp_construct "RFeither" (lib/types.ml[704,22395+6]..[704,22395+14])
                  Some
                    expression (lib/types.ml[704,22395+15]..[704,22395+75])
                      Pexp_record
                      [
                        "no_arg" (lib/types.ml[704,22395+16]..[704,22395+22])
                          expression (lib/types.ml[704,22395+23]..[704,22395+28])
                            Pexp_construct "false" (lib/types.ml[704,22395+23]..[704,22395+28])
                            None
                        "arg_type" (lib/types.ml[704,22395+30]..[704,22395+38])
                          expression (lib/types.ml[704,22395+39]..[704,22395+43])
                            Pexp_construct "::" (lib/types.ml[704,22395+40]..[704,22395+43]) ghost
                            Some
                              expression (lib/types.ml[704,22395+40]..[704,22395+43]) ghost
                                Pexp_tuple
                                [
                                  expression (lib/types.ml[704,22395+40]..[704,22395+42])
                                    Pexp_ident "ty" (lib/types.ml[704,22395+40]..[704,22395+42])
                                  expression (lib/types.ml[704,22395+42]..[704,22395+43]) ghost
                                    Pexp_construct "[]" (lib/types.ml[704,22395+42]..[704,22395+43]) ghost
                                    None
                                ]
                        "matched" (lib/types.ml[704,22395+45]..[704,22395+52])
                          expression (lib/types.ml[704,22395+53]..[704,22395+58])
                            Pexp_construct "false" (lib/types.ml[704,22395+53]..[704,22395+58])
                            None
                        "ext" (lib/types.ml[704,22395+60]..[704,22395+63])
                          expression (lib/types.ml[704,22395+64]..[704,22395+74])
                            Pexp_apply
                            expression (lib/types.ml[704,22395+64]..[704,22395+67])
                              Pexp_ident "ref" (lib/types.ml[704,22395+64]..[704,22395+67])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[704,22395+68]..[704,22395+74])
                                  Pexp_construct "RFnone" (lib/types.ml[704,22395+68]..[704,22395+74])
                                  None
                            ]
                      ]
                      None
            ]
    ]
  structure_item (lib/types.ml[706,22472+0]..[707,22503+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[706,22472+4]..[706,22472+20])
          Ppat_var "eq_row_field_ext" (lib/types.ml[706,22472+4]..[706,22472+20])
        expression (lib/types.ml[706,22472+21]..[707,22503+40]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[706,22472+21]..[706,22472+24])
              Nolabel
              None
              pattern (lib/types.ml[706,22472+21]..[706,22472+24])
                Ppat_var "rf1" (lib/types.ml[706,22472+21]..[706,22472+24])
            Pparam_val (lib/types.ml[706,22472+25]..[706,22472+28])
              Nolabel
              None
              pattern (lib/types.ml[706,22472+25]..[706,22472+28])
                Ppat_var "rf2" (lib/types.ml[706,22472+25]..[706,22472+28])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[707,22503+2]..[707,22503+40])
              Pexp_apply
              expression (lib/types.ml[707,22503+20]..[707,22503+22])
                Pexp_ident "==" (lib/types.ml[707,22503+20]..[707,22503+22])
              [
                <arg>
                Nolabel
                  expression (lib/types.ml[707,22503+2]..[707,22503+19])
                    Pexp_apply
                    expression (lib/types.ml[707,22503+2]..[707,22503+15])
                      Pexp_ident "row_field_ext" (lib/types.ml[707,22503+2]..[707,22503+15])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[707,22503+16]..[707,22503+19])
                          Pexp_ident "rf1" (lib/types.ml[707,22503+16]..[707,22503+19])
                    ]
                <arg>
                Nolabel
                  expression (lib/types.ml[707,22503+23]..[707,22503+40])
                    Pexp_apply
                    expression (lib/types.ml[707,22503+23]..[707,22503+36])
                      Pexp_ident "row_field_ext" (lib/types.ml[707,22503+23]..[707,22503+36])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[707,22503+37]..[707,22503+40])
                          Pexp_ident "rf2" (lib/types.ml[707,22503+37]..[707,22503+40])
                    ]
              ]
    ]
  structure_item (lib/types.ml[709,22545+0]..[712,22627+42])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[709,22545+4]..[709,22545+26])
          Ppat_var "changed_row_field_exts" (lib/types.ml[709,22545+4]..[709,22545+26])
        expression (lib/types.ml[709,22545+27]..[712,22627+42]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[709,22545+27]..[709,22545+28])
              Nolabel
              None
              pattern (lib/types.ml[709,22545+27]..[709,22545+28])
                Ppat_var "l" (lib/types.ml[709,22545+27]..[709,22545+28])
            Pparam_val (lib/types.ml[709,22545+29]..[709,22545+30])
              Nolabel
              None
              pattern (lib/types.ml[709,22545+29]..[709,22545+30])
                Ppat_var "f" (lib/types.ml[709,22545+29]..[709,22545+30])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[710,22578+2]..[712,22627+42])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/types.ml[710,22578+6]..[710,22578+10])
                    Ppat_var "exts" (lib/types.ml[710,22578+6]..[710,22578+10])
                  expression (lib/types.ml[710,22578+13]..[710,22578+37])
                    Pexp_apply
                    expression (lib/types.ml[710,22578+13]..[710,22578+21])
                      Pexp_ident "List.map" (lib/types.ml[710,22578+13]..[710,22578+21])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[710,22578+22]..[710,22578+35])
                          Pexp_ident "row_field_ext" (lib/types.ml[710,22578+22]..[710,22578+35])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[710,22578+36]..[710,22578+37])
                          Pexp_ident "l" (lib/types.ml[710,22578+36]..[710,22578+37])
                    ]
              ]
              expression (lib/types.ml[711,22619+2]..[712,22627+42])
                Pexp_sequence
                expression (lib/types.ml[711,22619+2]..[711,22619+6])
                  Pexp_apply
                  expression (lib/types.ml[711,22619+2]..[711,22619+3])
                    Pexp_ident "f" (lib/types.ml[711,22619+2]..[711,22619+3])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[711,22619+4]..[711,22619+6])
                        Pexp_construct "()" (lib/types.ml[711,22619+4]..[711,22619+6])
                        None
                  ]
                expression (lib/types.ml[712,22627+2]..[712,22627+42])
                  Pexp_apply
                  expression (lib/types.ml[712,22627+2]..[712,22627+13])
                    Pexp_ident "List.exists" (lib/types.ml[712,22627+2]..[712,22627+13])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[712,22627+14]..[712,22627+37])
                        Pexp_function
                        [
                          Pparam_val (lib/types.ml[712,22627+19]..[712,22627+20])
                            Nolabel
                            None
                            pattern (lib/types.ml[712,22627+19]..[712,22627+20])
                              Ppat_var "r" (lib/types.ml[712,22627+19]..[712,22627+20])
                        ]
                        None
                        Pfunction_body
                          expression (lib/types.ml[712,22627+24]..[712,22627+36])
                            Pexp_apply
                            expression (lib/types.ml[712,22627+27]..[712,22627+29])
                              Pexp_ident "<>" (lib/types.ml[712,22627+27]..[712,22627+29])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[712,22627+24]..[712,22627+26])
                                  Pexp_apply
                                  expression (lib/types.ml[712,22627+24]..[712,22627+25])
                                    Pexp_ident "!" (lib/types.ml[712,22627+24]..[712,22627+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/types.ml[712,22627+25]..[712,22627+26])
                                        Pexp_ident "r" (lib/types.ml[712,22627+25]..[712,22627+26])
                                  ]
                              <arg>
                              Nolabel
                                expression (lib/types.ml[712,22627+30]..[712,22627+36])
                                  Pexp_construct "RFnone" (lib/types.ml[712,22627+30]..[712,22627+36])
                                  None
                            ]
                    <arg>
                    Nolabel
                      expression (lib/types.ml[712,22627+38]..[712,22627+42])
                        Pexp_ident "exts" (lib/types.ml[712,22627+38]..[712,22627+42])
                  ]
    ]
  structure_item (lib/types.ml[714,22671+0]..[724,23005+38])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[714,22671+4]..[714,22671+19])
          Ppat_var "match_row_field" (lib/types.ml[714,22671+4]..[714,22671+19])
        expression (lib/types.ml[714,22671+20]..[724,23005+38]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[714,22671+20]..[714,22671+28])
              Labelled "present"
              None
              pattern (lib/types.ml[714,22671+21]..[714,22671+28])
                Ppat_var "present" (lib/types.ml[714,22671+21]..[714,22671+28])
            Pparam_val (lib/types.ml[714,22671+29]..[714,22671+36])
              Labelled "absent"
              None
              pattern (lib/types.ml[714,22671+30]..[714,22671+36])
                Ppat_var "absent" (lib/types.ml[714,22671+30]..[714,22671+36])
            Pparam_val (lib/types.ml[714,22671+37]..[714,22671+44])
              Labelled "either"
              None
              pattern (lib/types.ml[714,22671+38]..[714,22671+44])
                Ppat_var "either" (lib/types.ml[714,22671+38]..[714,22671+44])
            Pparam_val (lib/types.ml[714,22671+45]..[714,22671+60])
              Nolabel
              None
              pattern (lib/types.ml[714,22671+45]..[714,22671+60])
                Ppat_constraint
                pattern (lib/types.ml[714,22671+46]..[714,22671+47])
                  Ppat_var "f" (lib/types.ml[714,22671+46]..[714,22671+47])
                core_type (lib/types.ml[714,22671+50]..[714,22671+59])
                  Ptyp_constr "row_field" (lib/types.ml[714,22671+50]..[714,22671+59])
                  []
          ]
          None
          Pfunction_body
            expression (lib/types.ml[715,22734+2]..[724,23005+38])
              Pexp_match
              expression (lib/types.ml[715,22734+8]..[715,22734+9])
                Pexp_ident "f" (lib/types.ml[715,22734+8]..[715,22734+9])
              [
                <case>
                  pattern (lib/types.ml[716,22749+4]..[716,22749+12])
                    Ppat_construct "RFabsent" (lib/types.ml[716,22749+4]..[716,22749+12])
                    None
                  expression (lib/types.ml[716,22749+16]..[716,22749+25])
                    Pexp_apply
                    expression (lib/types.ml[716,22749+16]..[716,22749+22])
                      Pexp_ident "absent" (lib/types.ml[716,22749+16]..[716,22749+22])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[716,22749+23]..[716,22749+25])
                          Pexp_construct "()" (lib/types.ml[716,22749+23]..[716,22749+25])
                          None
                    ]
                <case>
                  pattern (lib/types.ml[717,22775+4]..[717,22775+15])
                    Ppat_construct "RFpresent" (lib/types.ml[717,22775+4]..[717,22775+13])
                    Some
                      []
                      pattern (lib/types.ml[717,22775+14]..[717,22775+15])
                        Ppat_var "t" (lib/types.ml[717,22775+14]..[717,22775+15])
                  expression (lib/types.ml[717,22775+19]..[717,22775+28])
                    Pexp_apply
                    expression (lib/types.ml[717,22775+19]..[717,22775+26])
                      Pexp_ident "present" (lib/types.ml[717,22775+19]..[717,22775+26])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[717,22775+27]..[717,22775+28])
                          Pexp_ident "t" (lib/types.ml[717,22775+27]..[717,22775+28])
                    ]
                <case>
                  pattern (lib/types.ml[718,22804+4]..[718,22804+45])
                    Ppat_construct "RFeither" (lib/types.ml[718,22804+4]..[718,22804+12])
                    Some
                      []
                      pattern (lib/types.ml[718,22804+13]..[718,22804+45])
                        Ppat_record Closed
                        [
                          "no_arg" (lib/types.ml[718,22804+14]..[718,22804+20]) ghost
                            pattern (lib/types.ml[718,22804+14]..[718,22804+20])
                              Ppat_var "no_arg" (lib/types.ml[718,22804+14]..[718,22804+20])
                          "arg_type" (lib/types.ml[718,22804+22]..[718,22804+30]) ghost
                            pattern (lib/types.ml[718,22804+22]..[718,22804+30])
                              Ppat_var "arg_type" (lib/types.ml[718,22804+22]..[718,22804+30])
                          "matched" (lib/types.ml[718,22804+32]..[718,22804+39]) ghost
                            pattern (lib/types.ml[718,22804+32]..[718,22804+39])
                              Ppat_var "matched" (lib/types.ml[718,22804+32]..[718,22804+39])
                          "ext" (lib/types.ml[718,22804+41]..[718,22804+44]) ghost
                            pattern (lib/types.ml[718,22804+41]..[718,22804+44])
                              Ppat_var "ext" (lib/types.ml[718,22804+41]..[718,22804+44])
                        ]
                  expression (lib/types.ml[719,22853+6]..[724,23005+38])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lib/types.ml[719,22853+10]..[719,22853+11])
                          Ppat_var "e" (lib/types.ml[719,22853+10]..[719,22853+11])
                        core_type (lib/types.ml[719,22853+14]..[719,22853+30])
                          Ptyp_constr "option" (lib/types.ml[719,22853+24]..[719,22853+30])
                          [
                            core_type (lib/types.ml[719,22853+14]..[719,22853+23])
                              Ptyp_constr "row_field" (lib/types.ml[719,22853+14]..[719,22853+23])
                              []
                          ]
                        expression (lib/types.ml[720,22886+8]..[722,22935+60])
                          Pexp_match
                          expression (lib/types.ml[720,22886+14]..[720,22886+18])
                            Pexp_apply
                            expression (lib/types.ml[720,22886+14]..[720,22886+15])
                              Pexp_ident "!" (lib/types.ml[720,22886+14]..[720,22886+15])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[720,22886+15]..[720,22886+18])
                                  Pexp_ident "ext" (lib/types.ml[720,22886+15]..[720,22886+18])
                            ]
                          [
                            <case>
                              pattern (lib/types.ml[721,22910+10]..[721,22910+16])
                                Ppat_construct "RFnone" (lib/types.ml[721,22910+10]..[721,22910+16])
                                None
                              expression (lib/types.ml[721,22910+20]..[721,22910+24])
                                Pexp_construct "None" (lib/types.ml[721,22910+20]..[721,22910+24])
                                None
                            <case>
                              pattern (lib/types.ml[722,22935+10]..[722,22935+50])
                                Ppat_alias "e" (lib/types.ml[722,22935+49]..[722,22935+50])
                                pattern (lib/types.ml[722,22935+10]..[722,22935+45])
                                  Ppat_or
                                  pattern (lib/types.ml[722,22935+10]..[722,22935+34])
                                    Ppat_or
                                    pattern (lib/types.ml[722,22935+10]..[722,22935+20])
                                      Ppat_construct "RFeither" (lib/types.ml[722,22935+10]..[722,22935+18])
                                      Some
                                        []
                                        pattern (lib/types.ml[722,22935+19]..[722,22935+20])
                                          Ppat_any
                                    pattern (lib/types.ml[722,22935+23]..[722,22935+34])
                                      Ppat_construct "RFpresent" (lib/types.ml[722,22935+23]..[722,22935+32])
                                      Some
                                        []
                                        pattern (lib/types.ml[722,22935+33]..[722,22935+34])
                                          Ppat_any
                                  pattern (lib/types.ml[722,22935+37]..[722,22935+45])
                                    Ppat_construct "RFabsent" (lib/types.ml[722,22935+37]..[722,22935+45])
                                    None
                              expression (lib/types.ml[722,22935+54]..[722,22935+60])
                                Pexp_construct "Some" (lib/types.ml[722,22935+54]..[722,22935+58])
                                Some
                                  expression (lib/types.ml[722,22935+59]..[722,22935+60])
                                    Pexp_ident "e" (lib/types.ml[722,22935+59]..[722,22935+60])
                          ]
                    ]
                    expression (lib/types.ml[724,23005+6]..[724,23005+38])
                      Pexp_apply
                      expression (lib/types.ml[724,23005+6]..[724,23005+12])
                        Pexp_ident "either" (lib/types.ml[724,23005+6]..[724,23005+12])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[724,23005+13]..[724,23005+19])
                            Pexp_ident "no_arg" (lib/types.ml[724,23005+13]..[724,23005+19])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[724,23005+20]..[724,23005+28])
                            Pexp_ident "arg_type" (lib/types.ml[724,23005+20]..[724,23005+28])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[724,23005+29]..[724,23005+36])
                            Pexp_ident "matched" (lib/types.ml[724,23005+29]..[724,23005+36])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[724,23005+37]..[724,23005+38])
                            Pexp_ident "e" (lib/types.ml[724,23005+37]..[724,23005+38])
                      ]
              ]
    ]
  structure_item (lib/types.ml[729,23078+0]..[729,23078+35])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[729,23078+4]..[729,23078+10])
          Ppat_var "new_id" (lib/types.ml[729,23078+4]..[729,23078+10])
        expression (lib/types.ml[729,23078+13]..[729,23078+35])
          Pexp_apply
          expression (lib/types.ml[729,23078+13]..[729,23078+30])
            Pexp_ident "Local_store.s_ref" (lib/types.ml[729,23078+13]..[729,23078+30])
          [
            <arg>
            Nolabel
              expression (lib/types.ml[729,23078+31]..[729,23078+35])
                Pexp_constant PConst_int (-1,None)
          ]
    ]
  structure_item (lib/types.ml[731,23115+0]..[731,23115+39])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[731,23115+4]..[731,23115+15])
          Ppat_var "create_expr" (lib/types.ml[731,23115+4]..[731,23115+15])
        expression (lib/types.ml[731,23115+18]..[731,23115+39])
          Pexp_ident "Transient_expr.create" (lib/types.ml[731,23115+18]..[731,23115+39])
    ]
  structure_item (lib/types.ml[733,23156+0]..[735,23204+44])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[733,23156+4]..[733,23156+10])
          Ppat_var "newty3" (lib/types.ml[733,23156+4]..[733,23156+10])
        expression (lib/types.ml[733,23156+11]..[735,23204+44]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[733,23156+11]..[733,23156+17])
              Labelled "level"
              None
              pattern (lib/types.ml[733,23156+12]..[733,23156+17])
                Ppat_var "level" (lib/types.ml[733,23156+12]..[733,23156+17])
            Pparam_val (lib/types.ml[733,23156+18]..[733,23156+24])
              Labelled "scope"
              None
              pattern (lib/types.ml[733,23156+19]..[733,23156+24])
                Ppat_var "scope" (lib/types.ml[733,23156+19]..[733,23156+24])
            Pparam_val (lib/types.ml[733,23156+25]..[733,23156+29])
              Nolabel
              None
              pattern (lib/types.ml[733,23156+25]..[733,23156+29])
                Ppat_var "desc" (lib/types.ml[733,23156+25]..[733,23156+29])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[734,23189+2]..[735,23204+44])
              Pexp_sequence
              expression (lib/types.ml[734,23189+2]..[734,23189+13])
                Pexp_apply
                expression (lib/types.ml[734,23189+2]..[734,23189+6])
                  Pexp_ident "incr" (lib/types.ml[734,23189+2]..[734,23189+6])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[734,23189+7]..[734,23189+13])
                      Pexp_ident "new_id" (lib/types.ml[734,23189+7]..[734,23189+13])
                ]
              expression (lib/types.ml[735,23204+2]..[735,23204+44])
                Pexp_apply
                expression (lib/types.ml[735,23204+2]..[735,23204+13])
                  Pexp_ident "create_expr" (lib/types.ml[735,23204+2]..[735,23204+13])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[735,23204+14]..[735,23204+18])
                      Pexp_ident "desc" (lib/types.ml[735,23204+14]..[735,23204+18])
                  <arg>
                  Labelled "level"
                    expression (lib/types.ml[735,23204+20]..[735,23204+25])
                      Pexp_ident "level" (lib/types.ml[735,23204+20]..[735,23204+25])
                  <arg>
                  Labelled "scope"
                    expression (lib/types.ml[735,23204+27]..[735,23204+32])
                      Pexp_ident "scope" (lib/types.ml[735,23204+27]..[735,23204+32])
                  <arg>
                  Labelled "id"
                    expression (lib/types.ml[735,23204+37]..[735,23204+44])
                      Pexp_apply
                      expression (lib/types.ml[735,23204+37]..[735,23204+38])
                        Pexp_ident "!" (lib/types.ml[735,23204+37]..[735,23204+38])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[735,23204+38]..[735,23204+44])
                            Pexp_ident "new_id" (lib/types.ml[735,23204+38]..[735,23204+44])
                      ]
                ]
    ]
  structure_item (lib/types.ml[737,23250+0]..[738,23275+46])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[737,23250+4]..[737,23250+10])
          Ppat_var "newty2" (lib/types.ml[737,23250+4]..[737,23250+10])
        expression (lib/types.ml[737,23250+11]..[738,23275+46]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[737,23250+11]..[737,23250+17])
              Labelled "level"
              None
              pattern (lib/types.ml[737,23250+12]..[737,23250+17])
                Ppat_var "level" (lib/types.ml[737,23250+12]..[737,23250+17])
            Pparam_val (lib/types.ml[737,23250+18]..[737,23250+22])
              Nolabel
              None
              pattern (lib/types.ml[737,23250+18]..[737,23250+22])
                Ppat_var "desc" (lib/types.ml[737,23250+18]..[737,23250+22])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[738,23275+2]..[738,23275+46])
              Pexp_apply
              expression (lib/types.ml[738,23275+2]..[738,23275+8])
                Pexp_ident "newty3" (lib/types.ml[738,23275+2]..[738,23275+8])
              [
                <arg>
                Labelled "level"
                  expression (lib/types.ml[738,23275+10]..[738,23275+15])
                    Pexp_ident "level" (lib/types.ml[738,23275+10]..[738,23275+15])
                <arg>
                Labelled "scope"
                  expression (lib/types.ml[738,23275+23]..[738,23275+41])
                    Pexp_ident "Ident.lowest_scope" (lib/types.ml[738,23275+23]..[738,23275+41])
                <arg>
                Nolabel
                  expression (lib/types.ml[738,23275+42]..[738,23275+46])
                    Pexp_ident "desc" (lib/types.ml[738,23275+42]..[738,23275+46])
              ]
    ]
  structure_item (lib/types.ml[744,23489+0]..[753,23917+30])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[744,23489+4]..[744,23489+15])
          Ppat_var "undo_change" (lib/types.ml[744,23489+4]..[744,23489+15])
        expression (lib/types.ml[744,23489+18]..[753,23917+30])
          Pexp_function
          []
          None
          Pfunction_cases (lib/types.ml[744,23489+18]..[753,23917+30])
            [
              <case>
                pattern (lib/types.ml[745,23516+4]..[745,23516+21])
                  Ppat_construct "Ctype" (lib/types.ml[745,23516+4]..[745,23516+9])
                  Some
                    []
                    pattern (lib/types.ml[745,23516+11]..[745,23516+21])
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[745,23516+12]..[745,23516+14])
                          Ppat_var "ty" (lib/types.ml[745,23516+12]..[745,23516+14])
                        pattern (lib/types.ml[745,23516+16]..[745,23516+20])
                          Ppat_var "desc" (lib/types.ml[745,23516+16]..[745,23516+20])
                      ]
                expression (lib/types.ml[745,23516+25]..[745,23516+56])
                  Pexp_apply
                  expression (lib/types.ml[745,23516+25]..[745,23516+48])
                    Pexp_ident "Transient_expr.set_desc" (lib/types.ml[745,23516+25]..[745,23516+48])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[745,23516+49]..[745,23516+51])
                        Pexp_ident "ty" (lib/types.ml[745,23516+49]..[745,23516+51])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[745,23516+52]..[745,23516+56])
                        Pexp_ident "desc" (lib/types.ml[745,23516+52]..[745,23516+56])
                  ]
              <case>
                pattern (lib/types.ml[746,23573+4]..[746,23573+27])
                  Ppat_construct "Ccompress" (lib/types.ml[746,23573+4]..[746,23573+13])
                  Some
                    []
                    pattern (lib/types.ml[746,23573+14]..[746,23573+27])
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[746,23573+15]..[746,23573+17])
                          Ppat_var "ty" (lib/types.ml[746,23573+15]..[746,23573+17])
                        pattern (lib/types.ml[746,23573+19]..[746,23573+23])
                          Ppat_var "desc" (lib/types.ml[746,23573+19]..[746,23573+23])
                        pattern (lib/types.ml[746,23573+25]..[746,23573+26])
                          Ppat_any
                      ]
                expression (lib/types.ml[746,23573+31]..[746,23573+62])
                  Pexp_apply
                  expression (lib/types.ml[746,23573+31]..[746,23573+54])
                    Pexp_ident "Transient_expr.set_desc" (lib/types.ml[746,23573+31]..[746,23573+54])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[746,23573+55]..[746,23573+57])
                        Pexp_ident "ty" (lib/types.ml[746,23573+55]..[746,23573+57])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[746,23573+58]..[746,23573+62])
                        Pexp_ident "desc" (lib/types.ml[746,23573+58]..[746,23573+62])
                  ]
              <case>
                pattern (lib/types.ml[747,23636+4]..[747,23636+22])
                  Ppat_construct "Clevel" (lib/types.ml[747,23636+4]..[747,23636+10])
                  Some
                    []
                    pattern (lib/types.ml[747,23636+11]..[747,23636+22])
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[747,23636+12]..[747,23636+14])
                          Ppat_var "ty" (lib/types.ml[747,23636+12]..[747,23636+14])
                        pattern (lib/types.ml[747,23636+16]..[747,23636+21])
                          Ppat_var "level" (lib/types.ml[747,23636+16]..[747,23636+21])
                      ]
                expression (lib/types.ml[747,23636+26]..[747,23636+59])
                  Pexp_apply
                  expression (lib/types.ml[747,23636+26]..[747,23636+50])
                    Pexp_ident "Transient_expr.set_level" (lib/types.ml[747,23636+26]..[747,23636+50])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[747,23636+51]..[747,23636+53])
                        Pexp_ident "ty" (lib/types.ml[747,23636+51]..[747,23636+53])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[747,23636+54]..[747,23636+59])
                        Pexp_ident "level" (lib/types.ml[747,23636+54]..[747,23636+59])
                  ]
              <case>
                pattern (lib/types.ml[748,23696+4]..[748,23696+22])
                  Ppat_construct "Cscope" (lib/types.ml[748,23696+4]..[748,23696+10])
                  Some
                    []
                    pattern (lib/types.ml[748,23696+11]..[748,23696+22])
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[748,23696+12]..[748,23696+14])
                          Ppat_var "ty" (lib/types.ml[748,23696+12]..[748,23696+14])
                        pattern (lib/types.ml[748,23696+16]..[748,23696+21])
                          Ppat_var "scope" (lib/types.ml[748,23696+16]..[748,23696+21])
                      ]
                expression (lib/types.ml[748,23696+26]..[748,23696+59])
                  Pexp_apply
                  expression (lib/types.ml[748,23696+26]..[748,23696+50])
                    Pexp_ident "Transient_expr.set_scope" (lib/types.ml[748,23696+26]..[748,23696+50])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[748,23696+51]..[748,23696+53])
                        Pexp_ident "ty" (lib/types.ml[748,23696+51]..[748,23696+53])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[748,23696+54]..[748,23696+59])
                        Pexp_ident "scope" (lib/types.ml[748,23696+54]..[748,23696+59])
                  ]
              <case>
                pattern (lib/types.ml[749,23756+4]..[749,23756+17])
                  Ppat_construct "Cname" (lib/types.ml[749,23756+4]..[749,23756+9])
                  Some
                    []
                    pattern (lib/types.ml[749,23756+11]..[749,23756+17])
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[749,23756+12]..[749,23756+13])
                          Ppat_var "r" (lib/types.ml[749,23756+12]..[749,23756+13])
                        pattern (lib/types.ml[749,23756+15]..[749,23756+16])
                          Ppat_var "v" (lib/types.ml[749,23756+15]..[749,23756+16])
                      ]
                expression (lib/types.ml[749,23756+24]..[749,23756+30])
                  Pexp_apply
                  expression (lib/types.ml[749,23756+26]..[749,23756+28])
                    Pexp_ident ":=" (lib/types.ml[749,23756+26]..[749,23756+28])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[749,23756+24]..[749,23756+25])
                        Pexp_ident "r" (lib/types.ml[749,23756+24]..[749,23756+25])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[749,23756+29]..[749,23756+30])
                        Pexp_ident "v" (lib/types.ml[749,23756+29]..[749,23756+30])
                  ]
              <case>
                pattern (lib/types.ml[750,23787+4]..[750,23787+12])
                  Ppat_construct "Crow" (lib/types.ml[750,23787+4]..[750,23787+8])
                  Some
                    []
                    pattern (lib/types.ml[750,23787+11]..[750,23787+12])
                      Ppat_var "r" (lib/types.ml[750,23787+11]..[750,23787+12])
                expression (lib/types.ml[750,23787+24]..[750,23787+35])
                  Pexp_apply
                  expression (lib/types.ml[750,23787+26]..[750,23787+28])
                    Pexp_ident ":=" (lib/types.ml[750,23787+26]..[750,23787+28])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[750,23787+24]..[750,23787+25])
                        Pexp_ident "r" (lib/types.ml[750,23787+24]..[750,23787+25])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[750,23787+29]..[750,23787+35])
                        Pexp_construct "RFnone" (lib/types.ml[750,23787+29]..[750,23787+35])
                        None
                  ]
              <case>
                pattern (lib/types.ml[751,23823+4]..[751,23823+20])
                  Ppat_construct "Ckind" (lib/types.ml[751,23823+4]..[751,23823+9])
                  Some
                    []
                    pattern (lib/types.ml[751,23823+11]..[751,23823+20])
                      Ppat_construct "FKvar" (lib/types.ml[751,23823+12]..[751,23823+17])
                      Some
                        []
                        pattern (lib/types.ml[751,23823+18]..[751,23823+19])
                          Ppat_var "r" (lib/types.ml[751,23823+18]..[751,23823+19])
                expression (lib/types.ml[751,23823+24]..[751,23823+49])
                  Pexp_setfield
                  expression (lib/types.ml[751,23823+24]..[751,23823+25])
                    Pexp_ident "r" (lib/types.ml[751,23823+24]..[751,23823+25])
                  "field_kind" (lib/types.ml[751,23823+26]..[751,23823+36])
                  expression (lib/types.ml[751,23823+40]..[751,23823+49])
                    Pexp_construct "FKprivate" (lib/types.ml[751,23823+40]..[751,23823+49])
                    None
              <case>
                pattern (lib/types.ml[752,23873+4]..[752,23873+19])
                  Ppat_construct "Ccommu" (lib/types.ml[752,23873+4]..[752,23873+10])
                  Some
                    []
                    pattern (lib/types.ml[752,23873+11]..[752,23873+19])
                      Ppat_construct "Cvar" (lib/types.ml[752,23873+12]..[752,23873+16])
                      Some
                        []
                        pattern (lib/types.ml[752,23873+17]..[752,23873+18])
                          Ppat_var "r" (lib/types.ml[752,23873+17]..[752,23873+18])
                expression (lib/types.ml[752,23873+24]..[752,23873+43])
                  Pexp_setfield
                  expression (lib/types.ml[752,23873+24]..[752,23873+25])
                    Pexp_ident "r" (lib/types.ml[752,23873+24]..[752,23873+25])
                  "commu" (lib/types.ml[752,23873+26]..[752,23873+31])
                  expression (lib/types.ml[752,23873+35]..[752,23873+43])
                    Pexp_construct "Cunknown" (lib/types.ml[752,23873+35]..[752,23873+43])
                    None
              <case>
                pattern (lib/types.ml[753,23917+4]..[753,23917+17])
                  Ppat_construct "Cuniv" (lib/types.ml[753,23917+4]..[753,23917+9])
                  Some
                    []
                    pattern (lib/types.ml[753,23917+11]..[753,23917+17])
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[753,23917+12]..[753,23917+13])
                          Ppat_var "r" (lib/types.ml[753,23917+12]..[753,23917+13])
                        pattern (lib/types.ml[753,23917+15]..[753,23917+16])
                          Ppat_var "v" (lib/types.ml[753,23917+15]..[753,23917+16])
                      ]
                expression (lib/types.ml[753,23917+24]..[753,23917+30])
                  Pexp_apply
                  expression (lib/types.ml[753,23917+26]..[753,23917+28])
                    Pexp_ident ":=" (lib/types.ml[753,23917+26]..[753,23917+28])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[753,23917+24]..[753,23917+25])
                        Pexp_ident "r" (lib/types.ml[753,23917+24]..[753,23917+25])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[753,23917+29]..[753,23917+30])
                        Pexp_ident "v" (lib/types.ml[753,23917+29]..[753,23917+30])
                  ]
            ]
    ]
  structure_item (lib/types.ml[755,23949+0]..[755,23949+33])
    Pstr_type Rec
    [
      type_declaration "snapshot" (lib/types.ml[755,23949+5]..[755,23949+13]) (lib/types.ml[755,23949+0]..[755,23949+33])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/types.ml[755,23949+16]..[755,23949+33])
              Ptyp_tuple
              [
                core_type (lib/types.ml[755,23949+16]..[755,23949+27])
                  Ptyp_constr "ref" (lib/types.ml[755,23949+24]..[755,23949+27])
                  [
                    core_type (lib/types.ml[755,23949+16]..[755,23949+23])
                      Ptyp_constr "changes" (lib/types.ml[755,23949+16]..[755,23949+23])
                      []
                  ]
                core_type (lib/types.ml[755,23949+30]..[755,23949+33])
                  Ptyp_constr "int" (lib/types.ml[755,23949+30]..[755,23949+33])
                  []
              ]
    ]
  structure_item (lib/types.ml[756,23983+0]..[756,23983+39])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[756,23983+4]..[756,23983+17])
          Ppat_var "last_snapshot" (lib/types.ml[756,23983+4]..[756,23983+17])
        expression (lib/types.ml[756,23983+20]..[756,23983+39])
          Pexp_apply
          expression (lib/types.ml[756,23983+20]..[756,23983+37])
            Pexp_ident "Local_store.s_ref" (lib/types.ml[756,23983+20]..[756,23983+37])
          [
            <arg>
            Nolabel
              expression (lib/types.ml[756,23983+38]..[756,23983+39])
                Pexp_constant PConst_int (0,None)
          ]
    ]
  structure_item (lib/types.ml[758,24024+0]..[759,24042+66])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[758,24024+4]..[758,24024+12])
          Ppat_var "log_type" (lib/types.ml[758,24024+4]..[758,24024+12])
        expression (lib/types.ml[758,24024+13]..[759,24042+66]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[758,24024+13]..[758,24024+15])
              Nolabel
              None
              pattern (lib/types.ml[758,24024+13]..[758,24024+15])
                Ppat_var "ty" (lib/types.ml[758,24024+13]..[758,24024+15])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[759,24042+2]..[759,24042+66])
              Pexp_ifthenelse
              expression (lib/types.ml[759,24042+5]..[759,24042+28])
                Pexp_apply
                expression (lib/types.ml[759,24042+11]..[759,24042+13])
                  Pexp_ident "<=" (lib/types.ml[759,24042+11]..[759,24042+13])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[759,24042+5]..[759,24042+10])
                      Pexp_field
                      expression (lib/types.ml[759,24042+5]..[759,24042+7])
                        Pexp_ident "ty" (lib/types.ml[759,24042+5]..[759,24042+7])
                      "id" (lib/types.ml[759,24042+8]..[759,24042+10])
                  <arg>
                  Nolabel
                    expression (lib/types.ml[759,24042+14]..[759,24042+28])
                      Pexp_apply
                      expression (lib/types.ml[759,24042+14]..[759,24042+15])
                        Pexp_ident "!" (lib/types.ml[759,24042+14]..[759,24042+15])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[759,24042+15]..[759,24042+28])
                            Pexp_ident "last_snapshot" (lib/types.ml[759,24042+15]..[759,24042+28])
                      ]
                ]
              expression (lib/types.ml[759,24042+34]..[759,24042+66])
                Pexp_apply
                expression (lib/types.ml[759,24042+34]..[759,24042+44])
                  Pexp_ident "log_change" (lib/types.ml[759,24042+34]..[759,24042+44])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[759,24042+45]..[759,24042+66])
                      Pexp_construct "Ctype" (lib/types.ml[759,24042+46]..[759,24042+51])
                      Some
                        expression (lib/types.ml[759,24042+52]..[759,24042+65])
                          Pexp_tuple
                          [
                            expression (lib/types.ml[759,24042+53]..[759,24042+55])
                              Pexp_ident "ty" (lib/types.ml[759,24042+53]..[759,24042+55])
                            expression (lib/types.ml[759,24042+57]..[759,24042+64])
                              Pexp_field
                              expression (lib/types.ml[759,24042+57]..[759,24042+59])
                                Pexp_ident "ty" (lib/types.ml[759,24042+57]..[759,24042+59])
                              "desc" (lib/types.ml[759,24042+60]..[759,24042+64])
                          ]
                ]
              None
    ]
  structure_item (lib/types.ml[760,24109+0]..[780,24795+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[760,24109+4]..[760,24109+13])
          Ppat_var "link_type" (lib/types.ml[760,24109+4]..[760,24109+13])
        expression (lib/types.ml[760,24109+14]..[780,24795+5]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[760,24109+14]..[760,24109+16])
              Nolabel
              None
              pattern (lib/types.ml[760,24109+14]..[760,24109+16])
                Ppat_var "ty" (lib/types.ml[760,24109+14]..[760,24109+16])
            Pparam_val (lib/types.ml[760,24109+17]..[760,24109+20])
              Nolabel
              None
              pattern (lib/types.ml[760,24109+17]..[760,24109+20])
                Ppat_var "ty'" (lib/types.ml[760,24109+17]..[760,24109+20])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[761,24132+2]..[780,24795+5])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/types.ml[761,24132+6]..[761,24132+8])
                    Ppat_var "ty" (lib/types.ml[761,24132+6]..[761,24132+8])
                  expression (lib/types.ml[761,24132+11]..[761,24132+18])
                    Pexp_apply
                    expression (lib/types.ml[761,24132+11]..[761,24132+15])
                      Pexp_ident "repr" (lib/types.ml[761,24132+11]..[761,24132+15])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[761,24132+16]..[761,24132+18])
                          Pexp_ident "ty" (lib/types.ml[761,24132+16]..[761,24132+18])
                    ]
              ]
              expression (lib/types.ml[762,24154+2]..[780,24795+5])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lib/types.ml[762,24154+6]..[762,24154+9])
                      Ppat_var "ty'" (lib/types.ml[762,24154+6]..[762,24154+9])
                    expression (lib/types.ml[762,24154+12]..[762,24154+20])
                      Pexp_apply
                      expression (lib/types.ml[762,24154+12]..[762,24154+16])
                        Pexp_ident "repr" (lib/types.ml[762,24154+12]..[762,24154+16])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[762,24154+17]..[762,24154+20])
                            Pexp_ident "ty'" (lib/types.ml[762,24154+17]..[762,24154+20])
                      ]
                ]
                expression (lib/types.ml[763,24178+2]..[780,24795+5])
                  Pexp_ifthenelse
                  expression (lib/types.ml[763,24178+5]..[763,24178+14])
                    Pexp_apply
                    expression (lib/types.ml[763,24178+8]..[763,24178+10])
                      Pexp_ident "==" (lib/types.ml[763,24178+8]..[763,24178+10])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[763,24178+5]..[763,24178+7])
                          Pexp_ident "ty" (lib/types.ml[763,24178+5]..[763,24178+7])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[763,24178+11]..[763,24178+14])
                          Pexp_ident "ty'" (lib/types.ml[763,24178+11]..[763,24178+14])
                    ]
                  expression (lib/types.ml[763,24178+20]..[763,24178+22])
                    Pexp_construct "()" (lib/types.ml[763,24178+20]..[763,24178+22])
                    None
                  Some
                    expression (lib/types.ml[763,24178+28]..[780,24795+5])
                      Pexp_sequence
                      expression (lib/types.ml[764,24212+2]..[764,24212+13])
                        Pexp_apply
                        expression (lib/types.ml[764,24212+2]..[764,24212+10])
                          Pexp_ident "log_type" (lib/types.ml[764,24212+2]..[764,24212+10])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[764,24212+11]..[764,24212+13])
                              Pexp_ident "ty" (lib/types.ml[764,24212+11]..[764,24212+13])
                        ]
                      expression (lib/types.ml[765,24227+2]..[779,24783+11])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/types.ml[765,24227+6]..[765,24227+10])
                              Ppat_var "desc" (lib/types.ml[765,24227+6]..[765,24227+10])
                            expression (lib/types.ml[765,24227+13]..[765,24227+20])
                              Pexp_field
                              expression (lib/types.ml[765,24227+13]..[765,24227+15])
                                Pexp_ident "ty" (lib/types.ml[765,24227+13]..[765,24227+15])
                              "desc" (lib/types.ml[765,24227+16]..[765,24227+20])
                        ]
                        expression (lib/types.ml[766,24251+2]..[779,24783+11])
                          Pexp_sequence
                          expression (lib/types.ml[766,24251+2]..[766,24251+40])
                            Pexp_apply
                            expression (lib/types.ml[766,24251+2]..[766,24251+25])
                              Pexp_ident "Transient_expr.set_desc" (lib/types.ml[766,24251+2]..[766,24251+25])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[766,24251+26]..[766,24251+28])
                                  Pexp_ident "ty" (lib/types.ml[766,24251+26]..[766,24251+28])
                              <arg>
                              Nolabel
                                expression (lib/types.ml[766,24251+29]..[766,24251+40])
                                  Pexp_construct "Tlink" (lib/types.ml[766,24251+30]..[766,24251+35])
                                  Some
                                    expression (lib/types.ml[766,24251+36]..[766,24251+39])
                                      Pexp_ident "ty'" (lib/types.ml[766,24251+36]..[766,24251+39])
                            ]
                          expression (lib/types.ml[769,24416+2]..[779,24783+11])
                            Pexp_match
                            expression (lib/types.ml[769,24416+8]..[769,24416+22])
                              Pexp_tuple
                              [
                                expression (lib/types.ml[769,24416+8]..[769,24416+12])
                                  Pexp_ident "desc" (lib/types.ml[769,24416+8]..[769,24416+12])
                                expression (lib/types.ml[769,24416+14]..[769,24416+22])
                                  Pexp_field
                                  expression (lib/types.ml[769,24416+14]..[769,24416+17])
                                    Pexp_ident "ty'" (lib/types.ml[769,24416+14]..[769,24416+17])
                                  "desc" (lib/types.ml[769,24416+18]..[769,24416+22])
                              ]
                            [
                              <case>
                                pattern (lib/types.ml[770,24444+4]..[770,24444+25])
                                  Ppat_tuple
                                  [
                                    pattern (lib/types.ml[770,24444+4]..[770,24444+13])
                                      Ppat_construct "Tvar" (lib/types.ml[770,24444+4]..[770,24444+8])
                                      Some
                                        []
                                        pattern (lib/types.ml[770,24444+9]..[770,24444+13])
                                          Ppat_var "name" (lib/types.ml[770,24444+9]..[770,24444+13])
                                    pattern (lib/types.ml[770,24444+15]..[770,24444+25])
                                      Ppat_construct "Tvar" (lib/types.ml[770,24444+15]..[770,24444+19])
                                      Some
                                        []
                                        pattern (lib/types.ml[770,24444+20]..[770,24444+25])
                                          Ppat_var "name'" (lib/types.ml[770,24444+20]..[770,24444+25])
                                  ]
                                expression (lib/types.ml[771,24473+6]..[778,24773+9])
                                  Pexp_match
                                  expression (lib/types.ml[771,24473+18]..[771,24473+29])
                                    Pexp_tuple
                                    [
                                      expression (lib/types.ml[771,24473+18]..[771,24473+22])
                                        Pexp_ident "name" (lib/types.ml[771,24473+18]..[771,24473+22])
                                      expression (lib/types.ml[771,24473+24]..[771,24473+29])
                                        Pexp_ident "name'" (lib/types.ml[771,24473+24]..[771,24473+29])
                                    ]
                                  [
                                    <case>
                                      pattern (lib/types.ml[772,24508+8]..[772,24508+20])
                                        Ppat_tuple
                                        [
                                          pattern (lib/types.ml[772,24508+8]..[772,24508+14])
                                            Ppat_construct "Some" (lib/types.ml[772,24508+8]..[772,24508+12])
                                            Some
                                              []
                                              pattern (lib/types.ml[772,24508+13]..[772,24508+14])
                                                Ppat_any
                                          pattern (lib/types.ml[772,24508+16]..[772,24508+20])
                                            Ppat_construct "None" (lib/types.ml[772,24508+16]..[772,24508+20])
                                            None
                                        ]
                                      expression (lib/types.ml[772,24508+24]..[772,24508+77])
                                        Pexp_sequence
                                        expression (lib/types.ml[772,24508+24]..[772,24508+36])
                                          Pexp_apply
                                          expression (lib/types.ml[772,24508+24]..[772,24508+32])
                                            Pexp_ident "log_type" (lib/types.ml[772,24508+24]..[772,24508+32])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/types.ml[772,24508+33]..[772,24508+36])
                                                Pexp_ident "ty'" (lib/types.ml[772,24508+33]..[772,24508+36])
                                          ]
                                        expression (lib/types.ml[772,24508+38]..[772,24508+77])
                                          Pexp_apply
                                          expression (lib/types.ml[772,24508+38]..[772,24508+61])
                                            Pexp_ident "Transient_expr.set_desc" (lib/types.ml[772,24508+38]..[772,24508+61])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/types.ml[772,24508+62]..[772,24508+65])
                                                Pexp_ident "ty'" (lib/types.ml[772,24508+62]..[772,24508+65])
                                            <arg>
                                            Nolabel
                                              expression (lib/types.ml[772,24508+66]..[772,24508+77])
                                                Pexp_construct "Tvar" (lib/types.ml[772,24508+67]..[772,24508+71])
                                                Some
                                                  expression (lib/types.ml[772,24508+72]..[772,24508+76])
                                                    Pexp_ident "name" (lib/types.ml[772,24508+72]..[772,24508+76])
                                          ]
                                    <case>
                                      pattern (lib/types.ml[773,24586+8]..[773,24586+20])
                                        Ppat_tuple
                                        [
                                          pattern (lib/types.ml[773,24586+8]..[773,24586+12])
                                            Ppat_construct "None" (lib/types.ml[773,24586+8]..[773,24586+12])
                                            None
                                          pattern (lib/types.ml[773,24586+14]..[773,24586+20])
                                            Ppat_construct "Some" (lib/types.ml[773,24586+14]..[773,24586+18])
                                            Some
                                              []
                                              pattern (lib/types.ml[773,24586+19]..[773,24586+20])
                                                Ppat_any
                                        ]
                                      expression (lib/types.ml[773,24586+24]..[773,24586+26])
                                        Pexp_construct "()" (lib/types.ml[773,24586+24]..[773,24586+26])
                                        None
                                    <case>
                                      pattern (lib/types.ml[774,24613+8]..[774,24613+22])
                                        Ppat_tuple
                                        [
                                          pattern (lib/types.ml[774,24613+8]..[774,24613+14])
                                            Ppat_construct "Some" (lib/types.ml[774,24613+8]..[774,24613+12])
                                            Some
                                              []
                                              pattern (lib/types.ml[774,24613+13]..[774,24613+14])
                                                Ppat_any
                                          pattern (lib/types.ml[774,24613+16]..[774,24613+22])
                                            Ppat_construct "Some" (lib/types.ml[774,24613+16]..[774,24613+20])
                                            Some
                                              []
                                              pattern (lib/types.ml[774,24613+21]..[774,24613+22])
                                                Ppat_any
                                        ]
                                      expression (lib/types.ml[775,24639+10]..[776,24678+67])
                                        Pexp_ifthenelse
                                        expression (lib/types.ml[775,24639+13]..[775,24639+33])
                                          Pexp_apply
                                          expression (lib/types.ml[775,24639+22]..[775,24639+23])
                                            Pexp_ident "<" (lib/types.ml[775,24639+22]..[775,24639+23])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/types.ml[775,24639+13]..[775,24639+21])
                                                Pexp_field
                                                expression (lib/types.ml[775,24639+13]..[775,24639+15])
                                                  Pexp_ident "ty" (lib/types.ml[775,24639+13]..[775,24639+15])
                                                "level" (lib/types.ml[775,24639+16]..[775,24639+21])
                                            <arg>
                                            Nolabel
                                              expression (lib/types.ml[775,24639+24]..[775,24639+33])
                                                Pexp_field
                                                expression (lib/types.ml[775,24639+24]..[775,24639+27])
                                                  Pexp_ident "ty'" (lib/types.ml[775,24639+24]..[775,24639+27])
                                                "level" (lib/types.ml[775,24639+28]..[775,24639+33])
                                          ]
                                        expression (lib/types.ml[776,24678+12]..[776,24678+67])
                                          Pexp_sequence
                                          expression (lib/types.ml[776,24678+13]..[776,24678+25])
                                            Pexp_apply
                                            expression (lib/types.ml[776,24678+13]..[776,24678+21])
                                              Pexp_ident "log_type" (lib/types.ml[776,24678+13]..[776,24678+21])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[776,24678+22]..[776,24678+25])
                                                  Pexp_ident "ty'" (lib/types.ml[776,24678+22]..[776,24678+25])
                                            ]
                                          expression (lib/types.ml[776,24678+27]..[776,24678+66])
                                            Pexp_apply
                                            expression (lib/types.ml[776,24678+27]..[776,24678+50])
                                              Pexp_ident "Transient_expr.set_desc" (lib/types.ml[776,24678+27]..[776,24678+50])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[776,24678+51]..[776,24678+54])
                                                  Pexp_ident "ty'" (lib/types.ml[776,24678+51]..[776,24678+54])
                                              <arg>
                                              Nolabel
                                                expression (lib/types.ml[776,24678+55]..[776,24678+66])
                                                  Pexp_construct "Tvar" (lib/types.ml[776,24678+56]..[776,24678+60])
                                                  Some
                                                    expression (lib/types.ml[776,24678+61]..[776,24678+65])
                                                      Pexp_ident "name" (lib/types.ml[776,24678+61]..[776,24678+65])
                                            ]
                                        None
                                    <case>
                                      pattern (lib/types.ml[777,24746+8]..[777,24746+18])
                                        Ppat_tuple
                                        [
                                          pattern (lib/types.ml[777,24746+8]..[777,24746+12])
                                            Ppat_construct "None" (lib/types.ml[777,24746+8]..[777,24746+12])
                                            None
                                          pattern (lib/types.ml[777,24746+14]..[777,24746+18])
                                            Ppat_construct "None" (lib/types.ml[777,24746+14]..[777,24746+18])
                                            None
                                        ]
                                      expression (lib/types.ml[777,24746+24]..[777,24746+26])
                                        Pexp_construct "()" (lib/types.ml[777,24746+24]..[777,24746+26])
                                        None
                                  ]
                              <case>
                                pattern (lib/types.ml[779,24783+4]..[779,24783+5])
                                  Ppat_any
                                expression (lib/types.ml[779,24783+9]..[779,24783+11])
                                  Pexp_construct "()" (lib/types.ml[779,24783+9]..[779,24783+11])
                                  None
                            ]
    ]
  structure_item (lib/types.ml[784,24955+0]..[789,25084+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[784,24955+4]..[784,24955+17])
          Ppat_var "set_type_desc" (lib/types.ml[784,24955+4]..[784,24955+17])
        expression (lib/types.ml[784,24955+18]..[789,25084+5]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[784,24955+18]..[784,24955+20])
              Nolabel
              None
              pattern (lib/types.ml[784,24955+18]..[784,24955+20])
                Ppat_var "ty" (lib/types.ml[784,24955+18]..[784,24955+20])
            Pparam_val (lib/types.ml[784,24955+21]..[784,24955+23])
              Nolabel
              None
              pattern (lib/types.ml[784,24955+21]..[784,24955+23])
                Ppat_var "td" (lib/types.ml[784,24955+21]..[784,24955+23])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[785,24981+2]..[789,25084+5])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/types.ml[785,24981+6]..[785,24981+8])
                    Ppat_var "ty" (lib/types.ml[785,24981+6]..[785,24981+8])
                  expression (lib/types.ml[785,24981+11]..[785,24981+18])
                    Pexp_apply
                    expression (lib/types.ml[785,24981+11]..[785,24981+15])
                      Pexp_ident "repr" (lib/types.ml[785,24981+11]..[785,24981+15])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[785,24981+16]..[785,24981+18])
                          Pexp_ident "ty" (lib/types.ml[785,24981+16]..[785,24981+18])
                    ]
              ]
              expression (lib/types.ml[786,25003+2]..[789,25084+5])
                Pexp_ifthenelse
                expression (lib/types.ml[786,25003+5]..[786,25003+18])
                  Pexp_apply
                  expression (lib/types.ml[786,25003+8]..[786,25003+10])
                    Pexp_ident "!=" (lib/types.ml[786,25003+8]..[786,25003+10])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[786,25003+5]..[786,25003+7])
                        Pexp_ident "td" (lib/types.ml[786,25003+5]..[786,25003+7])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[786,25003+11]..[786,25003+18])
                        Pexp_field
                        expression (lib/types.ml[786,25003+11]..[786,25003+13])
                          Pexp_ident "ty" (lib/types.ml[786,25003+11]..[786,25003+13])
                        "desc" (lib/types.ml[786,25003+14]..[786,25003+18])
                  ]
                expression (lib/types.ml[786,25003+24]..[789,25084+5])
                  Pexp_sequence
                  expression (lib/types.ml[787,25033+4]..[787,25033+15])
                    Pexp_apply
                    expression (lib/types.ml[787,25033+4]..[787,25033+12])
                      Pexp_ident "log_type" (lib/types.ml[787,25033+4]..[787,25033+12])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[787,25033+13]..[787,25033+15])
                          Pexp_ident "ty" (lib/types.ml[787,25033+13]..[787,25033+15])
                    ]
                  expression (lib/types.ml[788,25050+4]..[788,25050+33])
                    Pexp_apply
                    expression (lib/types.ml[788,25050+4]..[788,25050+27])
                      Pexp_ident "Transient_expr.set_desc" (lib/types.ml[788,25050+4]..[788,25050+27])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[788,25050+28]..[788,25050+30])
                          Pexp_ident "ty" (lib/types.ml[788,25050+28]..[788,25050+30])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[788,25050+31]..[788,25050+33])
                          Pexp_ident "td" (lib/types.ml[788,25050+31]..[788,25050+33])
                    ]
                None
    ]
  structure_item (lib/types.ml[792,25195+0]..[797,25386+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[792,25195+4]..[792,25195+13])
          Ppat_var "set_level" (lib/types.ml[792,25195+4]..[792,25195+13])
        expression (lib/types.ml[792,25195+14]..[797,25386+5]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[792,25195+14]..[792,25195+16])
              Nolabel
              None
              pattern (lib/types.ml[792,25195+14]..[792,25195+16])
                Ppat_var "ty" (lib/types.ml[792,25195+14]..[792,25195+16])
            Pparam_val (lib/types.ml[792,25195+17]..[792,25195+22])
              Nolabel
              None
              pattern (lib/types.ml[792,25195+17]..[792,25195+22])
                Ppat_var "level" (lib/types.ml[792,25195+17]..[792,25195+22])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[793,25220+2]..[797,25386+5])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/types.ml[793,25220+6]..[793,25220+8])
                    Ppat_var "ty" (lib/types.ml[793,25220+6]..[793,25220+8])
                  expression (lib/types.ml[793,25220+11]..[793,25220+18])
                    Pexp_apply
                    expression (lib/types.ml[793,25220+11]..[793,25220+15])
                      Pexp_ident "repr" (lib/types.ml[793,25220+11]..[793,25220+15])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[793,25220+16]..[793,25220+18])
                          Pexp_ident "ty" (lib/types.ml[793,25220+16]..[793,25220+18])
                    ]
              ]
              expression (lib/types.ml[794,25242+2]..[797,25386+5])
                Pexp_ifthenelse
                expression (lib/types.ml[794,25242+5]..[794,25242+22])
                  Pexp_apply
                  expression (lib/types.ml[794,25242+11]..[794,25242+13])
                    Pexp_ident "<>" (lib/types.ml[794,25242+11]..[794,25242+13])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[794,25242+5]..[794,25242+10])
                        Pexp_ident "level" (lib/types.ml[794,25242+5]..[794,25242+10])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[794,25242+14]..[794,25242+22])
                        Pexp_field
                        expression (lib/types.ml[794,25242+14]..[794,25242+16])
                          Pexp_ident "ty" (lib/types.ml[794,25242+14]..[794,25242+16])
                        "level" (lib/types.ml[794,25242+17]..[794,25242+22])
                  ]
                expression (lib/types.ml[794,25242+28]..[797,25386+5])
                  Pexp_sequence
                  expression (lib/types.ml[795,25276+4]..[795,25276+70])
                    Pexp_ifthenelse
                    expression (lib/types.ml[795,25276+7]..[795,25276+30])
                      Pexp_apply
                      expression (lib/types.ml[795,25276+13]..[795,25276+15])
                        Pexp_ident "<=" (lib/types.ml[795,25276+13]..[795,25276+15])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[795,25276+7]..[795,25276+12])
                            Pexp_field
                            expression (lib/types.ml[795,25276+7]..[795,25276+9])
                              Pexp_ident "ty" (lib/types.ml[795,25276+7]..[795,25276+9])
                            "id" (lib/types.ml[795,25276+10]..[795,25276+12])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[795,25276+16]..[795,25276+30])
                            Pexp_apply
                            expression (lib/types.ml[795,25276+16]..[795,25276+17])
                              Pexp_ident "!" (lib/types.ml[795,25276+16]..[795,25276+17])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[795,25276+17]..[795,25276+30])
                                  Pexp_ident "last_snapshot" (lib/types.ml[795,25276+17]..[795,25276+30])
                            ]
                      ]
                    expression (lib/types.ml[795,25276+36]..[795,25276+70])
                      Pexp_apply
                      expression (lib/types.ml[795,25276+36]..[795,25276+46])
                        Pexp_ident "log_change" (lib/types.ml[795,25276+36]..[795,25276+46])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[795,25276+47]..[795,25276+70])
                            Pexp_construct "Clevel" (lib/types.ml[795,25276+48]..[795,25276+54])
                            Some
                              expression (lib/types.ml[795,25276+55]..[795,25276+69])
                                Pexp_tuple
                                [
                                  expression (lib/types.ml[795,25276+56]..[795,25276+58])
                                    Pexp_ident "ty" (lib/types.ml[795,25276+56]..[795,25276+58])
                                  expression (lib/types.ml[795,25276+60]..[795,25276+68])
                                    Pexp_field
                                    expression (lib/types.ml[795,25276+60]..[795,25276+62])
                                      Pexp_ident "ty" (lib/types.ml[795,25276+60]..[795,25276+62])
                                    "level" (lib/types.ml[795,25276+63]..[795,25276+68])
                                ]
                      ]
                    None
                  expression (lib/types.ml[796,25348+4]..[796,25348+37])
                    Pexp_apply
                    expression (lib/types.ml[796,25348+4]..[796,25348+28])
                      Pexp_ident "Transient_expr.set_level" (lib/types.ml[796,25348+4]..[796,25348+28])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[796,25348+29]..[796,25348+31])
                          Pexp_ident "ty" (lib/types.ml[796,25348+29]..[796,25348+31])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[796,25348+32]..[796,25348+37])
                          Pexp_ident "level" (lib/types.ml[796,25348+32]..[796,25348+37])
                    ]
                None
    ]
  structure_item (lib/types.ml[799,25457+0]..[804,25648+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[799,25457+4]..[799,25457+13])
          Ppat_var "set_scope" (lib/types.ml[799,25457+4]..[799,25457+13])
        expression (lib/types.ml[799,25457+14]..[804,25648+5]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[799,25457+14]..[799,25457+16])
              Nolabel
              None
              pattern (lib/types.ml[799,25457+14]..[799,25457+16])
                Ppat_var "ty" (lib/types.ml[799,25457+14]..[799,25457+16])
            Pparam_val (lib/types.ml[799,25457+17]..[799,25457+22])
              Nolabel
              None
              pattern (lib/types.ml[799,25457+17]..[799,25457+22])
                Ppat_var "scope" (lib/types.ml[799,25457+17]..[799,25457+22])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[800,25482+2]..[804,25648+5])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/types.ml[800,25482+6]..[800,25482+8])
                    Ppat_var "ty" (lib/types.ml[800,25482+6]..[800,25482+8])
                  expression (lib/types.ml[800,25482+11]..[800,25482+18])
                    Pexp_apply
                    expression (lib/types.ml[800,25482+11]..[800,25482+15])
                      Pexp_ident "repr" (lib/types.ml[800,25482+11]..[800,25482+15])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[800,25482+16]..[800,25482+18])
                          Pexp_ident "ty" (lib/types.ml[800,25482+16]..[800,25482+18])
                    ]
              ]
              expression (lib/types.ml[801,25504+2]..[804,25648+5])
                Pexp_ifthenelse
                expression (lib/types.ml[801,25504+5]..[801,25504+22])
                  Pexp_apply
                  expression (lib/types.ml[801,25504+11]..[801,25504+13])
                    Pexp_ident "<>" (lib/types.ml[801,25504+11]..[801,25504+13])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[801,25504+5]..[801,25504+10])
                        Pexp_ident "scope" (lib/types.ml[801,25504+5]..[801,25504+10])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[801,25504+14]..[801,25504+22])
                        Pexp_field
                        expression (lib/types.ml[801,25504+14]..[801,25504+16])
                          Pexp_ident "ty" (lib/types.ml[801,25504+14]..[801,25504+16])
                        "scope" (lib/types.ml[801,25504+17]..[801,25504+22])
                  ]
                expression (lib/types.ml[801,25504+28]..[804,25648+5])
                  Pexp_sequence
                  expression (lib/types.ml[802,25538+4]..[802,25538+70])
                    Pexp_ifthenelse
                    expression (lib/types.ml[802,25538+7]..[802,25538+30])
                      Pexp_apply
                      expression (lib/types.ml[802,25538+13]..[802,25538+15])
                        Pexp_ident "<=" (lib/types.ml[802,25538+13]..[802,25538+15])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[802,25538+7]..[802,25538+12])
                            Pexp_field
                            expression (lib/types.ml[802,25538+7]..[802,25538+9])
                              Pexp_ident "ty" (lib/types.ml[802,25538+7]..[802,25538+9])
                            "id" (lib/types.ml[802,25538+10]..[802,25538+12])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[802,25538+16]..[802,25538+30])
                            Pexp_apply
                            expression (lib/types.ml[802,25538+16]..[802,25538+17])
                              Pexp_ident "!" (lib/types.ml[802,25538+16]..[802,25538+17])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[802,25538+17]..[802,25538+30])
                                  Pexp_ident "last_snapshot" (lib/types.ml[802,25538+17]..[802,25538+30])
                            ]
                      ]
                    expression (lib/types.ml[802,25538+36]..[802,25538+70])
                      Pexp_apply
                      expression (lib/types.ml[802,25538+36]..[802,25538+46])
                        Pexp_ident "log_change" (lib/types.ml[802,25538+36]..[802,25538+46])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[802,25538+47]..[802,25538+70])
                            Pexp_construct "Cscope" (lib/types.ml[802,25538+48]..[802,25538+54])
                            Some
                              expression (lib/types.ml[802,25538+55]..[802,25538+69])
                                Pexp_tuple
                                [
                                  expression (lib/types.ml[802,25538+56]..[802,25538+58])
                                    Pexp_ident "ty" (lib/types.ml[802,25538+56]..[802,25538+58])
                                  expression (lib/types.ml[802,25538+60]..[802,25538+68])
                                    Pexp_field
                                    expression (lib/types.ml[802,25538+60]..[802,25538+62])
                                      Pexp_ident "ty" (lib/types.ml[802,25538+60]..[802,25538+62])
                                    "scope" (lib/types.ml[802,25538+63]..[802,25538+68])
                                ]
                      ]
                    None
                  expression (lib/types.ml[803,25610+4]..[803,25610+37])
                    Pexp_apply
                    expression (lib/types.ml[803,25610+4]..[803,25610+28])
                      Pexp_ident "Transient_expr.set_scope" (lib/types.ml[803,25610+4]..[803,25610+28])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[803,25610+29]..[803,25610+31])
                          Pexp_ident "ty" (lib/types.ml[803,25610+29]..[803,25610+31])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[803,25610+32]..[803,25610+37])
                          Pexp_ident "scope" (lib/types.ml[803,25610+32]..[803,25610+37])
                    ]
                None
    ]
  structure_item (lib/types.ml[805,25654+0]..[806,25678+48])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[805,25654+4]..[805,25654+14])
          Ppat_var "set_univar" (lib/types.ml[805,25654+4]..[805,25654+14])
        expression (lib/types.ml[805,25654+15]..[806,25678+48]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[805,25654+15]..[805,25654+18])
              Nolabel
              None
              pattern (lib/types.ml[805,25654+15]..[805,25654+18])
                Ppat_var "rty" (lib/types.ml[805,25654+15]..[805,25654+18])
            Pparam_val (lib/types.ml[805,25654+19]..[805,25654+21])
              Nolabel
              None
              pattern (lib/types.ml[805,25654+19]..[805,25654+21])
                Ppat_var "ty" (lib/types.ml[805,25654+19]..[805,25654+21])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[806,25678+2]..[806,25678+48])
              Pexp_sequence
              expression (lib/types.ml[806,25678+2]..[806,25678+32])
                Pexp_apply
                expression (lib/types.ml[806,25678+2]..[806,25678+12])
                  Pexp_ident "log_change" (lib/types.ml[806,25678+2]..[806,25678+12])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[806,25678+13]..[806,25678+32])
                      Pexp_construct "Cuniv" (lib/types.ml[806,25678+14]..[806,25678+19])
                      Some
                        expression (lib/types.ml[806,25678+20]..[806,25678+31])
                          Pexp_tuple
                          [
                            expression (lib/types.ml[806,25678+21]..[806,25678+24])
                              Pexp_ident "rty" (lib/types.ml[806,25678+21]..[806,25678+24])
                            expression (lib/types.ml[806,25678+26]..[806,25678+30])
                              Pexp_apply
                              expression (lib/types.ml[806,25678+26]..[806,25678+27])
                                Pexp_ident "!" (lib/types.ml[806,25678+26]..[806,25678+27])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[806,25678+27]..[806,25678+30])
                                    Pexp_ident "rty" (lib/types.ml[806,25678+27]..[806,25678+30])
                              ]
                          ]
                ]
              expression (lib/types.ml[806,25678+34]..[806,25678+48])
                Pexp_apply
                expression (lib/types.ml[806,25678+38]..[806,25678+40])
                  Pexp_ident ":=" (lib/types.ml[806,25678+38]..[806,25678+40])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[806,25678+34]..[806,25678+37])
                      Pexp_ident "rty" (lib/types.ml[806,25678+34]..[806,25678+37])
                  <arg>
                  Nolabel
                    expression (lib/types.ml[806,25678+41]..[806,25678+48])
                      Pexp_construct "Some" (lib/types.ml[806,25678+41]..[806,25678+45])
                      Some
                        expression (lib/types.ml[806,25678+46]..[806,25678+48])
                          Pexp_ident "ty" (lib/types.ml[806,25678+46]..[806,25678+48])
                ]
    ]
  structure_item (lib/types.ml[807,25727+0]..[808,25747+39])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[807,25727+4]..[807,25727+12])
          Ppat_var "set_name" (lib/types.ml[807,25727+4]..[807,25727+12])
        expression (lib/types.ml[807,25727+13]..[808,25747+39]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[807,25727+13]..[807,25727+15])
              Nolabel
              None
              pattern (lib/types.ml[807,25727+13]..[807,25727+15])
                Ppat_var "nm" (lib/types.ml[807,25727+13]..[807,25727+15])
            Pparam_val (lib/types.ml[807,25727+16]..[807,25727+17])
              Nolabel
              None
              pattern (lib/types.ml[807,25727+16]..[807,25727+17])
                Ppat_var "v" (lib/types.ml[807,25727+16]..[807,25727+17])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[808,25747+2]..[808,25747+39])
              Pexp_sequence
              expression (lib/types.ml[808,25747+2]..[808,25747+30])
                Pexp_apply
                expression (lib/types.ml[808,25747+2]..[808,25747+12])
                  Pexp_ident "log_change" (lib/types.ml[808,25747+2]..[808,25747+12])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[808,25747+13]..[808,25747+30])
                      Pexp_construct "Cname" (lib/types.ml[808,25747+14]..[808,25747+19])
                      Some
                        expression (lib/types.ml[808,25747+20]..[808,25747+29])
                          Pexp_tuple
                          [
                            expression (lib/types.ml[808,25747+21]..[808,25747+23])
                              Pexp_ident "nm" (lib/types.ml[808,25747+21]..[808,25747+23])
                            expression (lib/types.ml[808,25747+25]..[808,25747+28])
                              Pexp_apply
                              expression (lib/types.ml[808,25747+25]..[808,25747+26])
                                Pexp_ident "!" (lib/types.ml[808,25747+25]..[808,25747+26])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[808,25747+26]..[808,25747+28])
                                    Pexp_ident "nm" (lib/types.ml[808,25747+26]..[808,25747+28])
                              ]
                          ]
                ]
              expression (lib/types.ml[808,25747+32]..[808,25747+39])
                Pexp_apply
                expression (lib/types.ml[808,25747+35]..[808,25747+37])
                  Pexp_ident ":=" (lib/types.ml[808,25747+35]..[808,25747+37])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[808,25747+32]..[808,25747+34])
                      Pexp_ident "nm" (lib/types.ml[808,25747+32]..[808,25747+34])
                  <arg>
                  Nolabel
                    expression (lib/types.ml[808,25747+38]..[808,25747+39])
                      Pexp_ident "v" (lib/types.ml[808,25747+38]..[808,25747+39])
                ]
    ]
  structure_item (lib/types.ml[810,25788+0]..[817,26133+47])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[810,25788+8]..[810,25788+26])
          Ppat_var "link_row_field_ext" (lib/types.ml[810,25788+8]..[810,25788+26])
        expression (lib/types.ml[810,25788+27]..[817,26133+47]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[810,25788+27]..[810,25788+48])
              Labelled "inside"
              None
              pattern (lib/types.ml[810,25788+29]..[810,25788+47])
                Ppat_constraint
                pattern (lib/types.ml[810,25788+29]..[810,25788+35])
                  Ppat_var "inside" (lib/types.ml[810,25788+29]..[810,25788+35])
                core_type (lib/types.ml[810,25788+38]..[810,25788+47])
                  Ptyp_constr "row_field" (lib/types.ml[810,25788+38]..[810,25788+47])
                  []
            Pparam_val (lib/types.ml[810,25788+49]..[810,25788+64])
              Nolabel
              None
              pattern (lib/types.ml[810,25788+49]..[810,25788+64])
                Ppat_constraint
                pattern (lib/types.ml[810,25788+50]..[810,25788+51])
                  Ppat_var "v" (lib/types.ml[810,25788+50]..[810,25788+51])
                core_type (lib/types.ml[810,25788+54]..[810,25788+63])
                  Ptyp_constr "row_field" (lib/types.ml[810,25788+54]..[810,25788+63])
                  []
          ]
          None
          Pfunction_body
            expression (lib/types.ml[811,25855+2]..[817,26133+47])
              Pexp_match
              expression (lib/types.ml[811,25855+8]..[811,25855+14])
                Pexp_ident "inside" (lib/types.ml[811,25855+8]..[811,25855+14])
              [
                <case>
                  pattern (lib/types.ml[812,25875+4]..[812,25875+45])
                    Ppat_construct "RFeither" (lib/types.ml[812,25875+4]..[812,25875+12])
                    Some
                      []
                      pattern (lib/types.ml[812,25875+13]..[812,25875+45])
                        Ppat_record Closed
                        [
                          "ext" (lib/types.ml[812,25875+14]..[812,25875+17])
                            pattern (lib/types.ml[812,25875+20]..[812,25875+44])
                              Ppat_alias "e" (lib/types.ml[812,25875+43]..[812,25875+44])
                              pattern (lib/types.ml[812,25875+20]..[812,25875+39])
                                Ppat_record Closed
                                [
                                  "contents" (lib/types.ml[812,25875+21]..[812,25875+29])
                                    pattern (lib/types.ml[812,25875+32]..[812,25875+38])
                                      Ppat_construct "RFnone" (lib/types.ml[812,25875+32]..[812,25875+38])
                                      None
                                ]
                        ]
                  expression (lib/types.ml[813,25924+6]..[814,25982+33])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lib/types.ml[813,25924+10]..[813,25924+50])
                          Ppat_alias "v" (lib/types.ml[813,25924+49]..[813,25924+50])
                          pattern (lib/types.ml[813,25924+10]..[813,25924+45])
                            Ppat_or
                            pattern (lib/types.ml[813,25924+10]..[813,25924+34])
                              Ppat_or
                              pattern (lib/types.ml[813,25924+10]..[813,25924+20])
                                Ppat_construct "RFeither" (lib/types.ml[813,25924+10]..[813,25924+18])
                                Some
                                  []
                                  pattern (lib/types.ml[813,25924+19]..[813,25924+20])
                                    Ppat_any
                              pattern (lib/types.ml[813,25924+23]..[813,25924+34])
                                Ppat_construct "RFpresent" (lib/types.ml[813,25924+23]..[813,25924+32])
                                Some
                                  []
                                  pattern (lib/types.ml[813,25924+33]..[813,25924+34])
                                    Ppat_any
                            pattern (lib/types.ml[813,25924+37]..[813,25924+45])
                              Ppat_construct "RFabsent" (lib/types.ml[813,25924+37]..[813,25924+45])
                              None
                        expression (lib/types.ml[813,25924+53]..[813,25924+54])
                          Pexp_ident "v" (lib/types.ml[813,25924+53]..[813,25924+54])
                    ]
                    expression (lib/types.ml[814,25982+6]..[814,25982+33])
                      Pexp_sequence
                      expression (lib/types.ml[814,25982+6]..[814,25982+25])
                        Pexp_apply
                        expression (lib/types.ml[814,25982+6]..[814,25982+16])
                          Pexp_ident "log_change" (lib/types.ml[814,25982+6]..[814,25982+16])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[814,25982+17]..[814,25982+25])
                              Pexp_construct "Crow" (lib/types.ml[814,25982+18]..[814,25982+22])
                              Some
                                expression (lib/types.ml[814,25982+23]..[814,25982+24])
                                  Pexp_ident "e" (lib/types.ml[814,25982+23]..[814,25982+24])
                        ]
                      expression (lib/types.ml[814,25982+27]..[814,25982+33])
                        Pexp_apply
                        expression (lib/types.ml[814,25982+29]..[814,25982+31])
                          Pexp_ident ":=" (lib/types.ml[814,25982+29]..[814,25982+31])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[814,25982+27]..[814,25982+28])
                              Pexp_ident "e" (lib/types.ml[814,25982+27]..[814,25982+28])
                          <arg>
                          Nolabel
                            expression (lib/types.ml[814,25982+32]..[814,25982+33])
                              Pexp_ident "v" (lib/types.ml[814,25982+32]..[814,25982+33])
                        ]
                <case>
                  pattern (lib/types.ml[815,26016+4]..[815,26016+75])
                    Ppat_construct "RFeither" (lib/types.ml[815,26016+4]..[815,26016+12])
                    Some
                      []
                      pattern (lib/types.ml[815,26016+13]..[815,26016+75])
                        Ppat_record Closed
                        [
                          "ext" (lib/types.ml[815,26016+14]..[815,26016+17])
                            pattern (lib/types.ml[815,26016+20]..[815,26016+74])
                              Ppat_record Closed
                              [
                                "contents" (lib/types.ml[815,26016+21]..[815,26016+29])
                                  pattern (lib/types.ml[815,26016+32]..[815,26016+73])
                                    Ppat_alias "rf" (lib/types.ml[815,26016+71]..[815,26016+73])
                                    pattern (lib/types.ml[815,26016+32]..[815,26016+67])
                                      Ppat_or
                                      pattern (lib/types.ml[815,26016+32]..[815,26016+56])
                                        Ppat_or
                                        pattern (lib/types.ml[815,26016+32]..[815,26016+42])
                                          Ppat_construct "RFeither" (lib/types.ml[815,26016+32]..[815,26016+40])
                                          Some
                                            []
                                            pattern (lib/types.ml[815,26016+41]..[815,26016+42])
                                              Ppat_any
                                        pattern (lib/types.ml[815,26016+45]..[815,26016+56])
                                          Ppat_construct "RFpresent" (lib/types.ml[815,26016+45]..[815,26016+54])
                                          Some
                                            []
                                            pattern (lib/types.ml[815,26016+55]..[815,26016+56])
                                              Ppat_any
                                      pattern (lib/types.ml[815,26016+59]..[815,26016+67])
                                        Ppat_construct "RFabsent" (lib/types.ml[815,26016+59]..[815,26016+67])
                                        None
                              ]
                        ]
                  expression (lib/types.ml[816,26095+6]..[816,26095+37])
                    Pexp_apply
                    expression (lib/types.ml[816,26095+6]..[816,26095+24])
                      Pexp_ident "link_row_field_ext" (lib/types.ml[816,26095+6]..[816,26095+24])
                    [
                      <arg>
                      Labelled "inside"
                        expression (lib/types.ml[816,26095+33]..[816,26095+35])
                          Pexp_ident "rf" (lib/types.ml[816,26095+33]..[816,26095+35])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[816,26095+36]..[816,26095+37])
                          Pexp_ident "v" (lib/types.ml[816,26095+36]..[816,26095+37])
                    ]
                <case>
                  pattern (lib/types.ml[817,26133+4]..[817,26133+5])
                    Ppat_any
                  expression (lib/types.ml[817,26133+9]..[817,26133+47])
                    Pexp_apply
                    expression (lib/types.ml[817,26133+9]..[817,26133+20])
                      Pexp_ident "invalid_arg" (lib/types.ml[817,26133+9]..[817,26133+20])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[817,26133+21]..[817,26133+47])
                          Pexp_constant PConst_string("Types.link_row_field_ext",(lib/types.ml[817,26133+22]..[817,26133+46]),None)
                    ]
              ]
    ]
  structure_item (lib/types.ml[819,26182+0]..[830,26666+38])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[819,26182+8]..[819,26182+17])
          Ppat_var "link_kind" (lib/types.ml[819,26182+8]..[819,26182+17])
        expression (lib/types.ml[819,26182+18]..[830,26666+38]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[819,26182+18]..[819,26182+40])
              Labelled "inside"
              None
              pattern (lib/types.ml[819,26182+20]..[819,26182+39])
                Ppat_constraint
                pattern (lib/types.ml[819,26182+20]..[819,26182+26])
                  Ppat_var "inside" (lib/types.ml[819,26182+20]..[819,26182+26])
                core_type (lib/types.ml[819,26182+29]..[819,26182+39])
                  Ptyp_constr "field_kind" (lib/types.ml[819,26182+29]..[819,26182+39])
                  []
            Pparam_val (lib/types.ml[819,26182+41]..[819,26182+57])
              Nolabel
              None
              pattern (lib/types.ml[819,26182+41]..[819,26182+57])
                Ppat_constraint
                pattern (lib/types.ml[819,26182+42]..[819,26182+43])
                  Ppat_var "k" (lib/types.ml[819,26182+42]..[819,26182+43])
                core_type (lib/types.ml[819,26182+46]..[819,26182+56])
                  Ptyp_constr "field_kind" (lib/types.ml[819,26182+46]..[819,26182+56])
                  []
          ]
          None
          Pfunction_body
            expression (lib/types.ml[820,26242+2]..[830,26666+38])
              Pexp_match
              expression (lib/types.ml[820,26242+8]..[820,26242+14])
                Pexp_ident "inside" (lib/types.ml[820,26242+8]..[820,26242+14])
              [
                <case>
                  pattern (lib/types.ml[821,26262+4]..[821,26262+52])
                    Ppat_alias "inside" (lib/types.ml[821,26262+46]..[821,26262+52])
                    pattern (lib/types.ml[821,26262+4]..[821,26262+42])
                      Ppat_construct "FKvar" (lib/types.ml[821,26262+4]..[821,26262+9])
                      Some
                        []
                        pattern (lib/types.ml[821,26262+10]..[821,26262+42])
                          Ppat_alias "rk" (lib/types.ml[821,26262+39]..[821,26262+41])
                          pattern (lib/types.ml[821,26262+11]..[821,26262+35])
                            Ppat_record Closed
                            [
                              "field_kind" (lib/types.ml[821,26262+12]..[821,26262+22])
                                pattern (lib/types.ml[821,26262+25]..[821,26262+34])
                                  Ppat_construct "FKprivate" (lib/types.ml[821,26262+25]..[821,26262+34])
                                  None
                            ]
                  expression (lib/types.ml[823,26391+6]..[827,26562+9])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lib/types.ml[823,26391+10]..[823,26391+44])
                          Ppat_alias "k" (lib/types.ml[823,26391+43]..[823,26391+44])
                          pattern (lib/types.ml[823,26391+10]..[823,26391+39])
                            Ppat_or
                            pattern (lib/types.ml[823,26391+10]..[823,26391+28])
                              Ppat_or
                              pattern (lib/types.ml[823,26391+10]..[823,26391+17])
                                Ppat_construct "FKvar" (lib/types.ml[823,26391+10]..[823,26391+15])
                                Some
                                  []
                                  pattern (lib/types.ml[823,26391+16]..[823,26391+17])
                                    Ppat_any
                              pattern (lib/types.ml[823,26391+20]..[823,26391+28])
                                Ppat_construct "FKpublic" (lib/types.ml[823,26391+20]..[823,26391+28])
                                None
                            pattern (lib/types.ml[823,26391+31]..[823,26391+39])
                              Ppat_construct "FKabsent" (lib/types.ml[823,26391+31]..[823,26391+39])
                              None
                        expression (lib/types.ml[823,26391+47]..[823,26391+73])
                          Pexp_apply
                          expression (lib/types.ml[823,26391+47]..[823,26391+71])
                            Pexp_ident "field_kind_internal_repr" (lib/types.ml[823,26391+47]..[823,26391+71])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[823,26391+72]..[823,26391+73])
                                Pexp_ident "k" (lib/types.ml[823,26391+72]..[823,26391+73])
                          ]
                    ]
                    expression (lib/types.ml[824,26468+6]..[827,26562+9])
                      Pexp_ifthenelse
                      expression (lib/types.ml[824,26468+9]..[824,26468+20])
                        Pexp_apply
                        expression (lib/types.ml[824,26468+11]..[824,26468+13])
                          Pexp_ident "!=" (lib/types.ml[824,26468+11]..[824,26468+13])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[824,26468+9]..[824,26468+10])
                              Pexp_ident "k" (lib/types.ml[824,26468+9]..[824,26468+10])
                          <arg>
                          Nolabel
                            expression (lib/types.ml[824,26468+14]..[824,26468+20])
                              Pexp_ident "inside" (lib/types.ml[824,26468+14]..[824,26468+20])
                        ]
                      expression (lib/types.ml[824,26468+26]..[827,26562+9])
                        Pexp_sequence
                        expression (lib/types.ml[825,26500+8]..[825,26500+33])
                          Pexp_apply
                          expression (lib/types.ml[825,26500+8]..[825,26500+18])
                            Pexp_ident "log_change" (lib/types.ml[825,26500+8]..[825,26500+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[825,26500+19]..[825,26500+33])
                                Pexp_construct "Ckind" (lib/types.ml[825,26500+20]..[825,26500+25])
                                Some
                                  expression (lib/types.ml[825,26500+26]..[825,26500+32])
                                    Pexp_ident "inside" (lib/types.ml[825,26500+26]..[825,26500+32])
                          ]
                        expression (lib/types.ml[826,26535+8]..[826,26535+26])
                          Pexp_setfield
                          expression (lib/types.ml[826,26535+8]..[826,26535+10])
                            Pexp_ident "rk" (lib/types.ml[826,26535+8]..[826,26535+10])
                          "field_kind" (lib/types.ml[826,26535+11]..[826,26535+21])
                          expression (lib/types.ml[826,26535+25]..[826,26535+26])
                            Pexp_ident "k" (lib/types.ml[826,26535+25]..[826,26535+26])
                      None
                <case>
                  pattern (lib/types.ml[828,26572+4]..[828,26572+64])
                    Ppat_construct "FKvar" (lib/types.ml[828,26572+4]..[828,26572+9])
                    Some
                      []
                      pattern (lib/types.ml[828,26572+10]..[828,26572+64])
                        Ppat_record Closed
                        [
                          "field_kind" (lib/types.ml[828,26572+11]..[828,26572+21])
                            pattern (lib/types.ml[828,26572+24]..[828,26572+63])
                              Ppat_alias "inside" (lib/types.ml[828,26572+57]..[828,26572+63])
                              pattern (lib/types.ml[828,26572+24]..[828,26572+53])
                                Ppat_or
                                pattern (lib/types.ml[828,26572+24]..[828,26572+42])
                                  Ppat_or
                                  pattern (lib/types.ml[828,26572+24]..[828,26572+31])
                                    Ppat_construct "FKvar" (lib/types.ml[828,26572+24]..[828,26572+29])
                                    Some
                                      []
                                      pattern (lib/types.ml[828,26572+30]..[828,26572+31])
                                        Ppat_any
                                  pattern (lib/types.ml[828,26572+34]..[828,26572+42])
                                    Ppat_construct "FKpublic" (lib/types.ml[828,26572+34]..[828,26572+42])
                                    None
                                pattern (lib/types.ml[828,26572+45]..[828,26572+53])
                                  Ppat_construct "FKabsent" (lib/types.ml[828,26572+45]..[828,26572+53])
                                  None
                        ]
                  expression (lib/types.ml[829,26640+6]..[829,26640+25])
                    Pexp_apply
                    expression (lib/types.ml[829,26640+6]..[829,26640+15])
                      Pexp_ident "link_kind" (lib/types.ml[829,26640+6]..[829,26640+15])
                    [
                      <arg>
                      Labelled "inside"
                        expression (lib/types.ml[829,26640+17]..[829,26640+23])
                          Pexp_ident "inside" (lib/types.ml[829,26640+17]..[829,26640+23])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[829,26640+24]..[829,26640+25])
                          Pexp_ident "k" (lib/types.ml[829,26640+24]..[829,26640+25])
                    ]
                <case>
                  pattern (lib/types.ml[830,26666+4]..[830,26666+5])
                    Ppat_any
                  expression (lib/types.ml[830,26666+9]..[830,26666+38])
                    Pexp_apply
                    expression (lib/types.ml[830,26666+9]..[830,26666+20])
                      Pexp_ident "invalid_arg" (lib/types.ml[830,26666+9]..[830,26666+20])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[830,26666+21]..[830,26666+38])
                          Pexp_constant PConst_string("Types.link_kind",(lib/types.ml[830,26666+22]..[830,26666+37]),None)
                    ]
              ]
    ]
  structure_item (lib/types.ml[832,26706+0]..[834,26824+10])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[832,26706+8]..[832,26706+18])
          Ppat_var "commu_repr" (lib/types.ml[832,26706+8]..[832,26706+18])
        core_type (lib/types.ml[832,26706+21]..[832,26706+45])
          Ptyp_arrow
          Nolabel
          core_type (lib/types.ml[832,26706+21]..[832,26706+31])
            Ptyp_constr "commutable" (lib/types.ml[832,26706+21]..[832,26706+31])
            []
          core_type (lib/types.ml[832,26706+35]..[832,26706+45])
            Ptyp_constr "commutable" (lib/types.ml[832,26706+35]..[832,26706+45])
            []
        expression (lib/types.ml[832,26706+48]..[834,26824+10])
          Pexp_function
          []
          None
          Pfunction_cases (lib/types.ml[832,26706+48]..[834,26824+10])
            [
              <case>
                pattern (lib/types.ml[833,26763+4]..[833,26763+40])
                  Ppat_construct "Cvar" (lib/types.ml[833,26763+4]..[833,26763+8])
                  Some
                    []
                    pattern (lib/types.ml[833,26763+9]..[833,26763+40])
                      Ppat_record Closed
                      [
                        "commu" (lib/types.ml[833,26763+10]..[833,26763+15])
                          pattern (lib/types.ml[833,26763+18]..[833,26763+39])
                            Ppat_alias "commu" (lib/types.ml[833,26763+34]..[833,26763+39])
                            pattern (lib/types.ml[833,26763+18]..[833,26763+30])
                              Ppat_or
                              pattern (lib/types.ml[833,26763+18]..[833,26763+24])
                                Ppat_construct "Cvar" (lib/types.ml[833,26763+18]..[833,26763+22])
                                Some
                                  []
                                  pattern (lib/types.ml[833,26763+23]..[833,26763+24])
                                    Ppat_any
                              pattern (lib/types.ml[833,26763+27]..[833,26763+30])
                                Ppat_construct "Cok" (lib/types.ml[833,26763+27]..[833,26763+30])
                                None
                      ]
                expression (lib/types.ml[833,26763+44]..[833,26763+60])
                  Pexp_apply
                  expression (lib/types.ml[833,26763+44]..[833,26763+54])
                    Pexp_ident "commu_repr" (lib/types.ml[833,26763+44]..[833,26763+54])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[833,26763+55]..[833,26763+60])
                        Pexp_ident "commu" (lib/types.ml[833,26763+55]..[833,26763+60])
                  ]
              <case>
                pattern (lib/types.ml[834,26824+4]..[834,26824+5])
                  Ppat_var "c" (lib/types.ml[834,26824+4]..[834,26824+5])
                expression (lib/types.ml[834,26824+9]..[834,26824+10])
                  Pexp_ident "c" (lib/types.ml[834,26824+9]..[834,26824+10])
            ]
    ]
  structure_item (lib/types.ml[836,26836+0]..[847,27257+39])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[836,26836+8]..[836,26836+18])
          Ppat_var "link_commu" (lib/types.ml[836,26836+8]..[836,26836+18])
        expression (lib/types.ml[836,26836+19]..[847,27257+39]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[836,26836+19]..[836,26836+41])
              Labelled "inside"
              None
              pattern (lib/types.ml[836,26836+21]..[836,26836+40])
                Ppat_constraint
                pattern (lib/types.ml[836,26836+21]..[836,26836+27])
                  Ppat_var "inside" (lib/types.ml[836,26836+21]..[836,26836+27])
                core_type (lib/types.ml[836,26836+30]..[836,26836+40])
                  Ptyp_constr "commutable" (lib/types.ml[836,26836+30]..[836,26836+40])
                  []
            Pparam_val (lib/types.ml[836,26836+42]..[836,26836+58])
              Nolabel
              None
              pattern (lib/types.ml[836,26836+42]..[836,26836+58])
                Ppat_constraint
                pattern (lib/types.ml[836,26836+43]..[836,26836+44])
                  Ppat_var "c" (lib/types.ml[836,26836+43]..[836,26836+44])
                core_type (lib/types.ml[836,26836+47]..[836,26836+57])
                  Ptyp_constr "commutable" (lib/types.ml[836,26836+47]..[836,26836+57])
                  []
          ]
          None
          Pfunction_body
            expression (lib/types.ml[837,26897+2]..[847,27257+39])
              Pexp_match
              expression (lib/types.ml[837,26897+8]..[837,26897+14])
                Pexp_ident "inside" (lib/types.ml[837,26897+8]..[837,26897+14])
              [
                <case>
                  pattern (lib/types.ml[838,26917+4]..[838,26917+45])
                    Ppat_alias "inside" (lib/types.ml[838,26917+39]..[838,26917+45])
                    pattern (lib/types.ml[838,26917+4]..[838,26917+35])
                      Ppat_construct "Cvar" (lib/types.ml[838,26917+4]..[838,26917+8])
                      Some
                        []
                        pattern (lib/types.ml[838,26917+9]..[838,26917+35])
                          Ppat_alias "rc" (lib/types.ml[838,26917+32]..[838,26917+34])
                          pattern (lib/types.ml[838,26917+10]..[838,26917+28])
                            Ppat_record Closed
                            [
                              "commu" (lib/types.ml[838,26917+11]..[838,26917+16])
                                pattern (lib/types.ml[838,26917+19]..[838,26917+27])
                                  Ppat_construct "Cunknown" (lib/types.ml[838,26917+19]..[838,26917+27])
                                  None
                            ]
                  expression (lib/types.ml[840,27039+6]..[844,27175+9])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lib/types.ml[840,27039+10]..[840,27039+27])
                          Ppat_alias "c" (lib/types.ml[840,27039+26]..[840,27039+27])
                          pattern (lib/types.ml[840,27039+10]..[840,27039+22])
                            Ppat_or
                            pattern (lib/types.ml[840,27039+10]..[840,27039+16])
                              Ppat_construct "Cvar" (lib/types.ml[840,27039+10]..[840,27039+14])
                              Some
                                []
                                pattern (lib/types.ml[840,27039+15]..[840,27039+16])
                                  Ppat_any
                            pattern (lib/types.ml[840,27039+19]..[840,27039+22])
                              Ppat_construct "Cok" (lib/types.ml[840,27039+19]..[840,27039+22])
                              None
                        expression (lib/types.ml[840,27039+30]..[840,27039+42])
                          Pexp_apply
                          expression (lib/types.ml[840,27039+30]..[840,27039+40])
                            Pexp_ident "commu_repr" (lib/types.ml[840,27039+30]..[840,27039+40])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[840,27039+41]..[840,27039+42])
                                Pexp_ident "c" (lib/types.ml[840,27039+41]..[840,27039+42])
                          ]
                    ]
                    expression (lib/types.ml[841,27085+6]..[844,27175+9])
                      Pexp_ifthenelse
                      expression (lib/types.ml[841,27085+9]..[841,27085+20])
                        Pexp_apply
                        expression (lib/types.ml[841,27085+11]..[841,27085+13])
                          Pexp_ident "!=" (lib/types.ml[841,27085+11]..[841,27085+13])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[841,27085+9]..[841,27085+10])
                              Pexp_ident "c" (lib/types.ml[841,27085+9]..[841,27085+10])
                          <arg>
                          Nolabel
                            expression (lib/types.ml[841,27085+14]..[841,27085+20])
                              Pexp_ident "inside" (lib/types.ml[841,27085+14]..[841,27085+20])
                        ]
                      expression (lib/types.ml[841,27085+26]..[844,27175+9])
                        Pexp_sequence
                        expression (lib/types.ml[842,27117+8]..[842,27117+34])
                          Pexp_apply
                          expression (lib/types.ml[842,27117+8]..[842,27117+18])
                            Pexp_ident "log_change" (lib/types.ml[842,27117+8]..[842,27117+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[842,27117+19]..[842,27117+34])
                                Pexp_construct "Ccommu" (lib/types.ml[842,27117+20]..[842,27117+26])
                                Some
                                  expression (lib/types.ml[842,27117+27]..[842,27117+33])
                                    Pexp_ident "inside" (lib/types.ml[842,27117+27]..[842,27117+33])
                          ]
                        expression (lib/types.ml[843,27153+8]..[843,27153+21])
                          Pexp_setfield
                          expression (lib/types.ml[843,27153+8]..[843,27153+10])
                            Pexp_ident "rc" (lib/types.ml[843,27153+8]..[843,27153+10])
                          "commu" (lib/types.ml[843,27153+11]..[843,27153+16])
                          expression (lib/types.ml[843,27153+20]..[843,27153+21])
                            Pexp_ident "c" (lib/types.ml[843,27153+20]..[843,27153+21])
                      None
                <case>
                  pattern (lib/types.ml[845,27185+4]..[845,27185+41])
                    Ppat_construct "Cvar" (lib/types.ml[845,27185+4]..[845,27185+8])
                    Some
                      []
                      pattern (lib/types.ml[845,27185+9]..[845,27185+41])
                        Ppat_record Closed
                        [
                          "commu" (lib/types.ml[845,27185+10]..[845,27185+15])
                            pattern (lib/types.ml[845,27185+18]..[845,27185+40])
                              Ppat_alias "inside" (lib/types.ml[845,27185+34]..[845,27185+40])
                              pattern (lib/types.ml[845,27185+18]..[845,27185+30])
                                Ppat_or
                                pattern (lib/types.ml[845,27185+18]..[845,27185+24])
                                  Ppat_construct "Cvar" (lib/types.ml[845,27185+18]..[845,27185+22])
                                  Some
                                    []
                                    pattern (lib/types.ml[845,27185+23]..[845,27185+24])
                                      Ppat_any
                                pattern (lib/types.ml[845,27185+27]..[845,27185+30])
                                  Ppat_construct "Cok" (lib/types.ml[845,27185+27]..[845,27185+30])
                                  None
                        ]
                  expression (lib/types.ml[846,27230+6]..[846,27230+26])
                    Pexp_apply
                    expression (lib/types.ml[846,27230+6]..[846,27230+16])
                      Pexp_ident "link_commu" (lib/types.ml[846,27230+6]..[846,27230+16])
                    [
                      <arg>
                      Labelled "inside"
                        expression (lib/types.ml[846,27230+18]..[846,27230+24])
                          Pexp_ident "inside" (lib/types.ml[846,27230+18]..[846,27230+24])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[846,27230+25]..[846,27230+26])
                          Pexp_ident "c" (lib/types.ml[846,27230+25]..[846,27230+26])
                    ]
                <case>
                  pattern (lib/types.ml[847,27257+4]..[847,27257+5])
                    Ppat_any
                  expression (lib/types.ml[847,27257+9]..[847,27257+39])
                    Pexp_apply
                    expression (lib/types.ml[847,27257+9]..[847,27257+20])
                      Pexp_ident "invalid_arg" (lib/types.ml[847,27257+9]..[847,27257+20])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[847,27257+21]..[847,27257+39])
                          Pexp_constant PConst_string("Types.link_commu",(lib/types.ml[847,27257+22]..[847,27257+38]),None)
                    ]
              ]
    ]
  structure_item (lib/types.ml[849,27298+0]..[849,27298+45])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[849,27298+4]..[849,27298+16])
          Ppat_var "set_commu_ok" (lib/types.ml[849,27298+4]..[849,27298+16])
        expression (lib/types.ml[849,27298+17]..[849,27298+45]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[849,27298+17]..[849,27298+18])
              Nolabel
              None
              pattern (lib/types.ml[849,27298+17]..[849,27298+18])
                Ppat_var "c" (lib/types.ml[849,27298+17]..[849,27298+18])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[849,27298+21]..[849,27298+45])
              Pexp_apply
              expression (lib/types.ml[849,27298+21]..[849,27298+31])
                Pexp_ident "link_commu" (lib/types.ml[849,27298+21]..[849,27298+31])
              [
                <arg>
                Labelled "inside"
                  expression (lib/types.ml[849,27298+40]..[849,27298+41])
                    Pexp_ident "c" (lib/types.ml[849,27298+40]..[849,27298+41])
                <arg>
                Nolabel
                  expression (lib/types.ml[849,27298+42]..[849,27298+45])
                    Pexp_construct "Cok" (lib/types.ml[849,27298+42]..[849,27298+45])
                    None
              ]
    ]
  structure_item (lib/types.ml[851,27345+0]..[854,27421+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[851,27345+4]..[851,27345+12])
          Ppat_var "snapshot" (lib/types.ml[851,27345+4]..[851,27345+12])
        expression (lib/types.ml[851,27345+13]..[854,27421+15]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[851,27345+13]..[851,27345+15])
              Nolabel
              None
              pattern (lib/types.ml[851,27345+13]..[851,27345+15])
                Ppat_construct "()" (lib/types.ml[851,27345+13]..[851,27345+15])
                None
          ]
          None
          Pfunction_body
            expression (lib/types.ml[852,27363+2]..[854,27421+15])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/types.ml[852,27363+6]..[852,27363+9])
                    Ppat_var "old" (lib/types.ml[852,27363+6]..[852,27363+9])
                  expression (lib/types.ml[852,27363+12]..[852,27363+26])
                    Pexp_apply
                    expression (lib/types.ml[852,27363+12]..[852,27363+13])
                      Pexp_ident "!" (lib/types.ml[852,27363+12]..[852,27363+13])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[852,27363+13]..[852,27363+26])
                          Pexp_ident "last_snapshot" (lib/types.ml[852,27363+13]..[852,27363+26])
                    ]
              ]
              expression (lib/types.ml[853,27393+2]..[854,27421+15])
                Pexp_sequence
                expression (lib/types.ml[853,27393+2]..[853,27393+26])
                  Pexp_apply
                  expression (lib/types.ml[853,27393+16]..[853,27393+18])
                    Pexp_ident ":=" (lib/types.ml[853,27393+16]..[853,27393+18])
                  [
                    <arg>
                    Nolabel
                      expression (lib/types.ml[853,27393+2]..[853,27393+15])
                        Pexp_ident "last_snapshot" (lib/types.ml[853,27393+2]..[853,27393+15])
                    <arg>
                    Nolabel
                      expression (lib/types.ml[853,27393+19]..[853,27393+26])
                        Pexp_apply
                        expression (lib/types.ml[853,27393+19]..[853,27393+20])
                          Pexp_ident "!" (lib/types.ml[853,27393+19]..[853,27393+20])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[853,27393+20]..[853,27393+26])
                              Pexp_ident "new_id" (lib/types.ml[853,27393+20]..[853,27393+26])
                        ]
                  ]
                expression (lib/types.ml[854,27421+2]..[854,27421+15])
                  Pexp_tuple
                  [
                    expression (lib/types.ml[854,27421+3]..[854,27421+9])
                      Pexp_apply
                      expression (lib/types.ml[854,27421+3]..[854,27421+4])
                        Pexp_ident "!" (lib/types.ml[854,27421+3]..[854,27421+4])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[854,27421+4]..[854,27421+9])
                            Pexp_ident "trail" (lib/types.ml[854,27421+4]..[854,27421+9])
                      ]
                    expression (lib/types.ml[854,27421+11]..[854,27421+14])
                      Pexp_ident "old" (lib/types.ml[854,27421+11]..[854,27421+14])
                  ]
    ]
  structure_item (lib/types.ml[856,27438+0]..[862,27591+26])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[856,27438+8]..[856,27438+15])
          Ppat_var "rev_log" (lib/types.ml[856,27438+8]..[856,27438+15])
        expression (lib/types.ml[856,27438+16]..[862,27591+26]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[856,27438+16]..[856,27438+20])
              Nolabel
              None
              pattern (lib/types.ml[856,27438+16]..[856,27438+20])
                Ppat_var "accu" (lib/types.ml[856,27438+16]..[856,27438+20])
          ]
          None
          Pfunction_cases (lib/types.ml[856,27438+23]..[862,27591+26])
            [
              <case>
                pattern (lib/types.ml[857,27470+4]..[857,27470+13])
                  Ppat_construct "Unchanged" (lib/types.ml[857,27470+4]..[857,27470+13])
                  None
                expression (lib/types.ml[857,27470+17]..[857,27470+21])
                  Pexp_ident "accu" (lib/types.ml[857,27470+17]..[857,27470+21])
              <case>
                pattern (lib/types.ml[858,27492+4]..[858,27492+11])
                  Ppat_construct "Invalid" (lib/types.ml[858,27492+4]..[858,27492+11])
                  None
                expression (lib/types.ml[858,27492+15]..[858,27492+27])
                  Pexp_assert
                  expression (lib/types.ml[858,27492+22]..[858,27492+27])
                    Pexp_construct "false" (lib/types.ml[858,27492+22]..[858,27492+27])
                    None
              <case>
                pattern (lib/types.ml[859,27520+4]..[859,27520+21])
                  Ppat_construct "Change" (lib/types.ml[859,27520+4]..[859,27520+10])
                  Some
                    []
                    pattern (lib/types.ml[859,27520+11]..[859,27520+21])
                      Ppat_tuple
                      [
                        pattern (lib/types.ml[859,27520+12]..[859,27520+14])
                          Ppat_var "ch" (lib/types.ml[859,27520+12]..[859,27520+14])
                        pattern (lib/types.ml[859,27520+16]..[859,27520+20])
                          Ppat_var "next" (lib/types.ml[859,27520+16]..[859,27520+20])
                      ]
                expression (lib/types.ml[860,27545+6]..[862,27591+26])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lib/types.ml[860,27545+10]..[860,27545+11])
                        Ppat_var "d" (lib/types.ml[860,27545+10]..[860,27545+11])
                      expression (lib/types.ml[860,27545+14]..[860,27545+19])
                        Pexp_apply
                        expression (lib/types.ml[860,27545+14]..[860,27545+15])
                          Pexp_ident "!" (lib/types.ml[860,27545+14]..[860,27545+15])
                        [
                          <arg>
                          Nolabel
                            expression (lib/types.ml[860,27545+15]..[860,27545+19])
                              Pexp_ident "next" (lib/types.ml[860,27545+15]..[860,27545+19])
                        ]
                  ]
                  expression (lib/types.ml[861,27568+6]..[862,27591+26])
                    Pexp_sequence
                    expression (lib/types.ml[861,27568+6]..[861,27568+21])
                      Pexp_apply
                      expression (lib/types.ml[861,27568+11]..[861,27568+13])
                        Pexp_ident ":=" (lib/types.ml[861,27568+11]..[861,27568+13])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[861,27568+6]..[861,27568+10])
                            Pexp_ident "next" (lib/types.ml[861,27568+6]..[861,27568+10])
                        <arg>
                        Nolabel
                          expression (lib/types.ml[861,27568+14]..[861,27568+21])
                            Pexp_construct "Invalid" (lib/types.ml[861,27568+14]..[861,27568+21])
                            None
                      ]
                    expression (lib/types.ml[862,27591+6]..[862,27591+26])
                      Pexp_apply
                      expression (lib/types.ml[862,27591+6]..[862,27591+13])
                        Pexp_ident "rev_log" (lib/types.ml[862,27591+6]..[862,27591+13])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[862,27591+14]..[862,27591+24])
                            Pexp_construct "::" (lib/types.ml[862,27591+17]..[862,27591+19])
                            Some
                              expression (lib/types.ml[862,27591+15]..[862,27591+23]) ghost
                                Pexp_tuple
                                [
                                  expression (lib/types.ml[862,27591+15]..[862,27591+17])
                                    Pexp_ident "ch" (lib/types.ml[862,27591+15]..[862,27591+17])
                                  expression (lib/types.ml[862,27591+19]..[862,27591+23])
                                    Pexp_ident "accu" (lib/types.ml[862,27591+19]..[862,27591+23])
                                ]
                        <arg>
                        Nolabel
                          expression (lib/types.ml[862,27591+25]..[862,27591+26])
                            Pexp_ident "d" (lib/types.ml[862,27591+25]..[862,27591+26])
                      ]
            ]
    ]
  structure_item (lib/types.ml[864,27619+0]..[874,27953+22])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[864,27619+4]..[864,27619+13])
          Ppat_var "backtrack" (lib/types.ml[864,27619+4]..[864,27619+13])
        expression (lib/types.ml[864,27619+14]..[874,27953+22]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[864,27619+14]..[864,27619+29])
              Labelled "cleanup_abbrev"
              None
              pattern (lib/types.ml[864,27619+15]..[864,27619+29])
                Ppat_var "cleanup_abbrev" (lib/types.ml[864,27619+15]..[864,27619+29])
            Pparam_val (lib/types.ml[864,27619+30]..[864,27619+44])
              Nolabel
              None
              pattern (lib/types.ml[864,27619+30]..[864,27619+44])
                Ppat_tuple
                [
                  pattern (lib/types.ml[864,27619+31]..[864,27619+38])
                    Ppat_var "changes" (lib/types.ml[864,27619+31]..[864,27619+38])
                  pattern (lib/types.ml[864,27619+40]..[864,27619+43])
                    Ppat_var "old" (lib/types.ml[864,27619+40]..[864,27619+43])
                ]
          ]
          None
          Pfunction_body
            expression (lib/types.ml[865,27666+2]..[874,27953+22])
              Pexp_match
              expression (lib/types.ml[865,27666+8]..[865,27666+16])
                Pexp_apply
                expression (lib/types.ml[865,27666+8]..[865,27666+9])
                  Pexp_ident "!" (lib/types.ml[865,27666+8]..[865,27666+9])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[865,27666+9]..[865,27666+16])
                      Pexp_ident "changes" (lib/types.ml[865,27666+9]..[865,27666+16])
                ]
              [
                <case>
                  pattern (lib/types.ml[866,27688+4]..[866,27688+13])
                    Ppat_construct "Unchanged" (lib/types.ml[866,27688+4]..[866,27688+13])
                    None
                  expression (lib/types.ml[866,27688+17]..[866,27688+37])
                    Pexp_apply
                    expression (lib/types.ml[866,27688+31]..[866,27688+33])
                      Pexp_ident ":=" (lib/types.ml[866,27688+31]..[866,27688+33])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[866,27688+17]..[866,27688+30])
                          Pexp_ident "last_snapshot" (lib/types.ml[866,27688+17]..[866,27688+30])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[866,27688+34]..[866,27688+37])
                          Pexp_ident "old" (lib/types.ml[866,27688+34]..[866,27688+37])
                    ]
                <case>
                  pattern (lib/types.ml[867,27726+4]..[867,27726+11])
                    Ppat_construct "Invalid" (lib/types.ml[867,27726+4]..[867,27726+11])
                    None
                  expression (lib/types.ml[867,27726+15]..[867,27726+41])
                    Pexp_apply
                    expression (lib/types.ml[867,27726+15]..[867,27726+23])
                      Pexp_ident "failwith" (lib/types.ml[867,27726+15]..[867,27726+23])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[867,27726+24]..[867,27726+41])
                          Pexp_constant PConst_string("Types.backtrack",(lib/types.ml[867,27726+25]..[867,27726+40]),None)
                    ]
                <case>
                  pattern (lib/types.ml[868,27768+4]..[868,27768+22])
                    Ppat_alias "change" (lib/types.ml[868,27768+16]..[868,27768+22])
                    pattern (lib/types.ml[868,27768+4]..[868,27768+12])
                      Ppat_construct "Change" (lib/types.ml[868,27768+4]..[868,27768+10])
                      Some
                        []
                        pattern (lib/types.ml[868,27768+11]..[868,27768+12])
                          Ppat_any
                  expression (lib/types.ml[869,27794+6]..[874,27953+22])
                    Pexp_sequence
                    expression (lib/types.ml[869,27794+6]..[869,27794+23])
                      Pexp_apply
                      expression (lib/types.ml[869,27794+6]..[869,27794+20])
                        Pexp_ident "cleanup_abbrev" (lib/types.ml[869,27794+6]..[869,27794+20])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[869,27794+21]..[869,27794+23])
                            Pexp_construct "()" (lib/types.ml[869,27794+21]..[869,27794+23])
                            None
                      ]
                    expression (lib/types.ml[870,27819+6]..[874,27953+22])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lib/types.ml[870,27819+10]..[870,27819+17])
                            Ppat_var "backlog" (lib/types.ml[870,27819+10]..[870,27819+17])
                          expression (lib/types.ml[870,27819+20]..[870,27819+37])
                            Pexp_apply
                            expression (lib/types.ml[870,27819+20]..[870,27819+27])
                              Pexp_ident "rev_log" (lib/types.ml[870,27819+20]..[870,27819+27])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[870,27819+28]..[870,27819+30])
                                  Pexp_construct "[]" (lib/types.ml[870,27819+28]..[870,27819+30])
                                  None
                              <arg>
                              Nolabel
                                expression (lib/types.ml[870,27819+31]..[870,27819+37])
                                  Pexp_ident "change" (lib/types.ml[870,27819+31]..[870,27819+37])
                            ]
                      ]
                      expression (lib/types.ml[871,27860+6]..[874,27953+22])
                        Pexp_sequence
                        expression (lib/types.ml[871,27860+6]..[871,27860+35])
                          Pexp_apply
                          expression (lib/types.ml[871,27860+6]..[871,27860+15])
                            Pexp_ident "List.iter" (lib/types.ml[871,27860+6]..[871,27860+15])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[871,27860+16]..[871,27860+27])
                                Pexp_ident "undo_change" (lib/types.ml[871,27860+16]..[871,27860+27])
                            <arg>
                            Nolabel
                              expression (lib/types.ml[871,27860+28]..[871,27860+35])
                                Pexp_ident "backlog" (lib/types.ml[871,27860+28]..[871,27860+35])
                          ]
                        expression (lib/types.ml[872,27897+6]..[874,27953+22])
                          Pexp_sequence
                          expression (lib/types.ml[872,27897+6]..[872,27897+26])
                            Pexp_apply
                            expression (lib/types.ml[872,27897+14]..[872,27897+16])
                              Pexp_ident ":=" (lib/types.ml[872,27897+14]..[872,27897+16])
                            [
                              <arg>
                              Nolabel
                                expression (lib/types.ml[872,27897+6]..[872,27897+13])
                                  Pexp_ident "changes" (lib/types.ml[872,27897+6]..[872,27897+13])
                              <arg>
                              Nolabel
                                expression (lib/types.ml[872,27897+17]..[872,27897+26])
                                  Pexp_construct "Unchanged" (lib/types.ml[872,27897+17]..[872,27897+26])
                                  None
                            ]
                          expression (lib/types.ml[873,27925+6]..[874,27953+22])
                            Pexp_sequence
                            expression (lib/types.ml[873,27925+6]..[873,27925+26])
                              Pexp_apply
                              expression (lib/types.ml[873,27925+20]..[873,27925+22])
                                Pexp_ident ":=" (lib/types.ml[873,27925+20]..[873,27925+22])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[873,27925+6]..[873,27925+19])
                                    Pexp_ident "last_snapshot" (lib/types.ml[873,27925+6]..[873,27925+19])
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[873,27925+23]..[873,27925+26])
                                    Pexp_ident "old" (lib/types.ml[873,27925+23]..[873,27925+26])
                              ]
                            expression (lib/types.ml[874,27953+6]..[874,27953+22])
                              Pexp_apply
                              expression (lib/types.ml[874,27953+12]..[874,27953+14])
                                Pexp_ident ":=" (lib/types.ml[874,27953+12]..[874,27953+14])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[874,27953+6]..[874,27953+11])
                                    Pexp_ident "trail" (lib/types.ml[874,27953+6]..[874,27953+11])
                                <arg>
                                Nolabel
                                  expression (lib/types.ml[874,27953+15]..[874,27953+22])
                                    Pexp_ident "changes" (lib/types.ml[874,27953+15]..[874,27953+22])
                              ]
              ]
    ]
  structure_item (lib/types.ml[876,27977+0]..[880,28085+11])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[876,27977+4]..[876,27977+27])
          Ppat_var "undo_first_change_after" (lib/types.ml[876,27977+4]..[876,27977+27])
        expression (lib/types.ml[876,27977+28]..[880,28085+11]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[876,27977+28]..[876,27977+40])
              Nolabel
              None
              pattern (lib/types.ml[876,27977+28]..[876,27977+40])
                Ppat_tuple
                [
                  pattern (lib/types.ml[876,27977+29]..[876,27977+36])
                    Ppat_var "changes" (lib/types.ml[876,27977+29]..[876,27977+36])
                  pattern (lib/types.ml[876,27977+38]..[876,27977+39])
                    Ppat_any
                ]
          ]
          None
          Pfunction_body
            expression (lib/types.ml[877,28020+2]..[880,28085+11])
              Pexp_match
              expression (lib/types.ml[877,28020+8]..[877,28020+16])
                Pexp_apply
                expression (lib/types.ml[877,28020+8]..[877,28020+9])
                  Pexp_ident "!" (lib/types.ml[877,28020+8]..[877,28020+9])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[877,28020+9]..[877,28020+16])
                      Pexp_ident "changes" (lib/types.ml[877,28020+9]..[877,28020+16])
                ]
              [
                <case>
                  pattern (lib/types.ml[878,28042+4]..[878,28042+18])
                    Ppat_construct "Change" (lib/types.ml[878,28042+4]..[878,28042+10])
                    Some
                      []
                      pattern (lib/types.ml[878,28042+11]..[878,28042+18])
                        Ppat_tuple
                        [
                          pattern (lib/types.ml[878,28042+12]..[878,28042+14])
                            Ppat_var "ch" (lib/types.ml[878,28042+12]..[878,28042+14])
                          pattern (lib/types.ml[878,28042+16]..[878,28042+17])
                            Ppat_any
                        ]
                  expression (lib/types.ml[879,28064+6]..[879,28064+20])
                    Pexp_apply
                    expression (lib/types.ml[879,28064+6]..[879,28064+17])
                      Pexp_ident "undo_change" (lib/types.ml[879,28064+6]..[879,28064+17])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[879,28064+18]..[879,28064+20])
                          Pexp_ident "ch" (lib/types.ml[879,28064+18]..[879,28064+20])
                    ]
                <case>
                  pattern (lib/types.ml[880,28085+4]..[880,28085+5])
                    Ppat_any
                  expression (lib/types.ml[880,28085+9]..[880,28085+11])
                    Pexp_construct "()" (lib/types.ml[880,28085+9]..[880,28085+11])
                    None
              ]
    ]
  structure_item (lib/types.ml[882,28098+0]..[889,28279+31])
    Pstr_value Rec
    [
      <def>
        pattern (lib/types.ml[882,28098+8]..[882,28098+24])
          Ppat_var "rev_compress_log" (lib/types.ml[882,28098+8]..[882,28098+24])
        expression (lib/types.ml[882,28098+25]..[889,28279+31]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[882,28098+25]..[882,28098+28])
              Nolabel
              None
              pattern (lib/types.ml[882,28098+25]..[882,28098+28])
                Ppat_var "log" (lib/types.ml[882,28098+25]..[882,28098+28])
            Pparam_val (lib/types.ml[882,28098+29]..[882,28098+30])
              Nolabel
              None
              pattern (lib/types.ml[882,28098+29]..[882,28098+30])
                Ppat_var "r" (lib/types.ml[882,28098+29]..[882,28098+30])
          ]
          None
          Pfunction_body
            expression (lib/types.ml[883,28131+2]..[889,28279+31])
              Pexp_match
              expression (lib/types.ml[883,28131+8]..[883,28131+10])
                Pexp_apply
                expression (lib/types.ml[883,28131+8]..[883,28131+9])
                  Pexp_ident "!" (lib/types.ml[883,28131+8]..[883,28131+9])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[883,28131+9]..[883,28131+10])
                      Pexp_ident "r" (lib/types.ml[883,28131+9]..[883,28131+10])
                ]
              [
                <case>
                  pattern (lib/types.ml[884,28147+4]..[884,28147+23])
                    Ppat_or
                    pattern (lib/types.ml[884,28147+4]..[884,28147+13])
                      Ppat_construct "Unchanged" (lib/types.ml[884,28147+4]..[884,28147+13])
                      None
                    pattern (lib/types.ml[884,28147+16]..[884,28147+23])
                      Ppat_construct "Invalid" (lib/types.ml[884,28147+16]..[884,28147+23])
                      None
                  expression (lib/types.ml[885,28174+6]..[885,28174+9])
                    Pexp_ident "log" (lib/types.ml[885,28174+6]..[885,28174+9])
                <case>
                  pattern (lib/types.ml[886,28184+4]..[886,28184+30])
                    Ppat_construct "Change" (lib/types.ml[886,28184+4]..[886,28184+10])
                    Some
                      []
                      pattern (lib/types.ml[886,28184+11]..[886,28184+30])
                        Ppat_tuple
                        [
                          pattern (lib/types.ml[886,28184+12]..[886,28184+23])
                            Ppat_construct "Ccompress" (lib/types.ml[886,28184+12]..[886,28184+21])
                            Some
                              []
                              pattern (lib/types.ml[886,28184+22]..[886,28184+23])
                                Ppat_any
                          pattern (lib/types.ml[886,28184+25]..[886,28184+29])
                            Ppat_var "next" (lib/types.ml[886,28184+25]..[886,28184+29])
                        ]
                  expression (lib/types.ml[887,28218+6]..[887,28218+36])
                    Pexp_apply
                    expression (lib/types.ml[887,28218+6]..[887,28218+22])
                      Pexp_ident "rev_compress_log" (lib/types.ml[887,28218+6]..[887,28218+22])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[887,28218+23]..[887,28218+31])
                          Pexp_construct "::" (lib/types.ml[887,28218+25]..[887,28218+27])
                          Some
                            expression (lib/types.ml[887,28218+24]..[887,28218+30]) ghost
                              Pexp_tuple
                              [
                                expression (lib/types.ml[887,28218+24]..[887,28218+25])
                                  Pexp_ident "r" (lib/types.ml[887,28218+24]..[887,28218+25])
                                expression (lib/types.ml[887,28218+27]..[887,28218+30])
                                  Pexp_ident "log" (lib/types.ml[887,28218+27]..[887,28218+30])
                              ]
                      <arg>
                      Nolabel
                        expression (lib/types.ml[887,28218+32]..[887,28218+36])
                          Pexp_ident "next" (lib/types.ml[887,28218+32]..[887,28218+36])
                    ]
                <case>
                  pattern (lib/types.ml[888,28255+4]..[888,28255+20])
                    Ppat_construct "Change" (lib/types.ml[888,28255+4]..[888,28255+10])
                    Some
                      []
                      pattern (lib/types.ml[888,28255+11]..[888,28255+20])
                        Ppat_tuple
                        [
                          pattern (lib/types.ml[888,28255+12]..[888,28255+13])
                            Ppat_any
                          pattern (lib/types.ml[888,28255+15]..[888,28255+19])
                            Ppat_var "next" (lib/types.ml[888,28255+15]..[888,28255+19])
                        ]
                  expression (lib/types.ml[889,28279+6]..[889,28279+31])
                    Pexp_apply
                    expression (lib/types.ml[889,28279+6]..[889,28279+22])
                      Pexp_ident "rev_compress_log" (lib/types.ml[889,28279+6]..[889,28279+22])
                    [
                      <arg>
                      Nolabel
                        expression (lib/types.ml[889,28279+23]..[889,28279+26])
                          Pexp_ident "log" (lib/types.ml[889,28279+23]..[889,28279+26])
                      <arg>
                      Nolabel
                        expression (lib/types.ml[889,28279+27]..[889,28279+31])
                          Pexp_ident "next" (lib/types.ml[889,28279+27]..[889,28279+31])
                    ]
              ]
    ]
  structure_item (lib/types.ml[891,28312+0]..[902,28658+11])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/types.ml[891,28312+4]..[891,28312+17])
          Ppat_var "undo_compress" (lib/types.ml[891,28312+4]..[891,28312+17])
        expression (lib/types.ml[891,28312+18]..[902,28658+11]) ghost
          Pexp_function
          [
            Pparam_val (lib/types.ml[891,28312+18]..[891,28312+33])
              Nolabel
              None
              pattern (lib/types.ml[891,28312+18]..[891,28312+33])
                Ppat_tuple
                [
                  pattern (lib/types.ml[891,28312+19]..[891,28312+26])
                    Ppat_var "changes" (lib/types.ml[891,28312+19]..[891,28312+26])
                  pattern (lib/types.ml[891,28312+28]..[891,28312+32])
                    Ppat_var "_old" (lib/types.ml[891,28312+28]..[891,28312+32])
                ]
          ]
          None
          Pfunction_body
            expression (lib/types.ml[892,28348+2]..[902,28658+11])
              Pexp_match
              expression (lib/types.ml[892,28348+8]..[892,28348+16])
                Pexp_apply
                expression (lib/types.ml[892,28348+8]..[892,28348+9])
                  Pexp_ident "!" (lib/types.ml[892,28348+8]..[892,28348+9])
                [
                  <arg>
                  Nolabel
                    expression (lib/types.ml[892,28348+9]..[892,28348+16])
                      Pexp_ident "changes" (lib/types.ml[892,28348+9]..[892,28348+16])
                ]
              [
                <case>
                  pattern (lib/types.ml[893,28370+4]..[894,28384+11])
                    Ppat_or
                    pattern (lib/types.ml[893,28370+4]..[893,28370+13])
                      Ppat_construct "Unchanged" (lib/types.ml[893,28370+4]..[893,28370+13])
                      None
                    pattern (lib/types.ml[894,28384+4]..[894,28384+11])
                      Ppat_construct "Invalid" (lib/types.ml[894,28384+4]..[894,28384+11])
                      None
                  expression (lib/types.ml[894,28384+15]..[894,28384+17])
                    Pexp_construct "()" (lib/types.ml[894,28384+15]..[894,28384+17])
                    None
                <case>
                  pattern (lib/types.ml[895,28402+4]..[895,28402+12])
                    Ppat_construct "Change" (lib/types.ml[895,28402+4]..[895,28402+10])
                    Some
                      []
                      pattern (lib/types.ml[895,28402+11]..[895,28402+12])
                        Ppat_any
                  expression (lib/types.ml[896,28418+6]..[902,28658+11])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lib/types.ml[896,28418+10]..[896,28418+13])
                          Ppat_var "log" (lib/types.ml[896,28418+10]..[896,28418+13])
                        expression (lib/types.ml[896,28418+16]..[896,28418+43])
                          Pexp_apply
                          expression (lib/types.ml[896,28418+16]..[896,28418+32])
                            Pexp_ident "rev_compress_log" (lib/types.ml[896,28418+16]..[896,28418+32])
                          [
                            <arg>
                            Nolabel
                              expression (lib/types.ml[896,28418+33]..[896,28418+35])
                                Pexp_construct "[]" (lib/types.ml[896,28418+33]..[896,28418+35])
                                None
                            <arg>
                            Nolabel
                              expression (lib/types.ml[896,28418+36]..[896,28418+43])
                                Pexp_ident "changes" (lib/types.ml[896,28418+36]..[896,28418+43])
                          ]
                    ]
                    expression (lib/types.ml[897,28465+6]..[902,28658+11])
                      Pexp_apply
                      expression (lib/types.ml[897,28465+6]..[897,28465+15])
                        Pexp_ident "List.iter" (lib/types.ml[897,28465+6]..[897,28465+15])
                      [
                        <arg>
                        Nolabel
                          expression (lib/types.ml[898,28481+8]..[901,28639+18])
                            Pexp_function
                            [
                              Pparam_val (lib/types.ml[898,28481+13]..[898,28481+14])
                                Nolabel
                                None
                                pattern (lib/types.ml[898,28481+13]..[898,28481+14])
                                  Ppat_var "r" (lib/types.ml[898,28481+13]..[898,28481+14])
                            ]
                            None
                            Pfunction_body
                              expression (lib/types.ml[898,28481+18]..[901,28639+17])
                                Pexp_match
                                expression (lib/types.ml[898,28481+24]..[898,28481+26])
                                  Pexp_apply
                                  expression (lib/types.ml[898,28481+24]..[898,28481+25])
                                    Pexp_ident "!" (lib/types.ml[898,28481+24]..[898,28481+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/types.ml[898,28481+25]..[898,28481+26])
                                        Pexp_ident "r" (lib/types.ml[898,28481+25]..[898,28481+26])
                                  ]
                                [
                                  <case>
                                    pattern (lib/types.ml[899,28513+10]..[899,28513+48])
                                      Ppat_construct "Change" (lib/types.ml[899,28513+10]..[899,28513+16])
                                      Some
                                        []
                                        pattern (lib/types.ml[899,28513+17]..[899,28513+48])
                                          Ppat_tuple
                                          [
                                            pattern (lib/types.ml[899,28513+18]..[899,28513+41])
                                              Ppat_construct "Ccompress" (lib/types.ml[899,28513+18]..[899,28513+27])
                                              Some
                                                []
                                                pattern (lib/types.ml[899,28513+28]..[899,28513+41])
                                                  Ppat_tuple
                                                  [
                                                    pattern (lib/types.ml[899,28513+29]..[899,28513+31])
                                                      Ppat_var "ty" (lib/types.ml[899,28513+29]..[899,28513+31])
                                                    pattern (lib/types.ml[899,28513+33]..[899,28513+37])
                                                      Ppat_var "desc" (lib/types.ml[899,28513+33]..[899,28513+37])
                                                    pattern (lib/types.ml[899,28513+39]..[899,28513+40])
                                                      Ppat_var "d" (lib/types.ml[899,28513+39]..[899,28513+40])
                                                  ]
                                            pattern (lib/types.ml[899,28513+43]..[899,28513+47])
                                              Ppat_var "next" (lib/types.ml[899,28513+43]..[899,28513+47])
                                          ]
                                    <when>
                                      expression (lib/types.ml[899,28513+54]..[899,28513+66])
                                        Pexp_apply
                                        expression (lib/types.ml[899,28513+62]..[899,28513+64])
                                          Pexp_ident "==" (lib/types.ml[899,28513+62]..[899,28513+64])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/types.ml[899,28513+54]..[899,28513+61])
                                              Pexp_field
                                              expression (lib/types.ml[899,28513+54]..[899,28513+56])
                                                Pexp_ident "ty" (lib/types.ml[899,28513+54]..[899,28513+56])
                                              "desc" (lib/types.ml[899,28513+57]..[899,28513+61])
                                          <arg>
                                          Nolabel
                                            expression (lib/types.ml[899,28513+65]..[899,28513+66])
                                              Pexp_ident "d" (lib/types.ml[899,28513+65]..[899,28513+66])
                                        ]
                                    expression (lib/types.ml[900,28583+12]..[900,28583+55])
                                      Pexp_sequence
                                      expression (lib/types.ml[900,28583+12]..[900,28583+43])
                                        Pexp_apply
                                        expression (lib/types.ml[900,28583+12]..[900,28583+35])
                                          Pexp_ident "Transient_expr.set_desc" (lib/types.ml[900,28583+12]..[900,28583+35])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/types.ml[900,28583+36]..[900,28583+38])
                                              Pexp_ident "ty" (lib/types.ml[900,28583+36]..[900,28583+38])
                                          <arg>
                                          Nolabel
                                            expression (lib/types.ml[900,28583+39]..[900,28583+43])
                                              Pexp_ident "desc" (lib/types.ml[900,28583+39]..[900,28583+43])
                                        ]
                                      expression (lib/types.ml[900,28583+45]..[900,28583+55])
                                        Pexp_apply
                                        expression (lib/types.ml[900,28583+47]..[900,28583+49])
                                          Pexp_ident ":=" (lib/types.ml[900,28583+47]..[900,28583+49])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/types.ml[900,28583+45]..[900,28583+46])
                                              Pexp_ident "r" (lib/types.ml[900,28583+45]..[900,28583+46])
                                          <arg>
                                          Nolabel
                                            expression (lib/types.ml[900,28583+50]..[900,28583+55])
                                              Pexp_apply
                                              expression (lib/types.ml[900,28583+50]..[900,28583+51])
                                                Pexp_ident "!" (lib/types.ml[900,28583+50]..[900,28583+51])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/types.ml[900,28583+51]..[900,28583+55])
                                                    Pexp_ident "next" (lib/types.ml[900,28583+51]..[900,28583+55])
                                              ]
                                        ]
                                  <case>
                                    pattern (lib/types.ml[901,28639+10]..[901,28639+11])
                                      Ppat_any
                                    expression (lib/types.ml[901,28639+15]..[901,28639+17])
                                      Pexp_construct "()" (lib/types.ml[901,28639+15]..[901,28639+17])
                                      None
                                ]
                        <arg>
                        Nolabel
                          expression (lib/types.ml[902,28658+8]..[902,28658+11])
                            Pexp_ident "log" (lib/types.ml[902,28658+8]..[902,28658+11])
                      ]
              ]
    ]
]

open Asttypes
type transient_expr =
  {
  mutable desc: type_desc ;
  mutable level: int ;
  mutable scope: int ;
  id: int }
and type_expr = transient_expr
and type_desc =
  | Tvar of string option 
  | Tarrow of arg_label * type_expr * type_expr * commutable 
  | Ttuple of type_expr list 
  | Tconstr of Path.t * type_expr list * abbrev_memo ref 
  | Tobject of type_expr * (Path.t * type_expr list) option ref 
  | Tfield of string * field_kind * type_expr * type_expr 
  | Tnil 
  | Tlink of type_expr 
  | Tsubst of type_expr * type_expr option 
  | Tvariant of row_desc 
  | Tunivar of string option 
  | Tpoly of type_expr * type_expr list 
  | Tpackage of Path.t * (Longident.t * type_expr) list 
and row_desc =
  {
  row_fields: (label * row_field) list ;
  row_more: type_expr ;
  row_closed: bool ;
  row_fixed: fixed_explanation option ;
  row_name: (Path.t * type_expr list) option }
and fixed_explanation =
  | Univar of type_expr 
  | Fixed_private 
  | Reified of Path.t 
  | Rigid 
and row_field = [ `some ] row_field_gen
and _ row_field_gen =
  | RFpresent: type_expr option -> [> `some ] row_field_gen 
  | RFeither:
  {
  no_arg: bool ;
  arg_type: type_expr list ;
  matched: bool ;
  ext: [ `some  | `none ] row_field_gen ref } -> [> `some ] row_field_gen 
  | RFabsent: [> `some ] row_field_gen 
  | RFnone: [> `none ] row_field_gen 
and abbrev_memo =
  | Mnil 
  | Mcons of private_flag * Path.t * type_expr * type_expr * abbrev_memo 
  | Mlink of abbrev_memo ref 
and any = [ `some  | `none  | `var ]
and field_kind = [ `some  | `var ] field_kind_gen
and _ field_kind_gen =
  | FKvar: {
  mutable field_kind: any field_kind_gen } -> [> `var ] field_kind_gen 
  | FKprivate: [> `none ] field_kind_gen 
  | FKpublic: [> `some ] field_kind_gen 
  | FKabsent: [> `some ] field_kind_gen 
and commutable = [ `some  | `var ] commutable_gen
and _ commutable_gen =
  | Cok: [> `some ] commutable_gen 
  | Cunknown: [> `none ] commutable_gen 
  | Cvar: {
  mutable commu: any commutable_gen } -> [> `var ] commutable_gen 
module TransientTypeOps =
  struct
    type t = type_expr
    let compare t1 t2 = t1.id - t2.id
    let hash t = t.id
    let equal t1 t2 = t1 == t2
  end
module Uid = Shape.Uid
module MethSet = Misc.Stdlib.String.Set
module VarSet = Misc.Stdlib.String.Set
module Meths = Misc.Stdlib.String.Map
module Vars = Misc.Stdlib.String.Map
type value_description =
  {
  val_type: type_expr ;
  val_kind: value_kind ;
  val_loc: Location.t ;
  val_attributes: Parsetree.attributes ;
  val_uid: Uid.t }
and value_kind =
  | Val_reg 
  | Val_prim of Primitive.description 
  | Val_ivar of mutable_flag * string 
  | Val_self of class_signature * self_meths * Ident.t Vars.t * string 
  | Val_anc of class_signature * Ident.t Meths.t * string 
and self_meths =
  | Self_concrete of Ident.t Meths.t 
  | Self_virtual of Ident.t Meths.t ref 
and class_signature =
  {
  csig_self: type_expr ;
  mutable csig_self_row: type_expr ;
  mutable csig_vars: (mutable_flag * virtual_flag * type_expr) Vars.t ;
  mutable csig_meths: (method_privacy * virtual_flag * type_expr) Meths.t }
and method_privacy =
  | Mpublic 
  | Mprivate of field_kind 
module Variance =
  struct
    type t = int
    type f =
      | May_pos 
      | May_neg 
      | May_weak 
      | Inj 
      | Pos 
      | Neg 
      | Inv 
    let single =
      function
      | May_pos -> 1
      | May_neg -> 2 + 4
      | May_weak -> 4
      | Inj -> 8
      | Pos -> (16 + 8) + 1
      | Neg -> ((32 + 8) + 4) + 2
      | Inv -> 63
    let union v1 v2 = v1 lor v2
    let inter v1 v2 = v1 land v2
    let subset v1 v2 = (v1 land v2) = v1
    let eq (v1 : t) v2 = v1 = v2
    let set x v = union v (single x)
    let set_if b x v = if b then set x v else v
    let mem x = subset (single x)
    let null = 0
    let unknown = 7
    let full = single Inv
    let covariant = single Pos
    let swap f1 f2 v v' = set_if (mem f2 v) f1 (set_if (mem f1 v) f2 v')
    let conjugate v =
      let v' = inter v (union (single Inj) (single May_weak)) in
      swap Pos Neg v (swap May_pos May_neg v v')
    let compose v1 v2 =
      if (mem Inv v1) && (mem Inj v2)
      then full
      else
        (let mp =
           ((mem May_pos v1) && (mem May_pos v2)) ||
             ((mem May_neg v1) && (mem May_neg v2))
         and mn =
           ((mem May_pos v1) && (mem May_neg v2)) ||
             ((mem May_neg v1) && (mem May_pos v2))
         and mw =
           ((mem May_weak v1) && (v2 <> null)) ||
             ((v1 <> null) && (mem May_weak v2))
         and inj = (mem Inj v1) && (mem Inj v2)
         and pos =
           ((mem Pos v1) && (mem Pos v2)) || ((mem Neg v1) && (mem Neg v2))
         and neg =
           ((mem Pos v1) && (mem Neg v2)) || ((mem Neg v1) && (mem Pos v2)) in
         List.fold_left (fun v (b, f) -> set_if b f v) null
           [(mp, May_pos);
           (mn, May_neg);
           (mw, May_weak);
           (inj, Inj);
           (pos, Pos);
           (neg, Neg)])
    let strengthen v =
      if mem May_neg v then v else v land (full - (single May_weak))
    let get_upper v = ((mem May_pos v), (mem May_neg v))
    let get_lower v = ((mem Pos v), (mem Neg v), (mem Inj v))
    let unknown_signature ~injective ~arity =
      let v = if injective then set Inj unknown else unknown in
      Misc.replicate_list v arity
  end
module Separability =
  struct
    type t =
      | Ind 
      | Sep 
      | Deepsep 
    type signature = t list
    let eq (m1 : t) m2 = m1 = m2
    let rank = function | Ind -> 0 | Sep -> 1 | Deepsep -> 2
    let compare m1 m2 = compare (rank m1) (rank m2)
    let max m1 m2 = if (rank m1) >= (rank m2) then m1 else m2
    let print ppf =
      function
      | Ind -> Format.fprintf ppf "Ind"
      | Sep -> Format.fprintf ppf "Sep"
      | Deepsep -> Format.fprintf ppf "Deepsep"
    let print_signature ppf modes =
      let pp_sep ppf () = Format.fprintf ppf ",@," in
      Format.fprintf ppf "@[(%a)@]" (Format.pp_print_list ~pp_sep print)
        modes
    let default_signature ~arity =
      let default_mode = if Config.flat_float_array then Deepsep else Ind in
      Misc.replicate_list default_mode arity
  end
type type_declaration =
  {
  type_params: type_expr list ;
  type_arity: int ;
  type_kind: type_decl_kind ;
  type_private: private_flag ;
  type_manifest: type_expr option ;
  type_variance: Variance.t list ;
  type_separability: Separability.t list ;
  type_is_newtype: bool ;
  type_expansion_scope: int ;
  type_loc: Location.t ;
  type_attributes: Parsetree.attributes ;
  type_immediate: Type_immediacy.t ;
  type_unboxed_default: bool ;
  type_uid: Uid.t }
and type_decl_kind = (label_declaration, constructor_declaration) type_kind
and ('lbl, 'cstr) type_kind =
  | Type_abstract of type_origin 
  | Type_record of 'lbl list * record_representation 
  | Type_variant of 'cstr list * variant_representation 
  | Type_open 
and type_origin =
  | Definition 
  | Rec_check_regularity 
  | Existential of string 
and record_representation =
  | Record_regular 
  | Record_float 
  | Record_unboxed of bool 
  | Record_inlined of int 
  | Record_extension of Path.t 
and variant_representation =
  | Variant_regular 
  | Variant_unboxed 
and label_declaration =
  {
  ld_id: Ident.t ;
  ld_mutable: mutable_flag ;
  ld_type: type_expr ;
  ld_loc: Location.t ;
  ld_attributes: Parsetree.attributes ;
  ld_uid: Uid.t }
and constructor_declaration =
  {
  cd_id: Ident.t ;
  cd_args: constructor_arguments ;
  cd_res: type_expr option ;
  cd_loc: Location.t ;
  cd_attributes: Parsetree.attributes ;
  cd_uid: Uid.t }
and constructor_arguments =
  | Cstr_tuple of type_expr list 
  | Cstr_record of label_declaration list 
type extension_constructor =
  {
  ext_type_path: Path.t ;
  ext_type_params: type_expr list ;
  ext_args: constructor_arguments ;
  ext_ret_type: type_expr option ;
  ext_private: private_flag ;
  ext_loc: Location.t ;
  ext_attributes: Parsetree.attributes ;
  ext_uid: Uid.t }
and type_transparence =
  | Type_public 
  | Type_new 
  | Type_private 
type class_type =
  | Cty_constr of Path.t * type_expr list * class_type 
  | Cty_signature of class_signature 
  | Cty_arrow of arg_label * type_expr * class_type 
type class_declaration =
  {
  cty_params: type_expr list ;
  mutable cty_type: class_type ;
  cty_path: Path.t ;
  cty_new: type_expr option ;
  cty_variance: Variance.t list ;
  cty_loc: Location.t ;
  cty_attributes: Parsetree.attributes ;
  cty_uid: Uid.t }
type class_type_declaration =
  {
  clty_params: type_expr list ;
  clty_type: class_type ;
  clty_path: Path.t ;
  clty_hash_type: type_declaration ;
  clty_variance: Variance.t list ;
  clty_loc: Location.t ;
  clty_attributes: Parsetree.attributes ;
  clty_uid: Uid.t }
type visibility =
  | Exported 
  | Hidden 
type module_type =
  | Mty_ident of Path.t 
  | Mty_signature of signature 
  | Mty_functor of functor_parameter * module_type 
  | Mty_alias of Path.t 
and functor_parameter =
  | Unit 
  | Named of Ident.t option * module_type 
and module_presence =
  | Mp_present 
  | Mp_absent 
and signature = signature_item list
and signature_item =
  | Sig_value of Ident.t * value_description * visibility 
  | Sig_type of Ident.t * type_declaration * rec_status * visibility 
  | Sig_typext of Ident.t * extension_constructor * ext_status * visibility 
  | Sig_module of Ident.t * module_presence * module_declaration * rec_status
  * visibility 
  | Sig_modtype of Ident.t * modtype_declaration * visibility 
  | Sig_class of Ident.t * class_declaration * rec_status * visibility 
  | Sig_class_type of Ident.t * class_type_declaration * rec_status *
  visibility 
and module_declaration =
  {
  md_type: module_type ;
  md_attributes: Parsetree.attributes ;
  md_loc: Location.t ;
  md_uid: Uid.t }
and modtype_declaration =
  {
  mtd_type: module_type option ;
  mtd_attributes: Parsetree.attributes ;
  mtd_loc: Location.t ;
  mtd_uid: Uid.t }
and rec_status =
  | Trec_not 
  | Trec_first 
  | Trec_next 
and ext_status =
  | Text_first 
  | Text_next 
  | Text_exception 
type constructor_description =
  {
  cstr_name: string ;
  cstr_res: type_expr ;
  cstr_existentials: type_expr list ;
  cstr_args: type_expr list ;
  cstr_arity: int ;
  cstr_tag: constructor_tag ;
  cstr_consts: int ;
  cstr_nonconsts: int ;
  cstr_generalized: bool ;
  cstr_private: private_flag ;
  cstr_loc: Location.t ;
  cstr_attributes: Parsetree.attributes ;
  cstr_inlined: type_declaration option ;
  cstr_uid: Uid.t }
and constructor_tag =
  | Cstr_constant of int 
  | Cstr_block of int 
  | Cstr_unboxed 
  | Cstr_extension of Path.t * bool 
let equal_tag t1 t2 =
  match (t1, t2) with
  | (Cstr_constant i1, Cstr_constant i2) -> i2 = i1
  | (Cstr_block i1, Cstr_block i2) -> i2 = i1
  | (Cstr_unboxed, Cstr_unboxed) -> true
  | (Cstr_extension (path1, b1), Cstr_extension (path2, b2)) ->
      (Path.same path1 path2) && (b1 = b2)
  | ((Cstr_constant _ | Cstr_block _ | Cstr_unboxed | Cstr_extension _), _)
      -> false
let may_equal_constr c1 c2 =
  (c1.cstr_arity = c2.cstr_arity) &&
    (match ((c1.cstr_tag), (c2.cstr_tag)) with
     | (Cstr_extension _, Cstr_extension _) -> true
     | (tag1, tag2) -> equal_tag tag1 tag2)
let item_visibility =
  function
  | Sig_value (_, _, vis) | Sig_type (_, _, _, vis) | Sig_typext
    (_, _, _, vis) | Sig_module (_, _, _, _, vis) | Sig_modtype (_, _, vis)
    | Sig_class (_, _, _, vis) | Sig_class_type (_, _, _, vis) -> vis
type label_description =
  {
  lbl_name: string ;
  lbl_res: type_expr ;
  lbl_arg: type_expr ;
  lbl_mut: mutable_flag ;
  lbl_pos: int ;
  lbl_all: label_description array ;
  lbl_repres: record_representation ;
  lbl_private: private_flag ;
  lbl_loc: Location.t ;
  lbl_attributes: Parsetree.attributes ;
  lbl_uid: Uid.t }
let rec bound_value_identifiers =
  function
  | [] -> []
  | (Sig_value (id, { val_kind = Val_reg }, _))::rem -> id ::
      (bound_value_identifiers rem)
  | (Sig_typext (id, _, _, _))::rem -> id :: (bound_value_identifiers rem)
  | (Sig_module (id, Mp_present, _, _, _))::rem -> id ::
      (bound_value_identifiers rem)
  | (Sig_class (id, _, _, _))::rem -> id :: (bound_value_identifiers rem)
  | _::rem -> bound_value_identifiers rem
let signature_item_id =
  function
  | Sig_value (id, _, _) | Sig_type (id, _, _, _) | Sig_typext (id, _, _, _)
    | Sig_module (id, _, _, _, _) | Sig_modtype (id, _, _) | Sig_class
    (id, _, _, _) | Sig_class_type (id, _, _, _) -> id
type change =
  | Ctype of type_expr * type_desc 
  | Ccompress of type_expr * type_desc * type_desc 
  | Clevel of type_expr * int 
  | Cscope of type_expr * int 
  | Cname of (Path.t * type_expr list) option ref * (Path.t * type_expr list)
  option 
  | Crow of [ `none  | `some ] row_field_gen ref 
  | Ckind of [ `var ] field_kind_gen 
  | Ccommu of [ `var ] commutable_gen 
  | Cuniv of type_expr option ref * type_expr option 
type changes =
  | Change of change * changes ref 
  | Unchanged 
  | Invalid 
let trail = Local_store.s_table ref Unchanged
let log_change ch =
  let r' = ref Unchanged in (!trail) := (Change (ch, r')); trail := r'
type field_kind_view =
  | Fprivate 
  | Fpublic 
  | Fabsent 
let rec field_kind_internal_repr : field_kind -> field_kind =
  function
  | FKvar { field_kind = (FKvar _ | FKpublic | FKabsent as fk) } ->
      field_kind_internal_repr fk
  | kind -> kind
let field_kind_repr fk =
  match field_kind_internal_repr fk with
  | FKvar _ -> Fprivate
  | FKpublic -> Fpublic
  | FKabsent -> Fabsent
let field_public = FKpublic
let field_absent = FKabsent
let field_private () = FKvar { field_kind = FKprivate }
let rec is_commu_ok : type a. a commutable_gen -> bool =
  function
  | Cvar { commu } -> is_commu_ok commu
  | Cunknown -> false
  | Cok -> true
let commu_ok = Cok
let commu_var () = Cvar { commu = Cunknown }
let rec repr_link (t : type_expr) d : type_expr -> type_expr=
  function
  | { desc = (Tlink t' as d') } -> repr_link t d' t'
  | { desc = (Tfield (_, k, _, t') as d') } when
      (field_kind_internal_repr k) = FKabsent -> repr_link t d' t'
  | t' -> (log_change (Ccompress (t, (t.desc), d)); t.desc <- d; t')
let repr_link1 t =
  function
  | { desc = (Tlink t' as d') } -> repr_link t d' t'
  | { desc = (Tfield (_, k, _, t') as d') } when
      (field_kind_internal_repr k) = FKabsent -> repr_link t d' t'
  | t' -> t'
let repr t =
  match t.desc with
  | Tlink t' -> repr_link1 t t'
  | Tfield (_, k, _, t') when (field_kind_internal_repr k) = FKabsent ->
      repr_link1 t t'
  | _ -> t
let get_desc t = (repr t).desc
let get_level t = (repr t).level
let get_scope t = (repr t).scope
let get_id t = (repr t).id
module Transient_expr =
  struct
    let create desc ~level ~scope ~id = { desc; level; scope; id }
    let set_desc ty d = ty.desc <- d
    let set_stub_desc ty d = assert (ty.desc = (Tvar None)); ty.desc <- d
    let set_level ty lv = ty.level <- lv
    let set_scope ty sc = ty.scope <- sc
    let coerce ty = ty
    let repr = repr
    let type_expr ty = ty
  end
let eq_type t1 t2 = (t1 == t2) || ((repr t1) == (repr t2))
let compare_type t1 t2 = compare (get_id t1) (get_id t2)
let create_row ~fields ~more ~closed ~fixed ~name =
  {
    row_fields = fields;
    row_more = more;
    row_closed = closed;
    row_fixed = fixed;
    row_name = name
  }
let rec row_fields row =
  match get_desc row.row_more with
  | Tvariant row' -> row.row_fields @ (row_fields row')
  | _ -> row.row_fields
let rec row_repr_no_fields row =
  match get_desc row.row_more with
  | Tvariant row' -> row_repr_no_fields row'
  | _ -> row
let row_more row = (row_repr_no_fields row).row_more
let row_closed row = (row_repr_no_fields row).row_closed
let row_fixed row = (row_repr_no_fields row).row_fixed
let row_name row = (row_repr_no_fields row).row_name
let rec get_row_field tag row =
  let rec find =
    function
    | (tag', f)::fields -> if tag = tag' then f else find fields
    | [] ->
        (match get_desc row.row_more with
         | Tvariant row' -> get_row_field tag row'
         | _ -> RFabsent) in
  find row.row_fields
let set_row_name row row_name =
  let row_fields = row_fields row in
  let row = row_repr_no_fields row in { row with row_fields; row_name }
type row_desc_repr =
  | Row of
  {
  fields: (label * row_field) list ;
  more: type_expr ;
  closed: bool ;
  fixed: fixed_explanation option ;
  name: (Path.t * type_expr list) option } 
let row_repr row =
  let fields = row_fields row in
  let row = row_repr_no_fields row in
  Row
    {
      fields;
      more = (row.row_more);
      closed = (row.row_closed);
      fixed = (row.row_fixed);
      name = (row.row_name)
    }
type row_field_view =
  | Rpresent of type_expr option 
  | Reither of bool * type_expr list * bool 
  | Rabsent 
let rec row_field_repr_aux tl : row_field -> row_field=
  function
  | RFeither ({ ext = { contents = RFnone } } as r) ->
      RFeither { r with arg_type = (tl @ r.arg_type) }
  | RFeither
      { arg_type;
        ext = { contents = (RFeither _ | RFpresent _ | RFabsent as rf) } }
      -> row_field_repr_aux (tl @ arg_type) rf
  | RFpresent (Some _) when tl <> [] -> RFpresent (Some (List.hd tl))
  | RFpresent _ as rf -> rf
  | RFabsent -> RFabsent
let row_field_repr fi =
  match row_field_repr_aux [] fi with
  | RFeither { no_arg; arg_type; matched } ->
      Reither (no_arg, arg_type, matched)
  | RFpresent t -> Rpresent t
  | RFabsent -> Rabsent
let rec row_field_ext (fi : row_field) =
  match fi with
  | RFeither { ext = ({ contents = RFnone } as ext) } -> ext
  | RFeither
      { ext = { contents = (RFeither _ | RFpresent _ | RFabsent as rf) } } ->
      row_field_ext rf
  | _ -> Misc.fatal_error "Types.row_field_ext "
let rf_present oty = RFpresent oty
let rf_absent = RFabsent
let rf_either ?use_ext_of ~no_arg arg_type ~matched =
  let ext =
    match use_ext_of with | Some rf -> row_field_ext rf | None -> ref RFnone in
  RFeither { no_arg; arg_type; matched; ext }
let rf_either_of =
  function
  | None ->
      RFeither
        { no_arg = true; arg_type = []; matched = false; ext = (ref RFnone) }
  | Some ty ->
      RFeither
        {
          no_arg = false;
          arg_type = [ty];
          matched = false;
          ext = (ref RFnone)
        }
let eq_row_field_ext rf1 rf2 = (row_field_ext rf1) == (row_field_ext rf2)
let changed_row_field_exts l f =
  let exts = List.map row_field_ext l in
  f (); List.exists (fun r -> (!r) <> RFnone) exts
let match_row_field ~present ~absent ~either (f : row_field) =
  match f with
  | RFabsent -> absent ()
  | RFpresent t -> present t
  | RFeither { no_arg; arg_type; matched; ext } ->
      let e : row_field option =
        match !ext with
        | RFnone -> None
        | RFeither _ | RFpresent _ | RFabsent as e -> Some e in
      either no_arg arg_type matched e
let new_id = Local_store.s_ref (-1)
let create_expr = Transient_expr.create
let newty3 ~level ~scope desc =
  incr new_id; create_expr desc ~level ~scope ~id:(!new_id)
let newty2 ~level desc = newty3 ~level ~scope:Ident.lowest_scope desc
let undo_change =
  function
  | Ctype (ty, desc) -> Transient_expr.set_desc ty desc
  | Ccompress (ty, desc, _) -> Transient_expr.set_desc ty desc
  | Clevel (ty, level) -> Transient_expr.set_level ty level
  | Cscope (ty, scope) -> Transient_expr.set_scope ty scope
  | Cname (r, v) -> r := v
  | Crow r -> r := RFnone
  | Ckind (FKvar r) -> r.field_kind <- FKprivate
  | Ccommu (Cvar r) -> r.commu <- Cunknown
  | Cuniv (r, v) -> r := v
type snapshot = (changes ref * int)
let last_snapshot = Local_store.s_ref 0
let log_type ty =
  if ty.id <= (!last_snapshot) then log_change (Ctype (ty, (ty.desc)))
let link_type ty ty' =
  let ty = repr ty in
  let ty' = repr ty' in
  if ty == ty'
  then ()
  else
    (log_type ty;
     (let desc = ty.desc in
      Transient_expr.set_desc ty (Tlink ty');
      (match (desc, (ty'.desc)) with
       | (Tvar name, Tvar name') ->
           (match (name, name') with
            | (Some _, None) ->
                (log_type ty'; Transient_expr.set_desc ty' (Tvar name))
            | (None, Some _) -> ()
            | (Some _, Some _) ->
                if ty.level < ty'.level
                then (log_type ty'; Transient_expr.set_desc ty' (Tvar name))
            | (None, None) -> ())
       | _ -> ())))
let set_type_desc ty td =
  let ty = repr ty in
  if td != ty.desc then (log_type ty; Transient_expr.set_desc ty td)
let set_level ty level =
  let ty = repr ty in
  if level <> ty.level
  then
    (if ty.id <= (!last_snapshot) then log_change (Clevel (ty, (ty.level)));
     Transient_expr.set_level ty level)
let set_scope ty scope =
  let ty = repr ty in
  if scope <> ty.scope
  then
    (if ty.id <= (!last_snapshot) then log_change (Cscope (ty, (ty.scope)));
     Transient_expr.set_scope ty scope)
let set_univar rty ty = log_change (Cuniv (rty, (!rty))); rty := (Some ty)
let set_name nm v = log_change (Cname (nm, (!nm))); nm := v
let rec link_row_field_ext ~inside:(inside : row_field) (v : row_field) =
  match inside with
  | RFeither { ext = ({ contents = RFnone } as e) } ->
      let RFeither _ | RFpresent _ | RFabsent as v = v in
      (log_change (Crow e); e := v)
  | RFeither
      { ext = { contents = (RFeither _ | RFpresent _ | RFabsent as rf) } } ->
      link_row_field_ext ~inside:rf v
  | _ -> invalid_arg "Types.link_row_field_ext"
let rec link_kind ~inside:(inside : field_kind) (k : field_kind) =
  match inside with
  | FKvar ({ field_kind = FKprivate } as rk) as inside ->
      let FKvar _ | FKpublic | FKabsent as k = field_kind_internal_repr k in
      if k != inside then (log_change (Ckind inside); rk.field_kind <- k)
  | FKvar { field_kind = (FKvar _ | FKpublic | FKabsent as inside) } ->
      link_kind ~inside k
  | _ -> invalid_arg "Types.link_kind"
let rec commu_repr : commutable -> commutable =
  function
  | Cvar { commu = (Cvar _ | Cok as commu) } -> commu_repr commu
  | c -> c
let rec link_commu ~inside:(inside : commutable) (c : commutable) =
  match inside with
  | Cvar ({ commu = Cunknown } as rc) as inside ->
      let Cvar _ | Cok as c = commu_repr c in
      if c != inside then (log_change (Ccommu inside); rc.commu <- c)
  | Cvar { commu = (Cvar _ | Cok as inside) } -> link_commu ~inside c
  | _ -> invalid_arg "Types.link_commu"
let set_commu_ok c = link_commu ~inside:c Cok
let snapshot () =
  let old = !last_snapshot in last_snapshot := (!new_id); ((!trail), old)
let rec rev_log accu =
  function
  | Unchanged -> accu
  | Invalid -> assert false
  | Change (ch, next) ->
      let d = !next in (next := Invalid; rev_log (ch :: accu) d)
let backtrack ~cleanup_abbrev (changes, old) =
  match !changes with
  | Unchanged -> last_snapshot := old
  | Invalid -> failwith "Types.backtrack"
  | Change _ as change ->
      (cleanup_abbrev ();
       (let backlog = rev_log [] change in
        List.iter undo_change backlog;
        changes := Unchanged;
        last_snapshot := old;
        trail := changes))
let undo_first_change_after (changes, _) =
  match !changes with | Change (ch, _) -> undo_change ch | _ -> ()
let rec rev_compress_log log r =
  match !r with
  | Unchanged | Invalid -> log
  | Change (Ccompress _, next) -> rev_compress_log (r :: log) next
  | Change (_, next) -> rev_compress_log log next
let undo_compress (changes, _old) =
  match !changes with
  | Unchanged | Invalid -> ()
  | Change _ ->
      let log = rev_compress_log [] changes in
      List.iter
        (fun r ->
           match !r with
           | Change (Ccompress (ty, desc, d), next) when ty.desc == d ->
               (Transient_expr.set_desc ty desc; r := (!next))
           | _ -> ()) log
