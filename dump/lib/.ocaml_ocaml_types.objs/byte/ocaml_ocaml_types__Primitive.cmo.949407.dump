[
  structure_item (lib/primitive.ml[18,1121+0]..[18,1121+9])
    Pstr_open Fresh
    module_expr (lib/primitive.ml[18,1121+5]..[18,1121+9])
      Pmod_ident "Misc" (lib/primitive.ml[18,1121+5]..[18,1121+9])
  structure_item (lib/primitive.ml[19,1131+0]..[19,1131+14])
    Pstr_open Fresh
    module_expr (lib/primitive.ml[19,1131+5]..[19,1131+14])
      Pmod_ident "Parsetree" (lib/primitive.ml[19,1131+5]..[19,1131+14])
  structure_item (lib/primitive.ml[21,1147+0]..[21,1147+49])
    Pstr_type Rec
    [
      type_declaration "boxed_integer" (lib/primitive.ml[21,1147+5]..[21,1147+18]) (lib/primitive.ml[21,1147+0]..[21,1147+49])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/primitive.ml[21,1147+21]..[21,1147+31])
                "Pnativeint" (lib/primitive.ml[21,1147+21]..[21,1147+31])
                []
                None
              (lib/primitive.ml[21,1147+32]..[21,1147+40])
                "Pint32" (lib/primitive.ml[21,1147+34]..[21,1147+40])
                []
                None
              (lib/primitive.ml[21,1147+41]..[21,1147+49])
                "Pint64" (lib/primitive.ml[21,1147+43]..[21,1147+49])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/primitive.ml[23,1198+0]..[27,1295+22])
    Pstr_type Rec
    [
      type_declaration "native_repr" (lib/primitive.ml[23,1198+5]..[23,1198+16]) (lib/primitive.ml[23,1198+0]..[27,1295+22])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/primitive.ml[24,1217+2]..[24,1217+22])
                "Same_as_ocaml_repr" (lib/primitive.ml[24,1217+4]..[24,1217+22])
                []
                None
              (lib/primitive.ml[25,1240+2]..[25,1240+17])
                "Unboxed_float" (lib/primitive.ml[25,1240+4]..[25,1240+17])
                []
                None
              (lib/primitive.ml[26,1258+2]..[26,1258+36])
                "Unboxed_integer" (lib/primitive.ml[26,1258+4]..[26,1258+19])
                [
                  core_type (lib/primitive.ml[26,1258+23]..[26,1258+36])
                    Ptyp_constr "boxed_integer" (lib/primitive.ml[26,1258+23]..[26,1258+36])
                    []
                ]
                None
              (lib/primitive.ml[27,1295+2]..[27,1295+22])
                "Untagged_immediate" (lib/primitive.ml[27,1295+4]..[27,1295+22])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/primitive.ml[29,1319+0]..[35,1654+39])
    Pstr_type Rec
    [
      type_declaration "description" (lib/primitive.ml[29,1319+5]..[29,1319+16]) (lib/primitive.ml[29,1319+0]..[35,1654+39])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/primitive.ml[30,1338+4]..[30,1338+22])
                Immutable
                "prim_name" (lib/primitive.ml[30,1338+4]..[30,1338+13])                core_type (lib/primitive.ml[30,1338+15]..[30,1338+21])
                  Ptyp_constr "string" (lib/primitive.ml[30,1338+15]..[30,1338+21])
                  []
              (lib/primitive.ml[31,1408+4]..[31,1408+20])
                Immutable
                "prim_arity" (lib/primitive.ml[31,1408+4]..[31,1408+14])                core_type (lib/primitive.ml[31,1408+16]..[31,1408+19])
                  Ptyp_constr "int" (lib/primitive.ml[31,1408+16]..[31,1408+19])
                  []
              (lib/primitive.ml[32,1465+4]..[32,1465+21])
                Immutable
                "prim_alloc" (lib/primitive.ml[32,1465+4]..[32,1465+14])                core_type (lib/primitive.ml[32,1465+16]..[32,1465+20])
                  Ptyp_constr "bool" (lib/primitive.ml[32,1465+16]..[32,1465+20])
                  []
              (lib/primitive.ml[33,1530+4]..[33,1530+29])
                Immutable
                "prim_native_name" (lib/primitive.ml[33,1530+4]..[33,1530+20])                core_type (lib/primitive.ml[33,1530+22]..[33,1530+28])
                  Ptyp_constr "string" (lib/primitive.ml[33,1530+22]..[33,1530+28])
                  []
              (lib/primitive.ml[34,1609+4]..[34,1609+44])
                Immutable
                "prim_native_repr_args" (lib/primitive.ml[34,1609+4]..[34,1609+25])                core_type (lib/primitive.ml[34,1609+27]..[34,1609+43])
                  Ptyp_constr "list" (lib/primitive.ml[34,1609+39]..[34,1609+43])
                  [
                    core_type (lib/primitive.ml[34,1609+27]..[34,1609+38])
                      Ptyp_constr "native_repr" (lib/primitive.ml[34,1609+27]..[34,1609+38])
                      []
                  ]
              (lib/primitive.ml[35,1654+4]..[35,1654+37])
                Immutable
                "prim_native_repr_res" (lib/primitive.ml[35,1654+4]..[35,1654+24])                core_type (lib/primitive.ml[35,1654+26]..[35,1654+37])
                  Ptyp_constr "native_repr" (lib/primitive.ml[35,1654+26]..[35,1654+37])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/primitive.ml[37,1695+0]..[40,1800+43])
    Pstr_type Rec
    [
      type_declaration "error" (lib/primitive.ml[37,1695+5]..[37,1695+10]) (lib/primitive.ml[37,1695+0]..[40,1800+43])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/primitive.ml[38,1708+2]..[38,1708+46])
                "Old_style_float_with_native_repr_attribute" (lib/primitive.ml[38,1708+4]..[38,1708+46])
                []
                None
              (lib/primitive.ml[39,1755+2]..[39,1755+44])
                "Old_style_noalloc_with_noalloc_attribute" (lib/primitive.ml[39,1755+4]..[39,1755+44])
                []
                None
              (lib/primitive.ml[40,1800+2]..[40,1800+43])
                "No_native_primitive_with_repr_attribute" (lib/primitive.ml[40,1800+4]..[40,1800+43])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/primitive.ml[42,1845+0]..[42,1845+37])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (lib/primitive.ml[42,1845+0]..[42,1845+37])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (lib/primitive.ml[42,1845+19]..[42,1845+29])
                  Ptyp_constr "Location.t" (lib/primitive.ml[42,1845+19]..[42,1845+29])
                  []
                core_type (lib/primitive.ml[42,1845+32]..[42,1845+37])
                  Ptyp_constr "error" (lib/primitive.ml[42,1845+32]..[42,1845+37])
                  []
              ]
              None
  structure_item (lib/primitive.ml[44,1884+0]..[48,1984+31])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[44,1884+4]..[44,1884+17])
          Ppat_var "is_ocaml_repr" (lib/primitive.ml[44,1884+4]..[44,1884+17])
        expression (lib/primitive.ml[44,1884+20]..[48,1984+31])
          Pexp_function
          []
          None
          Pfunction_cases (lib/primitive.ml[44,1884+20]..[48,1984+31])
            [
              <case>
                pattern (lib/primitive.ml[45,1913+4]..[45,1913+22])
                  Ppat_construct "Same_as_ocaml_repr" (lib/primitive.ml[45,1913+4]..[45,1913+22])
                  None
                expression (lib/primitive.ml[45,1913+26]..[45,1913+30])
                  Pexp_construct "true" (lib/primitive.ml[45,1913+26]..[45,1913+30])
                  None
              <case>
                pattern (lib/primitive.ml[46,1944+4]..[48,1984+22])
                  Ppat_or
                  pattern (lib/primitive.ml[46,1944+4]..[47,1962+21])
                    Ppat_or
                    pattern (lib/primitive.ml[46,1944+4]..[46,1944+17])
                      Ppat_construct "Unboxed_float" (lib/primitive.ml[46,1944+4]..[46,1944+17])
                      None
                    pattern (lib/primitive.ml[47,1962+4]..[47,1962+21])
                      Ppat_construct "Unboxed_integer" (lib/primitive.ml[47,1962+4]..[47,1962+19])
                      Some
                        []
                        pattern (lib/primitive.ml[47,1962+20]..[47,1962+21])
                          Ppat_any
                  pattern (lib/primitive.ml[48,1984+4]..[48,1984+22])
                    Ppat_construct "Untagged_immediate" (lib/primitive.ml[48,1984+4]..[48,1984+22])
                    None
                expression (lib/primitive.ml[48,1984+26]..[48,1984+31])
                  Pexp_construct "false" (lib/primitive.ml[48,1984+26]..[48,1984+31])
                  None
            ]
    ]
  structure_item (lib/primitive.ml[50,2017+0]..[54,2116+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[50,2017+4]..[50,2017+14])
          Ppat_var "is_unboxed" (lib/primitive.ml[50,2017+4]..[50,2017+14])
        expression (lib/primitive.ml[50,2017+17]..[54,2116+29])
          Pexp_function
          []
          None
          Pfunction_cases (lib/primitive.ml[50,2017+17]..[54,2116+29])
            [
              <case>
                pattern (lib/primitive.ml[51,2043+4]..[52,2066+22])
                  Ppat_or
                  pattern (lib/primitive.ml[51,2043+4]..[51,2043+22])
                    Ppat_construct "Same_as_ocaml_repr" (lib/primitive.ml[51,2043+4]..[51,2043+22])
                    None
                  pattern (lib/primitive.ml[52,2066+4]..[52,2066+22])
                    Ppat_construct "Untagged_immediate" (lib/primitive.ml[52,2066+4]..[52,2066+22])
                    None
                expression (lib/primitive.ml[52,2066+26]..[52,2066+31])
                  Pexp_construct "false" (lib/primitive.ml[52,2066+26]..[52,2066+31])
                  None
              <case>
                pattern (lib/primitive.ml[53,2098+4]..[54,2116+21])
                  Ppat_or
                  pattern (lib/primitive.ml[53,2098+4]..[53,2098+17])
                    Ppat_construct "Unboxed_float" (lib/primitive.ml[53,2098+4]..[53,2098+17])
                    None
                  pattern (lib/primitive.ml[54,2116+4]..[54,2116+21])
                    Ppat_construct "Unboxed_integer" (lib/primitive.ml[54,2116+4]..[54,2116+19])
                    Some
                      []
                      pattern (lib/primitive.ml[54,2116+20]..[54,2116+21])
                        Ppat_any
                expression (lib/primitive.ml[54,2116+25]..[54,2116+29])
                  Pexp_construct "true" (lib/primitive.ml[54,2116+25]..[54,2116+29])
                  None
            ]
    ]
  structure_item (lib/primitive.ml[56,2147+0]..[60,2246+30])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[56,2147+4]..[56,2147+15])
          Ppat_var "is_untagged" (lib/primitive.ml[56,2147+4]..[56,2147+15])
        expression (lib/primitive.ml[56,2147+18]..[60,2246+30])
          Pexp_function
          []
          None
          Pfunction_cases (lib/primitive.ml[56,2147+18]..[60,2246+30])
            [
              <case>
                pattern (lib/primitive.ml[57,2174+4]..[57,2174+22])
                  Ppat_construct "Untagged_immediate" (lib/primitive.ml[57,2174+4]..[57,2174+22])
                  None
                expression (lib/primitive.ml[57,2174+26]..[57,2174+30])
                  Pexp_construct "true" (lib/primitive.ml[57,2174+26]..[57,2174+30])
                  None
              <case>
                pattern (lib/primitive.ml[58,2205+4]..[60,2246+21])
                  Ppat_or
                  pattern (lib/primitive.ml[58,2205+4]..[59,2228+17])
                    Ppat_or
                    pattern (lib/primitive.ml[58,2205+4]..[58,2205+22])
                      Ppat_construct "Same_as_ocaml_repr" (lib/primitive.ml[58,2205+4]..[58,2205+22])
                      None
                    pattern (lib/primitive.ml[59,2228+4]..[59,2228+17])
                      Ppat_construct "Unboxed_float" (lib/primitive.ml[59,2228+4]..[59,2228+17])
                      None
                  pattern (lib/primitive.ml[60,2246+4]..[60,2246+21])
                    Ppat_construct "Unboxed_integer" (lib/primitive.ml[60,2246+4]..[60,2246+19])
                    Some
                      []
                      pattern (lib/primitive.ml[60,2246+20]..[60,2246+21])
                        Ppat_any
                expression (lib/primitive.ml[60,2246+25]..[60,2246+30])
                  Pexp_construct "false" (lib/primitive.ml[60,2246+25]..[60,2246+30])
                  None
            ]
    ]
  structure_item (lib/primitive.ml[62,2278+0]..[66,2352+44])
    Pstr_value Rec
    [
      <def>
        pattern (lib/primitive.ml[62,2278+8]..[62,2278+29])
          Ppat_var "make_native_repr_args" (lib/primitive.ml[62,2278+8]..[62,2278+29])
        expression (lib/primitive.ml[62,2278+30]..[66,2352+44]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[62,2278+30]..[62,2278+35])
              Nolabel
              None
              pattern (lib/primitive.ml[62,2278+30]..[62,2278+35])
                Ppat_var "arity" (lib/primitive.ml[62,2278+30]..[62,2278+35])
            Pparam_val (lib/primitive.ml[62,2278+36]..[62,2278+37])
              Nolabel
              None
              pattern (lib/primitive.ml[62,2278+36]..[62,2278+37])
                Ppat_var "x" (lib/primitive.ml[62,2278+36]..[62,2278+37])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[63,2318+2]..[66,2352+44])
              Pexp_ifthenelse
              expression (lib/primitive.ml[63,2318+5]..[63,2318+14])
                Pexp_apply
                expression (lib/primitive.ml[63,2318+11]..[63,2318+12])
                  Pexp_ident "=" (lib/primitive.ml[63,2318+11]..[63,2318+12])
                [
                  <arg>
                  Nolabel
                    expression (lib/primitive.ml[63,2318+5]..[63,2318+10])
                      Pexp_ident "arity" (lib/primitive.ml[63,2318+5]..[63,2318+10])
                  <arg>
                  Nolabel
                    expression (lib/primitive.ml[63,2318+13]..[63,2318+14])
                      Pexp_constant PConst_int (0,None)
                ]
              expression (lib/primitive.ml[64,2338+4]..[64,2338+6])
                Pexp_construct "[]" (lib/primitive.ml[64,2338+4]..[64,2338+6])
                None
              Some
                expression (lib/primitive.ml[66,2352+4]..[66,2352+44])
                  Pexp_construct "::" (lib/primitive.ml[66,2352+6]..[66,2352+8])
                  Some
                    expression (lib/primitive.ml[66,2352+4]..[66,2352+44]) ghost
                      Pexp_tuple
                      [
                        expression (lib/primitive.ml[66,2352+4]..[66,2352+5])
                          Pexp_ident "x" (lib/primitive.ml[66,2352+4]..[66,2352+5])
                        expression (lib/primitive.ml[66,2352+9]..[66,2352+44])
                          Pexp_apply
                          expression (lib/primitive.ml[66,2352+9]..[66,2352+30])
                            Pexp_ident "make_native_repr_args" (lib/primitive.ml[66,2352+9]..[66,2352+30])
                          [
                            <arg>
                            Nolabel
                              expression (lib/primitive.ml[66,2352+31]..[66,2352+42])
                                Pexp_apply
                                expression (lib/primitive.ml[66,2352+38]..[66,2352+39])
                                  Pexp_ident "-" (lib/primitive.ml[66,2352+38]..[66,2352+39])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/primitive.ml[66,2352+32]..[66,2352+37])
                                      Pexp_ident "arity" (lib/primitive.ml[66,2352+32]..[66,2352+37])
                                  <arg>
                                  Nolabel
                                    expression (lib/primitive.ml[66,2352+40]..[66,2352+41])
                                      Pexp_constant PConst_int (1,None)
                                ]
                            <arg>
                            Nolabel
                              expression (lib/primitive.ml[66,2352+43]..[66,2352+44])
                                Pexp_ident "x" (lib/primitive.ml[66,2352+43]..[66,2352+44])
                          ]
                      ]
    ]
  structure_item (lib/primitive.ml[68,2398+0]..[74,2599+45])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[68,2398+4]..[68,2398+10])
          Ppat_var "simple" (lib/primitive.ml[68,2398+4]..[68,2398+10])
        expression (lib/primitive.ml[68,2398+11]..[74,2599+45]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[68,2398+11]..[68,2398+16])
              Labelled "name"
              None
              pattern (lib/primitive.ml[68,2398+12]..[68,2398+16])
                Ppat_var "name" (lib/primitive.ml[68,2398+12]..[68,2398+16])
            Pparam_val (lib/primitive.ml[68,2398+17]..[68,2398+23])
              Labelled "arity"
              None
              pattern (lib/primitive.ml[68,2398+18]..[68,2398+23])
                Ppat_var "arity" (lib/primitive.ml[68,2398+18]..[68,2398+23])
            Pparam_val (lib/primitive.ml[68,2398+24]..[68,2398+30])
              Labelled "alloc"
              None
              pattern (lib/primitive.ml[68,2398+25]..[68,2398+30])
                Ppat_var "alloc" (lib/primitive.ml[68,2398+25]..[68,2398+30])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[69,2431+2]..[74,2599+45])
              Pexp_record
              [
                "prim_name" (lib/primitive.ml[69,2431+3]..[69,2431+12])
                  expression (lib/primitive.ml[69,2431+15]..[69,2431+19])
                    Pexp_ident "name" (lib/primitive.ml[69,2431+15]..[69,2431+19])
                "prim_arity" (lib/primitive.ml[70,2452+3]..[70,2452+13])
                  expression (lib/primitive.ml[70,2452+16]..[70,2452+21])
                    Pexp_ident "arity" (lib/primitive.ml[70,2452+16]..[70,2452+21])
                "prim_alloc" (lib/primitive.ml[71,2475+3]..[71,2475+13])
                  expression (lib/primitive.ml[71,2475+16]..[71,2475+21])
                    Pexp_ident "alloc" (lib/primitive.ml[71,2475+16]..[71,2475+21])
                "prim_native_name" (lib/primitive.ml[72,2498+3]..[72,2498+19])
                  expression (lib/primitive.ml[72,2498+22]..[72,2498+24])
                    Pexp_constant PConst_string("",(lib/primitive.ml[72,2498+23]..[72,2498+23]),None)
                "prim_native_repr_args" (lib/primitive.ml[73,2524+3]..[73,2524+24])
                  expression (lib/primitive.ml[73,2524+27]..[73,2524+73])
                    Pexp_apply
                    expression (lib/primitive.ml[73,2524+27]..[73,2524+48])
                      Pexp_ident "make_native_repr_args" (lib/primitive.ml[73,2524+27]..[73,2524+48])
                    [
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[73,2524+49]..[73,2524+54])
                          Pexp_ident "arity" (lib/primitive.ml[73,2524+49]..[73,2524+54])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[73,2524+55]..[73,2524+73])
                          Pexp_construct "Same_as_ocaml_repr" (lib/primitive.ml[73,2524+55]..[73,2524+73])
                          None
                    ]
                "prim_native_repr_res" (lib/primitive.ml[74,2599+3]..[74,2599+23])
                  expression (lib/primitive.ml[74,2599+26]..[74,2599+44])
                    Pexp_construct "Same_as_ocaml_repr" (lib/primitive.ml[74,2599+26]..[74,2599+44])
                    None
              ]
              None
    ]
  structure_item (lib/primitive.ml[76,2646+0]..[82,2888+42])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[76,2646+4]..[76,2646+8])
          Ppat_var "make" (lib/primitive.ml[76,2646+4]..[76,2646+8])
        expression (lib/primitive.ml[76,2646+9]..[82,2888+42]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[76,2646+9]..[76,2646+14])
              Labelled "name"
              None
              pattern (lib/primitive.ml[76,2646+10]..[76,2646+14])
                Ppat_var "name" (lib/primitive.ml[76,2646+10]..[76,2646+14])
            Pparam_val (lib/primitive.ml[76,2646+15]..[76,2646+21])
              Labelled "alloc"
              None
              pattern (lib/primitive.ml[76,2646+16]..[76,2646+21])
                Ppat_var "alloc" (lib/primitive.ml[76,2646+16]..[76,2646+21])
            Pparam_val (lib/primitive.ml[76,2646+22]..[76,2646+34])
              Labelled "native_name"
              None
              pattern (lib/primitive.ml[76,2646+23]..[76,2646+34])
                Ppat_var "native_name" (lib/primitive.ml[76,2646+23]..[76,2646+34])
            Pparam_val (lib/primitive.ml[76,2646+35]..[76,2646+52])
              Labelled "native_repr_args"
              None
              pattern (lib/primitive.ml[76,2646+36]..[76,2646+52])
                Ppat_var "native_repr_args" (lib/primitive.ml[76,2646+36]..[76,2646+52])
            Pparam_val (lib/primitive.ml[76,2646+53]..[76,2646+69])
              Labelled "native_repr_res"
              None
              pattern (lib/primitive.ml[76,2646+54]..[76,2646+69])
                Ppat_var "native_repr_res" (lib/primitive.ml[76,2646+54]..[76,2646+69])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[77,2718+2]..[82,2888+42])
              Pexp_record
              [
                "prim_name" (lib/primitive.ml[77,2718+3]..[77,2718+12])
                  expression (lib/primitive.ml[77,2718+15]..[77,2718+19])
                    Pexp_ident "name" (lib/primitive.ml[77,2718+15]..[77,2718+19])
                "prim_arity" (lib/primitive.ml[78,2739+3]..[78,2739+13])
                  expression (lib/primitive.ml[78,2739+16]..[78,2739+44])
                    Pexp_apply
                    expression (lib/primitive.ml[78,2739+16]..[78,2739+27])
                      Pexp_ident "List.length" (lib/primitive.ml[78,2739+16]..[78,2739+27])
                    [
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[78,2739+28]..[78,2739+44])
                          Pexp_ident "native_repr_args" (lib/primitive.ml[78,2739+28]..[78,2739+44])
                    ]
                "prim_alloc" (lib/primitive.ml[79,2785+3]..[79,2785+13])
                  expression (lib/primitive.ml[79,2785+16]..[79,2785+21])
                    Pexp_ident "alloc" (lib/primitive.ml[79,2785+16]..[79,2785+21])
                "prim_native_name" (lib/primitive.ml[80,2808+3]..[80,2808+19])
                  expression (lib/primitive.ml[80,2808+22]..[80,2808+33])
                    Pexp_ident "native_name" (lib/primitive.ml[80,2808+22]..[80,2808+33])
                "prim_native_repr_args" (lib/primitive.ml[81,2843+3]..[81,2843+24])
                  expression (lib/primitive.ml[81,2843+27]..[81,2843+43])
                    Pexp_ident "native_repr_args" (lib/primitive.ml[81,2843+27]..[81,2843+43])
                "prim_native_repr_res" (lib/primitive.ml[82,2888+3]..[82,2888+23])
                  expression (lib/primitive.ml[82,2888+26]..[82,2888+41])
                    Pexp_ident "native_repr_res" (lib/primitive.ml[82,2888+26]..[82,2888+41])
              ]
              None
    ]
  structure_item (lib/primitive.ml[84,2932+0]..[135,5135+42])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[84,2932+4]..[84,2932+21])
          Ppat_var "parse_declaration" (lib/primitive.ml[84,2932+4]..[84,2932+21])
        expression (lib/primitive.ml[84,2932+22]..[135,5135+42]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[84,2932+22]..[84,2932+29])
              Nolabel
              None
              pattern (lib/primitive.ml[84,2932+22]..[84,2932+29])
                Ppat_var "valdecl" (lib/primitive.ml[84,2932+22]..[84,2932+29])
            Pparam_val (lib/primitive.ml[84,2932+30]..[84,2932+47])
              Labelled "native_repr_args"
              None
              pattern (lib/primitive.ml[84,2932+31]..[84,2932+47])
                Ppat_var "native_repr_args" (lib/primitive.ml[84,2932+31]..[84,2932+47])
            Pparam_val (lib/primitive.ml[84,2932+48]..[84,2932+64])
              Labelled "native_repr_res"
              None
              pattern (lib/primitive.ml[84,2932+49]..[84,2932+64])
                Ppat_var "native_repr_res" (lib/primitive.ml[84,2932+49]..[84,2932+64])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[85,2999+2]..[135,5135+42])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/primitive.ml[85,2999+6]..[85,2999+11])
                    Ppat_var "arity" (lib/primitive.ml[85,2999+6]..[85,2999+11])
                  expression (lib/primitive.ml[85,2999+14]..[85,2999+42])
                    Pexp_apply
                    expression (lib/primitive.ml[85,2999+14]..[85,2999+25])
                      Pexp_ident "List.length" (lib/primitive.ml[85,2999+14]..[85,2999+25])
                    [
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[85,2999+26]..[85,2999+42])
                          Pexp_ident "native_repr_args" (lib/primitive.ml[85,2999+26]..[85,2999+42])
                    ]
              ]
              expression (lib/primitive.ml[86,3045+2]..[135,5135+42])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lib/primitive.ml[86,3045+6]..[86,3045+59])
                      Ppat_tuple
                      [
                        pattern (lib/primitive.ml[86,3045+6]..[86,3045+10])
                          Ppat_var "name" (lib/primitive.ml[86,3045+6]..[86,3045+10])
                        pattern (lib/primitive.ml[86,3045+12]..[86,3045+23])
                          Ppat_var "native_name" (lib/primitive.ml[86,3045+12]..[86,3045+23])
                        pattern (lib/primitive.ml[86,3045+25]..[86,3045+42])
                          Ppat_var "old_style_noalloc" (lib/primitive.ml[86,3045+25]..[86,3045+42])
                        pattern (lib/primitive.ml[86,3045+44]..[86,3045+59])
                          Ppat_var "old_style_float" (lib/primitive.ml[86,3045+44]..[86,3045+59])
                      ]
                    expression (lib/primitive.ml[87,3107+4]..[95,3520+49])
                      Pexp_match
                      expression (lib/primitive.ml[87,3107+10]..[87,3107+27])
                        Pexp_field
                        expression (lib/primitive.ml[87,3107+10]..[87,3107+17])
                          Pexp_ident "valdecl" (lib/primitive.ml[87,3107+10]..[87,3107+17])
                        "pval_prim" (lib/primitive.ml[87,3107+18]..[87,3107+27])
                      [
                        <case>
                          pattern (lib/primitive.ml[88,3140+6]..[88,3140+48])
                            Ppat_construct "::" (lib/primitive.ml[88,3140+11]..[88,3140+13])
                            Some
                              []
                              pattern (lib/primitive.ml[88,3140+6]..[88,3140+48]) ghost
                                Ppat_tuple
                                [
                                  pattern (lib/primitive.ml[88,3140+6]..[88,3140+10])
                                    Ppat_var "name" (lib/primitive.ml[88,3140+6]..[88,3140+10])
                                  pattern (lib/primitive.ml[88,3140+14]..[88,3140+48])
                                    Ppat_construct "::" (lib/primitive.ml[88,3140+24]..[88,3140+26])
                                    Some
                                      []
                                      pattern (lib/primitive.ml[88,3140+14]..[88,3140+48]) ghost
                                        Ppat_tuple
                                        [
                                          pattern (lib/primitive.ml[88,3140+14]..[88,3140+23])
                                            Ppat_constant PConst_string("noalloc",(lib/primitive.ml[88,3140+15]..[88,3140+22]),None)
                                          pattern (lib/primitive.ml[88,3140+27]..[88,3140+48])
                                            Ppat_construct "::" (lib/primitive.ml[88,3140+33]..[88,3140+35])
                                            Some
                                              []
                                              pattern (lib/primitive.ml[88,3140+27]..[88,3140+48]) ghost
                                                Ppat_tuple
                                                [
                                                  pattern (lib/primitive.ml[88,3140+27]..[88,3140+32])
                                                    Ppat_var "name2" (lib/primitive.ml[88,3140+27]..[88,3140+32])
                                                  pattern (lib/primitive.ml[88,3140+36]..[88,3140+48])
                                                    Ppat_construct "::" (lib/primitive.ml[88,3140+44]..[88,3140+46])
                                                    Some
                                                      []
                                                      pattern (lib/primitive.ml[88,3140+36]..[88,3140+48]) ghost
                                                        Ppat_tuple
                                                        [
                                                          pattern (lib/primitive.ml[88,3140+36]..[88,3140+43])
                                                            Ppat_constant PConst_string("float",(lib/primitive.ml[88,3140+37]..[88,3140+42]),None)
                                                          pattern (lib/primitive.ml[88,3140+47]..[88,3140+48])
                                                            Ppat_any
                                                        ]
                                                ]
                                        ]
                                ]
                          expression (lib/primitive.ml[88,3140+52]..[88,3140+77])
                            Pexp_tuple
                            [
                              expression (lib/primitive.ml[88,3140+53]..[88,3140+57])
                                Pexp_ident "name" (lib/primitive.ml[88,3140+53]..[88,3140+57])
                              expression (lib/primitive.ml[88,3140+59]..[88,3140+64])
                                Pexp_ident "name2" (lib/primitive.ml[88,3140+59]..[88,3140+64])
                              expression (lib/primitive.ml[88,3140+66]..[88,3140+70])
                                Pexp_construct "true" (lib/primitive.ml[88,3140+66]..[88,3140+70])
                                None
                              expression (lib/primitive.ml[88,3140+72]..[88,3140+76])
                                Pexp_construct "true" (lib/primitive.ml[88,3140+72]..[88,3140+76])
                                None
                            ]
                        <case>
                          pattern (lib/primitive.ml[89,3218+6]..[89,3218+37])
                            Ppat_construct "::" (lib/primitive.ml[89,3218+11]..[89,3218+13])
                            Some
                              []
                              pattern (lib/primitive.ml[89,3218+6]..[89,3218+37]) ghost
                                Ppat_tuple
                                [
                                  pattern (lib/primitive.ml[89,3218+6]..[89,3218+10])
                                    Ppat_var "name" (lib/primitive.ml[89,3218+6]..[89,3218+10])
                                  pattern (lib/primitive.ml[89,3218+14]..[89,3218+37])
                                    Ppat_construct "::" (lib/primitive.ml[89,3218+24]..[89,3218+26])
                                    Some
                                      []
                                      pattern (lib/primitive.ml[89,3218+14]..[89,3218+37]) ghost
                                        Ppat_tuple
                                        [
                                          pattern (lib/primitive.ml[89,3218+14]..[89,3218+23])
                                            Ppat_constant PConst_string("noalloc",(lib/primitive.ml[89,3218+15]..[89,3218+22]),None)
                                          pattern (lib/primitive.ml[89,3218+27]..[89,3218+37])
                                            Ppat_construct "::" (lib/primitive.ml[89,3218+33]..[89,3218+35])
                                            Some
                                              []
                                              pattern (lib/primitive.ml[89,3218+27]..[89,3218+37]) ghost
                                                Ppat_tuple
                                                [
                                                  pattern (lib/primitive.ml[89,3218+27]..[89,3218+32])
                                                    Ppat_var "name2" (lib/primitive.ml[89,3218+27]..[89,3218+32])
                                                  pattern (lib/primitive.ml[89,3218+36]..[89,3218+37])
                                                    Ppat_any
                                                ]
                                        ]
                                ]
                          expression (lib/primitive.ml[89,3218+41]..[89,3218+67])
                            Pexp_tuple
                            [
                              expression (lib/primitive.ml[89,3218+42]..[89,3218+46])
                                Pexp_ident "name" (lib/primitive.ml[89,3218+42]..[89,3218+46])
                              expression (lib/primitive.ml[89,3218+48]..[89,3218+53])
                                Pexp_ident "name2" (lib/primitive.ml[89,3218+48]..[89,3218+53])
                              expression (lib/primitive.ml[89,3218+55]..[89,3218+59])
                                Pexp_construct "true" (lib/primitive.ml[89,3218+55]..[89,3218+59])
                                None
                              expression (lib/primitive.ml[89,3218+61]..[89,3218+66])
                                Pexp_construct "false" (lib/primitive.ml[89,3218+61]..[89,3218+66])
                                None
                            ]
                        <case>
                          pattern (lib/primitive.ml[90,3286+6]..[90,3286+35])
                            Ppat_construct "::" (lib/primitive.ml[90,3286+11]..[90,3286+13])
                            Some
                              []
                              pattern (lib/primitive.ml[90,3286+6]..[90,3286+35]) ghost
                                Ppat_tuple
                                [
                                  pattern (lib/primitive.ml[90,3286+6]..[90,3286+10])
                                    Ppat_var "name" (lib/primitive.ml[90,3286+6]..[90,3286+10])
                                  pattern (lib/primitive.ml[90,3286+14]..[90,3286+35])
                                    Ppat_construct "::" (lib/primitive.ml[90,3286+20]..[90,3286+22])
                                    Some
                                      []
                                      pattern (lib/primitive.ml[90,3286+14]..[90,3286+35]) ghost
                                        Ppat_tuple
                                        [
                                          pattern (lib/primitive.ml[90,3286+14]..[90,3286+19])
                                            Ppat_var "name2" (lib/primitive.ml[90,3286+14]..[90,3286+19])
                                          pattern (lib/primitive.ml[90,3286+23]..[90,3286+35])
                                            Ppat_construct "::" (lib/primitive.ml[90,3286+31]..[90,3286+33])
                                            Some
                                              []
                                              pattern (lib/primitive.ml[90,3286+23]..[90,3286+35]) ghost
                                                Ppat_tuple
                                                [
                                                  pattern (lib/primitive.ml[90,3286+23]..[90,3286+30])
                                                    Ppat_constant PConst_string("float",(lib/primitive.ml[90,3286+24]..[90,3286+29]),None)
                                                  pattern (lib/primitive.ml[90,3286+34]..[90,3286+35])
                                                    Ppat_any
                                                ]
                                        ]
                                ]
                          expression (lib/primitive.ml[90,3286+39]..[90,3286+65])
                            Pexp_tuple
                            [
                              expression (lib/primitive.ml[90,3286+40]..[90,3286+44])
                                Pexp_ident "name" (lib/primitive.ml[90,3286+40]..[90,3286+44])
                              expression (lib/primitive.ml[90,3286+46]..[90,3286+51])
                                Pexp_ident "name2" (lib/primitive.ml[90,3286+46]..[90,3286+51])
                              expression (lib/primitive.ml[90,3286+53]..[90,3286+58])
                                Pexp_construct "false" (lib/primitive.ml[90,3286+53]..[90,3286+58])
                                None
                              expression (lib/primitive.ml[90,3286+60]..[90,3286+64])
                                Pexp_construct "true" (lib/primitive.ml[90,3286+60]..[90,3286+64])
                                None
                            ]
                        <case>
                          pattern (lib/primitive.ml[91,3352+6]..[91,3352+28])
                            Ppat_construct "::" (lib/primitive.ml[91,3352+11]..[91,3352+13])
                            Some
                              []
                              pattern (lib/primitive.ml[91,3352+6]..[91,3352+28]) ghost
                                Ppat_tuple
                                [
                                  pattern (lib/primitive.ml[91,3352+6]..[91,3352+10])
                                    Ppat_var "name" (lib/primitive.ml[91,3352+6]..[91,3352+10])
                                  pattern (lib/primitive.ml[91,3352+14]..[91,3352+28])
                                    Ppat_construct "::" (lib/primitive.ml[91,3352+24]..[91,3352+26])
                                    Some
                                      []
                                      pattern (lib/primitive.ml[91,3352+14]..[91,3352+28]) ghost
                                        Ppat_tuple
                                        [
                                          pattern (lib/primitive.ml[91,3352+14]..[91,3352+23])
                                            Ppat_constant PConst_string("noalloc",(lib/primitive.ml[91,3352+15]..[91,3352+22]),None)
                                          pattern (lib/primitive.ml[91,3352+27]..[91,3352+28])
                                            Ppat_any
                                        ]
                                ]
                          expression (lib/primitive.ml[91,3352+32]..[91,3352+55])
                            Pexp_tuple
                            [
                              expression (lib/primitive.ml[91,3352+33]..[91,3352+37])
                                Pexp_ident "name" (lib/primitive.ml[91,3352+33]..[91,3352+37])
                              expression (lib/primitive.ml[91,3352+39]..[91,3352+41])
                                Pexp_constant PConst_string("",(lib/primitive.ml[91,3352+40]..[91,3352+40]),None)
                              expression (lib/primitive.ml[91,3352+43]..[91,3352+47])
                                Pexp_construct "true" (lib/primitive.ml[91,3352+43]..[91,3352+47])
                                None
                              expression (lib/primitive.ml[91,3352+49]..[91,3352+54])
                                Pexp_construct "false" (lib/primitive.ml[91,3352+49]..[91,3352+54])
                                None
                            ]
                        <case>
                          pattern (lib/primitive.ml[92,3408+6]..[92,3408+24])
                            Ppat_construct "::" (lib/primitive.ml[92,3408+11]..[92,3408+13])
                            Some
                              []
                              pattern (lib/primitive.ml[92,3408+6]..[92,3408+24]) ghost
                                Ppat_tuple
                                [
                                  pattern (lib/primitive.ml[92,3408+6]..[92,3408+10])
                                    Ppat_var "name" (lib/primitive.ml[92,3408+6]..[92,3408+10])
                                  pattern (lib/primitive.ml[92,3408+14]..[92,3408+24])
                                    Ppat_construct "::" (lib/primitive.ml[92,3408+20]..[92,3408+22])
                                    Some
                                      []
                                      pattern (lib/primitive.ml[92,3408+14]..[92,3408+24]) ghost
                                        Ppat_tuple
                                        [
                                          pattern (lib/primitive.ml[92,3408+14]..[92,3408+19])
                                            Ppat_var "name2" (lib/primitive.ml[92,3408+14]..[92,3408+19])
                                          pattern (lib/primitive.ml[92,3408+23]..[92,3408+24])
                                            Ppat_any
                                        ]
                                ]
                          expression (lib/primitive.ml[92,3408+28]..[92,3408+55])
                            Pexp_tuple
                            [
                              expression (lib/primitive.ml[92,3408+29]..[92,3408+33])
                                Pexp_ident "name" (lib/primitive.ml[92,3408+29]..[92,3408+33])
                              expression (lib/primitive.ml[92,3408+35]..[92,3408+40])
                                Pexp_ident "name2" (lib/primitive.ml[92,3408+35]..[92,3408+40])
                              expression (lib/primitive.ml[92,3408+42]..[92,3408+47])
                                Pexp_construct "false" (lib/primitive.ml[92,3408+42]..[92,3408+47])
                                None
                              expression (lib/primitive.ml[92,3408+49]..[92,3408+54])
                                Pexp_construct "false" (lib/primitive.ml[92,3408+49]..[92,3408+54])
                                None
                            ]
                        <case>
                          pattern (lib/primitive.ml[93,3464+6]..[93,3464+15])
                            Ppat_construct "::" (lib/primitive.ml[93,3464+11]..[93,3464+13])
                            Some
                              []
                              pattern (lib/primitive.ml[93,3464+6]..[93,3464+15]) ghost
                                Ppat_tuple
                                [
                                  pattern (lib/primitive.ml[93,3464+6]..[93,3464+10])
                                    Ppat_var "name" (lib/primitive.ml[93,3464+6]..[93,3464+10])
                                  pattern (lib/primitive.ml[93,3464+14]..[93,3464+15])
                                    Ppat_any
                                ]
                          expression (lib/primitive.ml[93,3464+19]..[93,3464+43])
                            Pexp_tuple
                            [
                              expression (lib/primitive.ml[93,3464+20]..[93,3464+24])
                                Pexp_ident "name" (lib/primitive.ml[93,3464+20]..[93,3464+24])
                              expression (lib/primitive.ml[93,3464+26]..[93,3464+28])
                                Pexp_constant PConst_string("",(lib/primitive.ml[93,3464+27]..[93,3464+27]),None)
                              expression (lib/primitive.ml[93,3464+30]..[93,3464+35])
                                Pexp_construct "false" (lib/primitive.ml[93,3464+30]..[93,3464+35])
                                None
                              expression (lib/primitive.ml[93,3464+37]..[93,3464+42])
                                Pexp_construct "false" (lib/primitive.ml[93,3464+37]..[93,3464+42])
                                None
                            ]
                        <case>
                          pattern (lib/primitive.ml[94,3508+6]..[94,3508+8])
                            Ppat_construct "[]" (lib/primitive.ml[94,3508+6]..[94,3508+8])
                            None
                          expression (lib/primitive.ml[95,3520+8]..[95,3520+49])
                            Pexp_apply
                            expression (lib/primitive.ml[95,3520+8]..[95,3520+19])
                              Pexp_ident "fatal_error" (lib/primitive.ml[95,3520+8]..[95,3520+19])
                            [
                              <arg>
                              Nolabel
                                expression (lib/primitive.ml[95,3520+20]..[95,3520+49])
                                  Pexp_constant PConst_string("Primitive.parse_declaration",(lib/primitive.ml[95,3520+21]..[95,3520+48]),None)
                            ]
                      ]
                ]
                expression (lib/primitive.ml[97,3575+2]..[135,5135+42])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lib/primitive.ml[97,3575+6]..[97,3575+23])
                        Ppat_var "noalloc_attribute" (lib/primitive.ml[97,3575+6]..[97,3575+23])
                      expression (lib/primitive.ml[98,3601+4]..[98,3601+74])
                        Pexp_apply
                        expression (lib/primitive.ml[98,3601+4]..[98,3601+40])
                          Pexp_ident "Attr_helper.has_no_payload_attribute" (lib/primitive.ml[98,3601+4]..[98,3601+40])
                        [
                          <arg>
                          Nolabel
                            expression (lib/primitive.ml[98,3601+41]..[98,3601+50])
                              Pexp_constant PConst_string("noalloc",(lib/primitive.ml[98,3601+42]..[98,3601+49]),None)
                          <arg>
                          Nolabel
                            expression (lib/primitive.ml[98,3601+51]..[98,3601+74])
                              Pexp_field
                              expression (lib/primitive.ml[98,3601+51]..[98,3601+58])
                                Pexp_ident "valdecl" (lib/primitive.ml[98,3601+51]..[98,3601+58])
                              "pval_attributes" (lib/primitive.ml[98,3601+59]..[98,3601+74])
                        ]
                  ]
                  expression (lib/primitive.ml[100,3681+2]..[135,5135+42])
                    Pexp_sequence
                    expression (lib/primitive.ml[100,3681+2]..[104,3844+62])
                      Pexp_ifthenelse
                      expression (lib/primitive.ml[100,3681+5]..[102,3762+40])
                        Pexp_apply
                        expression (lib/primitive.ml[100,3681+21]..[100,3681+23])
                          Pexp_ident "&&" (lib/primitive.ml[100,3681+21]..[100,3681+23])
                        [
                          <arg>
                          Nolabel
                            expression (lib/primitive.ml[100,3681+5]..[100,3681+20])
                              Pexp_ident "old_style_float" (lib/primitive.ml[100,3681+5]..[100,3681+20])
                          <arg>
                          Nolabel
                            expression (lib/primitive.ml[101,3705+5]..[102,3762+40])
                              Pexp_apply
                              expression (lib/primitive.ml[101,3705+5]..[101,3705+8])
                                Pexp_ident "not" (lib/primitive.ml[101,3705+5]..[101,3705+8])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/primitive.ml[101,3705+9]..[102,3762+40])
                                    Pexp_apply
                                    expression (lib/primitive.ml[101,3705+54]..[101,3705+56])
                                      Pexp_ident "&&" (lib/primitive.ml[101,3705+54]..[101,3705+56])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/primitive.ml[101,3705+10]..[101,3705+53])
                                          Pexp_apply
                                          expression (lib/primitive.ml[101,3705+10]..[101,3705+22])
                                            Pexp_ident "List.for_all" (lib/primitive.ml[101,3705+10]..[101,3705+22])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/primitive.ml[101,3705+23]..[101,3705+36])
                                                Pexp_ident "is_ocaml_repr" (lib/primitive.ml[101,3705+23]..[101,3705+36])
                                            <arg>
                                            Nolabel
                                              expression (lib/primitive.ml[101,3705+37]..[101,3705+53])
                                                Pexp_ident "native_repr_args" (lib/primitive.ml[101,3705+37]..[101,3705+53])
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (lib/primitive.ml[102,3762+10]..[102,3762+39])
                                          Pexp_apply
                                          expression (lib/primitive.ml[102,3762+10]..[102,3762+23])
                                            Pexp_ident "is_ocaml_repr" (lib/primitive.ml[102,3762+10]..[102,3762+23])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/primitive.ml[102,3762+24]..[102,3762+39])
                                                Pexp_ident "native_repr_res" (lib/primitive.ml[102,3762+24]..[102,3762+39])
                                          ]
                                    ]
                              ]
                        ]
                      expression (lib/primitive.ml[103,3808+4]..[104,3844+62])
                        Pexp_apply
                        expression (lib/primitive.ml[103,3808+4]..[103,3808+9])
                          Pexp_ident "raise" (lib/primitive.ml[103,3808+4]..[103,3808+9])
                        [
                          <arg>
                          Nolabel
                            expression (lib/primitive.ml[103,3808+10]..[104,3844+62])
                              Pexp_construct "Error" (lib/primitive.ml[103,3808+11]..[103,3808+16])
                              Some
                                expression (lib/primitive.ml[103,3808+17]..[104,3844+61])
                                  Pexp_tuple
                                  [
                                    expression (lib/primitive.ml[103,3808+18]..[103,3808+34])
                                      Pexp_field
                                      expression (lib/primitive.ml[103,3808+18]..[103,3808+25])
                                        Pexp_ident "valdecl" (lib/primitive.ml[103,3808+18]..[103,3808+25])
                                      "pval_loc" (lib/primitive.ml[103,3808+26]..[103,3808+34])
                                    expression (lib/primitive.ml[104,3844+18]..[104,3844+60])
                                      Pexp_construct "Old_style_float_with_native_repr_attribute" (lib/primitive.ml[104,3844+18]..[104,3844+60])
                                      None
                                  ]
                        ]
                      None
                    expression (lib/primitive.ml[105,3908+2]..[135,5135+42])
                      Pexp_sequence
                      expression (lib/primitive.ml[105,3908+2]..[107,3993+60])
                        Pexp_ifthenelse
                        expression (lib/primitive.ml[105,3908+5]..[105,3908+43])
                          Pexp_apply
                          expression (lib/primitive.ml[105,3908+23]..[105,3908+25])
                            Pexp_ident "&&" (lib/primitive.ml[105,3908+23]..[105,3908+25])
                          [
                            <arg>
                            Nolabel
                              expression (lib/primitive.ml[105,3908+5]..[105,3908+22])
                                Pexp_ident "old_style_noalloc" (lib/primitive.ml[105,3908+5]..[105,3908+22])
                            <arg>
                            Nolabel
                              expression (lib/primitive.ml[105,3908+26]..[105,3908+43])
                                Pexp_ident "noalloc_attribute" (lib/primitive.ml[105,3908+26]..[105,3908+43])
                          ]
                        expression (lib/primitive.ml[106,3957+4]..[107,3993+60])
                          Pexp_apply
                          expression (lib/primitive.ml[106,3957+4]..[106,3957+9])
                            Pexp_ident "raise" (lib/primitive.ml[106,3957+4]..[106,3957+9])
                          [
                            <arg>
                            Nolabel
                              expression (lib/primitive.ml[106,3957+10]..[107,3993+60])
                                Pexp_construct "Error" (lib/primitive.ml[106,3957+11]..[106,3957+16])
                                Some
                                  expression (lib/primitive.ml[106,3957+17]..[107,3993+59])
                                    Pexp_tuple
                                    [
                                      expression (lib/primitive.ml[106,3957+18]..[106,3957+34])
                                        Pexp_field
                                        expression (lib/primitive.ml[106,3957+18]..[106,3957+25])
                                          Pexp_ident "valdecl" (lib/primitive.ml[106,3957+18]..[106,3957+25])
                                        "pval_loc" (lib/primitive.ml[106,3957+26]..[106,3957+34])
                                      expression (lib/primitive.ml[107,3993+18]..[107,3993+58])
                                        Pexp_construct "Old_style_noalloc_with_noalloc_attribute" (lib/primitive.ml[107,3993+18]..[107,3993+58])
                                        None
                                    ]
                          ]
                        None
                      expression (lib/primitive.ml[110,4162+2]..[135,5135+42])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/primitive.ml[110,4162+6]..[110,4162+23])
                              Ppat_var "old_style_noalloc" (lib/primitive.ml[110,4162+6]..[110,4162+23])
                            expression (lib/primitive.ml[110,4162+26]..[110,4162+62])
                              Pexp_apply
                              expression (lib/primitive.ml[110,4162+44]..[110,4162+46])
                                Pexp_ident "||" (lib/primitive.ml[110,4162+44]..[110,4162+46])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/primitive.ml[110,4162+26]..[110,4162+43])
                                    Pexp_ident "old_style_noalloc" (lib/primitive.ml[110,4162+26]..[110,4162+43])
                                <arg>
                                Nolabel
                                  expression (lib/primitive.ml[110,4162+47]..[110,4162+62])
                                    Pexp_ident "old_style_float" (lib/primitive.ml[110,4162+47]..[110,4162+62])
                              ]
                        ]
                        expression (lib/primitive.ml[111,4228+2]..[135,5135+42])
                          Pexp_sequence
                          expression (lib/primitive.ml[111,4228+2]..[117,4449+57])
                            Pexp_ifthenelse
                            expression (lib/primitive.ml[111,4228+5]..[111,4228+20])
                              Pexp_ident "old_style_float" (lib/primitive.ml[111,4228+5]..[111,4228+20])
                            expression (lib/primitive.ml[112,4254+4]..[114,4346+28])
                              Pexp_apply
                              expression (lib/primitive.ml[112,4254+4]..[112,4254+23])
                                Pexp_ident "Location.deprecated" (lib/primitive.ml[112,4254+4]..[112,4254+23])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/primitive.ml[112,4254+24]..[112,4254+40])
                                    Pexp_field
                                    expression (lib/primitive.ml[112,4254+24]..[112,4254+31])
                                      Pexp_ident "valdecl" (lib/primitive.ml[112,4254+24]..[112,4254+31])
                                    "pval_loc" (lib/primitive.ml[112,4254+32]..[112,4254+40])
                                <arg>
                                Nolabel
                                  expression (lib/primitive.ml[113,4295+6]..[114,4346+28])
                                    Pexp_constant PConst_string("[@@unboxed] + [@@noalloc] should be used\ninstead of \"float\"",(lib/primitive.ml[113,4295+7]..[114,4346+27]),None)
                              ]
                            Some
                              expression (lib/primitive.ml[115,4375+7]..[117,4449+57])
                                Pexp_ifthenelse
                                expression (lib/primitive.ml[115,4375+10]..[115,4375+27])
                                  Pexp_ident "old_style_noalloc" (lib/primitive.ml[115,4375+10]..[115,4375+27])
                                expression (lib/primitive.ml[116,4408+4]..[117,4449+57])
                                  Pexp_apply
                                  expression (lib/primitive.ml[116,4408+4]..[116,4408+23])
                                    Pexp_ident "Location.deprecated" (lib/primitive.ml[116,4408+4]..[116,4408+23])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/primitive.ml[116,4408+24]..[116,4408+40])
                                        Pexp_field
                                        expression (lib/primitive.ml[116,4408+24]..[116,4408+31])
                                          Pexp_ident "valdecl" (lib/primitive.ml[116,4408+24]..[116,4408+31])
                                        "pval_loc" (lib/primitive.ml[116,4408+32]..[116,4408+40])
                                    <arg>
                                    Nolabel
                                      expression (lib/primitive.ml[117,4449+6]..[117,4449+57])
                                        Pexp_constant PConst_string("[@@noalloc] should be used instead of \"noalloc\"",(lib/primitive.ml[117,4449+7]..[117,4449+56]),None)
                                  ]
                                None
                          expression (lib/primitive.ml[118,4508+2]..[135,5135+42])
                            Pexp_sequence
                            expression (lib/primitive.ml[118,4508+2]..[122,4672+59])
                              Pexp_ifthenelse
                              expression (lib/primitive.ml[118,4508+5]..[120,4590+40])
                                Pexp_apply
                                expression (lib/primitive.ml[118,4508+22]..[118,4508+24])
                                  Pexp_ident "&&" (lib/primitive.ml[118,4508+22]..[118,4508+24])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/primitive.ml[118,4508+5]..[118,4508+21])
                                      Pexp_apply
                                      expression (lib/primitive.ml[118,4508+17]..[118,4508+18])
                                        Pexp_ident "=" (lib/primitive.ml[118,4508+17]..[118,4508+18])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/primitive.ml[118,4508+5]..[118,4508+16])
                                            Pexp_ident "native_name" (lib/primitive.ml[118,4508+5]..[118,4508+16])
                                        <arg>
                                        Nolabel
                                          expression (lib/primitive.ml[118,4508+19]..[118,4508+21])
                                            Pexp_constant PConst_string("",(lib/primitive.ml[118,4508+20]..[118,4508+20]),None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lib/primitive.ml[119,4533+5]..[120,4590+40])
                                      Pexp_apply
                                      expression (lib/primitive.ml[119,4533+5]..[119,4533+8])
                                        Pexp_ident "not" (lib/primitive.ml[119,4533+5]..[119,4533+8])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/primitive.ml[119,4533+9]..[120,4590+40])
                                            Pexp_apply
                                            expression (lib/primitive.ml[119,4533+54]..[119,4533+56])
                                              Pexp_ident "&&" (lib/primitive.ml[119,4533+54]..[119,4533+56])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/primitive.ml[119,4533+10]..[119,4533+53])
                                                  Pexp_apply
                                                  expression (lib/primitive.ml[119,4533+10]..[119,4533+22])
                                                    Pexp_ident "List.for_all" (lib/primitive.ml[119,4533+10]..[119,4533+22])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/primitive.ml[119,4533+23]..[119,4533+36])
                                                        Pexp_ident "is_ocaml_repr" (lib/primitive.ml[119,4533+23]..[119,4533+36])
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/primitive.ml[119,4533+37]..[119,4533+53])
                                                        Pexp_ident "native_repr_args" (lib/primitive.ml[119,4533+37]..[119,4533+53])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (lib/primitive.ml[120,4590+10]..[120,4590+39])
                                                  Pexp_apply
                                                  expression (lib/primitive.ml[120,4590+10]..[120,4590+23])
                                                    Pexp_ident "is_ocaml_repr" (lib/primitive.ml[120,4590+10]..[120,4590+23])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/primitive.ml[120,4590+24]..[120,4590+39])
                                                        Pexp_ident "native_repr_res" (lib/primitive.ml[120,4590+24]..[120,4590+39])
                                                  ]
                                            ]
                                      ]
                                ]
                              expression (lib/primitive.ml[121,4636+4]..[122,4672+59])
                                Pexp_apply
                                expression (lib/primitive.ml[121,4636+4]..[121,4636+9])
                                  Pexp_ident "raise" (lib/primitive.ml[121,4636+4]..[121,4636+9])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/primitive.ml[121,4636+10]..[122,4672+59])
                                      Pexp_construct "Error" (lib/primitive.ml[121,4636+11]..[121,4636+16])
                                      Some
                                        expression (lib/primitive.ml[121,4636+17]..[122,4672+58])
                                          Pexp_tuple
                                          [
                                            expression (lib/primitive.ml[121,4636+18]..[121,4636+34])
                                              Pexp_field
                                              expression (lib/primitive.ml[121,4636+18]..[121,4636+25])
                                                Pexp_ident "valdecl" (lib/primitive.ml[121,4636+18]..[121,4636+25])
                                              "pval_loc" (lib/primitive.ml[121,4636+26]..[121,4636+34])
                                            expression (lib/primitive.ml[122,4672+18]..[122,4672+57])
                                              Pexp_construct "No_native_primitive_with_repr_attribute" (lib/primitive.ml[122,4672+18]..[122,4672+57])
                                              None
                                          ]
                                ]
                              None
                            expression (lib/primitive.ml[123,4733+2]..[135,5135+42])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/primitive.ml[123,4733+6]..[123,4733+13])
                                    Ppat_var "noalloc" (lib/primitive.ml[123,4733+6]..[123,4733+13])
                                  expression (lib/primitive.ml[123,4733+16]..[123,4733+54])
                                    Pexp_apply
                                    expression (lib/primitive.ml[123,4733+34]..[123,4733+36])
                                      Pexp_ident "||" (lib/primitive.ml[123,4733+34]..[123,4733+36])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/primitive.ml[123,4733+16]..[123,4733+33])
                                          Pexp_ident "old_style_noalloc" (lib/primitive.ml[123,4733+16]..[123,4733+33])
                                      <arg>
                                      Nolabel
                                        expression (lib/primitive.ml[123,4733+37]..[123,4733+54])
                                          Pexp_ident "noalloc_attribute" (lib/primitive.ml[123,4733+37]..[123,4733+54])
                                    ]
                              ]
                              expression (lib/primitive.ml[124,4791+2]..[135,5135+42])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/primitive.ml[124,4791+6]..[124,4791+39])
                                      Ppat_tuple
                                      [
                                        pattern (lib/primitive.ml[124,4791+6]..[124,4791+22])
                                          Ppat_var "native_repr_args" (lib/primitive.ml[124,4791+6]..[124,4791+22])
                                        pattern (lib/primitive.ml[124,4791+24]..[124,4791+39])
                                          Ppat_var "native_repr_res" (lib/primitive.ml[124,4791+24]..[124,4791+39])
                                      ]
                                    expression (lib/primitive.ml[125,4833+4]..[128,4935+41])
                                      Pexp_ifthenelse
                                      expression (lib/primitive.ml[125,4833+7]..[125,4833+22])
                                        Pexp_ident "old_style_float" (lib/primitive.ml[125,4833+7]..[125,4833+22])
                                      expression (lib/primitive.ml[126,4861+6]..[126,4861+64])
                                        Pexp_tuple
                                        [
                                          expression (lib/primitive.ml[126,4861+7]..[126,4861+48])
                                            Pexp_apply
                                            expression (lib/primitive.ml[126,4861+7]..[126,4861+28])
                                              Pexp_ident "make_native_repr_args" (lib/primitive.ml[126,4861+7]..[126,4861+28])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/primitive.ml[126,4861+29]..[126,4861+34])
                                                  Pexp_ident "arity" (lib/primitive.ml[126,4861+29]..[126,4861+34])
                                              <arg>
                                              Nolabel
                                                expression (lib/primitive.ml[126,4861+35]..[126,4861+48])
                                                  Pexp_construct "Unboxed_float" (lib/primitive.ml[126,4861+35]..[126,4861+48])
                                                  None
                                            ]
                                          expression (lib/primitive.ml[126,4861+50]..[126,4861+63])
                                            Pexp_construct "Unboxed_float" (lib/primitive.ml[126,4861+50]..[126,4861+63])
                                            None
                                        ]
                                      Some
                                        expression (lib/primitive.ml[128,4935+6]..[128,4935+41])
                                          Pexp_tuple
                                          [
                                            expression (lib/primitive.ml[128,4935+7]..[128,4935+23])
                                              Pexp_ident "native_repr_args" (lib/primitive.ml[128,4935+7]..[128,4935+23])
                                            expression (lib/primitive.ml[128,4935+25]..[128,4935+40])
                                              Pexp_ident "native_repr_res" (lib/primitive.ml[128,4935+25]..[128,4935+40])
                                          ]
                                ]
                                expression (lib/primitive.ml[130,4982+2]..[135,5135+42])
                                  Pexp_record
                                  [
                                    "prim_name" (lib/primitive.ml[130,4982+3]..[130,4982+12])
                                      expression (lib/primitive.ml[130,4982+15]..[130,4982+19])
                                        Pexp_ident "name" (lib/primitive.ml[130,4982+15]..[130,4982+19])
                                    "prim_arity" (lib/primitive.ml[131,5003+3]..[131,5003+13])
                                      expression (lib/primitive.ml[131,5003+16]..[131,5003+21])
                                        Pexp_ident "arity" (lib/primitive.ml[131,5003+16]..[131,5003+21])
                                    "prim_alloc" (lib/primitive.ml[132,5026+3]..[132,5026+13])
                                      expression (lib/primitive.ml[132,5026+16]..[132,5026+27])
                                        Pexp_apply
                                        expression (lib/primitive.ml[132,5026+16]..[132,5026+19])
                                          Pexp_ident "not" (lib/primitive.ml[132,5026+16]..[132,5026+19])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/primitive.ml[132,5026+20]..[132,5026+27])
                                              Pexp_ident "noalloc" (lib/primitive.ml[132,5026+20]..[132,5026+27])
                                        ]
                                    "prim_native_name" (lib/primitive.ml[133,5055+3]..[133,5055+19])
                                      expression (lib/primitive.ml[133,5055+22]..[133,5055+33])
                                        Pexp_ident "native_name" (lib/primitive.ml[133,5055+22]..[133,5055+33])
                                    "prim_native_repr_args" (lib/primitive.ml[134,5090+3]..[134,5090+24])
                                      expression (lib/primitive.ml[134,5090+27]..[134,5090+43])
                                        Pexp_ident "native_repr_args" (lib/primitive.ml[134,5090+27]..[134,5090+43])
                                    "prim_native_repr_res" (lib/primitive.ml[135,5135+3]..[135,5135+23])
                                      expression (lib/primitive.ml[135,5135+26]..[135,5135+41])
                                        Pexp_ident "native_repr_res" (lib/primitive.ml[135,5135+26]..[135,5135+41])
                                  ]
                                  None
    ]
  structure_item (lib/primitive.ml[137,5179+0]..[137,5179+16])
    Pstr_open Fresh
    module_expr (lib/primitive.ml[137,5179+5]..[137,5179+16])
      Pmod_ident "Outcometree" (lib/primitive.ml[137,5179+5]..[137,5179+16])
  structure_item (lib/primitive.ml[139,5197+0]..[152,5613+6])
    Pstr_value Rec
    [
      <def>
        pattern (lib/primitive.ml[139,5197+8]..[139,5197+34])
          Ppat_var "add_native_repr_attributes" (lib/primitive.ml[139,5197+8]..[139,5197+34])
        expression (lib/primitive.ml[139,5197+35]..[152,5613+6]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[139,5197+35]..[139,5197+37])
              Nolabel
              None
              pattern (lib/primitive.ml[139,5197+35]..[139,5197+37])
                Ppat_var "ty" (lib/primitive.ml[139,5197+35]..[139,5197+37])
            Pparam_val (lib/primitive.ml[139,5197+38]..[139,5197+43])
              Nolabel
              None
              pattern (lib/primitive.ml[139,5197+38]..[139,5197+43])
                Ppat_var "attrs" (lib/primitive.ml[139,5197+38]..[139,5197+43])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[140,5243+2]..[152,5613+6])
              Pexp_match
              expression (lib/primitive.ml[140,5243+8]..[140,5243+17])
                Pexp_tuple
                [
                  expression (lib/primitive.ml[140,5243+8]..[140,5243+10])
                    Pexp_ident "ty" (lib/primitive.ml[140,5243+8]..[140,5243+10])
                  expression (lib/primitive.ml[140,5243+12]..[140,5243+17])
                    Pexp_ident "attrs" (lib/primitive.ml[140,5243+12]..[140,5243+17])
                ]
              [
                <case>
                  pattern (lib/primitive.ml[141,5266+4]..[141,5266+46])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[141,5266+4]..[141,5266+28])
                        Ppat_construct "Otyp_arrow" (lib/primitive.ml[141,5266+4]..[141,5266+14])
                        Some
                          []
                          pattern (lib/primitive.ml[141,5266+15]..[141,5266+28])
                            Ppat_tuple
                            [
                              pattern (lib/primitive.ml[141,5266+16]..[141,5266+21])
                                Ppat_var "label" (lib/primitive.ml[141,5266+16]..[141,5266+21])
                              pattern (lib/primitive.ml[141,5266+23]..[141,5266+24])
                                Ppat_var "a" (lib/primitive.ml[141,5266+23]..[141,5266+24])
                              pattern (lib/primitive.ml[141,5266+26]..[141,5266+27])
                                Ppat_var "b" (lib/primitive.ml[141,5266+26]..[141,5266+27])
                            ]
                      pattern (lib/primitive.ml[141,5266+30]..[141,5266+46])
                        Ppat_construct "::" (lib/primitive.ml[141,5266+39]..[141,5266+41])
                        Some
                          []
                          pattern (lib/primitive.ml[141,5266+30]..[141,5266+46]) ghost
                            Ppat_tuple
                            [
                              pattern (lib/primitive.ml[141,5266+30]..[141,5266+38])
                                Ppat_var "attr_opt" (lib/primitive.ml[141,5266+30]..[141,5266+38])
                              pattern (lib/primitive.ml[141,5266+42]..[141,5266+46])
                                Ppat_var "rest" (lib/primitive.ml[141,5266+42]..[141,5266+46])
                            ]
                    ]
                  expression (lib/primitive.ml[142,5316+4]..[148,5474+28])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lib/primitive.ml[142,5316+8]..[142,5316+9])
                          Ppat_var "b" (lib/primitive.ml[142,5316+8]..[142,5316+9])
                        expression (lib/primitive.ml[142,5316+12]..[142,5316+45])
                          Pexp_apply
                          expression (lib/primitive.ml[142,5316+12]..[142,5316+38])
                            Pexp_ident "add_native_repr_attributes" (lib/primitive.ml[142,5316+12]..[142,5316+38])
                          [
                            <arg>
                            Nolabel
                              expression (lib/primitive.ml[142,5316+39]..[142,5316+40])
                                Pexp_ident "b" (lib/primitive.ml[142,5316+39]..[142,5316+40])
                            <arg>
                            Nolabel
                              expression (lib/primitive.ml[142,5316+41]..[142,5316+45])
                                Pexp_ident "rest" (lib/primitive.ml[142,5316+41]..[142,5316+45])
                          ]
                    ]
                    expression (lib/primitive.ml[143,5365+4]..[148,5474+28])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lib/primitive.ml[143,5365+8]..[143,5365+9])
                            Ppat_var "a" (lib/primitive.ml[143,5365+8]..[143,5365+9])
                          expression (lib/primitive.ml[144,5377+6]..[146,5421+45])
                            Pexp_match
                            expression (lib/primitive.ml[144,5377+12]..[144,5377+20])
                              Pexp_ident "attr_opt" (lib/primitive.ml[144,5377+12]..[144,5377+20])
                            [
                              <case>
                                pattern (lib/primitive.ml[145,5403+8]..[145,5403+12])
                                  Ppat_construct "None" (lib/primitive.ml[145,5403+8]..[145,5403+12])
                                  None
                                expression (lib/primitive.ml[145,5403+16]..[145,5403+17])
                                  Pexp_ident "a" (lib/primitive.ml[145,5403+16]..[145,5403+17])
                              <case>
                                pattern (lib/primitive.ml[146,5421+8]..[146,5421+17])
                                  Ppat_construct "Some" (lib/primitive.ml[146,5421+8]..[146,5421+12])
                                  Some
                                    []
                                    pattern (lib/primitive.ml[146,5421+13]..[146,5421+17])
                                      Ppat_var "attr" (lib/primitive.ml[146,5421+13]..[146,5421+17])
                                expression (lib/primitive.ml[146,5421+21]..[146,5421+45])
                                  Pexp_construct "Otyp_attribute" (lib/primitive.ml[146,5421+21]..[146,5421+35])
                                  Some
                                    expression (lib/primitive.ml[146,5421+36]..[146,5421+45])
                                      Pexp_tuple
                                      [
                                        expression (lib/primitive.ml[146,5421+37]..[146,5421+38])
                                          Pexp_ident "a" (lib/primitive.ml[146,5421+37]..[146,5421+38])
                                        expression (lib/primitive.ml[146,5421+40]..[146,5421+44])
                                          Pexp_ident "attr" (lib/primitive.ml[146,5421+40]..[146,5421+44])
                                      ]
                            ]
                      ]
                      expression (lib/primitive.ml[148,5474+4]..[148,5474+28])
                        Pexp_construct "Otyp_arrow" (lib/primitive.ml[148,5474+4]..[148,5474+14])
                        Some
                          expression (lib/primitive.ml[148,5474+15]..[148,5474+28])
                            Pexp_tuple
                            [
                              expression (lib/primitive.ml[148,5474+16]..[148,5474+21])
                                Pexp_ident "label" (lib/primitive.ml[148,5474+16]..[148,5474+21])
                              expression (lib/primitive.ml[148,5474+23]..[148,5474+24])
                                Pexp_ident "a" (lib/primitive.ml[148,5474+23]..[148,5474+24])
                              expression (lib/primitive.ml[148,5474+26]..[148,5474+27])
                                Pexp_ident "b" (lib/primitive.ml[148,5474+26]..[148,5474+27])
                            ]
                <case>
                  pattern (lib/primitive.ml[149,5503+4]..[149,5503+18])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[149,5503+4]..[149,5503+5])
                        Ppat_any
                      pattern (lib/primitive.ml[149,5503+7]..[149,5503+18])
                        Ppat_construct "::" (lib/primitive.ml[149,5503+8]..[149,5503+18]) ghost
                        Some
                          []
                          pattern (lib/primitive.ml[149,5503+8]..[149,5503+18]) ghost
                            Ppat_tuple
                            [
                              pattern (lib/primitive.ml[149,5503+8]..[149,5503+17])
                                Ppat_construct "Some" (lib/primitive.ml[149,5503+8]..[149,5503+12])
                                Some
                                  []
                                  pattern (lib/primitive.ml[149,5503+13]..[149,5503+17])
                                    Ppat_var "attr" (lib/primitive.ml[149,5503+13]..[149,5503+17])
                              pattern (lib/primitive.ml[149,5503+17]..[149,5503+18]) ghost
                                Ppat_construct "[]" (lib/primitive.ml[149,5503+17]..[149,5503+18]) ghost
                                None
                            ]
                    ]
                  expression (lib/primitive.ml[149,5503+22]..[149,5503+47])
                    Pexp_construct "Otyp_attribute" (lib/primitive.ml[149,5503+22]..[149,5503+36])
                    Some
                      expression (lib/primitive.ml[149,5503+37]..[149,5503+47])
                        Pexp_tuple
                        [
                          expression (lib/primitive.ml[149,5503+38]..[149,5503+40])
                            Pexp_ident "ty" (lib/primitive.ml[149,5503+38]..[149,5503+40])
                          expression (lib/primitive.ml[149,5503+42]..[149,5503+46])
                            Pexp_ident "attr" (lib/primitive.ml[149,5503+42]..[149,5503+46])
                        ]
                <case>
                  pattern (lib/primitive.ml[150,5551+4]..[150,5551+5])
                    Ppat_any
                  expression (lib/primitive.ml[151,5560+4]..[152,5613+6])
                    Pexp_sequence
                    expression (lib/primitive.ml[151,5560+4]..[151,5560+51])
                      Pexp_assert
                      expression (lib/primitive.ml[151,5560+11]..[151,5560+51])
                        Pexp_apply
                        expression (lib/primitive.ml[151,5560+12]..[151,5560+24])
                          Pexp_ident "List.for_all" (lib/primitive.ml[151,5560+12]..[151,5560+24])
                        [
                          <arg>
                          Nolabel
                            expression (lib/primitive.ml[151,5560+25]..[151,5560+44])
                              Pexp_function
                              [
                                Pparam_val (lib/primitive.ml[151,5560+30]..[151,5560+31])
                                  Nolabel
                                  None
                                  pattern (lib/primitive.ml[151,5560+30]..[151,5560+31])
                                    Ppat_var "x" (lib/primitive.ml[151,5560+30]..[151,5560+31])
                              ]
                              None
                              Pfunction_body
                                expression (lib/primitive.ml[151,5560+35]..[151,5560+43])
                                  Pexp_apply
                                  expression (lib/primitive.ml[151,5560+37]..[151,5560+38])
                                    Pexp_ident "=" (lib/primitive.ml[151,5560+37]..[151,5560+38])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/primitive.ml[151,5560+35]..[151,5560+36])
                                        Pexp_ident "x" (lib/primitive.ml[151,5560+35]..[151,5560+36])
                                    <arg>
                                    Nolabel
                                      expression (lib/primitive.ml[151,5560+39]..[151,5560+43])
                                        Pexp_construct "None" (lib/primitive.ml[151,5560+39]..[151,5560+43])
                                        None
                                  ]
                          <arg>
                          Nolabel
                            expression (lib/primitive.ml[151,5560+45]..[151,5560+50])
                              Pexp_ident "attrs" (lib/primitive.ml[151,5560+45]..[151,5560+50])
                        ]
                    expression (lib/primitive.ml[152,5613+4]..[152,5613+6])
                      Pexp_ident "ty" (lib/primitive.ml[152,5613+4]..[152,5613+6])
              ]
    ]
  structure_item (lib/primitive.ml[154,5621+0]..[154,5621+46])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[154,5621+4]..[154,5621+17])
          Ppat_var "oattr_unboxed" (lib/primitive.ml[154,5621+4]..[154,5621+17])
        expression (lib/primitive.ml[154,5621+20]..[154,5621+46])
          Pexp_record
          [
            "oattr_name" (lib/primitive.ml[154,5621+22]..[154,5621+32])
              expression (lib/primitive.ml[154,5621+35]..[154,5621+44])
                Pexp_constant PConst_string("unboxed",(lib/primitive.ml[154,5621+36]..[154,5621+43]),None)
          ]
          None
    ]
  structure_item (lib/primitive.ml[155,5668+0]..[155,5668+48])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[155,5668+4]..[155,5668+18])
          Ppat_var "oattr_untagged" (lib/primitive.ml[155,5668+4]..[155,5668+18])
        expression (lib/primitive.ml[155,5668+21]..[155,5668+48])
          Pexp_record
          [
            "oattr_name" (lib/primitive.ml[155,5668+23]..[155,5668+33])
              expression (lib/primitive.ml[155,5668+36]..[155,5668+46])
                Pexp_constant PConst_string("untagged",(lib/primitive.ml[155,5668+37]..[155,5668+45]),None)
          ]
          None
    ]
  structure_item (lib/primitive.ml[156,5717+0]..[156,5717+46])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[156,5717+4]..[156,5717+17])
          Ppat_var "oattr_noalloc" (lib/primitive.ml[156,5717+4]..[156,5717+17])
        expression (lib/primitive.ml[156,5717+20]..[156,5717+46])
          Pexp_record
          [
            "oattr_name" (lib/primitive.ml[156,5717+22]..[156,5717+32])
              expression (lib/primitive.ml[156,5717+35]..[156,5717+44])
                Pexp_constant PConst_string("noalloc",(lib/primitive.ml[156,5717+36]..[156,5717+43]),None)
          ]
          None
    ]
  structure_item (lib/primitive.ml[158,5765+0]..[192,6821+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[158,5765+4]..[158,5765+9])
          Ppat_var "print" (lib/primitive.ml[158,5765+4]..[158,5765+9])
        expression (lib/primitive.ml[158,5765+10]..[192,6821+29]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[158,5765+10]..[158,5765+11])
              Nolabel
              None
              pattern (lib/primitive.ml[158,5765+10]..[158,5765+11])
                Ppat_var "p" (lib/primitive.ml[158,5765+10]..[158,5765+11])
            Pparam_val (lib/primitive.ml[158,5765+12]..[158,5765+25])
              Nolabel
              None
              pattern (lib/primitive.ml[158,5765+12]..[158,5765+25])
                Ppat_var "osig_val_decl" (lib/primitive.ml[158,5765+12]..[158,5765+25])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[159,5793+2]..[192,6821+29])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/primitive.ml[159,5793+6]..[159,5793+11])
                    Ppat_var "prims" (lib/primitive.ml[159,5793+6]..[159,5793+11])
                  expression (lib/primitive.ml[160,5807+4]..[163,5893+19])
                    Pexp_ifthenelse
                    expression (lib/primitive.ml[160,5807+7]..[160,5807+31])
                      Pexp_apply
                      expression (lib/primitive.ml[160,5807+26]..[160,5807+28])
                        Pexp_ident "<>" (lib/primitive.ml[160,5807+26]..[160,5807+28])
                      [
                        <arg>
                        Nolabel
                          expression (lib/primitive.ml[160,5807+7]..[160,5807+25])
                            Pexp_field
                            expression (lib/primitive.ml[160,5807+7]..[160,5807+8])
                              Pexp_ident "p" (lib/primitive.ml[160,5807+7]..[160,5807+8])
                            "prim_native_name" (lib/primitive.ml[160,5807+9]..[160,5807+25])
                        <arg>
                        Nolabel
                          expression (lib/primitive.ml[160,5807+29]..[160,5807+31])
                            Pexp_constant PConst_string("",(lib/primitive.ml[160,5807+30]..[160,5807+30]),None)
                      ]
                    expression (lib/primitive.ml[161,5844+6]..[161,5844+39])
                      Pexp_construct "::" (lib/primitive.ml[161,5844+7]..[161,5844+39]) ghost
                      Some
                        expression (lib/primitive.ml[161,5844+7]..[161,5844+39]) ghost
                          Pexp_tuple
                          [
                            expression (lib/primitive.ml[161,5844+7]..[161,5844+18])
                              Pexp_field
                              expression (lib/primitive.ml[161,5844+7]..[161,5844+8])
                                Pexp_ident "p" (lib/primitive.ml[161,5844+7]..[161,5844+8])
                              "prim_name" (lib/primitive.ml[161,5844+9]..[161,5844+18])
                            expression (lib/primitive.ml[161,5844+20]..[161,5844+39]) ghost
                              Pexp_construct "::" (lib/primitive.ml[161,5844+20]..[161,5844+39]) ghost
                              Some
                                expression (lib/primitive.ml[161,5844+20]..[161,5844+39]) ghost
                                  Pexp_tuple
                                  [
                                    expression (lib/primitive.ml[161,5844+20]..[161,5844+38])
                                      Pexp_field
                                      expression (lib/primitive.ml[161,5844+20]..[161,5844+21])
                                        Pexp_ident "p" (lib/primitive.ml[161,5844+20]..[161,5844+21])
                                      "prim_native_name" (lib/primitive.ml[161,5844+22]..[161,5844+38])
                                    expression (lib/primitive.ml[161,5844+38]..[161,5844+39]) ghost
                                      Pexp_construct "[]" (lib/primitive.ml[161,5844+38]..[161,5844+39]) ghost
                                      None
                                  ]
                          ]
                    Some
                      expression (lib/primitive.ml[163,5893+6]..[163,5893+19])
                        Pexp_construct "::" (lib/primitive.ml[163,5893+7]..[163,5893+19]) ghost
                        Some
                          expression (lib/primitive.ml[163,5893+7]..[163,5893+19]) ghost
                            Pexp_tuple
                            [
                              expression (lib/primitive.ml[163,5893+7]..[163,5893+18])
                                Pexp_field
                                expression (lib/primitive.ml[163,5893+7]..[163,5893+8])
                                  Pexp_ident "p" (lib/primitive.ml[163,5893+7]..[163,5893+8])
                                "prim_name" (lib/primitive.ml[163,5893+9]..[163,5893+18])
                              expression (lib/primitive.ml[163,5893+18]..[163,5893+19]) ghost
                                Pexp_construct "[]" (lib/primitive.ml[163,5893+18]..[163,5893+19]) ghost
                                None
                            ]
              ]
              expression (lib/primitive.ml[165,5918+2]..[192,6821+29])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lib/primitive.ml[165,5918+6]..[165,5918+13])
                      Ppat_var "for_all" (lib/primitive.ml[165,5918+6]..[165,5918+13])
                    expression (lib/primitive.ml[165,5918+14]..[166,5936+70]) ghost
                      Pexp_function
                      [
                        Pparam_val (lib/primitive.ml[165,5918+14]..[165,5918+15])
                          Nolabel
                          None
                          pattern (lib/primitive.ml[165,5918+14]..[165,5918+15])
                            Ppat_var "f" (lib/primitive.ml[165,5918+14]..[165,5918+15])
                      ]
                      None
                      Pfunction_body
                        expression (lib/primitive.ml[166,5936+4]..[166,5936+70])
                          Pexp_apply
                          expression (lib/primitive.ml[166,5936+43]..[166,5936+45])
                            Pexp_ident "&&" (lib/primitive.ml[166,5936+43]..[166,5936+45])
                          [
                            <arg>
                            Nolabel
                              expression (lib/primitive.ml[166,5936+4]..[166,5936+42])
                                Pexp_apply
                                expression (lib/primitive.ml[166,5936+4]..[166,5936+16])
                                  Pexp_ident "List.for_all" (lib/primitive.ml[166,5936+4]..[166,5936+16])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/primitive.ml[166,5936+17]..[166,5936+18])
                                      Pexp_ident "f" (lib/primitive.ml[166,5936+17]..[166,5936+18])
                                  <arg>
                                  Nolabel
                                    expression (lib/primitive.ml[166,5936+19]..[166,5936+42])
                                      Pexp_field
                                      expression (lib/primitive.ml[166,5936+19]..[166,5936+20])
                                        Pexp_ident "p" (lib/primitive.ml[166,5936+19]..[166,5936+20])
                                      "prim_native_repr_args" (lib/primitive.ml[166,5936+21]..[166,5936+42])
                                ]
                            <arg>
                            Nolabel
                              expression (lib/primitive.ml[166,5936+46]..[166,5936+70])
                                Pexp_apply
                                expression (lib/primitive.ml[166,5936+46]..[166,5936+47])
                                  Pexp_ident "f" (lib/primitive.ml[166,5936+46]..[166,5936+47])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/primitive.ml[166,5936+48]..[166,5936+70])
                                      Pexp_field
                                      expression (lib/primitive.ml[166,5936+48]..[166,5936+49])
                                        Pexp_ident "p" (lib/primitive.ml[166,5936+48]..[166,5936+49])
                                      "prim_native_repr_res" (lib/primitive.ml[166,5936+50]..[166,5936+70])
                                ]
                          ]
                ]
                expression (lib/primitive.ml[168,6012+2]..[192,6821+29])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lib/primitive.ml[168,6012+6]..[168,6012+17])
                        Ppat_var "all_unboxed" (lib/primitive.ml[168,6012+6]..[168,6012+17])
                      expression (lib/primitive.ml[168,6012+20]..[168,6012+38])
                        Pexp_apply
                        expression (lib/primitive.ml[168,6012+20]..[168,6012+27])
                          Pexp_ident "for_all" (lib/primitive.ml[168,6012+20]..[168,6012+27])
                        [
                          <arg>
                          Nolabel
                            expression (lib/primitive.ml[168,6012+28]..[168,6012+38])
                              Pexp_ident "is_unboxed" (lib/primitive.ml[168,6012+28]..[168,6012+38])
                        ]
                  ]
                  expression (lib/primitive.ml[169,6054+2]..[192,6821+29])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lib/primitive.ml[169,6054+6]..[169,6054+18])
                          Ppat_var "all_untagged" (lib/primitive.ml[169,6054+6]..[169,6054+18])
                        expression (lib/primitive.ml[169,6054+21]..[169,6054+40])
                          Pexp_apply
                          expression (lib/primitive.ml[169,6054+21]..[169,6054+28])
                            Pexp_ident "for_all" (lib/primitive.ml[169,6054+21]..[169,6054+28])
                          [
                            <arg>
                            Nolabel
                              expression (lib/primitive.ml[169,6054+29]..[169,6054+40])
                                Pexp_ident "is_untagged" (lib/primitive.ml[169,6054+29]..[169,6054+40])
                          ]
                    ]
                    expression (lib/primitive.ml[170,6098+2]..[192,6821+29])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lib/primitive.ml[170,6098+6]..[170,6098+11])
                            Ppat_var "attrs" (lib/primitive.ml[170,6098+6]..[170,6098+11])
                          expression (lib/primitive.ml[170,6098+14]..[170,6098+58])
                            Pexp_ifthenelse
                            expression (lib/primitive.ml[170,6098+17]..[170,6098+29])
                              Pexp_field
                              expression (lib/primitive.ml[170,6098+17]..[170,6098+18])
                                Pexp_ident "p" (lib/primitive.ml[170,6098+17]..[170,6098+18])
                              "prim_alloc" (lib/primitive.ml[170,6098+19]..[170,6098+29])
                            expression (lib/primitive.ml[170,6098+35]..[170,6098+37])
                              Pexp_construct "[]" (lib/primitive.ml[170,6098+35]..[170,6098+37])
                              None
                            Some
                              expression (lib/primitive.ml[170,6098+43]..[170,6098+58])
                                Pexp_construct "::" (lib/primitive.ml[170,6098+44]..[170,6098+58]) ghost
                                Some
                                  expression (lib/primitive.ml[170,6098+44]..[170,6098+58]) ghost
                                    Pexp_tuple
                                    [
                                      expression (lib/primitive.ml[170,6098+44]..[170,6098+57])
                                        Pexp_ident "oattr_noalloc" (lib/primitive.ml[170,6098+44]..[170,6098+57])
                                      expression (lib/primitive.ml[170,6098+57]..[170,6098+58]) ghost
                                        Pexp_construct "[]" (lib/primitive.ml[170,6098+57]..[170,6098+58]) ghost
                                        None
                                    ]
                      ]
                      expression (lib/primitive.ml[171,6160+2]..[192,6821+29])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/primitive.ml[171,6160+6]..[171,6160+11])
                              Ppat_var "attrs" (lib/primitive.ml[171,6160+6]..[171,6160+11])
                            expression (lib/primitive.ml[172,6174+4]..[177,6296+11])
                              Pexp_ifthenelse
                              expression (lib/primitive.ml[172,6174+7]..[172,6174+18])
                                Pexp_ident "all_unboxed" (lib/primitive.ml[172,6174+7]..[172,6174+18])
                              expression (lib/primitive.ml[173,6198+6]..[173,6198+28])
                                Pexp_construct "::" (lib/primitive.ml[173,6198+20]..[173,6198+22])
                                Some
                                  expression (lib/primitive.ml[173,6198+6]..[173,6198+28]) ghost
                                    Pexp_tuple
                                    [
                                      expression (lib/primitive.ml[173,6198+6]..[173,6198+19])
                                        Pexp_ident "oattr_unboxed" (lib/primitive.ml[173,6198+6]..[173,6198+19])
                                      expression (lib/primitive.ml[173,6198+23]..[173,6198+28])
                                        Pexp_ident "attrs" (lib/primitive.ml[173,6198+23]..[173,6198+28])
                                    ]
                              Some
                                expression (lib/primitive.ml[174,6227+9]..[177,6296+11])
                                  Pexp_ifthenelse
                                  expression (lib/primitive.ml[174,6227+12]..[174,6227+24])
                                    Pexp_ident "all_untagged" (lib/primitive.ml[174,6227+12]..[174,6227+24])
                                  expression (lib/primitive.ml[175,6257+6]..[175,6257+29])
                                    Pexp_construct "::" (lib/primitive.ml[175,6257+21]..[175,6257+23])
                                    Some
                                      expression (lib/primitive.ml[175,6257+6]..[175,6257+29]) ghost
                                        Pexp_tuple
                                        [
                                          expression (lib/primitive.ml[175,6257+6]..[175,6257+20])
                                            Pexp_ident "oattr_untagged" (lib/primitive.ml[175,6257+6]..[175,6257+20])
                                          expression (lib/primitive.ml[175,6257+24]..[175,6257+29])
                                            Pexp_ident "attrs" (lib/primitive.ml[175,6257+24]..[175,6257+29])
                                        ]
                                  Some
                                    expression (lib/primitive.ml[177,6296+6]..[177,6296+11])
                                      Pexp_ident "attrs" (lib/primitive.ml[177,6296+6]..[177,6296+11])
                        ]
                        expression (lib/primitive.ml[179,6313+2]..[192,6821+29])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/primitive.ml[179,6313+6]..[179,6313+25])
                                Ppat_var "attr_of_native_repr" (lib/primitive.ml[179,6313+6]..[179,6313+25])
                              expression (lib/primitive.ml[179,6313+28]..[183,6479+78])
                                Pexp_function
                                []
                                None
                                Pfunction_cases (lib/primitive.ml[179,6313+28]..[183,6479+78])
                                  [
                                    <case>
                                      pattern (lib/primitive.ml[180,6350+6]..[180,6350+24])
                                        Ppat_construct "Same_as_ocaml_repr" (lib/primitive.ml[180,6350+6]..[180,6350+24])
                                        None
                                      expression (lib/primitive.ml[180,6350+28]..[180,6350+32])
                                        Pexp_construct "None" (lib/primitive.ml[180,6350+28]..[180,6350+32])
                                        None
                                    <case>
                                      pattern (lib/primitive.ml[181,6383+6]..[182,6403+23])
                                        Ppat_or
                                        pattern (lib/primitive.ml[181,6383+6]..[181,6383+19])
                                          Ppat_construct "Unboxed_float" (lib/primitive.ml[181,6383+6]..[181,6383+19])
                                          None
                                        pattern (lib/primitive.ml[182,6403+6]..[182,6403+23])
                                          Ppat_construct "Unboxed_integer" (lib/primitive.ml[182,6403+6]..[182,6403+21])
                                          Some
                                            []
                                            pattern (lib/primitive.ml[182,6403+22]..[182,6403+23])
                                              Ppat_any
                                      expression (lib/primitive.ml[182,6403+27]..[182,6403+75])
                                        Pexp_ifthenelse
                                        expression (lib/primitive.ml[182,6403+30]..[182,6403+41])
                                          Pexp_ident "all_unboxed" (lib/primitive.ml[182,6403+30]..[182,6403+41])
                                        expression (lib/primitive.ml[182,6403+47]..[182,6403+51])
                                          Pexp_construct "None" (lib/primitive.ml[182,6403+47]..[182,6403+51])
                                          None
                                        Some
                                          expression (lib/primitive.ml[182,6403+57]..[182,6403+75])
                                            Pexp_construct "Some" (lib/primitive.ml[182,6403+57]..[182,6403+61])
                                            Some
                                              expression (lib/primitive.ml[182,6403+62]..[182,6403+75])
                                                Pexp_ident "oattr_unboxed" (lib/primitive.ml[182,6403+62]..[182,6403+75])
                                    <case>
                                      pattern (lib/primitive.ml[183,6479+6]..[183,6479+24])
                                        Ppat_construct "Untagged_immediate" (lib/primitive.ml[183,6479+6]..[183,6479+24])
                                        None
                                      expression (lib/primitive.ml[183,6479+28]..[183,6479+78])
                                        Pexp_ifthenelse
                                        expression (lib/primitive.ml[183,6479+31]..[183,6479+43])
                                          Pexp_ident "all_untagged" (lib/primitive.ml[183,6479+31]..[183,6479+43])
                                        expression (lib/primitive.ml[183,6479+49]..[183,6479+53])
                                          Pexp_construct "None" (lib/primitive.ml[183,6479+49]..[183,6479+53])
                                          None
                                        Some
                                          expression (lib/primitive.ml[183,6479+59]..[183,6479+78])
                                            Pexp_construct "Some" (lib/primitive.ml[183,6479+59]..[183,6479+63])
                                            Some
                                              expression (lib/primitive.ml[183,6479+64]..[183,6479+78])
                                                Pexp_ident "oattr_untagged" (lib/primitive.ml[183,6479+64]..[183,6479+78])
                                  ]
                          ]
                          expression (lib/primitive.ml[185,6563+2]..[192,6821+29])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/primitive.ml[185,6563+6]..[185,6563+16])
                                  Ppat_var "type_attrs" (lib/primitive.ml[185,6563+6]..[185,6563+16])
                                expression (lib/primitive.ml[186,6582+4]..[187,6641+48])
                                  Pexp_apply
                                  expression (lib/primitive.ml[186,6582+57]..[186,6582+58])
                                    Pexp_ident "@" (lib/primitive.ml[186,6582+57]..[186,6582+58])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/primitive.ml[186,6582+4]..[186,6582+56])
                                        Pexp_apply
                                        expression (lib/primitive.ml[186,6582+4]..[186,6582+12])
                                          Pexp_ident "List.map" (lib/primitive.ml[186,6582+4]..[186,6582+12])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/primitive.ml[186,6582+13]..[186,6582+32])
                                              Pexp_ident "attr_of_native_repr" (lib/primitive.ml[186,6582+13]..[186,6582+32])
                                          <arg>
                                          Nolabel
                                            expression (lib/primitive.ml[186,6582+33]..[186,6582+56])
                                              Pexp_field
                                              expression (lib/primitive.ml[186,6582+33]..[186,6582+34])
                                                Pexp_ident "p" (lib/primitive.ml[186,6582+33]..[186,6582+34])
                                              "prim_native_repr_args" (lib/primitive.ml[186,6582+35]..[186,6582+56])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (lib/primitive.ml[187,6641+4]..[187,6641+48])
                                        Pexp_construct "::" (lib/primitive.ml[187,6641+5]..[187,6641+48]) ghost
                                        Some
                                          expression (lib/primitive.ml[187,6641+5]..[187,6641+48]) ghost
                                            Pexp_tuple
                                            [
                                              expression (lib/primitive.ml[187,6641+5]..[187,6641+47])
                                                Pexp_apply
                                                expression (lib/primitive.ml[187,6641+5]..[187,6641+24])
                                                  Pexp_ident "attr_of_native_repr" (lib/primitive.ml[187,6641+5]..[187,6641+24])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/primitive.ml[187,6641+25]..[187,6641+47])
                                                      Pexp_field
                                                      expression (lib/primitive.ml[187,6641+25]..[187,6641+26])
                                                        Pexp_ident "p" (lib/primitive.ml[187,6641+25]..[187,6641+26])
                                                      "prim_native_repr_res" (lib/primitive.ml[187,6641+27]..[187,6641+47])
                                                ]
                                              expression (lib/primitive.ml[187,6641+47]..[187,6641+48]) ghost
                                                Pexp_construct "[]" (lib/primitive.ml[187,6641+47]..[187,6641+48]) ghost
                                                None
                                            ]
                                  ]
                            ]
                            expression (lib/primitive.ml[189,6695+2]..[192,6821+29])
                              Pexp_record
                              [
                                "oval_prims" (lib/primitive.ml[190,6718+4]..[190,6718+14])
                                  expression (lib/primitive.ml[190,6718+17]..[190,6718+22])
                                    Pexp_ident "prims" (lib/primitive.ml[190,6718+17]..[190,6718+22])
                                "oval_type" (lib/primitive.ml[191,6742+4]..[191,6742+13])
                                  expression (lib/primitive.ml[191,6742+16]..[191,6742+77])
                                    Pexp_apply
                                    expression (lib/primitive.ml[191,6742+16]..[191,6742+42])
                                      Pexp_ident "add_native_repr_attributes" (lib/primitive.ml[191,6742+16]..[191,6742+42])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/primitive.ml[191,6742+43]..[191,6742+66])
                                          Pexp_field
                                          expression (lib/primitive.ml[191,6742+43]..[191,6742+56])
                                            Pexp_ident "osig_val_decl" (lib/primitive.ml[191,6742+43]..[191,6742+56])
                                          "oval_type" (lib/primitive.ml[191,6742+57]..[191,6742+66])
                                      <arg>
                                      Nolabel
                                        expression (lib/primitive.ml[191,6742+67]..[191,6742+77])
                                          Pexp_ident "type_attrs" (lib/primitive.ml[191,6742+67]..[191,6742+77])
                                    ]
                                "oval_attributes" (lib/primitive.ml[192,6821+4]..[192,6821+19])
                                  expression (lib/primitive.ml[192,6821+22]..[192,6821+27])
                                    Pexp_ident "attrs" (lib/primitive.ml[192,6821+22]..[192,6821+27])
                              ]
                              Some
                                expression (lib/primitive.ml[189,6695+4]..[189,6695+17])
                                  Pexp_ident "osig_val_decl" (lib/primitive.ml[189,6695+4]..[189,6695+17])
    ]
  structure_item (lib/primitive.ml[194,6852+0]..[197,6928+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[194,6852+4]..[194,6852+15])
          Ppat_var "native_name" (lib/primitive.ml[194,6852+4]..[194,6852+15])
        expression (lib/primitive.ml[194,6852+16]..[197,6928+18]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[194,6852+16]..[194,6852+17])
              Nolabel
              None
              pattern (lib/primitive.ml[194,6852+16]..[194,6852+17])
                Ppat_var "p" (lib/primitive.ml[194,6852+16]..[194,6852+17])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[195,6872+2]..[197,6928+18])
              Pexp_ifthenelse
              expression (lib/primitive.ml[195,6872+5]..[195,6872+29])
                Pexp_apply
                expression (lib/primitive.ml[195,6872+24]..[195,6872+26])
                  Pexp_ident "<>" (lib/primitive.ml[195,6872+24]..[195,6872+26])
                [
                  <arg>
                  Nolabel
                    expression (lib/primitive.ml[195,6872+5]..[195,6872+23])
                      Pexp_field
                      expression (lib/primitive.ml[195,6872+5]..[195,6872+6])
                        Pexp_ident "p" (lib/primitive.ml[195,6872+5]..[195,6872+6])
                      "prim_native_name" (lib/primitive.ml[195,6872+7]..[195,6872+23])
                  <arg>
                  Nolabel
                    expression (lib/primitive.ml[195,6872+27]..[195,6872+29])
                      Pexp_constant PConst_string("",(lib/primitive.ml[195,6872+28]..[195,6872+28]),None)
                ]
              expression (lib/primitive.ml[196,6902+7]..[196,6902+25])
                Pexp_field
                expression (lib/primitive.ml[196,6902+7]..[196,6902+8])
                  Pexp_ident "p" (lib/primitive.ml[196,6902+7]..[196,6902+8])
                "prim_native_name" (lib/primitive.ml[196,6902+9]..[196,6902+25])
              Some
                expression (lib/primitive.ml[197,6928+7]..[197,6928+18])
                  Pexp_field
                  expression (lib/primitive.ml[197,6928+7]..[197,6928+8])
                    Pexp_ident "p" (lib/primitive.ml[197,6928+7]..[197,6928+8])
                  "prim_name" (lib/primitive.ml[197,6928+9]..[197,6928+18])
    ]
  structure_item (lib/primitive.ml[199,6948+0]..[200,6966+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[199,6948+4]..[199,6948+13])
          Ppat_var "byte_name" (lib/primitive.ml[199,6948+4]..[199,6948+13])
        expression (lib/primitive.ml[199,6948+14]..[200,6966+13]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[199,6948+14]..[199,6948+15])
              Nolabel
              None
              pattern (lib/primitive.ml[199,6948+14]..[199,6948+15])
                Ppat_var "p" (lib/primitive.ml[199,6948+14]..[199,6948+15])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[200,6966+2]..[200,6966+13])
              Pexp_field
              expression (lib/primitive.ml[200,6966+2]..[200,6966+3])
                Pexp_ident "p" (lib/primitive.ml[200,6966+2]..[200,6966+3])
              "prim_name" (lib/primitive.ml[200,6966+4]..[200,6966+13])
    ]
  structure_item (lib/primitive.ml[202,6981+0]..[209,7155+9])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[202,6981+4]..[202,6981+23])
          Ppat_var "equal_boxed_integer" (lib/primitive.ml[202,6981+4]..[202,6981+23])
        expression (lib/primitive.ml[202,6981+24]..[209,7155+9]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[202,6981+24]..[202,6981+27])
              Nolabel
              None
              pattern (lib/primitive.ml[202,6981+24]..[202,6981+27])
                Ppat_var "bi1" (lib/primitive.ml[202,6981+24]..[202,6981+27])
            Pparam_val (lib/primitive.ml[202,6981+28]..[202,6981+31])
              Nolabel
              None
              pattern (lib/primitive.ml[202,6981+28]..[202,6981+31])
                Ppat_var "bi2" (lib/primitive.ml[202,6981+28]..[202,6981+31])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[203,7015+2]..[209,7155+9])
              Pexp_match
              expression (lib/primitive.ml[203,7015+8]..[203,7015+16])
                Pexp_tuple
                [
                  expression (lib/primitive.ml[203,7015+8]..[203,7015+11])
                    Pexp_ident "bi1" (lib/primitive.ml[203,7015+8]..[203,7015+11])
                  expression (lib/primitive.ml[203,7015+13]..[203,7015+16])
                    Pexp_ident "bi2" (lib/primitive.ml[203,7015+13]..[203,7015+16])
                ]
              [
                <case>
                  pattern (lib/primitive.ml[204,7037+4]..[206,7083+18])
                    Ppat_or
                    pattern (lib/primitive.ml[204,7037+4]..[205,7064+18])
                      Ppat_or
                      pattern (lib/primitive.ml[204,7037+4]..[204,7037+26])
                        Ppat_tuple
                        [
                          pattern (lib/primitive.ml[204,7037+4]..[204,7037+14])
                            Ppat_construct "Pnativeint" (lib/primitive.ml[204,7037+4]..[204,7037+14])
                            None
                          pattern (lib/primitive.ml[204,7037+16]..[204,7037+26])
                            Ppat_construct "Pnativeint" (lib/primitive.ml[204,7037+16]..[204,7037+26])
                            None
                        ]
                      pattern (lib/primitive.ml[205,7064+4]..[205,7064+18])
                        Ppat_tuple
                        [
                          pattern (lib/primitive.ml[205,7064+4]..[205,7064+10])
                            Ppat_construct "Pint32" (lib/primitive.ml[205,7064+4]..[205,7064+10])
                            None
                          pattern (lib/primitive.ml[205,7064+12]..[205,7064+18])
                            Ppat_construct "Pint32" (lib/primitive.ml[205,7064+12]..[205,7064+18])
                            None
                        ]
                    pattern (lib/primitive.ml[206,7083+4]..[206,7083+18])
                      Ppat_tuple
                      [
                        pattern (lib/primitive.ml[206,7083+4]..[206,7083+10])
                          Ppat_construct "Pint64" (lib/primitive.ml[206,7083+4]..[206,7083+10])
                          None
                        pattern (lib/primitive.ml[206,7083+12]..[206,7083+18])
                          Ppat_construct "Pint64" (lib/primitive.ml[206,7083+12]..[206,7083+18])
                          None
                      ]
                  expression (lib/primitive.ml[207,7105+4]..[207,7105+8])
                    Pexp_construct "true" (lib/primitive.ml[207,7105+4]..[207,7105+8])
                    None
                <case>
                  pattern (lib/primitive.ml[208,7114+4]..[208,7114+37])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[208,7114+4]..[208,7114+34])
                        Ppat_or
                        pattern (lib/primitive.ml[208,7114+5]..[208,7114+24])
                          Ppat_or
                          pattern (lib/primitive.ml[208,7114+5]..[208,7114+15])
                            Ppat_construct "Pnativeint" (lib/primitive.ml[208,7114+5]..[208,7114+15])
                            None
                          pattern (lib/primitive.ml[208,7114+18]..[208,7114+24])
                            Ppat_construct "Pint32" (lib/primitive.ml[208,7114+18]..[208,7114+24])
                            None
                        pattern (lib/primitive.ml[208,7114+27]..[208,7114+33])
                          Ppat_construct "Pint64" (lib/primitive.ml[208,7114+27]..[208,7114+33])
                          None
                      pattern (lib/primitive.ml[208,7114+36]..[208,7114+37])
                        Ppat_any
                    ]
                  expression (lib/primitive.ml[209,7155+4]..[209,7155+9])
                    Pexp_construct "false" (lib/primitive.ml[209,7155+4]..[209,7155+9])
                    None
              ]
    ]
  structure_item (lib/primitive.ml[211,7166+0]..[224,7745+69])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[211,7166+4]..[211,7166+21])
          Ppat_var "equal_native_repr" (lib/primitive.ml[211,7166+4]..[211,7166+21])
        expression (lib/primitive.ml[211,7166+22]..[224,7745+69]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[211,7166+22]..[211,7166+25])
              Nolabel
              None
              pattern (lib/primitive.ml[211,7166+22]..[211,7166+25])
                Ppat_var "nr1" (lib/primitive.ml[211,7166+22]..[211,7166+25])
            Pparam_val (lib/primitive.ml[211,7166+26]..[211,7166+29])
              Nolabel
              None
              pattern (lib/primitive.ml[211,7166+26]..[211,7166+29])
                Ppat_var "nr2" (lib/primitive.ml[211,7166+26]..[211,7166+29])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[212,7198+2]..[224,7745+69])
              Pexp_match
              expression (lib/primitive.ml[212,7198+8]..[212,7198+16])
                Pexp_tuple
                [
                  expression (lib/primitive.ml[212,7198+8]..[212,7198+11])
                    Pexp_ident "nr1" (lib/primitive.ml[212,7198+8]..[212,7198+11])
                  expression (lib/primitive.ml[212,7198+13]..[212,7198+16])
                    Pexp_ident "nr2" (lib/primitive.ml[212,7198+13]..[212,7198+16])
                ]
              [
                <case>
                  pattern (lib/primitive.ml[213,7220+4]..[213,7220+42])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[213,7220+4]..[213,7220+22])
                        Ppat_construct "Same_as_ocaml_repr" (lib/primitive.ml[213,7220+4]..[213,7220+22])
                        None
                      pattern (lib/primitive.ml[213,7220+24]..[213,7220+42])
                        Ppat_construct "Same_as_ocaml_repr" (lib/primitive.ml[213,7220+24]..[213,7220+42])
                        None
                    ]
                  expression (lib/primitive.ml[213,7220+46]..[213,7220+50])
                    Pexp_construct "true" (lib/primitive.ml[213,7220+46]..[213,7220+50])
                    None
                <case>
                  pattern (lib/primitive.ml[214,7271+4]..[215,7295+60])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[214,7271+4]..[214,7271+22])
                        Ppat_construct "Same_as_ocaml_repr" (lib/primitive.ml[214,7271+4]..[214,7271+22])
                        None
                      pattern (lib/primitive.ml[215,7295+4]..[215,7295+60])
                        Ppat_or
                        pattern (lib/primitive.ml[215,7295+5]..[215,7295+38])
                          Ppat_or
                          pattern (lib/primitive.ml[215,7295+5]..[215,7295+18])
                            Ppat_construct "Unboxed_float" (lib/primitive.ml[215,7295+5]..[215,7295+18])
                            None
                          pattern (lib/primitive.ml[215,7295+21]..[215,7295+38])
                            Ppat_construct "Unboxed_integer" (lib/primitive.ml[215,7295+21]..[215,7295+36])
                            Some
                              []
                              pattern (lib/primitive.ml[215,7295+37]..[215,7295+38])
                                Ppat_any
                        pattern (lib/primitive.ml[215,7295+41]..[215,7295+59])
                          Ppat_construct "Untagged_immediate" (lib/primitive.ml[215,7295+41]..[215,7295+59])
                          None
                    ]
                  expression (lib/primitive.ml[215,7295+64]..[215,7295+69])
                    Pexp_construct "false" (lib/primitive.ml[215,7295+64]..[215,7295+69])
                    None
                <case>
                  pattern (lib/primitive.ml[216,7365+4]..[216,7365+32])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[216,7365+4]..[216,7365+17])
                        Ppat_construct "Unboxed_float" (lib/primitive.ml[216,7365+4]..[216,7365+17])
                        None
                      pattern (lib/primitive.ml[216,7365+19]..[216,7365+32])
                        Ppat_construct "Unboxed_float" (lib/primitive.ml[216,7365+19]..[216,7365+32])
                        None
                    ]
                  expression (lib/primitive.ml[216,7365+36]..[216,7365+40])
                    Pexp_construct "true" (lib/primitive.ml[216,7365+36]..[216,7365+40])
                    None
                <case>
                  pattern (lib/primitive.ml[217,7406+4]..[218,7425+65])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[217,7406+4]..[217,7406+17])
                        Ppat_construct "Unboxed_float" (lib/primitive.ml[217,7406+4]..[217,7406+17])
                        None
                      pattern (lib/primitive.ml[218,7425+4]..[218,7425+65])
                        Ppat_or
                        pattern (lib/primitive.ml[218,7425+5]..[218,7425+43])
                          Ppat_or
                          pattern (lib/primitive.ml[218,7425+5]..[218,7425+23])
                            Ppat_construct "Same_as_ocaml_repr" (lib/primitive.ml[218,7425+5]..[218,7425+23])
                            None
                          pattern (lib/primitive.ml[218,7425+26]..[218,7425+43])
                            Ppat_construct "Unboxed_integer" (lib/primitive.ml[218,7425+26]..[218,7425+41])
                            Some
                              []
                              pattern (lib/primitive.ml[218,7425+42]..[218,7425+43])
                                Ppat_any
                        pattern (lib/primitive.ml[218,7425+46]..[218,7425+64])
                          Ppat_construct "Untagged_immediate" (lib/primitive.ml[218,7425+46]..[218,7425+64])
                          None
                    ]
                  expression (lib/primitive.ml[218,7425+69]..[218,7425+74])
                    Pexp_construct "false" (lib/primitive.ml[218,7425+69]..[218,7425+74])
                    None
                <case>
                  pattern (lib/primitive.ml[219,7500+4]..[219,7500+44])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[219,7500+4]..[219,7500+23])
                        Ppat_construct "Unboxed_integer" (lib/primitive.ml[219,7500+4]..[219,7500+19])
                        Some
                          []
                          pattern (lib/primitive.ml[219,7500+20]..[219,7500+23])
                            Ppat_var "bi1" (lib/primitive.ml[219,7500+20]..[219,7500+23])
                      pattern (lib/primitive.ml[219,7500+25]..[219,7500+44])
                        Ppat_construct "Unboxed_integer" (lib/primitive.ml[219,7500+25]..[219,7500+40])
                        Some
                          []
                          pattern (lib/primitive.ml[219,7500+41]..[219,7500+44])
                            Ppat_var "bi2" (lib/primitive.ml[219,7500+41]..[219,7500+44])
                    ]
                  expression (lib/primitive.ml[219,7500+48]..[219,7500+75])
                    Pexp_apply
                    expression (lib/primitive.ml[219,7500+48]..[219,7500+67])
                      Pexp_ident "equal_boxed_integer" (lib/primitive.ml[219,7500+48]..[219,7500+67])
                    [
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[219,7500+68]..[219,7500+71])
                          Pexp_ident "bi1" (lib/primitive.ml[219,7500+68]..[219,7500+71])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[219,7500+72]..[219,7500+75])
                          Pexp_ident "bi2" (lib/primitive.ml[219,7500+72]..[219,7500+75])
                    ]
                <case>
                  pattern (lib/primitive.ml[220,7576+4]..[221,7599+61])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[220,7576+4]..[220,7576+21])
                        Ppat_construct "Unboxed_integer" (lib/primitive.ml[220,7576+4]..[220,7576+19])
                        Some
                          []
                          pattern (lib/primitive.ml[220,7576+20]..[220,7576+21])
                            Ppat_any
                      pattern (lib/primitive.ml[221,7599+4]..[221,7599+61])
                        Ppat_or
                        pattern (lib/primitive.ml[221,7599+5]..[221,7599+39])
                          Ppat_or
                          pattern (lib/primitive.ml[221,7599+5]..[221,7599+23])
                            Ppat_construct "Same_as_ocaml_repr" (lib/primitive.ml[221,7599+5]..[221,7599+23])
                            None
                          pattern (lib/primitive.ml[221,7599+26]..[221,7599+39])
                            Ppat_construct "Unboxed_float" (lib/primitive.ml[221,7599+26]..[221,7599+39])
                            None
                        pattern (lib/primitive.ml[221,7599+42]..[221,7599+60])
                          Ppat_construct "Untagged_immediate" (lib/primitive.ml[221,7599+42]..[221,7599+60])
                          None
                    ]
                  expression (lib/primitive.ml[221,7599+65]..[221,7599+70])
                    Pexp_construct "false" (lib/primitive.ml[221,7599+65]..[221,7599+70])
                    None
                <case>
                  pattern (lib/primitive.ml[222,7670+4]..[222,7670+42])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[222,7670+4]..[222,7670+22])
                        Ppat_construct "Untagged_immediate" (lib/primitive.ml[222,7670+4]..[222,7670+22])
                        None
                      pattern (lib/primitive.ml[222,7670+24]..[222,7670+42])
                        Ppat_construct "Untagged_immediate" (lib/primitive.ml[222,7670+24]..[222,7670+42])
                        None
                    ]
                  expression (lib/primitive.ml[222,7670+46]..[222,7670+50])
                    Pexp_construct "true" (lib/primitive.ml[222,7670+46]..[222,7670+50])
                    None
                <case>
                  pattern (lib/primitive.ml[223,7721+4]..[224,7745+60])
                    Ppat_tuple
                    [
                      pattern (lib/primitive.ml[223,7721+4]..[223,7721+22])
                        Ppat_construct "Untagged_immediate" (lib/primitive.ml[223,7721+4]..[223,7721+22])
                        None
                      pattern (lib/primitive.ml[224,7745+4]..[224,7745+60])
                        Ppat_or
                        pattern (lib/primitive.ml[224,7745+5]..[224,7745+39])
                          Ppat_or
                          pattern (lib/primitive.ml[224,7745+5]..[224,7745+23])
                            Ppat_construct "Same_as_ocaml_repr" (lib/primitive.ml[224,7745+5]..[224,7745+23])
                            None
                          pattern (lib/primitive.ml[224,7745+26]..[224,7745+39])
                            Ppat_construct "Unboxed_float" (lib/primitive.ml[224,7745+26]..[224,7745+39])
                            None
                        pattern (lib/primitive.ml[224,7745+42]..[224,7745+59])
                          Ppat_construct "Unboxed_integer" (lib/primitive.ml[224,7745+42]..[224,7745+57])
                          Some
                            []
                            pattern (lib/primitive.ml[224,7745+58]..[224,7745+59])
                              Ppat_any
                    ]
                  expression (lib/primitive.ml[224,7745+64]..[224,7745+69])
                    Pexp_construct "false" (lib/primitive.ml[224,7745+64]..[224,7745+69])
                    None
              ]
    ]
  structure_item (lib/primitive.ml[226,7816+0]..[228,7882+39])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[226,7816+4]..[226,7816+27])
          Ppat_var "native_name_is_external" (lib/primitive.ml[226,7816+4]..[226,7816+27])
        expression (lib/primitive.ml[226,7816+28]..[228,7882+39]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[226,7816+28]..[226,7816+29])
              Nolabel
              None
              pattern (lib/primitive.ml[226,7816+28]..[226,7816+29])
                Ppat_var "p" (lib/primitive.ml[226,7816+28]..[226,7816+29])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[227,7848+2]..[228,7882+39])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/primitive.ml[227,7848+6]..[227,7848+14])
                    Ppat_var "nat_name" (lib/primitive.ml[227,7848+6]..[227,7848+14])
                  expression (lib/primitive.ml[227,7848+17]..[227,7848+30])
                    Pexp_apply
                    expression (lib/primitive.ml[227,7848+17]..[227,7848+28])
                      Pexp_ident "native_name" (lib/primitive.ml[227,7848+17]..[227,7848+28])
                    [
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[227,7848+29]..[227,7848+30])
                          Pexp_ident "p" (lib/primitive.ml[227,7848+29]..[227,7848+30])
                    ]
              ]
              expression (lib/primitive.ml[228,7882+2]..[228,7882+39])
                Pexp_apply
                expression (lib/primitive.ml[228,7882+17]..[228,7882+19])
                  Pexp_ident "&&" (lib/primitive.ml[228,7882+17]..[228,7882+19])
                [
                  <arg>
                  Nolabel
                    expression (lib/primitive.ml[228,7882+2]..[228,7882+16])
                      Pexp_apply
                      expression (lib/primitive.ml[228,7882+11]..[228,7882+13])
                        Pexp_ident "<>" (lib/primitive.ml[228,7882+11]..[228,7882+13])
                      [
                        <arg>
                        Nolabel
                          expression (lib/primitive.ml[228,7882+2]..[228,7882+10])
                            Pexp_ident "nat_name" (lib/primitive.ml[228,7882+2]..[228,7882+10])
                        <arg>
                        Nolabel
                          expression (lib/primitive.ml[228,7882+14]..[228,7882+16])
                            Pexp_constant PConst_string("",(lib/primitive.ml[228,7882+15]..[228,7882+15]),None)
                      ]
                  <arg>
                  Nolabel
                    expression (lib/primitive.ml[228,7882+20]..[228,7882+39])
                      Pexp_apply
                      expression (lib/primitive.ml[228,7882+33]..[228,7882+35])
                        Pexp_ident "<>" (lib/primitive.ml[228,7882+33]..[228,7882+35])
                      [
                        <arg>
                        Nolabel
                          expression (lib/primitive.ml[228,7882+20]..[228,7882+32])
                            Pexp_apply
                            expression (lib/primitive.ml[228,7882+20]..[228,7882+32]) ghost
                              Pexp_ident "String.get" (lib/primitive.ml[228,7882+20]..[228,7882+32]) ghost
                            [
                              <arg>
                              Nolabel
                                expression (lib/primitive.ml[228,7882+20]..[228,7882+28])
                                  Pexp_ident "nat_name" (lib/primitive.ml[228,7882+20]..[228,7882+28])
                              <arg>
                              Nolabel
                                expression (lib/primitive.ml[228,7882+30]..[228,7882+31])
                                  Pexp_constant PConst_int (0,None)
                            ]
                        <arg>
                        Nolabel
                          expression (lib/primitive.ml[228,7882+36]..[228,7882+39])
                            Pexp_constant PConst_char 25
                      ]
                ]
    ]
  structure_item (lib/primitive.ml[230,7923+0]..[230,7923+25])
    Pstr_module
    "Style" (lib/primitive.ml[230,7923+7]..[230,7923+12])
      module_expr (lib/primitive.ml[230,7923+15]..[230,7923+25])
        Pmod_ident "Misc.Style" (lib/primitive.ml[230,7923+15]..[230,7923+25])
  structure_item (lib/primitive.ml[232,7950+0]..[248,8623+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[232,7950+4]..[232,7950+16])
          Ppat_var "report_error" (lib/primitive.ml[232,7950+4]..[232,7950+16])
        expression (lib/primitive.ml[232,7950+17]..[248,8623+36]) ghost
          Pexp_function
          [
            Pparam_val (lib/primitive.ml[232,7950+17]..[232,7950+20])
              Nolabel
              None
              pattern (lib/primitive.ml[232,7950+17]..[232,7950+20])
                Ppat_var "ppf" (lib/primitive.ml[232,7950+17]..[232,7950+20])
            Pparam_val (lib/primitive.ml[232,7950+21]..[232,7950+24])
              Nolabel
              None
              pattern (lib/primitive.ml[232,7950+21]..[232,7950+24])
                Ppat_var "err" (lib/primitive.ml[232,7950+21]..[232,7950+24])
          ]
          None
          Pfunction_body
            expression (lib/primitive.ml[233,7977+2]..[248,8623+36])
              Pexp_match
              expression (lib/primitive.ml[233,7977+8]..[233,7977+11])
                Pexp_ident "err" (lib/primitive.ml[233,7977+8]..[233,7977+11])
              [
                <case>
                  pattern (lib/primitive.ml[234,7994+4]..[234,7994+46])
                    Ppat_construct "Old_style_float_with_native_repr_attribute" (lib/primitive.ml[234,7994+4]..[234,7994+46])
                    None
                  expression (lib/primitive.ml[235,8044+4]..[238,8179+38])
                    Pexp_apply
                    expression (lib/primitive.ml[235,8044+4]..[235,8044+18])
                      Pexp_ident "Format.fprintf" (lib/primitive.ml[235,8044+4]..[235,8044+18])
                    [
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[235,8044+19]..[235,8044+22])
                          Pexp_ident "ppf" (lib/primitive.ml[235,8044+19]..[235,8044+22])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[235,8044+23]..[235,8044+65])
                          Pexp_constant PConst_string("Cannot use %a in conjunction with %a/%a.",(lib/primitive.ml[235,8044+24]..[235,8044+64]),None)
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[236,8110+6]..[236,8110+23])
                          Pexp_ident "Style.inline_code" (lib/primitive.ml[236,8110+6]..[236,8110+23])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[236,8110+24]..[236,8110+31])
                          Pexp_constant PConst_string("float",(lib/primitive.ml[236,8110+25]..[236,8110+30]),None)
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[237,8142+6]..[237,8142+23])
                          Pexp_ident "Style.inline_code" (lib/primitive.ml[237,8142+6]..[237,8142+23])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[237,8142+24]..[237,8142+36])
                          Pexp_constant PConst_string("[@unboxed]",(lib/primitive.ml[237,8142+25]..[237,8142+35]),None)
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[238,8179+6]..[238,8179+23])
                          Pexp_ident "Style.inline_code" (lib/primitive.ml[238,8179+6]..[238,8179+23])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[238,8179+25]..[238,8179+38])
                          Pexp_constant PConst_string("[@untagged]",(lib/primitive.ml[238,8179+26]..[238,8179+37]),None)
                    ]
                <case>
                  pattern (lib/primitive.ml[239,8218+4]..[239,8218+44])
                    Ppat_construct "Old_style_noalloc_with_noalloc_attribute" (lib/primitive.ml[239,8218+4]..[239,8218+44])
                    None
                  expression (lib/primitive.ml[240,8266+4]..[242,8363+37])
                    Pexp_apply
                    expression (lib/primitive.ml[240,8266+4]..[240,8266+18])
                      Pexp_ident "Format.fprintf" (lib/primitive.ml[240,8266+4]..[240,8266+18])
                    [
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[240,8266+19]..[240,8266+22])
                          Pexp_ident "ppf" (lib/primitive.ml[240,8266+19]..[240,8266+22])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[240,8266+23]..[240,8266+62])
                          Pexp_constant PConst_string("Cannot use %a in conjunction with %a.",(lib/primitive.ml[240,8266+24]..[240,8266+61]),None)
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[241,8329+6]..[241,8329+23])
                          Pexp_ident "Style.inline_code" (lib/primitive.ml[241,8329+6]..[241,8329+23])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[241,8329+24]..[241,8329+33])
                          Pexp_constant PConst_string("noalloc",(lib/primitive.ml[241,8329+25]..[241,8329+32]),None)
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[242,8363+6]..[242,8363+23])
                          Pexp_ident "Style.inline_code" (lib/primitive.ml[242,8363+6]..[242,8363+23])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[242,8363+24]..[242,8363+37])
                          Pexp_constant PConst_string("[@@noalloc]",(lib/primitive.ml[242,8363+25]..[242,8363+36]),None)
                    ]
                <case>
                  pattern (lib/primitive.ml[243,8401+4]..[243,8401+43])
                    Ppat_construct "No_native_primitive_with_repr_attribute" (lib/primitive.ml[243,8401+4]..[243,8401+43])
                    None
                  expression (lib/primitive.ml[244,8448+4]..[248,8623+36])
                    Pexp_apply
                    expression (lib/primitive.ml[244,8448+4]..[244,8448+18])
                      Pexp_ident "Format.fprintf" (lib/primitive.ml[244,8448+4]..[244,8448+18])
                    [
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[244,8448+19]..[244,8448+22])
                          Pexp_ident "ppf" (lib/primitive.ml[244,8448+19]..[244,8448+22])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[245,8471+6]..[246,8537+47])
                          Pexp_constant PConst_string("@[The native code version of the primitive is mandatory@ when attributes %a or %a are present.@]",(lib/primitive.ml[245,8471+7]..[246,8537+46]),None)
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[247,8585+6]..[247,8585+23])
                          Pexp_ident "Style.inline_code" (lib/primitive.ml[247,8585+6]..[247,8585+23])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[247,8585+24]..[247,8585+37])
                          Pexp_constant PConst_string("[@untagged]",(lib/primitive.ml[247,8585+25]..[247,8585+36]),None)
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[248,8623+6]..[248,8623+23])
                          Pexp_ident "Style.inline_code" (lib/primitive.ml[248,8623+6]..[248,8623+23])
                      <arg>
                      Nolabel
                        expression (lib/primitive.ml[248,8623+24]..[248,8623+36])
                          Pexp_constant PConst_string("[@unboxed]",(lib/primitive.ml[248,8623+25]..[248,8623+35]),None)
                    ]
              ]
    ]
  structure_item (lib/primitive.ml[250,8661+0]..[257,8834+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/primitive.ml[250,8661+4]..[250,8661+6])
          Ppat_construct "()" (lib/primitive.ml[250,8661+4]..[250,8661+6])
          None
        expression (lib/primitive.ml[251,8670+2]..[257,8834+5])
          Pexp_apply
          expression (lib/primitive.ml[251,8670+2]..[251,8670+32])
            Pexp_ident "Location.register_error_of_exn" (lib/primitive.ml[251,8670+2]..[251,8670+32])
          [
            <arg>
            Nolabel
              expression (lib/primitive.ml[252,8703+4]..[257,8834+5])
                Pexp_function
                []
                None
                Pfunction_cases (lib/primitive.ml[252,8703+5]..[256,8821+12])
                  [
                    <case>
                      pattern (lib/primitive.ml[253,8717+8]..[253,8717+24])
                        Ppat_construct "Error" (lib/primitive.ml[253,8717+8]..[253,8717+13])
                        Some
                          []
                          pattern (lib/primitive.ml[253,8717+14]..[253,8717+24])
                            Ppat_tuple
                            [
                              pattern (lib/primitive.ml[253,8717+15]..[253,8717+18])
                                Ppat_var "loc" (lib/primitive.ml[253,8717+15]..[253,8717+18])
                              pattern (lib/primitive.ml[253,8717+20]..[253,8717+23])
                                Ppat_var "err" (lib/primitive.ml[253,8717+20]..[253,8717+23])
                            ]
                      expression (lib/primitive.ml[254,8745+8]..[254,8745+62])
                        Pexp_construct "Some" (lib/primitive.ml[254,8745+8]..[254,8745+12])
                        Some
                          expression (lib/primitive.ml[254,8745+13]..[254,8745+62])
                            Pexp_apply
                            expression (lib/primitive.ml[254,8745+14]..[254,8745+39])
                              Pexp_ident "Location.error_of_printer" (lib/primitive.ml[254,8745+14]..[254,8745+39])
                            [
                              <arg>
                              Labelled "loc"
                                expression (lib/primitive.ml[254,8745+41]..[254,8745+44])
                                  Pexp_ident "loc" (lib/primitive.ml[254,8745+41]..[254,8745+44])
                              <arg>
                              Nolabel
                                expression (lib/primitive.ml[254,8745+45]..[254,8745+57])
                                  Pexp_ident "report_error" (lib/primitive.ml[254,8745+45]..[254,8745+57])
                              <arg>
                              Nolabel
                                expression (lib/primitive.ml[254,8745+58]..[254,8745+61])
                                  Pexp_ident "err" (lib/primitive.ml[254,8745+58]..[254,8745+61])
                            ]
                    <case>
                      pattern (lib/primitive.ml[255,8808+8]..[255,8808+9])
                        Ppat_any
                      expression (lib/primitive.ml[256,8821+8]..[256,8821+12])
                        Pexp_construct "None" (lib/primitive.ml[256,8821+8]..[256,8821+12])
                        None
                  ]
          ]
    ]
]

open Misc
open Parsetree
type boxed_integer =
  | Pnativeint 
  | Pint32 
  | Pint64 
type native_repr =
  | Same_as_ocaml_repr 
  | Unboxed_float 
  | Unboxed_integer of boxed_integer 
  | Untagged_immediate 
type description =
  {
  prim_name: string ;
  prim_arity: int ;
  prim_alloc: bool ;
  prim_native_name: string ;
  prim_native_repr_args: native_repr list ;
  prim_native_repr_res: native_repr }
type error =
  | Old_style_float_with_native_repr_attribute 
  | Old_style_noalloc_with_noalloc_attribute 
  | No_native_primitive_with_repr_attribute 
exception Error of Location.t * error 
let is_ocaml_repr =
  function
  | Same_as_ocaml_repr -> true
  | Unboxed_float | Unboxed_integer _ | Untagged_immediate -> false
let is_unboxed =
  function
  | Same_as_ocaml_repr | Untagged_immediate -> false
  | Unboxed_float | Unboxed_integer _ -> true
let is_untagged =
  function
  | Untagged_immediate -> true
  | Same_as_ocaml_repr | Unboxed_float | Unboxed_integer _ -> false
let rec make_native_repr_args arity x =
  if arity = 0 then [] else x :: (make_native_repr_args (arity - 1) x)
let simple ~name ~arity ~alloc =
  {
    prim_name = name;
    prim_arity = arity;
    prim_alloc = alloc;
    prim_native_name = "";
    prim_native_repr_args = (make_native_repr_args arity Same_as_ocaml_repr);
    prim_native_repr_res = Same_as_ocaml_repr
  }
let make ~name ~alloc ~native_name ~native_repr_args ~native_repr_res =
  {
    prim_name = name;
    prim_arity = (List.length native_repr_args);
    prim_alloc = alloc;
    prim_native_name = native_name;
    prim_native_repr_args = native_repr_args;
    prim_native_repr_res = native_repr_res
  }
let parse_declaration valdecl ~native_repr_args ~native_repr_res =
  let arity = List.length native_repr_args in
  let (name, native_name, old_style_noalloc, old_style_float) =
    match valdecl.pval_prim with
    | name::"noalloc"::name2::"float"::_ -> (name, name2, true, true)
    | name::"noalloc"::name2::_ -> (name, name2, true, false)
    | name::name2::"float"::_ -> (name, name2, false, true)
    | name::"noalloc"::_ -> (name, "", true, false)
    | name::name2::_ -> (name, name2, false, false)
    | name::_ -> (name, "", false, false)
    | [] -> fatal_error "Primitive.parse_declaration" in
  let noalloc_attribute =
    Attr_helper.has_no_payload_attribute "noalloc" valdecl.pval_attributes in
  if
    old_style_float &&
      (not
         ((List.for_all is_ocaml_repr native_repr_args) &&
            (is_ocaml_repr native_repr_res)))
  then
    raise
      (Error ((valdecl.pval_loc), Old_style_float_with_native_repr_attribute));
  if old_style_noalloc && noalloc_attribute
  then
    raise
      (Error ((valdecl.pval_loc), Old_style_noalloc_with_noalloc_attribute));
  (let old_style_noalloc = old_style_noalloc || old_style_float in
   if old_style_float
   then
     Location.deprecated valdecl.pval_loc
       "[@@unboxed] + [@@noalloc] should be used\ninstead of \"float\""
   else
     if old_style_noalloc
     then
       Location.deprecated valdecl.pval_loc
         "[@@noalloc] should be used instead of \"noalloc\"";
   if
     (native_name = "") &&
       (not
          ((List.for_all is_ocaml_repr native_repr_args) &&
             (is_ocaml_repr native_repr_res)))
   then
     raise
       (Error ((valdecl.pval_loc), No_native_primitive_with_repr_attribute));
   (let noalloc = old_style_noalloc || noalloc_attribute in
    let (native_repr_args, native_repr_res) =
      if old_style_float
      then ((make_native_repr_args arity Unboxed_float), Unboxed_float)
      else (native_repr_args, native_repr_res) in
    {
      prim_name = name;
      prim_arity = arity;
      prim_alloc = (not noalloc);
      prim_native_name = native_name;
      prim_native_repr_args = native_repr_args;
      prim_native_repr_res = native_repr_res
    }))
open Outcometree
let rec add_native_repr_attributes ty attrs =
  match (ty, attrs) with
  | (Otyp_arrow (label, a, b), attr_opt::rest) ->
      let b = add_native_repr_attributes b rest in
      let a =
        match attr_opt with
        | None -> a
        | Some attr -> Otyp_attribute (a, attr) in
      Otyp_arrow (label, a, b)
  | (_, (Some attr)::[]) -> Otyp_attribute (ty, attr)
  | _ -> (assert (List.for_all (fun x -> x = None) attrs); ty)
let oattr_unboxed = { oattr_name = "unboxed" }
let oattr_untagged = { oattr_name = "untagged" }
let oattr_noalloc = { oattr_name = "noalloc" }
let print p osig_val_decl =
  let prims =
    if p.prim_native_name <> ""
    then [p.prim_name; p.prim_native_name]
    else [p.prim_name] in
  let for_all f =
    (List.for_all f p.prim_native_repr_args) && (f p.prim_native_repr_res) in
  let all_unboxed = for_all is_unboxed in
  let all_untagged = for_all is_untagged in
  let attrs = if p.prim_alloc then [] else [oattr_noalloc] in
  let attrs =
    if all_unboxed
    then oattr_unboxed :: attrs
    else if all_untagged then oattr_untagged :: attrs else attrs in
  let attr_of_native_repr =
    function
    | Same_as_ocaml_repr -> None
    | Unboxed_float | Unboxed_integer _ ->
        if all_unboxed then None else Some oattr_unboxed
    | Untagged_immediate ->
        if all_untagged then None else Some oattr_untagged in
  let type_attrs =
    (List.map attr_of_native_repr p.prim_native_repr_args) @
      [attr_of_native_repr p.prim_native_repr_res] in
  {
    osig_val_decl with
    oval_prims = prims;
    oval_type =
      (add_native_repr_attributes osig_val_decl.oval_type type_attrs);
    oval_attributes = attrs
  }
let native_name p =
  if p.prim_native_name <> "" then p.prim_native_name else p.prim_name
let byte_name p = p.prim_name
let equal_boxed_integer bi1 bi2 =
  match (bi1, bi2) with
  | (Pnativeint, Pnativeint) | (Pint32, Pint32) | (Pint64, Pint64) -> true
  | ((Pnativeint | Pint32 | Pint64), _) -> false
let equal_native_repr nr1 nr2 =
  match (nr1, nr2) with
  | (Same_as_ocaml_repr, Same_as_ocaml_repr) -> true
  | (Same_as_ocaml_repr,
     (Unboxed_float | Unboxed_integer _ | Untagged_immediate)) -> false
  | (Unboxed_float, Unboxed_float) -> true
  | (Unboxed_float,
     (Same_as_ocaml_repr | Unboxed_integer _ | Untagged_immediate)) -> false
  | (Unboxed_integer bi1, Unboxed_integer bi2) -> equal_boxed_integer bi1 bi2
  | (Unboxed_integer _,
     (Same_as_ocaml_repr | Unboxed_float | Untagged_immediate)) -> false
  | (Untagged_immediate, Untagged_immediate) -> true
  | (Untagged_immediate,
     (Same_as_ocaml_repr | Unboxed_float | Unboxed_integer _)) -> false
let native_name_is_external p =
  let nat_name = native_name p in (nat_name <> "") && ((nat_name.[0]) <> '%')
module Style = Misc.Style
let report_error ppf err =
  match err with
  | Old_style_float_with_native_repr_attribute ->
      Format.fprintf ppf "Cannot use %a in conjunction with %a/%a."
        Style.inline_code "float" Style.inline_code "[@unboxed]"
        Style.inline_code "[@untagged]"
  | Old_style_noalloc_with_noalloc_attribute ->
      Format.fprintf ppf "Cannot use %a in conjunction with %a."
        Style.inline_code "noalloc" Style.inline_code "[@@noalloc]"
  | No_native_primitive_with_repr_attribute ->
      Format.fprintf ppf
        "@[The native code version of the primitive is mandatory@ when attributes %a or %a are present.@]"
        Style.inline_code "[@untagged]" Style.inline_code "[@unboxed]"
let () =
  Location.register_error_of_exn
    (function
     | Error (loc, err) ->
         Some (Location.error_of_printer ~loc report_error err)
     | _ -> None)
