[
  structure_item (lib/build_path_prefix_map.ml[16,1079+0]..[16,1079+18])
    Pstr_type Rec
    [
      type_declaration "path" (lib/build_path_prefix_map.ml[16,1079+5]..[16,1079+9]) (lib/build_path_prefix_map.ml[16,1079+0]..[16,1079+18])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/build_path_prefix_map.ml[16,1079+12]..[16,1079+18])
              Ptyp_constr "string" (lib/build_path_prefix_map.ml[16,1079+12]..[16,1079+18])
              []
    ]
  structure_item (lib/build_path_prefix_map.ml[17,1098+0]..[17,1098+25])
    Pstr_type Rec
    [
      type_declaration "path_prefix" (lib/build_path_prefix_map.ml[17,1098+5]..[17,1098+16]) (lib/build_path_prefix_map.ml[17,1098+0]..[17,1098+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/build_path_prefix_map.ml[17,1098+19]..[17,1098+25])
              Ptyp_constr "string" (lib/build_path_prefix_map.ml[17,1098+19]..[17,1098+25])
              []
    ]
  structure_item (lib/build_path_prefix_map.ml[18,1124+0]..[18,1124+27])
    Pstr_type Rec
    [
      type_declaration "error_message" (lib/build_path_prefix_map.ml[18,1124+5]..[18,1124+18]) (lib/build_path_prefix_map.ml[18,1124+0]..[18,1124+27])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/build_path_prefix_map.ml[18,1124+21]..[18,1124+27])
              Ptyp_constr "string" (lib/build_path_prefix_map.ml[18,1124+21]..[18,1124+27])
              []
    ]
  structure_item (lib/build_path_prefix_map.ml[20,1153+0]..[20,1153+59])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[20,1153+4]..[20,1153+10])
          Ppat_var "errorf" (lib/build_path_prefix_map.ml[20,1153+4]..[20,1153+10])
        expression (lib/build_path_prefix_map.ml[20,1153+11]..[20,1153+59]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[20,1153+11]..[20,1153+14])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[20,1153+11]..[20,1153+14])
                Ppat_var "fmt" (lib/build_path_prefix_map.ml[20,1153+11]..[20,1153+14])
          ]
          None
          Pfunction_body
            expression (lib/build_path_prefix_map.ml[20,1153+17]..[20,1153+59])
              Pexp_apply
              expression (lib/build_path_prefix_map.ml[20,1153+17]..[20,1153+32])
                Pexp_ident "Printf.ksprintf" (lib/build_path_prefix_map.ml[20,1153+17]..[20,1153+32])
              [
                <arg>
                Nolabel
                  expression (lib/build_path_prefix_map.ml[20,1153+33]..[20,1153+55])
                    Pexp_function
                    [
                      Pparam_val (lib/build_path_prefix_map.ml[20,1153+38]..[20,1153+41])
                        Nolabel
                        None
                        pattern (lib/build_path_prefix_map.ml[20,1153+38]..[20,1153+41])
                          Ppat_var "err" (lib/build_path_prefix_map.ml[20,1153+38]..[20,1153+41])
                    ]
                    None
                    Pfunction_body
                      expression (lib/build_path_prefix_map.ml[20,1153+45]..[20,1153+54])
                        Pexp_construct "Error" (lib/build_path_prefix_map.ml[20,1153+45]..[20,1153+50])
                        Some
                          expression (lib/build_path_prefix_map.ml[20,1153+51]..[20,1153+54])
                            Pexp_ident "err" (lib/build_path_prefix_map.ml[20,1153+51]..[20,1153+54])
                <arg>
                Nolabel
                  expression (lib/build_path_prefix_map.ml[20,1153+56]..[20,1153+59])
                    Pexp_ident "fmt" (lib/build_path_prefix_map.ml[20,1153+56]..[20,1153+59])
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[22,1214+0]..[31,1501+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[22,1214+4]..[22,1214+17])
          Ppat_var "encode_prefix" (lib/build_path_prefix_map.ml[22,1214+4]..[22,1214+17])
        expression (lib/build_path_prefix_map.ml[22,1214+18]..[31,1501+21]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[22,1214+18]..[22,1214+21])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[22,1214+18]..[22,1214+21])
                Ppat_var "str" (lib/build_path_prefix_map.ml[22,1214+18]..[22,1214+21])
          ]
          None
          Pfunction_body
            expression (lib/build_path_prefix_map.ml[23,1238+2]..[31,1501+21])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/build_path_prefix_map.ml[23,1238+6]..[23,1238+9])
                    Ppat_var "buf" (lib/build_path_prefix_map.ml[23,1238+6]..[23,1238+9])
                  expression (lib/build_path_prefix_map.ml[23,1238+12]..[23,1238+45])
                    Pexp_apply
                    expression (lib/build_path_prefix_map.ml[23,1238+12]..[23,1238+25])
                      Pexp_ident "Buffer.create" (lib/build_path_prefix_map.ml[23,1238+12]..[23,1238+25])
                    [
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[23,1238+26]..[23,1238+45])
                          Pexp_apply
                          expression (lib/build_path_prefix_map.ml[23,1238+27]..[23,1238+40])
                            Pexp_ident "String.length" (lib/build_path_prefix_map.ml[23,1238+27]..[23,1238+40])
                          [
                            <arg>
                            Nolabel
                              expression (lib/build_path_prefix_map.ml[23,1238+41]..[23,1238+44])
                                Pexp_ident "str" (lib/build_path_prefix_map.ml[23,1238+41]..[23,1238+44])
                          ]
                    ]
              ]
              expression (lib/build_path_prefix_map.ml[24,1287+2]..[31,1501+21])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lib/build_path_prefix_map.ml[24,1287+6]..[24,1287+15])
                      Ppat_var "push_char" (lib/build_path_prefix_map.ml[24,1287+6]..[24,1287+15])
                    expression (lib/build_path_prefix_map.ml[24,1287+18]..[28,1434+32])
                      Pexp_function
                      []
                      None
                      Pfunction_cases (lib/build_path_prefix_map.ml[24,1287+18]..[28,1434+32])
                        [
                          <case>
                            pattern (lib/build_path_prefix_map.ml[25,1314+6]..[25,1314+9])
                              Ppat_constant PConst_char 25
                            expression (lib/build_path_prefix_map.ml[25,1314+13]..[25,1314+39])
                              Pexp_apply
                              expression (lib/build_path_prefix_map.ml[25,1314+13]..[25,1314+30])
                                Pexp_ident "Buffer.add_string" (lib/build_path_prefix_map.ml[25,1314+13]..[25,1314+30])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[25,1314+31]..[25,1314+34])
                                    Pexp_ident "buf" (lib/build_path_prefix_map.ml[25,1314+31]..[25,1314+34])
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[25,1314+35]..[25,1314+39])
                                    Pexp_constant PConst_string("%#",(lib/build_path_prefix_map.ml[25,1314+36]..[25,1314+38]),None)
                              ]
                          <case>
                            pattern (lib/build_path_prefix_map.ml[26,1354+6]..[26,1354+9])
                              Ppat_constant PConst_char 3d
                            expression (lib/build_path_prefix_map.ml[26,1354+13]..[26,1354+39])
                              Pexp_apply
                              expression (lib/build_path_prefix_map.ml[26,1354+13]..[26,1354+30])
                                Pexp_ident "Buffer.add_string" (lib/build_path_prefix_map.ml[26,1354+13]..[26,1354+30])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[26,1354+31]..[26,1354+34])
                                    Pexp_ident "buf" (lib/build_path_prefix_map.ml[26,1354+31]..[26,1354+34])
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[26,1354+35]..[26,1354+39])
                                    Pexp_constant PConst_string("%+",(lib/build_path_prefix_map.ml[26,1354+36]..[26,1354+38]),None)
                              ]
                          <case>
                            pattern (lib/build_path_prefix_map.ml[27,1394+6]..[27,1394+9])
                              Ppat_constant PConst_char 3a
                            expression (lib/build_path_prefix_map.ml[27,1394+13]..[27,1394+39])
                              Pexp_apply
                              expression (lib/build_path_prefix_map.ml[27,1394+13]..[27,1394+30])
                                Pexp_ident "Buffer.add_string" (lib/build_path_prefix_map.ml[27,1394+13]..[27,1394+30])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[27,1394+31]..[27,1394+34])
                                    Pexp_ident "buf" (lib/build_path_prefix_map.ml[27,1394+31]..[27,1394+34])
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[27,1394+35]..[27,1394+39])
                                    Pexp_constant PConst_string("%.",(lib/build_path_prefix_map.ml[27,1394+36]..[27,1394+38]),None)
                              ]
                          <case>
                            pattern (lib/build_path_prefix_map.ml[28,1434+6]..[28,1434+7])
                              Ppat_var "c" (lib/build_path_prefix_map.ml[28,1434+6]..[28,1434+7])
                            expression (lib/build_path_prefix_map.ml[28,1434+11]..[28,1434+32])
                              Pexp_apply
                              expression (lib/build_path_prefix_map.ml[28,1434+11]..[28,1434+26])
                                Pexp_ident "Buffer.add_char" (lib/build_path_prefix_map.ml[28,1434+11]..[28,1434+26])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[28,1434+27]..[28,1434+30])
                                    Pexp_ident "buf" (lib/build_path_prefix_map.ml[28,1434+27]..[28,1434+30])
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[28,1434+31]..[28,1434+32])
                                    Pexp_ident "c" (lib/build_path_prefix_map.ml[28,1434+31]..[28,1434+32])
                              ]
                        ]
                ]
                expression (lib/build_path_prefix_map.ml[30,1472+2]..[31,1501+21])
                  Pexp_sequence
                  expression (lib/build_path_prefix_map.ml[30,1472+2]..[30,1472+27])
                    Pexp_apply
                    expression (lib/build_path_prefix_map.ml[30,1472+2]..[30,1472+13])
                      Pexp_ident "String.iter" (lib/build_path_prefix_map.ml[30,1472+2]..[30,1472+13])
                    [
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[30,1472+14]..[30,1472+23])
                          Pexp_ident "push_char" (lib/build_path_prefix_map.ml[30,1472+14]..[30,1472+23])
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[30,1472+24]..[30,1472+27])
                          Pexp_ident "str" (lib/build_path_prefix_map.ml[30,1472+24]..[30,1472+27])
                    ]
                  expression (lib/build_path_prefix_map.ml[31,1501+2]..[31,1501+21])
                    Pexp_apply
                    expression (lib/build_path_prefix_map.ml[31,1501+2]..[31,1501+17])
                      Pexp_ident "Buffer.contents" (lib/build_path_prefix_map.ml[31,1501+2]..[31,1501+17])
                    [
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[31,1501+18]..[31,1501+21])
                          Pexp_ident "buf" (lib/build_path_prefix_map.ml[31,1501+18]..[31,1501+21])
                    ]
    ]
  structure_item (lib/build_path_prefix_map.ml[33,1524+0]..[54,2249+11])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[33,1524+4]..[33,1524+17])
          Ppat_var "decode_prefix" (lib/build_path_prefix_map.ml[33,1524+4]..[33,1524+17])
        expression (lib/build_path_prefix_map.ml[33,1524+18]..[54,2249+11]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[33,1524+18]..[33,1524+21])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[33,1524+18]..[33,1524+21])
                Ppat_var "str" (lib/build_path_prefix_map.ml[33,1524+18]..[33,1524+21])
          ]
          None
          Pfunction_body
            expression (lib/build_path_prefix_map.ml[34,1548+2]..[54,2249+11])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/build_path_prefix_map.ml[34,1548+6]..[34,1548+9])
                    Ppat_var "buf" (lib/build_path_prefix_map.ml[34,1548+6]..[34,1548+9])
                  expression (lib/build_path_prefix_map.ml[34,1548+12]..[34,1548+45])
                    Pexp_apply
                    expression (lib/build_path_prefix_map.ml[34,1548+12]..[34,1548+25])
                      Pexp_ident "Buffer.create" (lib/build_path_prefix_map.ml[34,1548+12]..[34,1548+25])
                    [
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[34,1548+26]..[34,1548+45])
                          Pexp_apply
                          expression (lib/build_path_prefix_map.ml[34,1548+27]..[34,1548+40])
                            Pexp_ident "String.length" (lib/build_path_prefix_map.ml[34,1548+27]..[34,1548+40])
                          [
                            <arg>
                            Nolabel
                              expression (lib/build_path_prefix_map.ml[34,1548+41]..[34,1548+44])
                                Pexp_ident "str" (lib/build_path_prefix_map.ml[34,1548+41]..[34,1548+44])
                          ]
                    ]
              ]
              expression (lib/build_path_prefix_map.ml[35,1597+2]..[54,2249+11])
                Pexp_let Rec
                [
                  <def>
                    pattern (lib/build_path_prefix_map.ml[35,1597+10]..[35,1597+14])
                      Ppat_var "loop" (lib/build_path_prefix_map.ml[35,1597+10]..[35,1597+14])
                    expression (lib/build_path_prefix_map.ml[35,1597+15]..[53,2228+20]) ghost
                      Pexp_function
                      [
                        Pparam_val (lib/build_path_prefix_map.ml[35,1597+15]..[35,1597+16])
                          Nolabel
                          None
                          pattern (lib/build_path_prefix_map.ml[35,1597+15]..[35,1597+16])
                            Ppat_var "i" (lib/build_path_prefix_map.ml[35,1597+15]..[35,1597+16])
                      ]
                      None
                      Pfunction_body
                        expression (lib/build_path_prefix_map.ml[36,1616+4]..[53,2228+20])
                          Pexp_ifthenelse
                          expression (lib/build_path_prefix_map.ml[36,1616+7]..[36,1616+29])
                            Pexp_apply
                            expression (lib/build_path_prefix_map.ml[36,1616+9]..[36,1616+11])
                              Pexp_ident ">=" (lib/build_path_prefix_map.ml[36,1616+9]..[36,1616+11])
                            [
                              <arg>
                              Nolabel
                                expression (lib/build_path_prefix_map.ml[36,1616+7]..[36,1616+8])
                                  Pexp_ident "i" (lib/build_path_prefix_map.ml[36,1616+7]..[36,1616+8])
                              <arg>
                              Nolabel
                                expression (lib/build_path_prefix_map.ml[36,1616+12]..[36,1616+29])
                                  Pexp_apply
                                  expression (lib/build_path_prefix_map.ml[36,1616+12]..[36,1616+25])
                                    Pexp_ident "String.length" (lib/build_path_prefix_map.ml[36,1616+12]..[36,1616+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/build_path_prefix_map.ml[36,1616+26]..[36,1616+29])
                                        Pexp_ident "str" (lib/build_path_prefix_map.ml[36,1616+26]..[36,1616+29])
                                  ]
                            ]
                          expression (lib/build_path_prefix_map.ml[37,1646+9]..[37,1646+33])
                            Pexp_construct "Ok" (lib/build_path_prefix_map.ml[37,1646+9]..[37,1646+11])
                            Some
                              expression (lib/build_path_prefix_map.ml[37,1646+12]..[37,1646+33])
                                Pexp_apply
                                expression (lib/build_path_prefix_map.ml[37,1646+13]..[37,1646+28])
                                  Pexp_ident "Buffer.contents" (lib/build_path_prefix_map.ml[37,1646+13]..[37,1646+28])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/build_path_prefix_map.ml[37,1646+29]..[37,1646+32])
                                      Pexp_ident "buf" (lib/build_path_prefix_map.ml[37,1646+29]..[37,1646+32])
                                ]
                          Some
                            expression (lib/build_path_prefix_map.ml[38,1680+9]..[53,2228+20])
                              Pexp_match
                              expression (lib/build_path_prefix_map.ml[38,1680+15]..[38,1680+22])
                                Pexp_apply
                                expression (lib/build_path_prefix_map.ml[38,1680+15]..[38,1680+22]) ghost
                                  Pexp_ident "String.get" (lib/build_path_prefix_map.ml[38,1680+15]..[38,1680+22]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/build_path_prefix_map.ml[38,1680+15]..[38,1680+18])
                                      Pexp_ident "str" (lib/build_path_prefix_map.ml[38,1680+15]..[38,1680+18])
                                  <arg>
                                  Nolabel
                                    expression (lib/build_path_prefix_map.ml[38,1680+20]..[38,1680+21])
                                      Pexp_ident "i" (lib/build_path_prefix_map.ml[38,1680+20]..[38,1680+21])
                                ]
                              [
                                <case>
                                  pattern (lib/build_path_prefix_map.ml[39,1708+8]..[39,1708+24])
                                    Ppat_alias "c" (lib/build_path_prefix_map.ml[39,1708+23]..[39,1708+24])
                                    pattern (lib/build_path_prefix_map.ml[39,1708+8]..[39,1708+19])
                                      Ppat_or
                                      pattern (lib/build_path_prefix_map.ml[39,1708+9]..[39,1708+12])
                                        Ppat_constant PConst_char 3d
                                      pattern (lib/build_path_prefix_map.ml[39,1708+15]..[39,1708+18])
                                        Ppat_constant PConst_char 3a
                                  expression (lib/build_path_prefix_map.ml[40,1736+8]..[40,1736+57])
                                    Pexp_apply
                                    expression (lib/build_path_prefix_map.ml[40,1736+8]..[40,1736+14])
                                      Pexp_ident "errorf" (lib/build_path_prefix_map.ml[40,1736+8]..[40,1736+14])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/build_path_prefix_map.ml[40,1736+15]..[40,1736+55])
                                          Pexp_constant PConst_string("invalid character '%c' in key or value",(lib/build_path_prefix_map.ml[40,1736+16]..[40,1736+54]),None)
                                      <arg>
                                      Nolabel
                                        expression (lib/build_path_prefix_map.ml[40,1736+56]..[40,1736+57])
                                          Pexp_ident "c" (lib/build_path_prefix_map.ml[40,1736+56]..[40,1736+57])
                                    ]
                                <case>
                                  pattern (lib/build_path_prefix_map.ml[41,1794+8]..[41,1794+11])
                                    Ppat_constant PConst_char 25
                                  expression (lib/build_path_prefix_map.ml[42,1809+8]..[50,2172+11])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/build_path_prefix_map.ml[42,1809+12]..[42,1809+16])
                                          Ppat_var "push" (lib/build_path_prefix_map.ml[42,1809+12]..[42,1809+16])
                                        expression (lib/build_path_prefix_map.ml[42,1809+17]..[42,1809+56]) ghost
                                          Pexp_function
                                          [
                                            Pparam_val (lib/build_path_prefix_map.ml[42,1809+17]..[42,1809+18])
                                              Nolabel
                                              None
                                              pattern (lib/build_path_prefix_map.ml[42,1809+17]..[42,1809+18])
                                                Ppat_var "c" (lib/build_path_prefix_map.ml[42,1809+17]..[42,1809+18])
                                          ]
                                          None
                                          Pfunction_body
                                            expression (lib/build_path_prefix_map.ml[42,1809+21]..[42,1809+56])
                                              Pexp_sequence
                                              expression (lib/build_path_prefix_map.ml[42,1809+21]..[42,1809+42])
                                                Pexp_apply
                                                expression (lib/build_path_prefix_map.ml[42,1809+21]..[42,1809+36])
                                                  Pexp_ident "Buffer.add_char" (lib/build_path_prefix_map.ml[42,1809+21]..[42,1809+36])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/build_path_prefix_map.ml[42,1809+37]..[42,1809+40])
                                                      Pexp_ident "buf" (lib/build_path_prefix_map.ml[42,1809+37]..[42,1809+40])
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/build_path_prefix_map.ml[42,1809+41]..[42,1809+42])
                                                      Pexp_ident "c" (lib/build_path_prefix_map.ml[42,1809+41]..[42,1809+42])
                                                ]
                                              expression (lib/build_path_prefix_map.ml[42,1809+44]..[42,1809+56])
                                                Pexp_apply
                                                expression (lib/build_path_prefix_map.ml[42,1809+44]..[42,1809+48])
                                                  Pexp_ident "loop" (lib/build_path_prefix_map.ml[42,1809+44]..[42,1809+48])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/build_path_prefix_map.ml[42,1809+49]..[42,1809+56])
                                                      Pexp_apply
                                                      expression (lib/build_path_prefix_map.ml[42,1809+52]..[42,1809+53])
                                                        Pexp_ident "+" (lib/build_path_prefix_map.ml[42,1809+52]..[42,1809+53])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/build_path_prefix_map.ml[42,1809+50]..[42,1809+51])
                                                            Pexp_ident "i" (lib/build_path_prefix_map.ml[42,1809+50]..[42,1809+51])
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/build_path_prefix_map.ml[42,1809+54]..[42,1809+55])
                                                            Pexp_constant PConst_int (2,None)
                                                      ]
                                                ]
                                    ]
                                    expression (lib/build_path_prefix_map.ml[43,1869+8]..[50,2172+11])
                                      Pexp_ifthenelse
                                      expression (lib/build_path_prefix_map.ml[43,1869+11]..[43,1869+36])
                                        Pexp_apply
                                        expression (lib/build_path_prefix_map.ml[43,1869+17]..[43,1869+18])
                                          Pexp_ident "=" (lib/build_path_prefix_map.ml[43,1869+17]..[43,1869+18])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/build_path_prefix_map.ml[43,1869+11]..[43,1869+16])
                                              Pexp_apply
                                              expression (lib/build_path_prefix_map.ml[43,1869+13]..[43,1869+14])
                                                Pexp_ident "+" (lib/build_path_prefix_map.ml[43,1869+13]..[43,1869+14])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/build_path_prefix_map.ml[43,1869+11]..[43,1869+12])
                                                    Pexp_ident "i" (lib/build_path_prefix_map.ml[43,1869+11]..[43,1869+12])
                                                <arg>
                                                Nolabel
                                                  expression (lib/build_path_prefix_map.ml[43,1869+15]..[43,1869+16])
                                                    Pexp_constant PConst_int (1,None)
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (lib/build_path_prefix_map.ml[43,1869+19]..[43,1869+36])
                                              Pexp_apply
                                              expression (lib/build_path_prefix_map.ml[43,1869+19]..[43,1869+32])
                                                Pexp_ident "String.length" (lib/build_path_prefix_map.ml[43,1869+19]..[43,1869+32])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/build_path_prefix_map.ml[43,1869+33]..[43,1869+36])
                                                    Pexp_ident "str" (lib/build_path_prefix_map.ml[43,1869+33]..[43,1869+36])
                                              ]
                                        ]
                                      expression (lib/build_path_prefix_map.ml[44,1911+10]..[44,1911+64])
                                        Pexp_apply
                                        expression (lib/build_path_prefix_map.ml[44,1911+10]..[44,1911+16])
                                          Pexp_ident "errorf" (lib/build_path_prefix_map.ml[44,1911+10]..[44,1911+16])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/build_path_prefix_map.ml[44,1911+17]..[44,1911+60])
                                              Pexp_constant PConst_string("invalid encoded string %S (trailing '%%')",(lib/build_path_prefix_map.ml[44,1911+18]..[44,1911+59]),None)
                                          <arg>
                                          Nolabel
                                            expression (lib/build_path_prefix_map.ml[44,1911+61]..[44,1911+64])
                                              Pexp_ident "str" (lib/build_path_prefix_map.ml[44,1911+61]..[44,1911+64])
                                        ]
                                      Some
                                        expression (lib/build_path_prefix_map.ml[45,1976+13]..[50,2172+11])
                                          Pexp_match
                                          expression (lib/build_path_prefix_map.ml[45,1976+25]..[45,1976+36])
                                            Pexp_apply
                                            expression (lib/build_path_prefix_map.ml[45,1976+25]..[45,1976+36]) ghost
                                              Pexp_ident "String.get" (lib/build_path_prefix_map.ml[45,1976+25]..[45,1976+36]) ghost
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/build_path_prefix_map.ml[45,1976+25]..[45,1976+28])
                                                  Pexp_ident "str" (lib/build_path_prefix_map.ml[45,1976+25]..[45,1976+28])
                                              <arg>
                                              Nolabel
                                                expression (lib/build_path_prefix_map.ml[45,1976+30]..[45,1976+35])
                                                  Pexp_apply
                                                  expression (lib/build_path_prefix_map.ml[45,1976+32]..[45,1976+33])
                                                    Pexp_ident "+" (lib/build_path_prefix_map.ml[45,1976+32]..[45,1976+33])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/build_path_prefix_map.ml[45,1976+30]..[45,1976+31])
                                                        Pexp_ident "i" (lib/build_path_prefix_map.ml[45,1976+30]..[45,1976+31])
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/build_path_prefix_map.ml[45,1976+34]..[45,1976+35])
                                                        Pexp_constant PConst_int (1,None)
                                                  ]
                                            ]
                                          [
                                            <case>
                                              pattern (lib/build_path_prefix_map.ml[46,2018+14]..[46,2018+17])
                                                Ppat_constant PConst_char 23
                                              expression (lib/build_path_prefix_map.ml[46,2018+21]..[46,2018+29])
                                                Pexp_apply
                                                expression (lib/build_path_prefix_map.ml[46,2018+21]..[46,2018+25])
                                                  Pexp_ident "push" (lib/build_path_prefix_map.ml[46,2018+21]..[46,2018+25])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/build_path_prefix_map.ml[46,2018+26]..[46,2018+29])
                                                      Pexp_constant PConst_char 25
                                                ]
                                            <case>
                                              pattern (lib/build_path_prefix_map.ml[47,2048+14]..[47,2048+17])
                                                Ppat_constant PConst_char 2b
                                              expression (lib/build_path_prefix_map.ml[47,2048+21]..[47,2048+29])
                                                Pexp_apply
                                                expression (lib/build_path_prefix_map.ml[47,2048+21]..[47,2048+25])
                                                  Pexp_ident "push" (lib/build_path_prefix_map.ml[47,2048+21]..[47,2048+25])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/build_path_prefix_map.ml[47,2048+26]..[47,2048+29])
                                                      Pexp_constant PConst_char 3d
                                                ]
                                            <case>
                                              pattern (lib/build_path_prefix_map.ml[48,2078+14]..[48,2078+17])
                                                Ppat_constant PConst_char 2e
                                              expression (lib/build_path_prefix_map.ml[48,2078+21]..[48,2078+29])
                                                Pexp_apply
                                                expression (lib/build_path_prefix_map.ml[48,2078+21]..[48,2078+25])
                                                  Pexp_ident "push" (lib/build_path_prefix_map.ml[48,2078+21]..[48,2078+25])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/build_path_prefix_map.ml[48,2078+26]..[48,2078+29])
                                                      Pexp_constant PConst_char 3a
                                                ]
                                            <case>
                                              pattern (lib/build_path_prefix_map.ml[49,2108+14]..[49,2108+15])
                                                Ppat_var "c" (lib/build_path_prefix_map.ml[49,2108+14]..[49,2108+15])
                                              expression (lib/build_path_prefix_map.ml[49,2108+19]..[49,2108+63])
                                                Pexp_apply
                                                expression (lib/build_path_prefix_map.ml[49,2108+19]..[49,2108+25])
                                                  Pexp_ident "errorf" (lib/build_path_prefix_map.ml[49,2108+19]..[49,2108+25])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/build_path_prefix_map.ml[49,2108+26]..[49,2108+61])
                                                      Pexp_constant PConst_string("invalid %%-escaped character '%c'",(lib/build_path_prefix_map.ml[49,2108+27]..[49,2108+60]),None)
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/build_path_prefix_map.ml[49,2108+62]..[49,2108+63])
                                                      Pexp_ident "c" (lib/build_path_prefix_map.ml[49,2108+62]..[49,2108+63])
                                                ]
                                          ]
                                <case>
                                  pattern (lib/build_path_prefix_map.ml[51,2184+8]..[51,2184+9])
                                    Ppat_var "c" (lib/build_path_prefix_map.ml[51,2184+8]..[51,2184+9])
                                  expression (lib/build_path_prefix_map.ml[52,2197+8]..[53,2228+20])
                                    Pexp_sequence
                                    expression (lib/build_path_prefix_map.ml[52,2197+8]..[52,2197+29])
                                      Pexp_apply
                                      expression (lib/build_path_prefix_map.ml[52,2197+8]..[52,2197+23])
                                        Pexp_ident "Buffer.add_char" (lib/build_path_prefix_map.ml[52,2197+8]..[52,2197+23])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/build_path_prefix_map.ml[52,2197+24]..[52,2197+27])
                                            Pexp_ident "buf" (lib/build_path_prefix_map.ml[52,2197+24]..[52,2197+27])
                                        <arg>
                                        Nolabel
                                          expression (lib/build_path_prefix_map.ml[52,2197+28]..[52,2197+29])
                                            Pexp_ident "c" (lib/build_path_prefix_map.ml[52,2197+28]..[52,2197+29])
                                      ]
                                    expression (lib/build_path_prefix_map.ml[53,2228+8]..[53,2228+20])
                                      Pexp_apply
                                      expression (lib/build_path_prefix_map.ml[53,2228+8]..[53,2228+12])
                                        Pexp_ident "loop" (lib/build_path_prefix_map.ml[53,2228+8]..[53,2228+12])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/build_path_prefix_map.ml[53,2228+13]..[53,2228+20])
                                            Pexp_apply
                                            expression (lib/build_path_prefix_map.ml[53,2228+16]..[53,2228+17])
                                              Pexp_ident "+" (lib/build_path_prefix_map.ml[53,2228+16]..[53,2228+17])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/build_path_prefix_map.ml[53,2228+14]..[53,2228+15])
                                                  Pexp_ident "i" (lib/build_path_prefix_map.ml[53,2228+14]..[53,2228+15])
                                              <arg>
                                              Nolabel
                                                expression (lib/build_path_prefix_map.ml[53,2228+18]..[53,2228+19])
                                                  Pexp_constant PConst_int (1,None)
                                            ]
                                      ]
                              ]
                ]
                expression (lib/build_path_prefix_map.ml[54,2249+5]..[54,2249+11])
                  Pexp_apply
                  expression (lib/build_path_prefix_map.ml[54,2249+5]..[54,2249+9])
                    Pexp_ident "loop" (lib/build_path_prefix_map.ml[54,2249+5]..[54,2249+9])
                  [
                    <arg>
                    Nolabel
                      expression (lib/build_path_prefix_map.ml[54,2249+10]..[54,2249+11])
                        Pexp_constant PConst_int (0,None)
                  ]
    ]
  structure_item (lib/build_path_prefix_map.ml[56,2262+0]..[56,2262+57])
    Pstr_type Rec
    [
      type_declaration "pair" (lib/build_path_prefix_map.ml[56,2262+5]..[56,2262+9]) (lib/build_path_prefix_map.ml[56,2262+0]..[56,2262+57])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/build_path_prefix_map.ml[56,2262+14]..[56,2262+34])
                Immutable
                "target" (lib/build_path_prefix_map.ml[56,2262+14]..[56,2262+20])                core_type (lib/build_path_prefix_map.ml[56,2262+22]..[56,2262+33])
                  Ptyp_constr "path_prefix" (lib/build_path_prefix_map.ml[56,2262+22]..[56,2262+33])
                  []
              (lib/build_path_prefix_map.ml[56,2262+35]..[56,2262+55])
                Immutable
                "source" (lib/build_path_prefix_map.ml[56,2262+35]..[56,2262+41])                core_type (lib/build_path_prefix_map.ml[56,2262+44]..[56,2262+55])
                  Ptyp_constr "path_prefix" (lib/build_path_prefix_map.ml[56,2262+44]..[56,2262+55])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/build_path_prefix_map.ml[58,2321+0]..[59,2358+64])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[58,2321+4]..[58,2321+15])
          Ppat_var "encode_pair" (lib/build_path_prefix_map.ml[58,2321+4]..[58,2321+15])
        expression (lib/build_path_prefix_map.ml[58,2321+16]..[59,2358+64]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[58,2321+16]..[58,2321+34])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[58,2321+16]..[58,2321+34])
                Ppat_record Closed
                [
                  "target" (lib/build_path_prefix_map.ml[58,2321+18]..[58,2321+24]) ghost
                    pattern (lib/build_path_prefix_map.ml[58,2321+18]..[58,2321+24])
                      Ppat_var "target" (lib/build_path_prefix_map.ml[58,2321+18]..[58,2321+24])
                  "source" (lib/build_path_prefix_map.ml[58,2321+26]..[58,2321+32]) ghost
                    pattern (lib/build_path_prefix_map.ml[58,2321+26]..[58,2321+32])
                      Ppat_var "source" (lib/build_path_prefix_map.ml[58,2321+26]..[58,2321+32])
                ]
          ]
          None
          Pfunction_body
            expression (lib/build_path_prefix_map.ml[59,2358+2]..[59,2358+64])
              Pexp_apply
              expression (lib/build_path_prefix_map.ml[59,2358+2]..[59,2358+15])
                Pexp_ident "String.concat" (lib/build_path_prefix_map.ml[59,2358+2]..[59,2358+15])
              [
                <arg>
                Nolabel
                  expression (lib/build_path_prefix_map.ml[59,2358+16]..[59,2358+19])
                    Pexp_constant PConst_string("=",(lib/build_path_prefix_map.ml[59,2358+17]..[59,2358+18]),None)
                <arg>
                Nolabel
                  expression (lib/build_path_prefix_map.ml[59,2358+20]..[59,2358+64])
                    Pexp_construct "::" (lib/build_path_prefix_map.ml[59,2358+21]..[59,2358+64]) ghost
                    Some
                      expression (lib/build_path_prefix_map.ml[59,2358+21]..[59,2358+64]) ghost
                        Pexp_tuple
                        [
                          expression (lib/build_path_prefix_map.ml[59,2358+21]..[59,2358+41])
                            Pexp_apply
                            expression (lib/build_path_prefix_map.ml[59,2358+21]..[59,2358+34])
                              Pexp_ident "encode_prefix" (lib/build_path_prefix_map.ml[59,2358+21]..[59,2358+34])
                            [
                              <arg>
                              Nolabel
                                expression (lib/build_path_prefix_map.ml[59,2358+35]..[59,2358+41])
                                  Pexp_ident "target" (lib/build_path_prefix_map.ml[59,2358+35]..[59,2358+41])
                            ]
                          expression (lib/build_path_prefix_map.ml[59,2358+43]..[59,2358+64]) ghost
                            Pexp_construct "::" (lib/build_path_prefix_map.ml[59,2358+43]..[59,2358+64]) ghost
                            Some
                              expression (lib/build_path_prefix_map.ml[59,2358+43]..[59,2358+64]) ghost
                                Pexp_tuple
                                [
                                  expression (lib/build_path_prefix_map.ml[59,2358+43]..[59,2358+63])
                                    Pexp_apply
                                    expression (lib/build_path_prefix_map.ml[59,2358+43]..[59,2358+56])
                                      Pexp_ident "encode_prefix" (lib/build_path_prefix_map.ml[59,2358+43]..[59,2358+56])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/build_path_prefix_map.ml[59,2358+57]..[59,2358+63])
                                          Pexp_ident "source" (lib/build_path_prefix_map.ml[59,2358+57]..[59,2358+63])
                                    ]
                                  expression (lib/build_path_prefix_map.ml[59,2358+63]..[59,2358+64]) ghost
                                    Pexp_construct "[]" (lib/build_path_prefix_map.ml[59,2358+63]..[59,2358+64]) ghost
                                    None
                                ]
                        ]
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[61,2424+0]..[71,2867+58])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[61,2424+4]..[61,2424+15])
          Ppat_var "decode_pair" (lib/build_path_prefix_map.ml[61,2424+4]..[61,2424+15])
        expression (lib/build_path_prefix_map.ml[61,2424+16]..[71,2867+58]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[61,2424+16]..[61,2424+19])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[61,2424+16]..[61,2424+19])
                Ppat_var "str" (lib/build_path_prefix_map.ml[61,2424+16]..[61,2424+19])
          ]
          None
          Pfunction_body
            expression (lib/build_path_prefix_map.ml[62,2446+2]..[71,2867+58])
              Pexp_match
              expression (lib/build_path_prefix_map.ml[62,2446+8]..[62,2446+28])
                Pexp_apply
                expression (lib/build_path_prefix_map.ml[62,2446+8]..[62,2446+20])
                  Pexp_ident "String.index" (lib/build_path_prefix_map.ml[62,2446+8]..[62,2446+20])
                [
                  <arg>
                  Nolabel
                    expression (lib/build_path_prefix_map.ml[62,2446+21]..[62,2446+24])
                      Pexp_ident "str" (lib/build_path_prefix_map.ml[62,2446+21]..[62,2446+24])
                  <arg>
                  Nolabel
                    expression (lib/build_path_prefix_map.ml[62,2446+25]..[62,2446+28])
                      Pexp_constant PConst_char 3d
                ]
              [
                <case>
                  pattern (lib/build_path_prefix_map.ml[63,2480+4]..[63,2480+23])
                    Ppat_exception
                    pattern (lib/build_path_prefix_map.ml[63,2480+14]..[63,2480+23])
                      Ppat_construct "Not_found" (lib/build_path_prefix_map.ml[63,2480+14]..[63,2480+23])
                      None
                  expression (lib/build_path_prefix_map.ml[64,2507+4]..[64,2507+60])
                    Pexp_apply
                    expression (lib/build_path_prefix_map.ml[64,2507+4]..[64,2507+10])
                      Pexp_ident "errorf" (lib/build_path_prefix_map.ml[64,2507+4]..[64,2507+10])
                    [
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[64,2507+11]..[64,2507+56])
                          Pexp_constant PConst_string("invalid key/value pair %S, no '=' separator",(lib/build_path_prefix_map.ml[64,2507+12]..[64,2507+55]),None)
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[64,2507+57]..[64,2507+60])
                          Pexp_ident "str" (lib/build_path_prefix_map.ml[64,2507+57]..[64,2507+60])
                    ]
                <case>
                  pattern (lib/build_path_prefix_map.ml[65,2568+4]..[65,2568+13])
                    Ppat_var "equal_pos" (lib/build_path_prefix_map.ml[65,2568+4]..[65,2568+13])
                  expression (lib/build_path_prefix_map.ml[66,2585+4]..[71,2867+58])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lib/build_path_prefix_map.ml[66,2585+8]..[66,2585+22])
                          Ppat_var "encoded_target" (lib/build_path_prefix_map.ml[66,2585+8]..[66,2585+22])
                        expression (lib/build_path_prefix_map.ml[66,2585+25]..[66,2585+51])
                          Pexp_apply
                          expression (lib/build_path_prefix_map.ml[66,2585+25]..[66,2585+35])
                            Pexp_ident "String.sub" (lib/build_path_prefix_map.ml[66,2585+25]..[66,2585+35])
                          [
                            <arg>
                            Nolabel
                              expression (lib/build_path_prefix_map.ml[66,2585+36]..[66,2585+39])
                                Pexp_ident "str" (lib/build_path_prefix_map.ml[66,2585+36]..[66,2585+39])
                            <arg>
                            Nolabel
                              expression (lib/build_path_prefix_map.ml[66,2585+40]..[66,2585+41])
                                Pexp_constant PConst_int (0,None)
                            <arg>
                            Nolabel
                              expression (lib/build_path_prefix_map.ml[66,2585+42]..[66,2585+51])
                                Pexp_ident "equal_pos" (lib/build_path_prefix_map.ml[66,2585+42]..[66,2585+51])
                          ]
                    ]
                    expression (lib/build_path_prefix_map.ml[67,2640+4]..[71,2867+58])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lib/build_path_prefix_map.ml[67,2640+8]..[67,2640+22])
                            Ppat_var "encoded_source" (lib/build_path_prefix_map.ml[67,2640+8]..[67,2640+22])
                          expression (lib/build_path_prefix_map.ml[68,2665+6]..[68,2665+72])
                            Pexp_apply
                            expression (lib/build_path_prefix_map.ml[68,2665+6]..[68,2665+16])
                              Pexp_ident "String.sub" (lib/build_path_prefix_map.ml[68,2665+6]..[68,2665+16])
                            [
                              <arg>
                              Nolabel
                                expression (lib/build_path_prefix_map.ml[68,2665+17]..[68,2665+20])
                                  Pexp_ident "str" (lib/build_path_prefix_map.ml[68,2665+17]..[68,2665+20])
                              <arg>
                              Nolabel
                                expression (lib/build_path_prefix_map.ml[68,2665+21]..[68,2665+36])
                                  Pexp_apply
                                  expression (lib/build_path_prefix_map.ml[68,2665+32]..[68,2665+33])
                                    Pexp_ident "+" (lib/build_path_prefix_map.ml[68,2665+32]..[68,2665+33])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/build_path_prefix_map.ml[68,2665+22]..[68,2665+31])
                                        Pexp_ident "equal_pos" (lib/build_path_prefix_map.ml[68,2665+22]..[68,2665+31])
                                    <arg>
                                    Nolabel
                                      expression (lib/build_path_prefix_map.ml[68,2665+34]..[68,2665+35])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                              <arg>
                              Nolabel
                                expression (lib/build_path_prefix_map.ml[68,2665+37]..[68,2665+72])
                                  Pexp_apply
                                  expression (lib/build_path_prefix_map.ml[68,2665+68]..[68,2665+69])
                                    Pexp_ident "-" (lib/build_path_prefix_map.ml[68,2665+68]..[68,2665+69])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/build_path_prefix_map.ml[68,2665+38]..[68,2665+67])
                                        Pexp_apply
                                        expression (lib/build_path_prefix_map.ml[68,2665+56]..[68,2665+57])
                                          Pexp_ident "-" (lib/build_path_prefix_map.ml[68,2665+56]..[68,2665+57])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/build_path_prefix_map.ml[68,2665+38]..[68,2665+55])
                                              Pexp_apply
                                              expression (lib/build_path_prefix_map.ml[68,2665+38]..[68,2665+51])
                                                Pexp_ident "String.length" (lib/build_path_prefix_map.ml[68,2665+38]..[68,2665+51])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/build_path_prefix_map.ml[68,2665+52]..[68,2665+55])
                                                    Pexp_ident "str" (lib/build_path_prefix_map.ml[68,2665+52]..[68,2665+55])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (lib/build_path_prefix_map.ml[68,2665+58]..[68,2665+67])
                                              Pexp_ident "equal_pos" (lib/build_path_prefix_map.ml[68,2665+58]..[68,2665+67])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (lib/build_path_prefix_map.ml[68,2665+70]..[68,2665+71])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                            ]
                      ]
                      expression (lib/build_path_prefix_map.ml[69,2741+4]..[71,2867+58])
                        Pexp_match
                        expression (lib/build_path_prefix_map.ml[69,2741+10]..[69,2741+68])
                          Pexp_tuple
                          [
                            expression (lib/build_path_prefix_map.ml[69,2741+10]..[69,2741+38])
                              Pexp_apply
                              expression (lib/build_path_prefix_map.ml[69,2741+10]..[69,2741+23])
                                Pexp_ident "decode_prefix" (lib/build_path_prefix_map.ml[69,2741+10]..[69,2741+23])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[69,2741+24]..[69,2741+38])
                                    Pexp_ident "encoded_target" (lib/build_path_prefix_map.ml[69,2741+24]..[69,2741+38])
                              ]
                            expression (lib/build_path_prefix_map.ml[69,2741+40]..[69,2741+68])
                              Pexp_apply
                              expression (lib/build_path_prefix_map.ml[69,2741+40]..[69,2741+53])
                                Pexp_ident "decode_prefix" (lib/build_path_prefix_map.ml[69,2741+40]..[69,2741+53])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[69,2741+54]..[69,2741+68])
                                    Pexp_ident "encoded_source" (lib/build_path_prefix_map.ml[69,2741+54]..[69,2741+68])
                              ]
                          ]
                        [
                          <case>
                            pattern (lib/build_path_prefix_map.ml[70,2815+6]..[70,2815+26])
                              Ppat_tuple
                              [
                                pattern (lib/build_path_prefix_map.ml[70,2815+6]..[70,2815+15])
                                  Ppat_construct "Ok" (lib/build_path_prefix_map.ml[70,2815+6]..[70,2815+8])
                                  Some
                                    []
                                    pattern (lib/build_path_prefix_map.ml[70,2815+9]..[70,2815+15])
                                      Ppat_var "target" (lib/build_path_prefix_map.ml[70,2815+9]..[70,2815+15])
                                pattern (lib/build_path_prefix_map.ml[70,2815+17]..[70,2815+26])
                                  Ppat_construct "Ok" (lib/build_path_prefix_map.ml[70,2815+17]..[70,2815+19])
                                  Some
                                    []
                                    pattern (lib/build_path_prefix_map.ml[70,2815+20]..[70,2815+26])
                                      Ppat_var "source" (lib/build_path_prefix_map.ml[70,2815+20]..[70,2815+26])
                              ]
                            expression (lib/build_path_prefix_map.ml[70,2815+30]..[70,2815+51])
                              Pexp_construct "Ok" (lib/build_path_prefix_map.ml[70,2815+30]..[70,2815+32])
                              Some
                                expression (lib/build_path_prefix_map.ml[70,2815+33]..[70,2815+51])
                                  Pexp_record
                                  [
                                    "target" (lib/build_path_prefix_map.ml[70,2815+35]..[70,2815+41]) ghost
                                      expression (lib/build_path_prefix_map.ml[70,2815+35]..[70,2815+41])
                                        Pexp_ident "target" (lib/build_path_prefix_map.ml[70,2815+35]..[70,2815+41])
                                    "source" (lib/build_path_prefix_map.ml[70,2815+43]..[70,2815+49]) ghost
                                      expression (lib/build_path_prefix_map.ml[70,2815+43]..[70,2815+49])
                                        Pexp_ident "source" (lib/build_path_prefix_map.ml[70,2815+43]..[70,2815+49])
                                  ]
                                  None
                          <case>
                            pattern (lib/build_path_prefix_map.ml[71,2867+6]..[71,2867+51])
                              Ppat_or
                              pattern (lib/build_path_prefix_map.ml[71,2867+6]..[71,2867+27])
                                Ppat_tuple
                                [
                                  pattern (lib/build_path_prefix_map.ml[71,2867+7]..[71,2867+23])
                                    Ppat_alias "err" (lib/build_path_prefix_map.ml[71,2867+19]..[71,2867+22])
                                    pattern (lib/build_path_prefix_map.ml[71,2867+8]..[71,2867+15])
                                      Ppat_construct "Error" (lib/build_path_prefix_map.ml[71,2867+8]..[71,2867+13])
                                      Some
                                        []
                                        pattern (lib/build_path_prefix_map.ml[71,2867+14]..[71,2867+15])
                                          Ppat_any
                                  pattern (lib/build_path_prefix_map.ml[71,2867+25]..[71,2867+26])
                                    Ppat_any
                                ]
                              pattern (lib/build_path_prefix_map.ml[71,2867+30]..[71,2867+51])
                                Ppat_tuple
                                [
                                  pattern (lib/build_path_prefix_map.ml[71,2867+31]..[71,2867+32])
                                    Ppat_any
                                  pattern (lib/build_path_prefix_map.ml[71,2867+34]..[71,2867+50])
                                    Ppat_alias "err" (lib/build_path_prefix_map.ml[71,2867+46]..[71,2867+49])
                                    pattern (lib/build_path_prefix_map.ml[71,2867+35]..[71,2867+42])
                                      Ppat_construct "Error" (lib/build_path_prefix_map.ml[71,2867+35]..[71,2867+40])
                                      Some
                                        []
                                        pattern (lib/build_path_prefix_map.ml[71,2867+41]..[71,2867+42])
                                          Ppat_any
                                ]
                            expression (lib/build_path_prefix_map.ml[71,2867+55]..[71,2867+58])
                              Pexp_ident "err" (lib/build_path_prefix_map.ml[71,2867+55]..[71,2867+58])
                        ]
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[73,2927+0]..[73,2927+27])
    Pstr_type Rec
    [
      type_declaration "map" (lib/build_path_prefix_map.ml[73,2927+5]..[73,2927+8]) (lib/build_path_prefix_map.ml[73,2927+0]..[73,2927+27])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/build_path_prefix_map.ml[73,2927+11]..[73,2927+27])
              Ptyp_constr "list" (lib/build_path_prefix_map.ml[73,2927+23]..[73,2927+27])
              [
                core_type (lib/build_path_prefix_map.ml[73,2927+11]..[73,2927+22])
                  Ptyp_constr "option" (lib/build_path_prefix_map.ml[73,2927+16]..[73,2927+22])
                  [
                    core_type (lib/build_path_prefix_map.ml[73,2927+11]..[73,2927+15])
                      Ptyp_constr "pair" (lib/build_path_prefix_map.ml[73,2927+11]..[73,2927+15])
                      []
                  ]
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[75,2956+0]..[81,3091+22])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[75,2956+4]..[75,2956+14])
          Ppat_var "encode_map" (lib/build_path_prefix_map.ml[75,2956+4]..[75,2956+14])
        expression (lib/build_path_prefix_map.ml[75,2956+15]..[81,3091+22]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[75,2956+15]..[75,2956+18])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[75,2956+15]..[75,2956+18])
                Ppat_var "map" (lib/build_path_prefix_map.ml[75,2956+15]..[75,2956+18])
          ]
          None
          Pfunction_body
            expression (lib/build_path_prefix_map.ml[76,2977+2]..[81,3091+22])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lib/build_path_prefix_map.ml[76,2977+6]..[76,2977+17])
                    Ppat_var "encode_elem" (lib/build_path_prefix_map.ml[76,2977+6]..[76,2977+17])
                  expression (lib/build_path_prefix_map.ml[76,2977+20]..[78,3023+35])
                    Pexp_function
                    []
                    None
                    Pfunction_cases (lib/build_path_prefix_map.ml[76,2977+20]..[78,3023+35])
                      [
                        <case>
                          pattern (lib/build_path_prefix_map.ml[77,3006+6]..[77,3006+10])
                            Ppat_construct "None" (lib/build_path_prefix_map.ml[77,3006+6]..[77,3006+10])
                            None
                          expression (lib/build_path_prefix_map.ml[77,3006+14]..[77,3006+16])
                            Pexp_constant PConst_string("",(lib/build_path_prefix_map.ml[77,3006+15]..[77,3006+15]),None)
                        <case>
                          pattern (lib/build_path_prefix_map.ml[78,3023+6]..[78,3023+15])
                            Ppat_construct "Some" (lib/build_path_prefix_map.ml[78,3023+6]..[78,3023+10])
                            Some
                              []
                              pattern (lib/build_path_prefix_map.ml[78,3023+11]..[78,3023+15])
                                Ppat_var "pair" (lib/build_path_prefix_map.ml[78,3023+11]..[78,3023+15])
                          expression (lib/build_path_prefix_map.ml[78,3023+19]..[78,3023+35])
                            Pexp_apply
                            expression (lib/build_path_prefix_map.ml[78,3023+19]..[78,3023+30])
                              Pexp_ident "encode_pair" (lib/build_path_prefix_map.ml[78,3023+19]..[78,3023+30])
                            [
                              <arg>
                              Nolabel
                                expression (lib/build_path_prefix_map.ml[78,3023+31]..[78,3023+35])
                                  Pexp_ident "pair" (lib/build_path_prefix_map.ml[78,3023+31]..[78,3023+35])
                            ]
                      ]
              ]
              expression (lib/build_path_prefix_map.ml[80,3064+2]..[81,3091+22])
                Pexp_apply
                expression (lib/build_path_prefix_map.ml[81,3091+2]..[81,3091+4])
                  Pexp_ident "|>" (lib/build_path_prefix_map.ml[81,3091+2]..[81,3091+4])
                [
                  <arg>
                  Nolabel
                    expression (lib/build_path_prefix_map.ml[80,3064+2]..[80,3064+26])
                      Pexp_apply
                      expression (lib/build_path_prefix_map.ml[80,3064+2]..[80,3064+10])
                        Pexp_ident "List.map" (lib/build_path_prefix_map.ml[80,3064+2]..[80,3064+10])
                      [
                        <arg>
                        Nolabel
                          expression (lib/build_path_prefix_map.ml[80,3064+11]..[80,3064+22])
                            Pexp_ident "encode_elem" (lib/build_path_prefix_map.ml[80,3064+11]..[80,3064+22])
                        <arg>
                        Nolabel
                          expression (lib/build_path_prefix_map.ml[80,3064+23]..[80,3064+26])
                            Pexp_ident "map" (lib/build_path_prefix_map.ml[80,3064+23]..[80,3064+26])
                      ]
                  <arg>
                  Nolabel
                    expression (lib/build_path_prefix_map.ml[81,3091+5]..[81,3091+22])
                      Pexp_apply
                      expression (lib/build_path_prefix_map.ml[81,3091+5]..[81,3091+18])
                        Pexp_ident "String.concat" (lib/build_path_prefix_map.ml[81,3091+5]..[81,3091+18])
                      [
                        <arg>
                        Nolabel
                          expression (lib/build_path_prefix_map.ml[81,3091+19]..[81,3091+22])
                            Pexp_constant PConst_string(":",(lib/build_path_prefix_map.ml[81,3091+20]..[81,3091+21]),None)
                      ]
                ]
    ]
  structure_item (lib/build_path_prefix_map.ml[83,3115+0]..[96,3505+17])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[83,3115+4]..[83,3115+14])
          Ppat_var "decode_map" (lib/build_path_prefix_map.ml[83,3115+4]..[83,3115+14])
        expression (lib/build_path_prefix_map.ml[83,3115+15]..[96,3505+17]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[83,3115+15]..[83,3115+18])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[83,3115+15]..[83,3115+18])
                Ppat_var "str" (lib/build_path_prefix_map.ml[83,3115+15]..[83,3115+18])
          ]
          None
          Pfunction_body
            expression (lib/build_path_prefix_map.ml[84,3136+2]..[96,3505+17])
              Pexp_letexception
              extension_constructor (lib/build_path_prefix_map.ml[84,3136+16]..[84,3136+41])
                pext_name = "Shortcut"
                pext_kind =
                  Pext_decl
                    [
                      core_type (lib/build_path_prefix_map.ml[84,3136+28]..[84,3136+41])
                        Ptyp_constr "error_message" (lib/build_path_prefix_map.ml[84,3136+28]..[84,3136+41])
                        []
                    ]
                    None
              expression (lib/build_path_prefix_map.ml[85,3181+2]..[96,3505+17])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lib/build_path_prefix_map.ml[85,3181+6]..[85,3181+21])
                      Ppat_var "decode_or_empty" (lib/build_path_prefix_map.ml[85,3181+6]..[85,3181+21])
                    expression (lib/build_path_prefix_map.ml[85,3181+24]..[91,3358+9])
                      Pexp_function
                      []
                      None
                      Pfunction_cases (lib/build_path_prefix_map.ml[85,3181+24]..[91,3358+9])
                        [
                          <case>
                            pattern (lib/build_path_prefix_map.ml[86,3214+6]..[86,3214+8])
                              Ppat_constant PConst_string("",(lib/build_path_prefix_map.ml[86,3214+7]..[86,3214+7]),None)
                            expression (lib/build_path_prefix_map.ml[86,3214+12]..[86,3214+16])
                              Pexp_construct "None" (lib/build_path_prefix_map.ml[86,3214+12]..[86,3214+16])
                              None
                          <case>
                            pattern (lib/build_path_prefix_map.ml[87,3231+6]..[87,3231+10])
                              Ppat_var "pair" (lib/build_path_prefix_map.ml[87,3231+6]..[87,3231+10])
                            expression (lib/build_path_prefix_map.ml[88,3245+6]..[91,3358+9])
                              Pexp_match
                              expression (lib/build_path_prefix_map.ml[88,3245+18]..[88,3245+34])
                                Pexp_apply
                                expression (lib/build_path_prefix_map.ml[88,3245+18]..[88,3245+29])
                                  Pexp_ident "decode_pair" (lib/build_path_prefix_map.ml[88,3245+18]..[88,3245+29])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/build_path_prefix_map.ml[88,3245+30]..[88,3245+34])
                                      Pexp_ident "pair" (lib/build_path_prefix_map.ml[88,3245+30]..[88,3245+34])
                                ]
                              [
                                <case>
                                  pattern (lib/build_path_prefix_map.ml[89,3285+10]..[89,3285+16])
                                    Ppat_construct "Ok" (lib/build_path_prefix_map.ml[89,3285+10]..[89,3285+12])
                                    Some
                                      []
                                      pattern (lib/build_path_prefix_map.ml[89,3285+13]..[89,3285+16])
                                        Ppat_var "str" (lib/build_path_prefix_map.ml[89,3285+13]..[89,3285+16])
                                  expression (lib/build_path_prefix_map.ml[89,3285+20]..[89,3285+28])
                                    Pexp_construct "Some" (lib/build_path_prefix_map.ml[89,3285+20]..[89,3285+24])
                                    Some
                                      expression (lib/build_path_prefix_map.ml[89,3285+25]..[89,3285+28])
                                        Pexp_ident "str" (lib/build_path_prefix_map.ml[89,3285+25]..[89,3285+28])
                                <case>
                                  pattern (lib/build_path_prefix_map.ml[90,3314+10]..[90,3314+19])
                                    Ppat_construct "Error" (lib/build_path_prefix_map.ml[90,3314+10]..[90,3314+15])
                                    Some
                                      []
                                      pattern (lib/build_path_prefix_map.ml[90,3314+16]..[90,3314+19])
                                        Ppat_var "err" (lib/build_path_prefix_map.ml[90,3314+16]..[90,3314+19])
                                  expression (lib/build_path_prefix_map.ml[90,3314+23]..[90,3314+43])
                                    Pexp_apply
                                    expression (lib/build_path_prefix_map.ml[90,3314+23]..[90,3314+28])
                                      Pexp_ident "raise" (lib/build_path_prefix_map.ml[90,3314+23]..[90,3314+28])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/build_path_prefix_map.ml[90,3314+29]..[90,3314+43])
                                          Pexp_construct "Shortcut" (lib/build_path_prefix_map.ml[90,3314+30]..[90,3314+38])
                                          Some
                                            expression (lib/build_path_prefix_map.ml[90,3314+39]..[90,3314+42])
                                              Pexp_ident "err" (lib/build_path_prefix_map.ml[90,3314+39]..[90,3314+42])
                                    ]
                              ]
                        ]
                ]
                expression (lib/build_path_prefix_map.ml[93,3373+2]..[96,3505+17])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lib/build_path_prefix_map.ml[93,3373+6]..[93,3373+11])
                        Ppat_var "pairs" (lib/build_path_prefix_map.ml[93,3373+6]..[93,3373+11])
                      expression (lib/build_path_prefix_map.ml[93,3373+14]..[93,3373+42])
                        Pexp_apply
                        expression (lib/build_path_prefix_map.ml[93,3373+14]..[93,3373+34])
                          Pexp_ident "String.split_on_char" (lib/build_path_prefix_map.ml[93,3373+14]..[93,3373+34])
                        [
                          <arg>
                          Nolabel
                            expression (lib/build_path_prefix_map.ml[93,3373+35]..[93,3373+38])
                              Pexp_constant PConst_char 3a
                          <arg>
                          Nolabel
                            expression (lib/build_path_prefix_map.ml[93,3373+39]..[93,3373+42])
                              Pexp_ident "str" (lib/build_path_prefix_map.ml[93,3373+39]..[93,3373+42])
                        ]
                  ]
                  expression (lib/build_path_prefix_map.ml[94,3419+2]..[96,3505+17])
                    Pexp_match
                    expression (lib/build_path_prefix_map.ml[94,3419+8]..[94,3419+38])
                      Pexp_apply
                      expression (lib/build_path_prefix_map.ml[94,3419+8]..[94,3419+16])
                        Pexp_ident "List.map" (lib/build_path_prefix_map.ml[94,3419+8]..[94,3419+16])
                      [
                        <arg>
                        Nolabel
                          expression (lib/build_path_prefix_map.ml[94,3419+17]..[94,3419+32])
                            Pexp_ident "decode_or_empty" (lib/build_path_prefix_map.ml[94,3419+17]..[94,3419+32])
                        <arg>
                        Nolabel
                          expression (lib/build_path_prefix_map.ml[94,3419+33]..[94,3419+38])
                            Pexp_ident "pairs" (lib/build_path_prefix_map.ml[94,3419+33]..[94,3419+38])
                      ]
                    [
                      <case>
                        pattern (lib/build_path_prefix_map.ml[95,3463+4]..[95,3463+28])
                          Ppat_exception
                          pattern (lib/build_path_prefix_map.ml[95,3463+14]..[95,3463+28])
                            Ppat_construct "Shortcut" (lib/build_path_prefix_map.ml[95,3463+15]..[95,3463+23])
                            Some
                              []
                              pattern (lib/build_path_prefix_map.ml[95,3463+24]..[95,3463+27])
                                Ppat_var "err" (lib/build_path_prefix_map.ml[95,3463+24]..[95,3463+27])
                        expression (lib/build_path_prefix_map.ml[95,3463+32]..[95,3463+41])
                          Pexp_construct "Error" (lib/build_path_prefix_map.ml[95,3463+32]..[95,3463+37])
                          Some
                            expression (lib/build_path_prefix_map.ml[95,3463+38]..[95,3463+41])
                              Pexp_ident "err" (lib/build_path_prefix_map.ml[95,3463+38]..[95,3463+41])
                      <case>
                        pattern (lib/build_path_prefix_map.ml[96,3505+4]..[96,3505+7])
                          Ppat_var "map" (lib/build_path_prefix_map.ml[96,3505+4]..[96,3505+7])
                        expression (lib/build_path_prefix_map.ml[96,3505+11]..[96,3505+17])
                          Pexp_construct "Ok" (lib/build_path_prefix_map.ml[96,3505+11]..[96,3505+13])
                          Some
                            expression (lib/build_path_prefix_map.ml[96,3505+14]..[96,3505+17])
                              Pexp_ident "map" (lib/build_path_prefix_map.ml[96,3505+14]..[96,3505+17])
                    ]
    ]
  structure_item (lib/build_path_prefix_map.ml[98,3524+0]..[107,3931+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[98,3524+4]..[98,3524+15])
          Ppat_var "make_target" (lib/build_path_prefix_map.ml[98,3524+4]..[98,3524+15])
        expression (lib/build_path_prefix_map.ml[98,3524+16]..[107,3931+13]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[98,3524+16]..[98,3524+20])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[98,3524+16]..[98,3524+20])
                Ppat_var "path" (lib/build_path_prefix_map.ml[98,3524+16]..[98,3524+20])
          ]
          Some
            Pconstraint
              core_type (lib/build_path_prefix_map.ml[98,3524+23]..[98,3524+49])
                Ptyp_arrow
                Nolabel
                core_type (lib/build_path_prefix_map.ml[98,3524+23]..[98,3524+34])
                  Ptyp_constr "option" (lib/build_path_prefix_map.ml[98,3524+28]..[98,3524+34])
                  [
                    core_type (lib/build_path_prefix_map.ml[98,3524+23]..[98,3524+27])
                      Ptyp_constr "pair" (lib/build_path_prefix_map.ml[98,3524+23]..[98,3524+27])
                      []
                  ]
                core_type (lib/build_path_prefix_map.ml[98,3524+38]..[98,3524+49])
                  Ptyp_constr "option" (lib/build_path_prefix_map.ml[98,3524+43]..[98,3524+49])
                  [
                    core_type (lib/build_path_prefix_map.ml[98,3524+38]..[98,3524+42])
                      Ptyp_constr "path" (lib/build_path_prefix_map.ml[98,3524+38]..[98,3524+42])
                      []
                  ]
          Pfunction_cases (lib/build_path_prefix_map.ml[98,3524+52]..[107,3931+13])
            [
              <case>
                pattern (lib/build_path_prefix_map.ml[99,3585+4]..[99,3585+8])
                  Ppat_construct "None" (lib/build_path_prefix_map.ml[99,3585+4]..[99,3585+8])
                  None
                expression (lib/build_path_prefix_map.ml[99,3585+12]..[99,3585+16])
                  Pexp_construct "None" (lib/build_path_prefix_map.ml[99,3585+12]..[99,3585+16])
                  None
              <case>
                pattern (lib/build_path_prefix_map.ml[100,3602+4]..[100,3602+27])
                  Ppat_construct "Some" (lib/build_path_prefix_map.ml[100,3602+4]..[100,3602+8])
                  Some
                    []
                    pattern (lib/build_path_prefix_map.ml[100,3602+9]..[100,3602+27])
                      Ppat_record Closed
                      [
                        "target" (lib/build_path_prefix_map.ml[100,3602+11]..[100,3602+17]) ghost
                          pattern (lib/build_path_prefix_map.ml[100,3602+11]..[100,3602+17])
                            Ppat_var "target" (lib/build_path_prefix_map.ml[100,3602+11]..[100,3602+17])
                        "source" (lib/build_path_prefix_map.ml[100,3602+19]..[100,3602+25]) ghost
                          pattern (lib/build_path_prefix_map.ml[100,3602+19]..[100,3602+25])
                            Ppat_var "source" (lib/build_path_prefix_map.ml[100,3602+19]..[100,3602+25])
                      ]
                expression (lib/build_path_prefix_map.ml[101,3633+4]..[107,3931+13])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lib/build_path_prefix_map.ml[101,3633+8]..[101,3633+17])
                        Ppat_var "is_prefix" (lib/build_path_prefix_map.ml[101,3633+8]..[101,3633+17])
                      expression (lib/build_path_prefix_map.ml[102,3653+6]..[103,3702+73])
                        Pexp_apply
                        expression (lib/build_path_prefix_map.ml[103,3702+8]..[103,3702+10])
                          Pexp_ident "&&" (lib/build_path_prefix_map.ml[103,3702+8]..[103,3702+10])
                        [
                          <arg>
                          Nolabel
                            expression (lib/build_path_prefix_map.ml[102,3653+6]..[102,3653+48])
                              Pexp_apply
                              expression (lib/build_path_prefix_map.ml[102,3653+27]..[102,3653+29])
                                Pexp_ident "<=" (lib/build_path_prefix_map.ml[102,3653+27]..[102,3653+29])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[102,3653+6]..[102,3653+26])
                                    Pexp_apply
                                    expression (lib/build_path_prefix_map.ml[102,3653+6]..[102,3653+19])
                                      Pexp_ident "String.length" (lib/build_path_prefix_map.ml[102,3653+6]..[102,3653+19])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/build_path_prefix_map.ml[102,3653+20]..[102,3653+26])
                                          Pexp_ident "source" (lib/build_path_prefix_map.ml[102,3653+20]..[102,3653+26])
                                    ]
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[102,3653+30]..[102,3653+48])
                                    Pexp_apply
                                    expression (lib/build_path_prefix_map.ml[102,3653+30]..[102,3653+43])
                                      Pexp_ident "String.length" (lib/build_path_prefix_map.ml[102,3653+30]..[102,3653+43])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/build_path_prefix_map.ml[102,3653+44]..[102,3653+48])
                                          Pexp_ident "path" (lib/build_path_prefix_map.ml[102,3653+44]..[102,3653+48])
                                    ]
                              ]
                          <arg>
                          Nolabel
                            expression (lib/build_path_prefix_map.ml[103,3702+11]..[103,3702+73])
                              Pexp_apply
                              expression (lib/build_path_prefix_map.ml[103,3702+11]..[103,3702+23])
                                Pexp_ident "String.equal" (lib/build_path_prefix_map.ml[103,3702+11]..[103,3702+23])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[103,3702+24]..[103,3702+30])
                                    Pexp_ident "source" (lib/build_path_prefix_map.ml[103,3702+24]..[103,3702+30])
                                <arg>
                                Nolabel
                                  expression (lib/build_path_prefix_map.ml[103,3702+31]..[103,3702+73])
                                    Pexp_apply
                                    expression (lib/build_path_prefix_map.ml[103,3702+32]..[103,3702+42])
                                      Pexp_ident "String.sub" (lib/build_path_prefix_map.ml[103,3702+32]..[103,3702+42])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/build_path_prefix_map.ml[103,3702+43]..[103,3702+47])
                                          Pexp_ident "path" (lib/build_path_prefix_map.ml[103,3702+43]..[103,3702+47])
                                      <arg>
                                      Nolabel
                                        expression (lib/build_path_prefix_map.ml[103,3702+48]..[103,3702+49])
                                          Pexp_constant PConst_int (0,None)
                                      <arg>
                                      Nolabel
                                        expression (lib/build_path_prefix_map.ml[103,3702+50]..[103,3702+72])
                                          Pexp_apply
                                          expression (lib/build_path_prefix_map.ml[103,3702+51]..[103,3702+64])
                                            Pexp_ident "String.length" (lib/build_path_prefix_map.ml[103,3702+51]..[103,3702+64])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/build_path_prefix_map.ml[103,3702+65]..[103,3702+71])
                                                Pexp_ident "source" (lib/build_path_prefix_map.ml[103,3702+65]..[103,3702+71])
                                          ]
                                    ]
                              ]
                        ]
                  ]
                  expression (lib/build_path_prefix_map.ml[104,3779+4]..[107,3931+13])
                    Pexp_ifthenelse
                    expression (lib/build_path_prefix_map.ml[104,3779+7]..[104,3779+16])
                      Pexp_ident "is_prefix" (lib/build_path_prefix_map.ml[104,3779+7]..[104,3779+16])
                    expression (lib/build_path_prefix_map.ml[105,3801+6]..[106,3862+68])
                      Pexp_construct "Some" (lib/build_path_prefix_map.ml[105,3801+6]..[105,3801+10])
                      Some
                        expression (lib/build_path_prefix_map.ml[105,3801+11]..[106,3862+68])
                          Pexp_apply
                          expression (lib/build_path_prefix_map.ml[105,3801+19]..[105,3801+20])
                            Pexp_ident "^" (lib/build_path_prefix_map.ml[105,3801+19]..[105,3801+20])
                          [
                            <arg>
                            Nolabel
                              expression (lib/build_path_prefix_map.ml[105,3801+12]..[105,3801+18])
                                Pexp_ident "target" (lib/build_path_prefix_map.ml[105,3801+12]..[105,3801+18])
                            <arg>
                            Nolabel
                              expression (lib/build_path_prefix_map.ml[105,3801+21]..[106,3862+67])
                                Pexp_apply
                                expression (lib/build_path_prefix_map.ml[105,3801+22]..[105,3801+32])
                                  Pexp_ident "String.sub" (lib/build_path_prefix_map.ml[105,3801+22]..[105,3801+32])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/build_path_prefix_map.ml[105,3801+33]..[105,3801+37])
                                      Pexp_ident "path" (lib/build_path_prefix_map.ml[105,3801+33]..[105,3801+37])
                                  <arg>
                                  Nolabel
                                    expression (lib/build_path_prefix_map.ml[105,3801+38]..[105,3801+60])
                                      Pexp_apply
                                      expression (lib/build_path_prefix_map.ml[105,3801+39]..[105,3801+52])
                                        Pexp_ident "String.length" (lib/build_path_prefix_map.ml[105,3801+39]..[105,3801+52])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/build_path_prefix_map.ml[105,3801+53]..[105,3801+59])
                                            Pexp_ident "source" (lib/build_path_prefix_map.ml[105,3801+53]..[105,3801+59])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lib/build_path_prefix_map.ml[106,3862+23]..[106,3862+66])
                                      Pexp_apply
                                      expression (lib/build_path_prefix_map.ml[106,3862+43]..[106,3862+44])
                                        Pexp_ident "-" (lib/build_path_prefix_map.ml[106,3862+43]..[106,3862+44])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/build_path_prefix_map.ml[106,3862+24]..[106,3862+42])
                                            Pexp_apply
                                            expression (lib/build_path_prefix_map.ml[106,3862+24]..[106,3862+37])
                                              Pexp_ident "String.length" (lib/build_path_prefix_map.ml[106,3862+24]..[106,3862+37])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/build_path_prefix_map.ml[106,3862+38]..[106,3862+42])
                                                  Pexp_ident "path" (lib/build_path_prefix_map.ml[106,3862+38]..[106,3862+42])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/build_path_prefix_map.ml[106,3862+45]..[106,3862+65])
                                            Pexp_apply
                                            expression (lib/build_path_prefix_map.ml[106,3862+45]..[106,3862+58])
                                              Pexp_ident "String.length" (lib/build_path_prefix_map.ml[106,3862+45]..[106,3862+58])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/build_path_prefix_map.ml[106,3862+59]..[106,3862+65])
                                                  Pexp_ident "source" (lib/build_path_prefix_map.ml[106,3862+59]..[106,3862+65])
                                            ]
                                      ]
                                ]
                          ]
                    Some
                      expression (lib/build_path_prefix_map.ml[107,3931+9]..[107,3931+13])
                        Pexp_construct "None" (lib/build_path_prefix_map.ml[107,3931+9]..[107,3931+13])
                        None
            ]
    ]
  structure_item (lib/build_path_prefix_map.ml[109,3946+0]..[110,3982+56])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[109,3946+4]..[109,3946+17])
          Ppat_var "rewrite_first" (lib/build_path_prefix_map.ml[109,3946+4]..[109,3946+17])
        expression (lib/build_path_prefix_map.ml[109,3946+18]..[110,3982+56]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[109,3946+18]..[109,3946+28])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[109,3946+18]..[109,3946+28])
                Ppat_var "prefix_map" (lib/build_path_prefix_map.ml[109,3946+18]..[109,3946+28])
            Pparam_val (lib/build_path_prefix_map.ml[109,3946+29]..[109,3946+33])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[109,3946+29]..[109,3946+33])
                Ppat_var "path" (lib/build_path_prefix_map.ml[109,3946+29]..[109,3946+33])
          ]
          None
          Pfunction_body
            expression (lib/build_path_prefix_map.ml[110,3982+2]..[110,3982+56])
              Pexp_apply
              expression (lib/build_path_prefix_map.ml[110,3982+2]..[110,3982+15])
                Pexp_ident "List.find_map" (lib/build_path_prefix_map.ml[110,3982+2]..[110,3982+15])
              [
                <arg>
                Nolabel
                  expression (lib/build_path_prefix_map.ml[110,3982+16]..[110,3982+34])
                    Pexp_apply
                    expression (lib/build_path_prefix_map.ml[110,3982+17]..[110,3982+28])
                      Pexp_ident "make_target" (lib/build_path_prefix_map.ml[110,3982+17]..[110,3982+28])
                    [
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[110,3982+29]..[110,3982+33])
                          Pexp_ident "path" (lib/build_path_prefix_map.ml[110,3982+29]..[110,3982+33])
                    ]
                <arg>
                Nolabel
                  expression (lib/build_path_prefix_map.ml[110,3982+35]..[110,3982+56])
                    Pexp_apply
                    expression (lib/build_path_prefix_map.ml[110,3982+36]..[110,3982+44])
                      Pexp_ident "List.rev" (lib/build_path_prefix_map.ml[110,3982+36]..[110,3982+44])
                    [
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[110,3982+45]..[110,3982+55])
                          Pexp_ident "prefix_map" (lib/build_path_prefix_map.ml[110,3982+45]..[110,3982+55])
                    ]
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[112,4040+0]..[113,4074+58])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[112,4040+4]..[112,4040+15])
          Ppat_var "rewrite_all" (lib/build_path_prefix_map.ml[112,4040+4]..[112,4040+15])
        expression (lib/build_path_prefix_map.ml[112,4040+16]..[113,4074+58]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[112,4040+16]..[112,4040+26])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[112,4040+16]..[112,4040+26])
                Ppat_var "prefix_map" (lib/build_path_prefix_map.ml[112,4040+16]..[112,4040+26])
            Pparam_val (lib/build_path_prefix_map.ml[112,4040+27]..[112,4040+31])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[112,4040+27]..[112,4040+31])
                Ppat_var "path" (lib/build_path_prefix_map.ml[112,4040+27]..[112,4040+31])
          ]
          None
          Pfunction_body
            expression (lib/build_path_prefix_map.ml[113,4074+2]..[113,4074+58])
              Pexp_apply
              expression (lib/build_path_prefix_map.ml[113,4074+2]..[113,4074+17])
                Pexp_ident "List.filter_map" (lib/build_path_prefix_map.ml[113,4074+2]..[113,4074+17])
              [
                <arg>
                Nolabel
                  expression (lib/build_path_prefix_map.ml[113,4074+18]..[113,4074+36])
                    Pexp_apply
                    expression (lib/build_path_prefix_map.ml[113,4074+19]..[113,4074+30])
                      Pexp_ident "make_target" (lib/build_path_prefix_map.ml[113,4074+19]..[113,4074+30])
                    [
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[113,4074+31]..[113,4074+35])
                          Pexp_ident "path" (lib/build_path_prefix_map.ml[113,4074+31]..[113,4074+35])
                    ]
                <arg>
                Nolabel
                  expression (lib/build_path_prefix_map.ml[113,4074+37]..[113,4074+58])
                    Pexp_apply
                    expression (lib/build_path_prefix_map.ml[113,4074+38]..[113,4074+46])
                      Pexp_ident "List.rev" (lib/build_path_prefix_map.ml[113,4074+38]..[113,4074+46])
                    [
                      <arg>
                      Nolabel
                        expression (lib/build_path_prefix_map.ml[113,4074+47]..[113,4074+57])
                          Pexp_ident "prefix_map" (lib/build_path_prefix_map.ml[113,4074+47]..[113,4074+57])
                    ]
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[115,4134+0]..[118,4224+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[115,4134+4]..[115,4134+11])
          Ppat_var "rewrite" (lib/build_path_prefix_map.ml[115,4134+4]..[115,4134+11])
        expression (lib/build_path_prefix_map.ml[115,4134+12]..[118,4224+21]) ghost
          Pexp_function
          [
            Pparam_val (lib/build_path_prefix_map.ml[115,4134+12]..[115,4134+22])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[115,4134+12]..[115,4134+22])
                Ppat_var "prefix_map" (lib/build_path_prefix_map.ml[115,4134+12]..[115,4134+22])
            Pparam_val (lib/build_path_prefix_map.ml[115,4134+23]..[115,4134+27])
              Nolabel
              None
              pattern (lib/build_path_prefix_map.ml[115,4134+23]..[115,4134+27])
                Ppat_var "path" (lib/build_path_prefix_map.ml[115,4134+23]..[115,4134+27])
          ]
          None
          Pfunction_body
            expression (lib/build_path_prefix_map.ml[116,4164+2]..[118,4224+21])
              Pexp_match
              expression (lib/build_path_prefix_map.ml[116,4164+8]..[116,4164+37])
                Pexp_apply
                expression (lib/build_path_prefix_map.ml[116,4164+8]..[116,4164+21])
                  Pexp_ident "rewrite_first" (lib/build_path_prefix_map.ml[116,4164+8]..[116,4164+21])
                [
                  <arg>
                  Nolabel
                    expression (lib/build_path_prefix_map.ml[116,4164+22]..[116,4164+32])
                      Pexp_ident "prefix_map" (lib/build_path_prefix_map.ml[116,4164+22]..[116,4164+32])
                  <arg>
                  Nolabel
                    expression (lib/build_path_prefix_map.ml[116,4164+33]..[116,4164+37])
                      Pexp_ident "path" (lib/build_path_prefix_map.ml[116,4164+33]..[116,4164+37])
                ]
              [
                <case>
                  pattern (lib/build_path_prefix_map.ml[117,4207+4]..[117,4207+8])
                    Ppat_construct "None" (lib/build_path_prefix_map.ml[117,4207+4]..[117,4207+8])
                    None
                  expression (lib/build_path_prefix_map.ml[117,4207+12]..[117,4207+16])
                    Pexp_ident "path" (lib/build_path_prefix_map.ml[117,4207+12]..[117,4207+16])
                <case>
                  pattern (lib/build_path_prefix_map.ml[118,4224+4]..[118,4224+13])
                    Ppat_construct "Some" (lib/build_path_prefix_map.ml[118,4224+4]..[118,4224+8])
                    Some
                      []
                      pattern (lib/build_path_prefix_map.ml[118,4224+9]..[118,4224+13])
                        Ppat_var "path" (lib/build_path_prefix_map.ml[118,4224+9]..[118,4224+13])
                  expression (lib/build_path_prefix_map.ml[118,4224+17]..[118,4224+21])
                    Pexp_ident "path" (lib/build_path_prefix_map.ml[118,4224+17]..[118,4224+21])
              ]
    ]
]

type path = string
type path_prefix = string
type error_message = string
let errorf fmt = Printf.ksprintf (fun err -> Error err) fmt
let encode_prefix str =
  let buf = Buffer.create (String.length str) in
  let push_char =
    function
    | '%' -> Buffer.add_string buf "%#"
    | '=' -> Buffer.add_string buf "%+"
    | ':' -> Buffer.add_string buf "%."
    | c -> Buffer.add_char buf c in
  String.iter push_char str; Buffer.contents buf
let decode_prefix str =
  let buf = Buffer.create (String.length str) in
  let rec loop i =
    if i >= (String.length str)
    then Ok (Buffer.contents buf)
    else
      (match str.[i] with
       | '=' | ':' as c -> errorf "invalid character '%c' in key or value" c
       | '%' ->
           let push c = Buffer.add_char buf c; loop (i + 2) in
           if (i + 1) = (String.length str)
           then errorf "invalid encoded string %S (trailing '%%')" str
           else
             (match str.[i + 1] with
              | '#' -> push '%'
              | '+' -> push '='
              | '.' -> push ':'
              | c -> errorf "invalid %%-escaped character '%c'" c)
       | c -> (Buffer.add_char buf c; loop (i + 1))) in
  loop 0
type pair = {
  target: path_prefix ;
  source: path_prefix }
let encode_pair { target; source } =
  String.concat "=" [encode_prefix target; encode_prefix source]
let decode_pair str =
  match String.index str '=' with
  | exception Not_found ->
      errorf "invalid key/value pair %S, no '=' separator" str
  | equal_pos ->
      let encoded_target = String.sub str 0 equal_pos in
      let encoded_source =
        String.sub str (equal_pos + 1)
          (((String.length str) - equal_pos) - 1) in
      (match ((decode_prefix encoded_target), (decode_prefix encoded_source))
       with
       | (Ok target, Ok source) -> Ok { target; source }
       | ((Error _ as err), _) | (_, (Error _ as err)) -> err)
type map = pair option list
let encode_map map =
  let encode_elem = function | None -> "" | Some pair -> encode_pair pair in
  (List.map encode_elem map) |> (String.concat ":")
let decode_map str =
  let exception Shortcut of error_message  in
    let decode_or_empty =
      function
      | "" -> None
      | pair ->
          (match decode_pair pair with
           | Ok str -> Some str
           | Error err -> raise (Shortcut err)) in
    let pairs = String.split_on_char ':' str in
    match List.map decode_or_empty pairs with
    | exception Shortcut err -> Error err
    | map -> Ok map
let make_target path : pair option -> path option=
  function
  | None -> None
  | Some { target; source } ->
      let is_prefix =
        ((String.length source) <= (String.length path)) &&
          (String.equal source (String.sub path 0 (String.length source))) in
      if is_prefix
      then
        Some
          (target ^
             (String.sub path (String.length source)
                ((String.length path) - (String.length source))))
      else None
let rewrite_first prefix_map path =
  List.find_map (make_target path) (List.rev prefix_map)
let rewrite_all prefix_map path =
  List.filter_map (make_target path) (List.rev prefix_map)
let rewrite prefix_map path =
  match rewrite_first prefix_map path with | None -> path | Some path -> path
[
  structure_item (lib/build_path_prefix_map.ml[16,1079+0]..lib/build_path_prefix_map.ml[16,1079+18])
    Tstr_type Rec
    [
      type_declaration path/296 (lib/build_path_prefix_map.ml[16,1079+0]..lib/build_path_prefix_map.ml[16,1079+18])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/build_path_prefix_map.ml[16,1079+12]..lib/build_path_prefix_map.ml[16,1079+18])
              Ttyp_constr "string/15!"
              []
    ]
  structure_item (lib/build_path_prefix_map.ml[17,1098+0]..lib/build_path_prefix_map.ml[17,1098+25])
    Tstr_type Rec
    [
      type_declaration path_prefix/297 (lib/build_path_prefix_map.ml[17,1098+0]..lib/build_path_prefix_map.ml[17,1098+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/build_path_prefix_map.ml[17,1098+19]..lib/build_path_prefix_map.ml[17,1098+25])
              Ttyp_constr "string/15!"
              []
    ]
  structure_item (lib/build_path_prefix_map.ml[18,1124+0]..lib/build_path_prefix_map.ml[18,1124+27])
    Tstr_type Rec
    [
      type_declaration error_message/298 (lib/build_path_prefix_map.ml[18,1124+0]..lib/build_path_prefix_map.ml[18,1124+27])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/build_path_prefix_map.ml[18,1124+21]..lib/build_path_prefix_map.ml[18,1124+27])
              Ttyp_constr "string/15!"
              []
    ]
  structure_item (lib/build_path_prefix_map.ml[20,1153+0]..lib/build_path_prefix_map.ml[20,1153+59])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[20,1153+4]..lib/build_path_prefix_map.ml[20,1153+10])
          Tpat_var "errorf/299"
        expression (lib/build_path_prefix_map.ml[20,1153+11]..lib/build_path_prefix_map.ml[20,1153+59]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[20,1153+11]..lib/build_path_prefix_map.ml[20,1153+14])
                Tpat_var "fmt/301"
          ]
          Tfunction_body
            expression (lib/build_path_prefix_map.ml[20,1153+17]..lib/build_path_prefix_map.ml[20,1153+59])
              Texp_apply
              expression (lib/build_path_prefix_map.ml[20,1153+17]..lib/build_path_prefix_map.ml[20,1153+32])
                Texp_ident "Stdlib!.Printf.ksprintf"
              [
                <arg>
                  Nolabel
                  expression (lib/build_path_prefix_map.ml[20,1153+33]..lib/build_path_prefix_map.ml[20,1153+55])
                    Texp_function
                    [
                      Nolabel
                      Param_pat
                        pattern (lib/build_path_prefix_map.ml[20,1153+38]..lib/build_path_prefix_map.ml[20,1153+41])
                          Tpat_var "err/315"
                    ]
                    Tfunction_body
                      expression (lib/build_path_prefix_map.ml[20,1153+45]..lib/build_path_prefix_map.ml[20,1153+54])
                        Texp_construct "Error"
                        [
                          expression (lib/build_path_prefix_map.ml[20,1153+51]..lib/build_path_prefix_map.ml[20,1153+54])
                            Texp_ident "err/315"
                        ]
                <arg>
                  Nolabel
                  expression (lib/build_path_prefix_map.ml[20,1153+56]..lib/build_path_prefix_map.ml[20,1153+59])
                    Texp_ident "fmt/301"
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[22,1214+0]..lib/build_path_prefix_map.ml[31,1501+21])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[22,1214+4]..lib/build_path_prefix_map.ml[22,1214+17])
          Tpat_var "encode_prefix/339"
        expression (lib/build_path_prefix_map.ml[22,1214+18]..lib/build_path_prefix_map.ml[31,1501+21]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[22,1214+18]..lib/build_path_prefix_map.ml[22,1214+21])
                Tpat_var "str/341"
          ]
          Tfunction_body
            expression (lib/build_path_prefix_map.ml[23,1238+2]..lib/build_path_prefix_map.ml[31,1501+21])
              Texp_let Nonrec
              [
                <def>
                  pattern (lib/build_path_prefix_map.ml[23,1238+6]..lib/build_path_prefix_map.ml[23,1238+9])
                    Tpat_var "buf/342"
                  expression (lib/build_path_prefix_map.ml[23,1238+12]..lib/build_path_prefix_map.ml[23,1238+45])
                    Texp_apply
                    expression (lib/build_path_prefix_map.ml[23,1238+12]..lib/build_path_prefix_map.ml[23,1238+25])
                      Texp_ident "Stdlib!.Buffer.create"
                    [
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[23,1238+26]..lib/build_path_prefix_map.ml[23,1238+45])
                          Texp_apply
                          expression (lib/build_path_prefix_map.ml[23,1238+27]..lib/build_path_prefix_map.ml[23,1238+40])
                            Texp_ident "Stdlib!.String.length"
                          [
                            <arg>
                              Nolabel
                              expression (lib/build_path_prefix_map.ml[23,1238+41]..lib/build_path_prefix_map.ml[23,1238+44])
                                Texp_ident "str/341"
                          ]
                    ]
              ]
              expression (lib/build_path_prefix_map.ml[24,1287+2]..lib/build_path_prefix_map.ml[31,1501+21])
                Texp_let Nonrec
                [
                  <def>
                    pattern (lib/build_path_prefix_map.ml[24,1287+6]..lib/build_path_prefix_map.ml[24,1287+15])
                      Tpat_var "push_char/494"
                    expression (lib/build_path_prefix_map.ml[24,1287+18]..lib/build_path_prefix_map.ml[28,1434+32])
                      Texp_function
                      []
                      Tfunction_cases (lib/build_path_prefix_map.ml[24,1287+18]..lib/build_path_prefix_map.ml[28,1434+32])
                        [
                          <case>
                            pattern (lib/build_path_prefix_map.ml[25,1314+6]..lib/build_path_prefix_map.ml[25,1314+9])
                              Tpat_constant Const_char 25
                            expression (lib/build_path_prefix_map.ml[25,1314+13]..lib/build_path_prefix_map.ml[25,1314+39])
                              Texp_apply
                              expression (lib/build_path_prefix_map.ml[25,1314+13]..lib/build_path_prefix_map.ml[25,1314+30])
                                Texp_ident "Stdlib!.Buffer.add_string"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[25,1314+31]..lib/build_path_prefix_map.ml[25,1314+34])
                                    Texp_ident "buf/342"
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[25,1314+35]..lib/build_path_prefix_map.ml[25,1314+39])
                                    Texp_constant Const_string("%#",(lib/build_path_prefix_map.ml[25,1314+36]..lib/build_path_prefix_map.ml[25,1314+38]),None)
                              ]
                          <case>
                            pattern (lib/build_path_prefix_map.ml[26,1354+6]..lib/build_path_prefix_map.ml[26,1354+9])
                              Tpat_constant Const_char 3d
                            expression (lib/build_path_prefix_map.ml[26,1354+13]..lib/build_path_prefix_map.ml[26,1354+39])
                              Texp_apply
                              expression (lib/build_path_prefix_map.ml[26,1354+13]..lib/build_path_prefix_map.ml[26,1354+30])
                                Texp_ident "Stdlib!.Buffer.add_string"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[26,1354+31]..lib/build_path_prefix_map.ml[26,1354+34])
                                    Texp_ident "buf/342"
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[26,1354+35]..lib/build_path_prefix_map.ml[26,1354+39])
                                    Texp_constant Const_string("%+",(lib/build_path_prefix_map.ml[26,1354+36]..lib/build_path_prefix_map.ml[26,1354+38]),None)
                              ]
                          <case>
                            pattern (lib/build_path_prefix_map.ml[27,1394+6]..lib/build_path_prefix_map.ml[27,1394+9])
                              Tpat_constant Const_char 3a
                            expression (lib/build_path_prefix_map.ml[27,1394+13]..lib/build_path_prefix_map.ml[27,1394+39])
                              Texp_apply
                              expression (lib/build_path_prefix_map.ml[27,1394+13]..lib/build_path_prefix_map.ml[27,1394+30])
                                Texp_ident "Stdlib!.Buffer.add_string"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[27,1394+31]..lib/build_path_prefix_map.ml[27,1394+34])
                                    Texp_ident "buf/342"
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[27,1394+35]..lib/build_path_prefix_map.ml[27,1394+39])
                                    Texp_constant Const_string("%.",(lib/build_path_prefix_map.ml[27,1394+36]..lib/build_path_prefix_map.ml[27,1394+38]),None)
                              ]
                          <case>
                            pattern (lib/build_path_prefix_map.ml[28,1434+6]..lib/build_path_prefix_map.ml[28,1434+7])
                              Tpat_var "c/496"
                            expression (lib/build_path_prefix_map.ml[28,1434+11]..lib/build_path_prefix_map.ml[28,1434+32])
                              Texp_apply
                              expression (lib/build_path_prefix_map.ml[28,1434+11]..lib/build_path_prefix_map.ml[28,1434+26])
                                Texp_ident "Stdlib!.Buffer.add_char"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[28,1434+27]..lib/build_path_prefix_map.ml[28,1434+30])
                                    Texp_ident "buf/342"
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[28,1434+31]..lib/build_path_prefix_map.ml[28,1434+32])
                                    Texp_ident "c/496"
                              ]
                        ]
                ]
                expression (lib/build_path_prefix_map.ml[30,1472+2]..lib/build_path_prefix_map.ml[31,1501+21])
                  Texp_sequence
                  expression (lib/build_path_prefix_map.ml[30,1472+2]..lib/build_path_prefix_map.ml[30,1472+27])
                    Texp_apply
                    expression (lib/build_path_prefix_map.ml[30,1472+2]..lib/build_path_prefix_map.ml[30,1472+13])
                      Texp_ident "Stdlib!.String.iter"
                    [
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[30,1472+14]..lib/build_path_prefix_map.ml[30,1472+23])
                          Texp_ident "push_char/494"
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[30,1472+24]..lib/build_path_prefix_map.ml[30,1472+27])
                          Texp_ident "str/341"
                    ]
                  expression (lib/build_path_prefix_map.ml[31,1501+2]..lib/build_path_prefix_map.ml[31,1501+21])
                    Texp_apply
                    expression (lib/build_path_prefix_map.ml[31,1501+2]..lib/build_path_prefix_map.ml[31,1501+17])
                      Texp_ident "Stdlib!.Buffer.contents"
                    [
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[31,1501+18]..lib/build_path_prefix_map.ml[31,1501+21])
                          Texp_ident "buf/342"
                    ]
    ]
  structure_item (lib/build_path_prefix_map.ml[33,1524+0]..lib/build_path_prefix_map.ml[54,2249+11])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[33,1524+4]..lib/build_path_prefix_map.ml[33,1524+17])
          Tpat_var "decode_prefix/497"
        expression (lib/build_path_prefix_map.ml[33,1524+18]..lib/build_path_prefix_map.ml[54,2249+11]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[33,1524+18]..lib/build_path_prefix_map.ml[33,1524+21])
                Tpat_var "str/499"
          ]
          Tfunction_body
            expression (lib/build_path_prefix_map.ml[34,1548+2]..lib/build_path_prefix_map.ml[54,2249+11])
              Texp_let Nonrec
              [
                <def>
                  pattern (lib/build_path_prefix_map.ml[34,1548+6]..lib/build_path_prefix_map.ml[34,1548+9])
                    Tpat_var "buf/500"
                  expression (lib/build_path_prefix_map.ml[34,1548+12]..lib/build_path_prefix_map.ml[34,1548+45])
                    Texp_apply
                    expression (lib/build_path_prefix_map.ml[34,1548+12]..lib/build_path_prefix_map.ml[34,1548+25])
                      Texp_ident "Stdlib!.Buffer.create"
                    [
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[34,1548+26]..lib/build_path_prefix_map.ml[34,1548+45])
                          Texp_apply
                          expression (lib/build_path_prefix_map.ml[34,1548+27]..lib/build_path_prefix_map.ml[34,1548+40])
                            Texp_ident "Stdlib!.String.length"
                          [
                            <arg>
                              Nolabel
                              expression (lib/build_path_prefix_map.ml[34,1548+41]..lib/build_path_prefix_map.ml[34,1548+44])
                                Texp_ident "str/499"
                          ]
                    ]
              ]
              expression (lib/build_path_prefix_map.ml[35,1597+2]..lib/build_path_prefix_map.ml[54,2249+11])
                Texp_let Rec
                [
                  <def>
                    pattern (lib/build_path_prefix_map.ml[35,1597+10]..lib/build_path_prefix_map.ml[35,1597+14])
                      Tpat_var "loop/501"
                    expression (lib/build_path_prefix_map.ml[35,1597+15]..lib/build_path_prefix_map.ml[53,2228+20]) ghost
                      Texp_function
                      [
                        Nolabel
                        Param_pat
                          pattern (lib/build_path_prefix_map.ml[35,1597+15]..lib/build_path_prefix_map.ml[35,1597+16])
                            Tpat_var "i/502"
                      ]
                      Tfunction_body
                        expression (lib/build_path_prefix_map.ml[36,1616+4]..lib/build_path_prefix_map.ml[53,2228+20])
                          Texp_ifthenelse
                          expression (lib/build_path_prefix_map.ml[36,1616+7]..lib/build_path_prefix_map.ml[36,1616+29])
                            Texp_apply
                            expression (lib/build_path_prefix_map.ml[36,1616+9]..lib/build_path_prefix_map.ml[36,1616+11])
                              Texp_ident "Stdlib!.>="
                            [
                              <arg>
                                Nolabel
                                expression (lib/build_path_prefix_map.ml[36,1616+7]..lib/build_path_prefix_map.ml[36,1616+8])
                                  Texp_ident "i/502"
                              <arg>
                                Nolabel
                                expression (lib/build_path_prefix_map.ml[36,1616+12]..lib/build_path_prefix_map.ml[36,1616+29])
                                  Texp_apply
                                  expression (lib/build_path_prefix_map.ml[36,1616+12]..lib/build_path_prefix_map.ml[36,1616+25])
                                    Texp_ident "Stdlib!.String.length"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/build_path_prefix_map.ml[36,1616+26]..lib/build_path_prefix_map.ml[36,1616+29])
                                        Texp_ident "str/499"
                                  ]
                            ]
                          expression (lib/build_path_prefix_map.ml[37,1646+9]..lib/build_path_prefix_map.ml[37,1646+33])
                            Texp_construct "Ok"
                            [
                              expression (lib/build_path_prefix_map.ml[37,1646+12]..lib/build_path_prefix_map.ml[37,1646+33])
                                Texp_apply
                                expression (lib/build_path_prefix_map.ml[37,1646+13]..lib/build_path_prefix_map.ml[37,1646+28])
                                  Texp_ident "Stdlib!.Buffer.contents"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/build_path_prefix_map.ml[37,1646+29]..lib/build_path_prefix_map.ml[37,1646+32])
                                      Texp_ident "buf/500"
                                ]
                            ]
                          Some
                            expression (lib/build_path_prefix_map.ml[38,1680+9]..lib/build_path_prefix_map.ml[53,2228+20])
                              Texp_match
                              expression (lib/build_path_prefix_map.ml[38,1680+15]..lib/build_path_prefix_map.ml[38,1680+22])
                                Texp_apply
                                expression (lib/build_path_prefix_map.ml[38,1680+15]..lib/build_path_prefix_map.ml[38,1680+22]) ghost
                                  Texp_ident "Stdlib!.String.get"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/build_path_prefix_map.ml[38,1680+15]..lib/build_path_prefix_map.ml[38,1680+18])
                                      Texp_ident "str/499"
                                  <arg>
                                    Nolabel
                                    expression (lib/build_path_prefix_map.ml[38,1680+20]..lib/build_path_prefix_map.ml[38,1680+21])
                                      Texp_ident "i/502"
                                ]
                              [
                                <case>
                                  pattern (lib/build_path_prefix_map.ml[39,1708+8]..lib/build_path_prefix_map.ml[39,1708+24])
                                    Tpat_value
                                    pattern (lib/build_path_prefix_map.ml[39,1708+8]..lib/build_path_prefix_map.ml[39,1708+24])
                                      Tpat_alias "c/503"
                                      pattern (lib/build_path_prefix_map.ml[39,1708+8]..lib/build_path_prefix_map.ml[39,1708+19])
                                        Tpat_or
                                        pattern (lib/build_path_prefix_map.ml[39,1708+9]..lib/build_path_prefix_map.ml[39,1708+12])
                                          Tpat_constant Const_char 3d
                                        pattern (lib/build_path_prefix_map.ml[39,1708+15]..lib/build_path_prefix_map.ml[39,1708+18])
                                          Tpat_constant Const_char 3a
                                  expression (lib/build_path_prefix_map.ml[40,1736+8]..lib/build_path_prefix_map.ml[40,1736+57])
                                    Texp_apply
                                    expression (lib/build_path_prefix_map.ml[40,1736+8]..lib/build_path_prefix_map.ml[40,1736+14])
                                      Texp_ident "errorf/299"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55])
                                          Texp_construct "CamlinternalFormatBasics.Format"
                                          [
                                            expression (lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55]) ghost
                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                              [
                                                expression (lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55]) ghost
                                                  Texp_constant Const_string("invalid character '",(lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55]) ghost,None)
                                                expression (lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.Char"
                                                  [
                                                    expression (lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                                      [
                                                        expression (lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55]) ghost
                                                          Texp_constant Const_string("' in key or value",(lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55]) ghost,None)
                                                        expression (lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                          []
                                                      ]
                                                  ]
                                              ]
                                            expression (lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55]) ghost
                                              Texp_constant Const_string("invalid character '%c' in key or value",(lib/build_path_prefix_map.ml[40,1736+15]..lib/build_path_prefix_map.ml[40,1736+55]) ghost,None)
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (lib/build_path_prefix_map.ml[40,1736+56]..lib/build_path_prefix_map.ml[40,1736+57])
                                          Texp_ident "c/503"
                                    ]
                                <case>
                                  pattern (lib/build_path_prefix_map.ml[41,1794+8]..lib/build_path_prefix_map.ml[41,1794+11])
                                    Tpat_value
                                    pattern (lib/build_path_prefix_map.ml[41,1794+8]..lib/build_path_prefix_map.ml[41,1794+11])
                                      Tpat_constant Const_char 25
                                  expression (lib/build_path_prefix_map.ml[42,1809+8]..lib/build_path_prefix_map.ml[50,2172+11])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/build_path_prefix_map.ml[42,1809+12]..lib/build_path_prefix_map.ml[42,1809+16])
                                          Tpat_var "push/505"
                                        expression (lib/build_path_prefix_map.ml[42,1809+17]..lib/build_path_prefix_map.ml[42,1809+56]) ghost
                                          Texp_function
                                          [
                                            Nolabel
                                            Param_pat
                                              pattern (lib/build_path_prefix_map.ml[42,1809+17]..lib/build_path_prefix_map.ml[42,1809+18])
                                                Tpat_var "c/507"
                                          ]
                                          Tfunction_body
                                            expression (lib/build_path_prefix_map.ml[42,1809+21]..lib/build_path_prefix_map.ml[42,1809+56])
                                              Texp_sequence
                                              expression (lib/build_path_prefix_map.ml[42,1809+21]..lib/build_path_prefix_map.ml[42,1809+42])
                                                Texp_apply
                                                expression (lib/build_path_prefix_map.ml[42,1809+21]..lib/build_path_prefix_map.ml[42,1809+36])
                                                  Texp_ident "Stdlib!.Buffer.add_char"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/build_path_prefix_map.ml[42,1809+37]..lib/build_path_prefix_map.ml[42,1809+40])
                                                      Texp_ident "buf/500"
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/build_path_prefix_map.ml[42,1809+41]..lib/build_path_prefix_map.ml[42,1809+42])
                                                      Texp_ident "c/507"
                                                ]
                                              expression (lib/build_path_prefix_map.ml[42,1809+44]..lib/build_path_prefix_map.ml[42,1809+56])
                                                Texp_apply
                                                expression (lib/build_path_prefix_map.ml[42,1809+44]..lib/build_path_prefix_map.ml[42,1809+48])
                                                  Texp_ident "loop/501"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/build_path_prefix_map.ml[42,1809+49]..lib/build_path_prefix_map.ml[42,1809+56])
                                                      Texp_apply
                                                      expression (lib/build_path_prefix_map.ml[42,1809+52]..lib/build_path_prefix_map.ml[42,1809+53])
                                                        Texp_ident "Stdlib!.+"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/build_path_prefix_map.ml[42,1809+50]..lib/build_path_prefix_map.ml[42,1809+51])
                                                            Texp_ident "i/502"
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/build_path_prefix_map.ml[42,1809+54]..lib/build_path_prefix_map.ml[42,1809+55])
                                                            Texp_constant Const_int 2
                                                      ]
                                                ]
                                    ]
                                    expression (lib/build_path_prefix_map.ml[43,1869+8]..lib/build_path_prefix_map.ml[50,2172+11])
                                      Texp_ifthenelse
                                      expression (lib/build_path_prefix_map.ml[43,1869+11]..lib/build_path_prefix_map.ml[43,1869+36])
                                        Texp_apply
                                        expression (lib/build_path_prefix_map.ml[43,1869+17]..lib/build_path_prefix_map.ml[43,1869+18])
                                          Texp_ident "Stdlib!.="
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/build_path_prefix_map.ml[43,1869+11]..lib/build_path_prefix_map.ml[43,1869+16])
                                              Texp_apply
                                              expression (lib/build_path_prefix_map.ml[43,1869+13]..lib/build_path_prefix_map.ml[43,1869+14])
                                                Texp_ident "Stdlib!.+"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (lib/build_path_prefix_map.ml[43,1869+11]..lib/build_path_prefix_map.ml[43,1869+12])
                                                    Texp_ident "i/502"
                                                <arg>
                                                  Nolabel
                                                  expression (lib/build_path_prefix_map.ml[43,1869+15]..lib/build_path_prefix_map.ml[43,1869+16])
                                                    Texp_constant Const_int 1
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (lib/build_path_prefix_map.ml[43,1869+19]..lib/build_path_prefix_map.ml[43,1869+36])
                                              Texp_apply
                                              expression (lib/build_path_prefix_map.ml[43,1869+19]..lib/build_path_prefix_map.ml[43,1869+32])
                                                Texp_ident "Stdlib!.String.length"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (lib/build_path_prefix_map.ml[43,1869+33]..lib/build_path_prefix_map.ml[43,1869+36])
                                                    Texp_ident "str/499"
                                              ]
                                        ]
                                      expression (lib/build_path_prefix_map.ml[44,1911+10]..lib/build_path_prefix_map.ml[44,1911+64])
                                        Texp_apply
                                        expression (lib/build_path_prefix_map.ml[44,1911+10]..lib/build_path_prefix_map.ml[44,1911+16])
                                          Texp_ident "errorf/299"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                      Texp_constant Const_string("invalid encoded string ",(lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost,None)
                                                    expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.Caml_string"
                                                      [
                                                        expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.No_padding"
                                                          []
                                                        expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                                          [
                                                            expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                              Texp_constant Const_string(" (trailing '",(lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost,None)
                                                            expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                              [
                                                                expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                                  Texp_constant Const_char 25
                                                                expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                  [
                                                                    expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                                      Texp_constant Const_string("')",(lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost,None)
                                                                    expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                      []
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                expression (lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost
                                                  Texp_constant Const_string("invalid encoded string %S (trailing '%%')",(lib/build_path_prefix_map.ml[44,1911+17]..lib/build_path_prefix_map.ml[44,1911+60]) ghost,None)
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (lib/build_path_prefix_map.ml[44,1911+61]..lib/build_path_prefix_map.ml[44,1911+64])
                                              Texp_ident "str/499"
                                        ]
                                      Some
                                        expression (lib/build_path_prefix_map.ml[45,1976+13]..lib/build_path_prefix_map.ml[50,2172+11])
                                          Texp_match
                                          expression (lib/build_path_prefix_map.ml[45,1976+25]..lib/build_path_prefix_map.ml[45,1976+36])
                                            Texp_apply
                                            expression (lib/build_path_prefix_map.ml[45,1976+25]..lib/build_path_prefix_map.ml[45,1976+36]) ghost
                                              Texp_ident "Stdlib!.String.get"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/build_path_prefix_map.ml[45,1976+25]..lib/build_path_prefix_map.ml[45,1976+28])
                                                  Texp_ident "str/499"
                                              <arg>
                                                Nolabel
                                                expression (lib/build_path_prefix_map.ml[45,1976+30]..lib/build_path_prefix_map.ml[45,1976+35])
                                                  Texp_apply
                                                  expression (lib/build_path_prefix_map.ml[45,1976+32]..lib/build_path_prefix_map.ml[45,1976+33])
                                                    Texp_ident "Stdlib!.+"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/build_path_prefix_map.ml[45,1976+30]..lib/build_path_prefix_map.ml[45,1976+31])
                                                        Texp_ident "i/502"
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/build_path_prefix_map.ml[45,1976+34]..lib/build_path_prefix_map.ml[45,1976+35])
                                                        Texp_constant Const_int 1
                                                  ]
                                            ]
                                          [
                                            <case>
                                              pattern (lib/build_path_prefix_map.ml[46,2018+14]..lib/build_path_prefix_map.ml[46,2018+17])
                                                Tpat_value
                                                pattern (lib/build_path_prefix_map.ml[46,2018+14]..lib/build_path_prefix_map.ml[46,2018+17])
                                                  Tpat_constant Const_char 23
                                              expression (lib/build_path_prefix_map.ml[46,2018+21]..lib/build_path_prefix_map.ml[46,2018+29])
                                                Texp_apply
                                                expression (lib/build_path_prefix_map.ml[46,2018+21]..lib/build_path_prefix_map.ml[46,2018+25])
                                                  Texp_ident "push/505"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/build_path_prefix_map.ml[46,2018+26]..lib/build_path_prefix_map.ml[46,2018+29])
                                                      Texp_constant Const_char 25
                                                ]
                                            <case>
                                              pattern (lib/build_path_prefix_map.ml[47,2048+14]..lib/build_path_prefix_map.ml[47,2048+17])
                                                Tpat_value
                                                pattern (lib/build_path_prefix_map.ml[47,2048+14]..lib/build_path_prefix_map.ml[47,2048+17])
                                                  Tpat_constant Const_char 2b
                                              expression (lib/build_path_prefix_map.ml[47,2048+21]..lib/build_path_prefix_map.ml[47,2048+29])
                                                Texp_apply
                                                expression (lib/build_path_prefix_map.ml[47,2048+21]..lib/build_path_prefix_map.ml[47,2048+25])
                                                  Texp_ident "push/505"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/build_path_prefix_map.ml[47,2048+26]..lib/build_path_prefix_map.ml[47,2048+29])
                                                      Texp_constant Const_char 3d
                                                ]
                                            <case>
                                              pattern (lib/build_path_prefix_map.ml[48,2078+14]..lib/build_path_prefix_map.ml[48,2078+17])
                                                Tpat_value
                                                pattern (lib/build_path_prefix_map.ml[48,2078+14]..lib/build_path_prefix_map.ml[48,2078+17])
                                                  Tpat_constant Const_char 2e
                                              expression (lib/build_path_prefix_map.ml[48,2078+21]..lib/build_path_prefix_map.ml[48,2078+29])
                                                Texp_apply
                                                expression (lib/build_path_prefix_map.ml[48,2078+21]..lib/build_path_prefix_map.ml[48,2078+25])
                                                  Texp_ident "push/505"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/build_path_prefix_map.ml[48,2078+26]..lib/build_path_prefix_map.ml[48,2078+29])
                                                      Texp_constant Const_char 3a
                                                ]
                                            <case>
                                              pattern (lib/build_path_prefix_map.ml[49,2108+14]..lib/build_path_prefix_map.ml[49,2108+15])
                                                Tpat_value
                                                pattern (lib/build_path_prefix_map.ml[49,2108+14]..lib/build_path_prefix_map.ml[49,2108+15])
                                                  Tpat_var "c/508"
                                              expression (lib/build_path_prefix_map.ml[49,2108+19]..lib/build_path_prefix_map.ml[49,2108+63])
                                                Texp_apply
                                                expression (lib/build_path_prefix_map.ml[49,2108+19]..lib/build_path_prefix_map.ml[49,2108+25])
                                                  Texp_ident "errorf/299"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61])
                                                      Texp_construct "CamlinternalFormatBasics.Format"
                                                      [
                                                        expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                                          [
                                                            expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                              Texp_constant Const_string("invalid ",(lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost,None)
                                                            expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                              [
                                                                expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                                  Texp_constant Const_char 25
                                                                expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                  [
                                                                    expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                                      Texp_constant Const_string("-escaped character '",(lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost,None)
                                                                    expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.Char"
                                                                      [
                                                                        expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                          [
                                                                            expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                                              Texp_constant Const_char 27
                                                                            expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                              []
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        expression (lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost
                                                          Texp_constant Const_string("invalid %%-escaped character '%c'",(lib/build_path_prefix_map.ml[49,2108+26]..lib/build_path_prefix_map.ml[49,2108+61]) ghost,None)
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/build_path_prefix_map.ml[49,2108+62]..lib/build_path_prefix_map.ml[49,2108+63])
                                                      Texp_ident "c/508"
                                                ]
                                          ]
                                <case>
                                  pattern (lib/build_path_prefix_map.ml[51,2184+8]..lib/build_path_prefix_map.ml[51,2184+9])
                                    Tpat_value
                                    pattern (lib/build_path_prefix_map.ml[51,2184+8]..lib/build_path_prefix_map.ml[51,2184+9])
                                      Tpat_var "c/504"
                                  expression (lib/build_path_prefix_map.ml[52,2197+8]..lib/build_path_prefix_map.ml[53,2228+20])
                                    Texp_sequence
                                    expression (lib/build_path_prefix_map.ml[52,2197+8]..lib/build_path_prefix_map.ml[52,2197+29])
                                      Texp_apply
                                      expression (lib/build_path_prefix_map.ml[52,2197+8]..lib/build_path_prefix_map.ml[52,2197+23])
                                        Texp_ident "Stdlib!.Buffer.add_char"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/build_path_prefix_map.ml[52,2197+24]..lib/build_path_prefix_map.ml[52,2197+27])
                                            Texp_ident "buf/500"
                                        <arg>
                                          Nolabel
                                          expression (lib/build_path_prefix_map.ml[52,2197+28]..lib/build_path_prefix_map.ml[52,2197+29])
                                            Texp_ident "c/504"
                                      ]
                                    expression (lib/build_path_prefix_map.ml[53,2228+8]..lib/build_path_prefix_map.ml[53,2228+20])
                                      Texp_apply
                                      expression (lib/build_path_prefix_map.ml[53,2228+8]..lib/build_path_prefix_map.ml[53,2228+12])
                                        Texp_ident "loop/501"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/build_path_prefix_map.ml[53,2228+13]..lib/build_path_prefix_map.ml[53,2228+20])
                                            Texp_apply
                                            expression (lib/build_path_prefix_map.ml[53,2228+16]..lib/build_path_prefix_map.ml[53,2228+17])
                                              Texp_ident "Stdlib!.+"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/build_path_prefix_map.ml[53,2228+14]..lib/build_path_prefix_map.ml[53,2228+15])
                                                  Texp_ident "i/502"
                                              <arg>
                                                Nolabel
                                                expression (lib/build_path_prefix_map.ml[53,2228+18]..lib/build_path_prefix_map.ml[53,2228+19])
                                                  Texp_constant Const_int 1
                                            ]
                                      ]
                              ]
                ]
                expression (lib/build_path_prefix_map.ml[54,2249+5]..lib/build_path_prefix_map.ml[54,2249+11])
                  Texp_apply
                  expression (lib/build_path_prefix_map.ml[54,2249+5]..lib/build_path_prefix_map.ml[54,2249+9])
                    Texp_ident "loop/501"
                  [
                    <arg>
                      Nolabel
                      expression (lib/build_path_prefix_map.ml[54,2249+10]..lib/build_path_prefix_map.ml[54,2249+11])
                        Texp_constant Const_int 0
                  ]
    ]
  structure_item (lib/build_path_prefix_map.ml[56,2262+0]..lib/build_path_prefix_map.ml[56,2262+57])
    Tstr_type Rec
    [
      type_declaration pair/509 (lib/build_path_prefix_map.ml[56,2262+0]..lib/build_path_prefix_map.ml[56,2262+57])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (lib/build_path_prefix_map.ml[56,2262+14]..lib/build_path_prefix_map.ml[56,2262+34])
                Immutable
                target/510                core_type (lib/build_path_prefix_map.ml[56,2262+22]..lib/build_path_prefix_map.ml[56,2262+33])
                  Ttyp_poly
                  core_type (lib/build_path_prefix_map.ml[56,2262+22]..lib/build_path_prefix_map.ml[56,2262+33])
                    Ttyp_constr "path_prefix/297"
                    []
              (lib/build_path_prefix_map.ml[56,2262+35]..lib/build_path_prefix_map.ml[56,2262+55])
                Immutable
                source/511                core_type (lib/build_path_prefix_map.ml[56,2262+44]..lib/build_path_prefix_map.ml[56,2262+55])
                  Ttyp_poly
                  core_type (lib/build_path_prefix_map.ml[56,2262+44]..lib/build_path_prefix_map.ml[56,2262+55])
                    Ttyp_constr "path_prefix/297"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/build_path_prefix_map.ml[58,2321+0]..lib/build_path_prefix_map.ml[59,2358+64])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[58,2321+4]..lib/build_path_prefix_map.ml[58,2321+15])
          Tpat_var "encode_pair/512"
        expression (lib/build_path_prefix_map.ml[58,2321+16]..lib/build_path_prefix_map.ml[59,2358+64]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[58,2321+16]..lib/build_path_prefix_map.ml[58,2321+34])
                Tpat_record
                [
                  "target"
                    pattern (lib/build_path_prefix_map.ml[58,2321+18]..lib/build_path_prefix_map.ml[58,2321+24])
                      Tpat_var "target/514"
                  "source"
                    pattern (lib/build_path_prefix_map.ml[58,2321+26]..lib/build_path_prefix_map.ml[58,2321+32])
                      Tpat_var "source/515"
                ]
          ]
          Tfunction_body
            expression (lib/build_path_prefix_map.ml[59,2358+2]..lib/build_path_prefix_map.ml[59,2358+64])
              Texp_apply
              expression (lib/build_path_prefix_map.ml[59,2358+2]..lib/build_path_prefix_map.ml[59,2358+15])
                Texp_ident "Stdlib!.String.concat"
              [
                <arg>
                  Nolabel
                  expression (lib/build_path_prefix_map.ml[59,2358+16]..lib/build_path_prefix_map.ml[59,2358+19])
                    Texp_constant Const_string("=",(lib/build_path_prefix_map.ml[59,2358+17]..lib/build_path_prefix_map.ml[59,2358+18]),None)
                <arg>
                  Nolabel
                  expression (lib/build_path_prefix_map.ml[59,2358+20]..lib/build_path_prefix_map.ml[59,2358+64])
                    Texp_construct "::"
                    [
                      expression (lib/build_path_prefix_map.ml[59,2358+21]..lib/build_path_prefix_map.ml[59,2358+41])
                        Texp_apply
                        expression (lib/build_path_prefix_map.ml[59,2358+21]..lib/build_path_prefix_map.ml[59,2358+34])
                          Texp_ident "encode_prefix/339"
                        [
                          <arg>
                            Nolabel
                            expression (lib/build_path_prefix_map.ml[59,2358+35]..lib/build_path_prefix_map.ml[59,2358+41])
                              Texp_ident "target/514"
                        ]
                      expression (lib/build_path_prefix_map.ml[59,2358+43]..lib/build_path_prefix_map.ml[59,2358+64]) ghost
                        Texp_construct "::"
                        [
                          expression (lib/build_path_prefix_map.ml[59,2358+43]..lib/build_path_prefix_map.ml[59,2358+63])
                            Texp_apply
                            expression (lib/build_path_prefix_map.ml[59,2358+43]..lib/build_path_prefix_map.ml[59,2358+56])
                              Texp_ident "encode_prefix/339"
                            [
                              <arg>
                                Nolabel
                                expression (lib/build_path_prefix_map.ml[59,2358+57]..lib/build_path_prefix_map.ml[59,2358+63])
                                  Texp_ident "source/515"
                            ]
                          expression (lib/build_path_prefix_map.ml[59,2358+63]..lib/build_path_prefix_map.ml[59,2358+64]) ghost
                            Texp_construct "[]"
                            []
                        ]
                    ]
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[61,2424+0]..lib/build_path_prefix_map.ml[71,2867+58])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[61,2424+4]..lib/build_path_prefix_map.ml[61,2424+15])
          Tpat_var "decode_pair/517"
        expression (lib/build_path_prefix_map.ml[61,2424+16]..lib/build_path_prefix_map.ml[71,2867+58]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[61,2424+16]..lib/build_path_prefix_map.ml[61,2424+19])
                Tpat_var "str/519"
          ]
          Tfunction_body
            expression (lib/build_path_prefix_map.ml[62,2446+2]..lib/build_path_prefix_map.ml[71,2867+58])
              Texp_match
              expression (lib/build_path_prefix_map.ml[62,2446+8]..lib/build_path_prefix_map.ml[62,2446+28])
                Texp_apply
                expression (lib/build_path_prefix_map.ml[62,2446+8]..lib/build_path_prefix_map.ml[62,2446+20])
                  Texp_ident "Stdlib!.String.index"
                [
                  <arg>
                    Nolabel
                    expression (lib/build_path_prefix_map.ml[62,2446+21]..lib/build_path_prefix_map.ml[62,2446+24])
                      Texp_ident "str/519"
                  <arg>
                    Nolabel
                    expression (lib/build_path_prefix_map.ml[62,2446+25]..lib/build_path_prefix_map.ml[62,2446+28])
                      Texp_constant Const_char 3d
                ]
              [
                <case>
                  pattern (lib/build_path_prefix_map.ml[63,2480+4]..lib/build_path_prefix_map.ml[63,2480+23])
                    Tpat_exception
                    pattern (lib/build_path_prefix_map.ml[63,2480+14]..lib/build_path_prefix_map.ml[63,2480+23])
                      Tpat_construct "Not_found"
                      []
                      None
                  expression (lib/build_path_prefix_map.ml[64,2507+4]..lib/build_path_prefix_map.ml[64,2507+60])
                    Texp_apply
                    expression (lib/build_path_prefix_map.ml[64,2507+4]..lib/build_path_prefix_map.ml[64,2507+10])
                      Texp_ident "errorf/299"
                    [
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56])
                          Texp_construct "CamlinternalFormatBasics.Format"
                          [
                            expression (lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost
                              Texp_construct "CamlinternalFormatBasics.String_literal"
                              [
                                expression (lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost
                                  Texp_constant Const_string("invalid key/value pair ",(lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost,None)
                                expression (lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost
                                  Texp_construct "CamlinternalFormatBasics.Caml_string"
                                  [
                                    expression (lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost
                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                      []
                                    expression (lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost
                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                      [
                                        expression (lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost
                                          Texp_constant Const_string(", no '=' separator",(lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost,None)
                                        expression (lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost
                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                          []
                                      ]
                                  ]
                              ]
                            expression (lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost
                              Texp_constant Const_string("invalid key/value pair %S, no '=' separator",(lib/build_path_prefix_map.ml[64,2507+11]..lib/build_path_prefix_map.ml[64,2507+56]) ghost,None)
                          ]
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[64,2507+57]..lib/build_path_prefix_map.ml[64,2507+60])
                          Texp_ident "str/519"
                    ]
                <case>
                  pattern (lib/build_path_prefix_map.ml[65,2568+4]..lib/build_path_prefix_map.ml[65,2568+13])
                    Tpat_value
                    pattern (lib/build_path_prefix_map.ml[65,2568+4]..lib/build_path_prefix_map.ml[65,2568+13])
                      Tpat_var "equal_pos/520"
                  expression (lib/build_path_prefix_map.ml[66,2585+4]..lib/build_path_prefix_map.ml[71,2867+58])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (lib/build_path_prefix_map.ml[66,2585+8]..lib/build_path_prefix_map.ml[66,2585+22])
                          Tpat_var "encoded_target/521"
                        expression (lib/build_path_prefix_map.ml[66,2585+25]..lib/build_path_prefix_map.ml[66,2585+51])
                          Texp_apply
                          expression (lib/build_path_prefix_map.ml[66,2585+25]..lib/build_path_prefix_map.ml[66,2585+35])
                            Texp_ident "Stdlib!.String.sub"
                          [
                            <arg>
                              Nolabel
                              expression (lib/build_path_prefix_map.ml[66,2585+36]..lib/build_path_prefix_map.ml[66,2585+39])
                                Texp_ident "str/519"
                            <arg>
                              Nolabel
                              expression (lib/build_path_prefix_map.ml[66,2585+40]..lib/build_path_prefix_map.ml[66,2585+41])
                                Texp_constant Const_int 0
                            <arg>
                              Nolabel
                              expression (lib/build_path_prefix_map.ml[66,2585+42]..lib/build_path_prefix_map.ml[66,2585+51])
                                Texp_ident "equal_pos/520"
                          ]
                    ]
                    expression (lib/build_path_prefix_map.ml[67,2640+4]..lib/build_path_prefix_map.ml[71,2867+58])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (lib/build_path_prefix_map.ml[67,2640+8]..lib/build_path_prefix_map.ml[67,2640+22])
                            Tpat_var "encoded_source/522"
                          expression (lib/build_path_prefix_map.ml[68,2665+6]..lib/build_path_prefix_map.ml[68,2665+72])
                            Texp_apply
                            expression (lib/build_path_prefix_map.ml[68,2665+6]..lib/build_path_prefix_map.ml[68,2665+16])
                              Texp_ident "Stdlib!.String.sub"
                            [
                              <arg>
                                Nolabel
                                expression (lib/build_path_prefix_map.ml[68,2665+17]..lib/build_path_prefix_map.ml[68,2665+20])
                                  Texp_ident "str/519"
                              <arg>
                                Nolabel
                                expression (lib/build_path_prefix_map.ml[68,2665+21]..lib/build_path_prefix_map.ml[68,2665+36])
                                  Texp_apply
                                  expression (lib/build_path_prefix_map.ml[68,2665+32]..lib/build_path_prefix_map.ml[68,2665+33])
                                    Texp_ident "Stdlib!.+"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/build_path_prefix_map.ml[68,2665+22]..lib/build_path_prefix_map.ml[68,2665+31])
                                        Texp_ident "equal_pos/520"
                                    <arg>
                                      Nolabel
                                      expression (lib/build_path_prefix_map.ml[68,2665+34]..lib/build_path_prefix_map.ml[68,2665+35])
                                        Texp_constant Const_int 1
                                  ]
                              <arg>
                                Nolabel
                                expression (lib/build_path_prefix_map.ml[68,2665+37]..lib/build_path_prefix_map.ml[68,2665+72])
                                  Texp_apply
                                  expression (lib/build_path_prefix_map.ml[68,2665+68]..lib/build_path_prefix_map.ml[68,2665+69])
                                    Texp_ident "Stdlib!.-"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/build_path_prefix_map.ml[68,2665+38]..lib/build_path_prefix_map.ml[68,2665+67])
                                        Texp_apply
                                        expression (lib/build_path_prefix_map.ml[68,2665+56]..lib/build_path_prefix_map.ml[68,2665+57])
                                          Texp_ident "Stdlib!.-"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/build_path_prefix_map.ml[68,2665+38]..lib/build_path_prefix_map.ml[68,2665+55])
                                              Texp_apply
                                              expression (lib/build_path_prefix_map.ml[68,2665+38]..lib/build_path_prefix_map.ml[68,2665+51])
                                                Texp_ident "Stdlib!.String.length"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (lib/build_path_prefix_map.ml[68,2665+52]..lib/build_path_prefix_map.ml[68,2665+55])
                                                    Texp_ident "str/519"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (lib/build_path_prefix_map.ml[68,2665+58]..lib/build_path_prefix_map.ml[68,2665+67])
                                              Texp_ident "equal_pos/520"
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (lib/build_path_prefix_map.ml[68,2665+70]..lib/build_path_prefix_map.ml[68,2665+71])
                                        Texp_constant Const_int 1
                                  ]
                            ]
                      ]
                      expression (lib/build_path_prefix_map.ml[69,2741+4]..lib/build_path_prefix_map.ml[71,2867+58])
                        Texp_match
                        expression (lib/build_path_prefix_map.ml[69,2741+10]..lib/build_path_prefix_map.ml[69,2741+68])
                          Texp_tuple
                          [
                            expression (lib/build_path_prefix_map.ml[69,2741+10]..lib/build_path_prefix_map.ml[69,2741+38])
                              Texp_apply
                              expression (lib/build_path_prefix_map.ml[69,2741+10]..lib/build_path_prefix_map.ml[69,2741+23])
                                Texp_ident "decode_prefix/497"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[69,2741+24]..lib/build_path_prefix_map.ml[69,2741+38])
                                    Texp_ident "encoded_target/521"
                              ]
                            expression (lib/build_path_prefix_map.ml[69,2741+40]..lib/build_path_prefix_map.ml[69,2741+68])
                              Texp_apply
                              expression (lib/build_path_prefix_map.ml[69,2741+40]..lib/build_path_prefix_map.ml[69,2741+53])
                                Texp_ident "decode_prefix/497"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[69,2741+54]..lib/build_path_prefix_map.ml[69,2741+68])
                                    Texp_ident "encoded_source/522"
                              ]
                          ]
                        [
                          <case>
                            pattern (lib/build_path_prefix_map.ml[70,2815+6]..lib/build_path_prefix_map.ml[70,2815+26])
                              Tpat_value
                              pattern (lib/build_path_prefix_map.ml[70,2815+6]..lib/build_path_prefix_map.ml[70,2815+26])
                                Tpat_tuple
                                [
                                  pattern (lib/build_path_prefix_map.ml[70,2815+6]..lib/build_path_prefix_map.ml[70,2815+15])
                                    Tpat_construct "Ok"
                                    [
                                      pattern (lib/build_path_prefix_map.ml[70,2815+9]..lib/build_path_prefix_map.ml[70,2815+15])
                                        Tpat_var "target/523"
                                    ]
                                    None
                                  pattern (lib/build_path_prefix_map.ml[70,2815+17]..lib/build_path_prefix_map.ml[70,2815+26])
                                    Tpat_construct "Ok"
                                    [
                                      pattern (lib/build_path_prefix_map.ml[70,2815+20]..lib/build_path_prefix_map.ml[70,2815+26])
                                        Tpat_var "source/524"
                                    ]
                                    None
                                ]
                            expression (lib/build_path_prefix_map.ml[70,2815+30]..lib/build_path_prefix_map.ml[70,2815+51])
                              Texp_construct "Ok"
                              [
                                expression (lib/build_path_prefix_map.ml[70,2815+33]..lib/build_path_prefix_map.ml[70,2815+51])
                                  Texp_record
                                    fields =
                                      [
                                        "target"
                                          expression (lib/build_path_prefix_map.ml[70,2815+35]..lib/build_path_prefix_map.ml[70,2815+41])
                                            Texp_ident "target/523"
                                        "source"
                                          expression (lib/build_path_prefix_map.ml[70,2815+43]..lib/build_path_prefix_map.ml[70,2815+49])
                                            Texp_ident "source/524"
                                      ]
                                    representation =
                                      Record_regular
                                    extended_expression =
                                      None
                              ]
                          <case>
                            pattern (lib/build_path_prefix_map.ml[71,2867+6]..lib/build_path_prefix_map.ml[71,2867+51])
                              Tpat_or
                              pattern (lib/build_path_prefix_map.ml[71,2867+6]..lib/build_path_prefix_map.ml[71,2867+27])
                                Tpat_value
                                pattern (lib/build_path_prefix_map.ml[71,2867+6]..lib/build_path_prefix_map.ml[71,2867+27])
                                  Tpat_tuple
                                  [
                                    pattern (lib/build_path_prefix_map.ml[71,2867+7]..lib/build_path_prefix_map.ml[71,2867+23])
                                      Tpat_alias "err/525"
                                      pattern (lib/build_path_prefix_map.ml[71,2867+8]..lib/build_path_prefix_map.ml[71,2867+15])
                                        Tpat_construct "Error"
                                        [
                                          pattern (lib/build_path_prefix_map.ml[71,2867+14]..lib/build_path_prefix_map.ml[71,2867+15])
                                            Tpat_any
                                        ]
                                        None
                                    pattern (lib/build_path_prefix_map.ml[71,2867+25]..lib/build_path_prefix_map.ml[71,2867+26])
                                      Tpat_any
                                  ]
                              pattern (lib/build_path_prefix_map.ml[71,2867+30]..lib/build_path_prefix_map.ml[71,2867+51])
                                Tpat_value
                                pattern (lib/build_path_prefix_map.ml[71,2867+30]..lib/build_path_prefix_map.ml[71,2867+51])
                                  Tpat_tuple
                                  [
                                    pattern (lib/build_path_prefix_map.ml[71,2867+31]..lib/build_path_prefix_map.ml[71,2867+32])
                                      Tpat_any
                                    pattern (lib/build_path_prefix_map.ml[71,2867+34]..lib/build_path_prefix_map.ml[71,2867+50])
                                      Tpat_alias "err/525"
                                      pattern (lib/build_path_prefix_map.ml[71,2867+35]..lib/build_path_prefix_map.ml[71,2867+42])
                                        Tpat_construct "Error"
                                        [
                                          pattern (lib/build_path_prefix_map.ml[71,2867+41]..lib/build_path_prefix_map.ml[71,2867+42])
                                            Tpat_any
                                        ]
                                        None
                                  ]
                            expression (lib/build_path_prefix_map.ml[71,2867+55]..lib/build_path_prefix_map.ml[71,2867+58])
                              Texp_ident "err/525"
                        ]
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[73,2927+0]..lib/build_path_prefix_map.ml[73,2927+27])
    Tstr_type Rec
    [
      type_declaration map/527 (lib/build_path_prefix_map.ml[73,2927+0]..lib/build_path_prefix_map.ml[73,2927+27])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/build_path_prefix_map.ml[73,2927+11]..lib/build_path_prefix_map.ml[73,2927+27])
              Ttyp_constr "list/9!"
              [
                core_type (lib/build_path_prefix_map.ml[73,2927+11]..lib/build_path_prefix_map.ml[73,2927+22])
                  Ttyp_constr "option/10!"
                  [
                    core_type (lib/build_path_prefix_map.ml[73,2927+11]..lib/build_path_prefix_map.ml[73,2927+15])
                      Ttyp_constr "pair/509"
                      []
                  ]
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[75,2956+0]..lib/build_path_prefix_map.ml[81,3091+22])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[75,2956+4]..lib/build_path_prefix_map.ml[75,2956+14])
          Tpat_var "encode_map/528"
        expression (lib/build_path_prefix_map.ml[75,2956+15]..lib/build_path_prefix_map.ml[81,3091+22]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[75,2956+15]..lib/build_path_prefix_map.ml[75,2956+18])
                Tpat_var "map/530"
          ]
          Tfunction_body
            expression (lib/build_path_prefix_map.ml[76,2977+2]..lib/build_path_prefix_map.ml[81,3091+22])
              Texp_let Nonrec
              [
                <def>
                  pattern (lib/build_path_prefix_map.ml[76,2977+6]..lib/build_path_prefix_map.ml[76,2977+17])
                    Tpat_var "encode_elem/531"
                  expression (lib/build_path_prefix_map.ml[76,2977+20]..lib/build_path_prefix_map.ml[78,3023+35])
                    Texp_function
                    []
                    Tfunction_cases (lib/build_path_prefix_map.ml[76,2977+20]..lib/build_path_prefix_map.ml[78,3023+35])
                      [
                        <case>
                          pattern (lib/build_path_prefix_map.ml[77,3006+6]..lib/build_path_prefix_map.ml[77,3006+10])
                            Tpat_construct "None"
                            []
                            None
                          expression (lib/build_path_prefix_map.ml[77,3006+14]..lib/build_path_prefix_map.ml[77,3006+16])
                            Texp_constant Const_string("",(lib/build_path_prefix_map.ml[77,3006+15]..lib/build_path_prefix_map.ml[77,3006+15]),None)
                        <case>
                          pattern (lib/build_path_prefix_map.ml[78,3023+6]..lib/build_path_prefix_map.ml[78,3023+15])
                            Tpat_construct "Some"
                            [
                              pattern (lib/build_path_prefix_map.ml[78,3023+11]..lib/build_path_prefix_map.ml[78,3023+15])
                                Tpat_var "pair/533"
                            ]
                            None
                          expression (lib/build_path_prefix_map.ml[78,3023+19]..lib/build_path_prefix_map.ml[78,3023+35])
                            Texp_apply
                            expression (lib/build_path_prefix_map.ml[78,3023+19]..lib/build_path_prefix_map.ml[78,3023+30])
                              Texp_ident "encode_pair/512"
                            [
                              <arg>
                                Nolabel
                                expression (lib/build_path_prefix_map.ml[78,3023+31]..lib/build_path_prefix_map.ml[78,3023+35])
                                  Texp_ident "pair/533"
                            ]
                      ]
              ]
              expression (lib/build_path_prefix_map.ml[80,3064+2]..lib/build_path_prefix_map.ml[81,3091+22])
                Texp_apply
                expression (lib/build_path_prefix_map.ml[81,3091+5]..lib/build_path_prefix_map.ml[81,3091+22])
                  Texp_apply
                  expression (lib/build_path_prefix_map.ml[81,3091+5]..lib/build_path_prefix_map.ml[81,3091+18])
                    Texp_ident "Stdlib!.String.concat"
                  [
                    <arg>
                      Nolabel
                      expression (lib/build_path_prefix_map.ml[81,3091+19]..lib/build_path_prefix_map.ml[81,3091+22])
                        Texp_constant Const_string(":",(lib/build_path_prefix_map.ml[81,3091+20]..lib/build_path_prefix_map.ml[81,3091+21]),None)
                  ]
                [
                  <arg>
                    Nolabel
                    expression (lib/build_path_prefix_map.ml[80,3064+2]..lib/build_path_prefix_map.ml[80,3064+26])
                      Texp_apply
                      expression (lib/build_path_prefix_map.ml[80,3064+2]..lib/build_path_prefix_map.ml[80,3064+10])
                        Texp_ident "Stdlib!.List.map"
                      [
                        <arg>
                          Nolabel
                          expression (lib/build_path_prefix_map.ml[80,3064+11]..lib/build_path_prefix_map.ml[80,3064+22])
                            Texp_ident "encode_elem/531"
                        <arg>
                          Nolabel
                          expression (lib/build_path_prefix_map.ml[80,3064+23]..lib/build_path_prefix_map.ml[80,3064+26])
                            Texp_ident "map/530"
                      ]
                ]
    ]
  structure_item (lib/build_path_prefix_map.ml[83,3115+0]..lib/build_path_prefix_map.ml[96,3505+17])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[83,3115+4]..lib/build_path_prefix_map.ml[83,3115+14])
          Tpat_var "decode_map/601"
        expression (lib/build_path_prefix_map.ml[83,3115+15]..lib/build_path_prefix_map.ml[96,3505+17]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[83,3115+15]..lib/build_path_prefix_map.ml[83,3115+18])
                Tpat_var "str/603"
          ]
          Tfunction_body
            expression (lib/build_path_prefix_map.ml[84,3136+2]..lib/build_path_prefix_map.ml[96,3505+17])
              Texp_letexception
              extension_constructor (lib/build_path_prefix_map.ml[84,3136+16]..lib/build_path_prefix_map.ml[84,3136+41])
                pext_name = "Shortcut/604"
                pext_kind =
                  Text_decl
                    [
                      core_type (lib/build_path_prefix_map.ml[84,3136+28]..lib/build_path_prefix_map.ml[84,3136+41])
                        Ttyp_constr "error_message/298"
                        []
                    ]
                    None
              expression (lib/build_path_prefix_map.ml[85,3181+2]..lib/build_path_prefix_map.ml[96,3505+17])
                Texp_let Nonrec
                [
                  <def>
                    pattern (lib/build_path_prefix_map.ml[85,3181+6]..lib/build_path_prefix_map.ml[85,3181+21])
                      Tpat_var "decode_or_empty/605"
                    expression (lib/build_path_prefix_map.ml[85,3181+24]..lib/build_path_prefix_map.ml[91,3358+9])
                      Texp_function
                      []
                      Tfunction_cases (lib/build_path_prefix_map.ml[85,3181+24]..lib/build_path_prefix_map.ml[91,3358+9])
                        [
                          <case>
                            pattern (lib/build_path_prefix_map.ml[86,3214+6]..lib/build_path_prefix_map.ml[86,3214+8])
                              Tpat_constant Const_string("",(lib/build_path_prefix_map.ml[86,3214+7]..lib/build_path_prefix_map.ml[86,3214+7]),None)
                            expression (lib/build_path_prefix_map.ml[86,3214+12]..lib/build_path_prefix_map.ml[86,3214+16])
                              Texp_construct "None"
                              []
                          <case>
                            pattern (lib/build_path_prefix_map.ml[87,3231+6]..lib/build_path_prefix_map.ml[87,3231+10])
                              Tpat_var "pair/607"
                            expression (lib/build_path_prefix_map.ml[88,3245+6]..lib/build_path_prefix_map.ml[91,3358+9])
                              Texp_match
                              expression (lib/build_path_prefix_map.ml[88,3245+18]..lib/build_path_prefix_map.ml[88,3245+34])
                                Texp_apply
                                expression (lib/build_path_prefix_map.ml[88,3245+18]..lib/build_path_prefix_map.ml[88,3245+29])
                                  Texp_ident "decode_pair/517"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/build_path_prefix_map.ml[88,3245+30]..lib/build_path_prefix_map.ml[88,3245+34])
                                      Texp_ident "pair/607"
                                ]
                              [
                                <case>
                                  pattern (lib/build_path_prefix_map.ml[89,3285+10]..lib/build_path_prefix_map.ml[89,3285+16])
                                    Tpat_value
                                    pattern (lib/build_path_prefix_map.ml[89,3285+10]..lib/build_path_prefix_map.ml[89,3285+16])
                                      Tpat_construct "Ok"
                                      [
                                        pattern (lib/build_path_prefix_map.ml[89,3285+13]..lib/build_path_prefix_map.ml[89,3285+16])
                                          Tpat_var "str/608"
                                      ]
                                      None
                                  expression (lib/build_path_prefix_map.ml[89,3285+20]..lib/build_path_prefix_map.ml[89,3285+28])
                                    Texp_construct "Some"
                                    [
                                      expression (lib/build_path_prefix_map.ml[89,3285+25]..lib/build_path_prefix_map.ml[89,3285+28])
                                        Texp_ident "str/608"
                                    ]
                                <case>
                                  pattern (lib/build_path_prefix_map.ml[90,3314+10]..lib/build_path_prefix_map.ml[90,3314+19])
                                    Tpat_value
                                    pattern (lib/build_path_prefix_map.ml[90,3314+10]..lib/build_path_prefix_map.ml[90,3314+19])
                                      Tpat_construct "Error"
                                      [
                                        pattern (lib/build_path_prefix_map.ml[90,3314+16]..lib/build_path_prefix_map.ml[90,3314+19])
                                          Tpat_var "err/609"
                                      ]
                                      None
                                  expression (lib/build_path_prefix_map.ml[90,3314+23]..lib/build_path_prefix_map.ml[90,3314+43])
                                    Texp_apply
                                    expression (lib/build_path_prefix_map.ml[90,3314+23]..lib/build_path_prefix_map.ml[90,3314+28])
                                      Texp_ident "Stdlib!.raise"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/build_path_prefix_map.ml[90,3314+29]..lib/build_path_prefix_map.ml[90,3314+43])
                                          Texp_construct "Shortcut"
                                          [
                                            expression (lib/build_path_prefix_map.ml[90,3314+39]..lib/build_path_prefix_map.ml[90,3314+42])
                                              Texp_ident "err/609"
                                          ]
                                    ]
                              ]
                        ]
                ]
                expression (lib/build_path_prefix_map.ml[93,3373+2]..lib/build_path_prefix_map.ml[96,3505+17])
                  Texp_let Nonrec
                  [
                    <def>
                      pattern (lib/build_path_prefix_map.ml[93,3373+6]..lib/build_path_prefix_map.ml[93,3373+11])
                        Tpat_var "pairs/610"
                      expression (lib/build_path_prefix_map.ml[93,3373+14]..lib/build_path_prefix_map.ml[93,3373+42])
                        Texp_apply
                        expression (lib/build_path_prefix_map.ml[93,3373+14]..lib/build_path_prefix_map.ml[93,3373+34])
                          Texp_ident "Stdlib!.String.split_on_char"
                        [
                          <arg>
                            Nolabel
                            expression (lib/build_path_prefix_map.ml[93,3373+35]..lib/build_path_prefix_map.ml[93,3373+38])
                              Texp_constant Const_char 3a
                          <arg>
                            Nolabel
                            expression (lib/build_path_prefix_map.ml[93,3373+39]..lib/build_path_prefix_map.ml[93,3373+42])
                              Texp_ident "str/603"
                        ]
                  ]
                  expression (lib/build_path_prefix_map.ml[94,3419+2]..lib/build_path_prefix_map.ml[96,3505+17])
                    Texp_match
                    expression (lib/build_path_prefix_map.ml[94,3419+8]..lib/build_path_prefix_map.ml[94,3419+38])
                      Texp_apply
                      expression (lib/build_path_prefix_map.ml[94,3419+8]..lib/build_path_prefix_map.ml[94,3419+16])
                        Texp_ident "Stdlib!.List.map"
                      [
                        <arg>
                          Nolabel
                          expression (lib/build_path_prefix_map.ml[94,3419+17]..lib/build_path_prefix_map.ml[94,3419+32])
                            Texp_ident "decode_or_empty/605"
                        <arg>
                          Nolabel
                          expression (lib/build_path_prefix_map.ml[94,3419+33]..lib/build_path_prefix_map.ml[94,3419+38])
                            Texp_ident "pairs/610"
                      ]
                    [
                      <case>
                        pattern (lib/build_path_prefix_map.ml[95,3463+4]..lib/build_path_prefix_map.ml[95,3463+28])
                          Tpat_exception
                          pattern (lib/build_path_prefix_map.ml[95,3463+14]..lib/build_path_prefix_map.ml[95,3463+28])
                            Tpat_construct "Shortcut"
                            [
                              pattern (lib/build_path_prefix_map.ml[95,3463+24]..lib/build_path_prefix_map.ml[95,3463+27])
                                Tpat_var "err/611"
                            ]
                            None
                        expression (lib/build_path_prefix_map.ml[95,3463+32]..lib/build_path_prefix_map.ml[95,3463+41])
                          Texp_construct "Error"
                          [
                            expression (lib/build_path_prefix_map.ml[95,3463+38]..lib/build_path_prefix_map.ml[95,3463+41])
                              Texp_ident "err/611"
                          ]
                      <case>
                        pattern (lib/build_path_prefix_map.ml[96,3505+4]..lib/build_path_prefix_map.ml[96,3505+7])
                          Tpat_value
                          pattern (lib/build_path_prefix_map.ml[96,3505+4]..lib/build_path_prefix_map.ml[96,3505+7])
                            Tpat_var "map/612"
                        expression (lib/build_path_prefix_map.ml[96,3505+11]..lib/build_path_prefix_map.ml[96,3505+17])
                          Texp_construct "Ok"
                          [
                            expression (lib/build_path_prefix_map.ml[96,3505+14]..lib/build_path_prefix_map.ml[96,3505+17])
                              Texp_ident "map/612"
                          ]
                    ]
    ]
  structure_item (lib/build_path_prefix_map.ml[98,3524+0]..lib/build_path_prefix_map.ml[107,3931+13])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[98,3524+4]..lib/build_path_prefix_map.ml[98,3524+15])
          Tpat_var "make_target/613"
        expression (lib/build_path_prefix_map.ml[98,3524+16]..lib/build_path_prefix_map.ml[107,3931+13]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[98,3524+16]..lib/build_path_prefix_map.ml[98,3524+20])
                Tpat_var "path/615"
          ]
          Tfunction_cases (lib/build_path_prefix_map.ml[98,3524+52]..lib/build_path_prefix_map.ml[107,3931+13])
            Texp_constraint
            core_type (lib/build_path_prefix_map.ml[98,3524+23]..lib/build_path_prefix_map.ml[98,3524+49])
              Ttyp_arrow
              Nolabel
              core_type (lib/build_path_prefix_map.ml[98,3524+23]..lib/build_path_prefix_map.ml[98,3524+34])
                Ttyp_constr "option/10!"
                [
                  core_type (lib/build_path_prefix_map.ml[98,3524+23]..lib/build_path_prefix_map.ml[98,3524+27])
                    Ttyp_constr "pair/509"
                    []
                ]
              core_type (lib/build_path_prefix_map.ml[98,3524+38]..lib/build_path_prefix_map.ml[98,3524+49])
                Ttyp_constr "option/10!"
                [
                  core_type (lib/build_path_prefix_map.ml[98,3524+38]..lib/build_path_prefix_map.ml[98,3524+42])
                    Ttyp_constr "path/296"
                    []
                ]
            [
              <case>
                pattern (lib/build_path_prefix_map.ml[99,3585+4]..lib/build_path_prefix_map.ml[99,3585+8])
                  Tpat_construct "None"
                  []
                  None
                expression (lib/build_path_prefix_map.ml[99,3585+12]..lib/build_path_prefix_map.ml[99,3585+16])
                  Texp_construct "None"
                  []
              <case>
                pattern (lib/build_path_prefix_map.ml[100,3602+4]..lib/build_path_prefix_map.ml[100,3602+27])
                  Tpat_construct "Some"
                  [
                    pattern (lib/build_path_prefix_map.ml[100,3602+9]..lib/build_path_prefix_map.ml[100,3602+27])
                      Tpat_record
                      [
                        "target"
                          pattern (lib/build_path_prefix_map.ml[100,3602+11]..lib/build_path_prefix_map.ml[100,3602+17])
                            Tpat_var "target/616"
                        "source"
                          pattern (lib/build_path_prefix_map.ml[100,3602+19]..lib/build_path_prefix_map.ml[100,3602+25])
                            Tpat_var "source/617"
                      ]
                  ]
                  None
                expression (lib/build_path_prefix_map.ml[101,3633+4]..lib/build_path_prefix_map.ml[107,3931+13])
                  Texp_let Nonrec
                  [
                    <def>
                      pattern (lib/build_path_prefix_map.ml[101,3633+8]..lib/build_path_prefix_map.ml[101,3633+17])
                        Tpat_var "is_prefix/618"
                      expression (lib/build_path_prefix_map.ml[102,3653+6]..lib/build_path_prefix_map.ml[103,3702+73])
                        Texp_apply
                        expression (lib/build_path_prefix_map.ml[103,3702+8]..lib/build_path_prefix_map.ml[103,3702+10])
                          Texp_ident "Stdlib!.&&"
                        [
                          <arg>
                            Nolabel
                            expression (lib/build_path_prefix_map.ml[102,3653+6]..lib/build_path_prefix_map.ml[102,3653+48])
                              Texp_apply
                              expression (lib/build_path_prefix_map.ml[102,3653+27]..lib/build_path_prefix_map.ml[102,3653+29])
                                Texp_ident "Stdlib!.<="
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[102,3653+6]..lib/build_path_prefix_map.ml[102,3653+26])
                                    Texp_apply
                                    expression (lib/build_path_prefix_map.ml[102,3653+6]..lib/build_path_prefix_map.ml[102,3653+19])
                                      Texp_ident "Stdlib!.String.length"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/build_path_prefix_map.ml[102,3653+20]..lib/build_path_prefix_map.ml[102,3653+26])
                                          Texp_ident "source/617"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[102,3653+30]..lib/build_path_prefix_map.ml[102,3653+48])
                                    Texp_apply
                                    expression (lib/build_path_prefix_map.ml[102,3653+30]..lib/build_path_prefix_map.ml[102,3653+43])
                                      Texp_ident "Stdlib!.String.length"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/build_path_prefix_map.ml[102,3653+44]..lib/build_path_prefix_map.ml[102,3653+48])
                                          Texp_ident "path/615"
                                    ]
                              ]
                          <arg>
                            Nolabel
                            expression (lib/build_path_prefix_map.ml[103,3702+11]..lib/build_path_prefix_map.ml[103,3702+73])
                              Texp_apply
                              expression (lib/build_path_prefix_map.ml[103,3702+11]..lib/build_path_prefix_map.ml[103,3702+23])
                                Texp_ident "Stdlib!.String.equal"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[103,3702+24]..lib/build_path_prefix_map.ml[103,3702+30])
                                    Texp_ident "source/617"
                                <arg>
                                  Nolabel
                                  expression (lib/build_path_prefix_map.ml[103,3702+31]..lib/build_path_prefix_map.ml[103,3702+73])
                                    Texp_apply
                                    expression (lib/build_path_prefix_map.ml[103,3702+32]..lib/build_path_prefix_map.ml[103,3702+42])
                                      Texp_ident "Stdlib!.String.sub"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/build_path_prefix_map.ml[103,3702+43]..lib/build_path_prefix_map.ml[103,3702+47])
                                          Texp_ident "path/615"
                                      <arg>
                                        Nolabel
                                        expression (lib/build_path_prefix_map.ml[103,3702+48]..lib/build_path_prefix_map.ml[103,3702+49])
                                          Texp_constant Const_int 0
                                      <arg>
                                        Nolabel
                                        expression (lib/build_path_prefix_map.ml[103,3702+50]..lib/build_path_prefix_map.ml[103,3702+72])
                                          Texp_apply
                                          expression (lib/build_path_prefix_map.ml[103,3702+51]..lib/build_path_prefix_map.ml[103,3702+64])
                                            Texp_ident "Stdlib!.String.length"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (lib/build_path_prefix_map.ml[103,3702+65]..lib/build_path_prefix_map.ml[103,3702+71])
                                                Texp_ident "source/617"
                                          ]
                                    ]
                              ]
                        ]
                  ]
                  expression (lib/build_path_prefix_map.ml[104,3779+4]..lib/build_path_prefix_map.ml[107,3931+13])
                    Texp_ifthenelse
                    expression (lib/build_path_prefix_map.ml[104,3779+7]..lib/build_path_prefix_map.ml[104,3779+16])
                      Texp_ident "is_prefix/618"
                    expression (lib/build_path_prefix_map.ml[105,3801+6]..lib/build_path_prefix_map.ml[106,3862+68])
                      Texp_construct "Some"
                      [
                        expression (lib/build_path_prefix_map.ml[105,3801+11]..lib/build_path_prefix_map.ml[106,3862+68])
                          Texp_apply
                          expression (lib/build_path_prefix_map.ml[105,3801+19]..lib/build_path_prefix_map.ml[105,3801+20])
                            Texp_ident "Stdlib!.^"
                          [
                            <arg>
                              Nolabel
                              expression (lib/build_path_prefix_map.ml[105,3801+12]..lib/build_path_prefix_map.ml[105,3801+18])
                                Texp_ident "target/616"
                            <arg>
                              Nolabel
                              expression (lib/build_path_prefix_map.ml[105,3801+21]..lib/build_path_prefix_map.ml[106,3862+67])
                                Texp_apply
                                expression (lib/build_path_prefix_map.ml[105,3801+22]..lib/build_path_prefix_map.ml[105,3801+32])
                                  Texp_ident "Stdlib!.String.sub"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/build_path_prefix_map.ml[105,3801+33]..lib/build_path_prefix_map.ml[105,3801+37])
                                      Texp_ident "path/615"
                                  <arg>
                                    Nolabel
                                    expression (lib/build_path_prefix_map.ml[105,3801+38]..lib/build_path_prefix_map.ml[105,3801+60])
                                      Texp_apply
                                      expression (lib/build_path_prefix_map.ml[105,3801+39]..lib/build_path_prefix_map.ml[105,3801+52])
                                        Texp_ident "Stdlib!.String.length"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/build_path_prefix_map.ml[105,3801+53]..lib/build_path_prefix_map.ml[105,3801+59])
                                            Texp_ident "source/617"
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (lib/build_path_prefix_map.ml[106,3862+23]..lib/build_path_prefix_map.ml[106,3862+66])
                                      Texp_apply
                                      expression (lib/build_path_prefix_map.ml[106,3862+43]..lib/build_path_prefix_map.ml[106,3862+44])
                                        Texp_ident "Stdlib!.-"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/build_path_prefix_map.ml[106,3862+24]..lib/build_path_prefix_map.ml[106,3862+42])
                                            Texp_apply
                                            expression (lib/build_path_prefix_map.ml[106,3862+24]..lib/build_path_prefix_map.ml[106,3862+37])
                                              Texp_ident "Stdlib!.String.length"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/build_path_prefix_map.ml[106,3862+38]..lib/build_path_prefix_map.ml[106,3862+42])
                                                  Texp_ident "path/615"
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (lib/build_path_prefix_map.ml[106,3862+45]..lib/build_path_prefix_map.ml[106,3862+65])
                                            Texp_apply
                                            expression (lib/build_path_prefix_map.ml[106,3862+45]..lib/build_path_prefix_map.ml[106,3862+58])
                                              Texp_ident "Stdlib!.String.length"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/build_path_prefix_map.ml[106,3862+59]..lib/build_path_prefix_map.ml[106,3862+65])
                                                  Texp_ident "source/617"
                                            ]
                                      ]
                                ]
                          ]
                      ]
                    Some
                      expression (lib/build_path_prefix_map.ml[107,3931+9]..lib/build_path_prefix_map.ml[107,3931+13])
                        Texp_construct "None"
                        []
            ]
    ]
  structure_item (lib/build_path_prefix_map.ml[109,3946+0]..lib/build_path_prefix_map.ml[110,3982+56])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[109,3946+4]..lib/build_path_prefix_map.ml[109,3946+17])
          Tpat_var "rewrite_first/620"
        expression (lib/build_path_prefix_map.ml[109,3946+18]..lib/build_path_prefix_map.ml[110,3982+56]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[109,3946+18]..lib/build_path_prefix_map.ml[109,3946+28])
                Tpat_var "prefix_map/622"
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[109,3946+29]..lib/build_path_prefix_map.ml[109,3946+33])
                Tpat_var "path/623"
          ]
          Tfunction_body
            expression (lib/build_path_prefix_map.ml[110,3982+2]..lib/build_path_prefix_map.ml[110,3982+56])
              Texp_apply
              expression (lib/build_path_prefix_map.ml[110,3982+2]..lib/build_path_prefix_map.ml[110,3982+15])
                Texp_ident "Stdlib!.List.find_map"
              [
                <arg>
                  Nolabel
                  expression (lib/build_path_prefix_map.ml[110,3982+16]..lib/build_path_prefix_map.ml[110,3982+34])
                    Texp_apply
                    expression (lib/build_path_prefix_map.ml[110,3982+17]..lib/build_path_prefix_map.ml[110,3982+28])
                      Texp_ident "make_target/613"
                    [
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[110,3982+29]..lib/build_path_prefix_map.ml[110,3982+33])
                          Texp_ident "path/623"
                    ]
                <arg>
                  Nolabel
                  expression (lib/build_path_prefix_map.ml[110,3982+35]..lib/build_path_prefix_map.ml[110,3982+56])
                    Texp_apply
                    expression (lib/build_path_prefix_map.ml[110,3982+36]..lib/build_path_prefix_map.ml[110,3982+44])
                      Texp_ident "Stdlib!.List.rev"
                    [
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[110,3982+45]..lib/build_path_prefix_map.ml[110,3982+55])
                          Texp_ident "prefix_map/622"
                    ]
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[112,4040+0]..lib/build_path_prefix_map.ml[113,4074+58])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[112,4040+4]..lib/build_path_prefix_map.ml[112,4040+15])
          Tpat_var "rewrite_all/624"
        expression (lib/build_path_prefix_map.ml[112,4040+16]..lib/build_path_prefix_map.ml[113,4074+58]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[112,4040+16]..lib/build_path_prefix_map.ml[112,4040+26])
                Tpat_var "prefix_map/626"
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[112,4040+27]..lib/build_path_prefix_map.ml[112,4040+31])
                Tpat_var "path/627"
          ]
          Tfunction_body
            expression (lib/build_path_prefix_map.ml[113,4074+2]..lib/build_path_prefix_map.ml[113,4074+58])
              Texp_apply
              expression (lib/build_path_prefix_map.ml[113,4074+2]..lib/build_path_prefix_map.ml[113,4074+17])
                Texp_ident "Stdlib!.List.filter_map"
              [
                <arg>
                  Nolabel
                  expression (lib/build_path_prefix_map.ml[113,4074+18]..lib/build_path_prefix_map.ml[113,4074+36])
                    Texp_apply
                    expression (lib/build_path_prefix_map.ml[113,4074+19]..lib/build_path_prefix_map.ml[113,4074+30])
                      Texp_ident "make_target/613"
                    [
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[113,4074+31]..lib/build_path_prefix_map.ml[113,4074+35])
                          Texp_ident "path/627"
                    ]
                <arg>
                  Nolabel
                  expression (lib/build_path_prefix_map.ml[113,4074+37]..lib/build_path_prefix_map.ml[113,4074+58])
                    Texp_apply
                    expression (lib/build_path_prefix_map.ml[113,4074+38]..lib/build_path_prefix_map.ml[113,4074+46])
                      Texp_ident "Stdlib!.List.rev"
                    [
                      <arg>
                        Nolabel
                        expression (lib/build_path_prefix_map.ml[113,4074+47]..lib/build_path_prefix_map.ml[113,4074+57])
                          Texp_ident "prefix_map/626"
                    ]
              ]
    ]
  structure_item (lib/build_path_prefix_map.ml[115,4134+0]..lib/build_path_prefix_map.ml[118,4224+21])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/build_path_prefix_map.ml[115,4134+4]..lib/build_path_prefix_map.ml[115,4134+11])
          Tpat_var "rewrite/628"
        expression (lib/build_path_prefix_map.ml[115,4134+12]..lib/build_path_prefix_map.ml[118,4224+21]) ghost
          Texp_function
          [
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[115,4134+12]..lib/build_path_prefix_map.ml[115,4134+22])
                Tpat_var "prefix_map/630"
            Nolabel
            Param_pat
              pattern (lib/build_path_prefix_map.ml[115,4134+23]..lib/build_path_prefix_map.ml[115,4134+27])
                Tpat_var "path/631"
          ]
          Tfunction_body
            expression (lib/build_path_prefix_map.ml[116,4164+2]..lib/build_path_prefix_map.ml[118,4224+21])
              Texp_match
              expression (lib/build_path_prefix_map.ml[116,4164+8]..lib/build_path_prefix_map.ml[116,4164+37])
                Texp_apply
                expression (lib/build_path_prefix_map.ml[116,4164+8]..lib/build_path_prefix_map.ml[116,4164+21])
                  Texp_ident "rewrite_first/620"
                [
                  <arg>
                    Nolabel
                    expression (lib/build_path_prefix_map.ml[116,4164+22]..lib/build_path_prefix_map.ml[116,4164+32])
                      Texp_ident "prefix_map/630"
                  <arg>
                    Nolabel
                    expression (lib/build_path_prefix_map.ml[116,4164+33]..lib/build_path_prefix_map.ml[116,4164+37])
                      Texp_ident "path/631"
                ]
              [
                <case>
                  pattern (lib/build_path_prefix_map.ml[117,4207+4]..lib/build_path_prefix_map.ml[117,4207+8])
                    Tpat_value
                    pattern (lib/build_path_prefix_map.ml[117,4207+4]..lib/build_path_prefix_map.ml[117,4207+8])
                      Tpat_construct "None"
                      []
                      None
                  expression (lib/build_path_prefix_map.ml[117,4207+12]..lib/build_path_prefix_map.ml[117,4207+16])
                    Texp_ident "path/631"
                <case>
                  pattern (lib/build_path_prefix_map.ml[118,4224+4]..lib/build_path_prefix_map.ml[118,4224+13])
                    Tpat_value
                    pattern (lib/build_path_prefix_map.ml[118,4224+4]..lib/build_path_prefix_map.ml[118,4224+13])
                      Tpat_construct "Some"
                      [
                        pattern (lib/build_path_prefix_map.ml[118,4224+9]..lib/build_path_prefix_map.ml[118,4224+13])
                          Tpat_var "path/632"
                      ]
                      None
                  expression (lib/build_path_prefix_map.ml[118,4224+17]..lib/build_path_prefix_map.ml[118,4224+21])
                    Texp_ident "path/632"
              ]
    ]
]

{<Ocaml_ocaml_types__Build_path_prefix_map>
 "decode_map"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.40>;
 "decode_pair"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.27>;
 "decode_prefix"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.11>;
 "encode_map"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.36>;
 "encode_pair"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.24>;
 "encode_prefix"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.6>;
 "error_message"[type] -> <Ocaml_ocaml_types__Build_path_prefix_map.2>;
 "errorf"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.3>;
 "make_target"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.50>;
 "map"[type] -> <Ocaml_ocaml_types__Build_path_prefix_map.35>;
 "pair"[type] -> <Ocaml_ocaml_types__Build_path_prefix_map.21>;
 "path"[type] -> <Ocaml_ocaml_types__Build_path_prefix_map.0>;
 "path_prefix"[type] -> <Ocaml_ocaml_types__Build_path_prefix_map.1>;
 "rewrite"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.61>;
 "rewrite_all"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.58>;
 "rewrite_first"[value] -> <Ocaml_ocaml_types__Build_path_prefix_map.55>;
 }

(seq
  (let
    (errorf/299 =
       (function fmt/301
         (apply (field_imm 9 (global Stdlib__Printf!))
           (function err/315 (makeblock 1 err/315)) fmt/301)))
    (setfield_ptr(root-init) 0
      (global Ocaml_ocaml_types__Build_path_prefix_map!) errorf/299))
  (let
    (encode_prefix/339 =
       (function str/341
         (let
           (buf/342 =
              (apply (field_imm 0 (global Stdlib__Buffer!))
                (string.length str/341))
            push_char/494 =
              (function c/496[int] : int
                (catch
                  (if (!= c/496 37)
                    (if (!= c/496 58)
                      (if (!= c/496 61) (exit 1)
                        (apply (field_imm 15 (global Stdlib__Buffer!))
                          buf/342 "%+"))
                      (apply (field_imm 15 (global Stdlib__Buffer!)) buf/342
                        "%."))
                    (apply (field_imm 15 (global Stdlib__Buffer!)) buf/342
                      "%#"))
                 with (1)
                  (apply (field_imm 11 (global Stdlib__Buffer!)) buf/342
                    c/496))))
           (seq
             (apply (field_imm 29 (global Stdlib__String!)) push_char/494
               str/341)
             (apply (field_imm 1 (global Stdlib__Buffer!)) buf/342)))))
    (setfield_ptr(root-init) 1
      (global Ocaml_ocaml_types__Build_path_prefix_map!) encode_prefix/339))
  (let
    (decode_prefix/497 =
       (function str/499
         (let
           (buf/500 =
              (apply (field_imm 0 (global Stdlib__Buffer!))
                (string.length str/499)))
           (letrec
             (loop/501
                (function i/502[int]
                  (if (>= i/502 (string.length str/499))
                    (makeblock 0
                      (apply (field_imm 1 (global Stdlib__Buffer!)) buf/500))
                    (let (c/503 = (string.get str/499 i/502))
                      (catch
                        (catch
                          (let (switcher/947 =a (-58+ c/503))
                            (if (not (isout 3 switcher/947))
                              (let (switcher/948 =a (-1+ switcher/947))
                                (if (isout 1 switcher/948) (exit 3) (exit 4)))
                              (if (!= switcher/947 -21) (exit 4)
                                (let
                                  (push/505 =
                                     (function c/507[int]
                                       (seq
                                         (apply
                                           (field_imm 11
                                             (global Stdlib__Buffer!))
                                           buf/500 c/507)
                                         (apply loop/501 (+ i/502 2)))))
                                  (if
                                    (== (+ i/502 1) (string.length str/499))
                                    (apply
                                      (field_imm 0
                                        (global Ocaml_ocaml_types__Build_path_prefix_map!))
                                      [0:
                                       [11:
                                        "invalid encoded string "
                                        [3:
                                         0
                                         [11:
                                          " (trailing '"
                                          [12: '%' [11: "')" 0]]]]]
                                       "invalid encoded string %S (trailing '%%')"]
                                      str/499)
                                    (let
                                      (c/508 =
                                         (string.get str/499 (+ i/502 1)))
                                      (catch
                                        (let (switcher/946 =a (-35+ c/508))
                                          (if (isout 11 switcher/946)
                                            (exit 2)
                                            (switch* switcher/946
                                             case int 0: (apply push/505 '%')
                                             case int 1: (exit 2)
                                             case int 2: (exit 2)
                                             case int 3: (exit 2)
                                             case int 4: (exit 2)
                                             case int 5: (exit 2)
                                             case int 6: (exit 2)
                                             case int 7: (exit 2)
                                             case int 8: (apply push/505 '=')
                                             case int 9: (exit 2)
                                             case int 10: (exit 2)
                                             case int 11:
                                              (apply push/505 ':'))))
                                       with (2)
                                        (apply
                                          (field_imm 0
                                            (global Ocaml_ocaml_types__Build_path_prefix_map!))
                                          [0:
                                           [11:
                                            "invalid "
                                            [12:
                                             '%'
                                             [11:
                                              "-escaped character '"
                                              [0: [12: '\'' 0]]]]]
                                           "invalid %%-escaped character '%c'"]
                                          c/508))))))))
                         with (4)
                          (let (c/504 =a c/503)
                            (seq
                              (apply (field_imm 11 (global Stdlib__Buffer!))
                                buf/500 c/504)
                              (apply loop/501 (+ i/502 1)))))
                       with (3)
                        (apply
                          (field_imm 0
                            (global Ocaml_ocaml_types__Build_path_prefix_map!))
                          [0:
                           [11:
                            "invalid character '"
                            [0: [11: "' in key or value" 0]]]
                           "invalid character '%c' in key or value"]
                          c/503))))))
             (apply loop/501 0)))))
    (setfield_ptr(root-init) 2
      (global Ocaml_ocaml_types__Build_path_prefix_map!) decode_prefix/497))
  (let
    (encode_pair/512 =
       (function param/516
         (let
           (source/515 =a (field_imm 1 param/516)
            target/514 =a (field_imm 0 param/516))
           (apply (field_imm 6 (global Stdlib__String!)) "="
             (makeblock 0
               (apply
                 (field_imm 1
                   (global Ocaml_ocaml_types__Build_path_prefix_map!))
                 target/514)
               (makeblock 0
                 (apply
                   (field_imm 1
                     (global Ocaml_ocaml_types__Build_path_prefix_map!))
                   source/515)
                 0))))))
    (setfield_ptr(root-init) 3
      (global Ocaml_ocaml_types__Build_path_prefix_map!) encode_pair/512))
  (let
    (decode_pair/517 =
       (function str/519
         (catch
           (try
             (exit 7
               (apply (field_imm 35 (global Stdlib__String!)) str/519 '='))
            with exn/956
             (catch
               (if (== exn/956 (field_imm 7 (global Stdlib!)))
                 (apply
                   (field_imm 0
                     (global Ocaml_ocaml_types__Build_path_prefix_map!))
                   [0:
                    [11:
                     "invalid key/value pair "
                     [3: 0 [11: ", no '=' separator" 0]]]
                    "invalid key/value pair %S, no '=' separator"]
                   str/519)
                 (exit 8))
              with (8) (reraise exn/956)))
          with (7 equal_pos/520[int])
           (let
             (encoded_target/521 =
                (apply (field_imm 15 (global Stdlib__String!)) str/519 0
                  equal_pos/520)
              encoded_source/522 =
                (apply (field_imm 15 (global Stdlib__String!)) str/519
                  (+ equal_pos/520 1)
                  (- (- (string.length str/519) equal_pos/520) 1))
              *match*/950 =
                (apply
                  (field_imm 2
                    (global Ocaml_ocaml_types__Build_path_prefix_map!))
                  encoded_target/521)
              *match*/951 =
                (apply
                  (field_imm 2
                    (global Ocaml_ocaml_types__Build_path_prefix_map!))
                  encoded_source/522))
             (catch
               (catch
                 (switch* *match*/950
                  case tag 0:
                   (let (target/523 =a (field_imm 0 *match*/950))
                     (switch* *match*/951
                      case tag 0:
                       (let (source/524 =a (field_imm 0 *match*/951))
                         (makeblock 0 (makeblock 0 target/523 source/524)))
                      case tag 1: (exit 6)))
                  case tag 1:
                   (let
                     (err/953 =a *match*/950
                      *match*/954 =a (field_imm 0 *match*/950))
                     (exit 5 err/953)))
                with (6)
                 (let
                   (err/952 =a *match*/951
                    *match*/955 =a (field_imm 0 *match*/951))
                   (exit 5 err/952)))
              with (5 err/525) err/525)))))
    (setfield_ptr(root-init) 4
      (global Ocaml_ocaml_types__Build_path_prefix_map!) decode_pair/517))
  (let
    (encode_map/528 =
       (function map/530
         (let
           (encode_elem/531 =
              (function param/534
                (if (isint param/534) ""
                  (let (pair/533 =a (field_imm 0 param/534))
                    (apply
                      (field_imm 3
                        (global Ocaml_ocaml_types__Build_path_prefix_map!))
                      pair/533)))))
           (apply (field_imm 6 (global Stdlib__String!)) ":"
             (apply (field_imm 19 (global Stdlib__List!)) encode_elem/531
               map/530)))))
    (setfield_ptr(root-init) 5
      (global Ocaml_ocaml_types__Build_path_prefix_map!) encode_map/528))
  (let
    (decode_map/601 =
       (function str/603
         (let
           (Shortcut/604 = (makeblock 248 "Shortcut" (caml_fresh_oo_id 0))
            decode_or_empty/605 =
              (function pair/607
                (catch (stringswitch pair/607 case "": 0
                                              default: (exit 11))
                 with (11)
                  (let
                    (*match*/959 =
                       (apply
                         (field_imm 4
                           (global Ocaml_ocaml_types__Build_path_prefix_map!))
                         pair/607))
                    (switch* *match*/959
                     case tag 0:
                      (let (str/608 =a (field_imm 0 *match*/959))
                        (makeblock 0 str/608))
                     case tag 1:
                      (let (err/609 =a (field_imm 0 *match*/959))
                        (raise (makeblock 0 Shortcut/604 err/609)))))))
            pairs/610 =
              (apply (field_imm 16 (global Stdlib__String!)) ':' str/603))
           (catch
             (try
               (exit 9
                 (apply (field_imm 19 (global Stdlib__List!))
                   decode_or_empty/605 pairs/610))
              with exn/957
               (catch
                 (let (tag/958 =a (field_imm 0 exn/957))
                   (if (== tag/958 Shortcut/604)
                     (let (err/611 =a (field_imm 1 exn/957))
                       (makeblock 1 err/611))
                     (exit 10)))
                with (10) (reraise exn/957)))
            with (9 map/612) (makeblock 0 map/612)))))
    (setfield_ptr(root-init) 6
      (global Ocaml_ocaml_types__Build_path_prefix_map!) decode_map/601))
  (let
    (make_target/613 =
       (function path/615 param/619
         (if (isint param/619) 0
           (let
             (*match*/960 =a (field_imm 0 param/619)
              source/617 =a (field_imm 1 *match*/960)
              target/616 =a (field_imm 0 *match*/960)
              is_prefix/618 =[int]
                (&& (<= (string.length source/617) (string.length path/615))
                  (apply (field_imm 8 (global Stdlib__String!)) source/617
                    (apply (field_imm 15 (global Stdlib__String!)) path/615 0
                      (string.length source/617)))))
             (if is_prefix/618
               (makeblock 0
                 (apply (field_imm 27 (global Stdlib!)) target/616
                   (apply (field_imm 15 (global Stdlib__String!)) path/615
                     (string.length source/617)
                     (- (string.length path/615) (string.length source/617)))))
               0)))))
    (setfield_ptr(root-init) 7
      (global Ocaml_ocaml_types__Build_path_prefix_map!) make_target/613))
  (let
    (rewrite_first/620 =
       (function prefix_map/622 path/623
         (apply (field_imm 41 (global Stdlib__List!))
           (apply
             (field_imm 7 (global Ocaml_ocaml_types__Build_path_prefix_map!))
             path/623)
           (apply (field_imm 9 (global Stdlib__List!)) prefix_map/622))))
    (setfield_ptr(root-init) 8
      (global Ocaml_ocaml_types__Build_path_prefix_map!) rewrite_first/620))
  (let
    (rewrite_all/624 =
       (function prefix_map/626 path/627
         (apply (field_imm 22 (global Stdlib__List!))
           (apply
             (field_imm 7 (global Ocaml_ocaml_types__Build_path_prefix_map!))
             path/627)
           (apply (field_imm 9 (global Stdlib__List!)) prefix_map/626))))
    (setfield_ptr(root-init) 9
      (global Ocaml_ocaml_types__Build_path_prefix_map!) rewrite_all/624))
  (let
    (rewrite/628 =
       (function prefix_map/630 path/631
         (let
           (*match*/961 =
              (apply
                (field_imm 8
                  (global Ocaml_ocaml_types__Build_path_prefix_map!))
                prefix_map/630 path/631))
           (if (isint *match*/961) path/631
             (let (path/632 =a (field_imm 0 *match*/961)) path/632)))))
    (setfield_ptr(root-init) 10
      (global Ocaml_ocaml_types__Build_path_prefix_map!) rewrite/628))
  0)
(seq
  (let
    (errorf/299 =
       (function fmt/301
         (apply (field_imm 9 (global Stdlib__Printf!))
           (function err/315 (makeblock 1 err/315)) fmt/301)))
    (setfield_ptr(root-init) 0
      (global Ocaml_ocaml_types__Build_path_prefix_map!) errorf/299))
  (let
    (encode_prefix/339 =
       (function str/341
         (let
           (buf/342 =
              (apply (field_imm 0 (global Stdlib__Buffer!))
                (string.length str/341))
            push_char/494 =
              (function c/496[int] : int
                (if (!= c/496 37)
                  (if (!= c/496 58)
                    (if (!= c/496 61)
                      (apply (field_imm 11 (global Stdlib__Buffer!)) buf/342
                        c/496)
                      (apply (field_imm 15 (global Stdlib__Buffer!)) buf/342
                        "%+"))
                    (apply (field_imm 15 (global Stdlib__Buffer!)) buf/342
                      "%."))
                  (apply (field_imm 15 (global Stdlib__Buffer!)) buf/342
                    "%#"))))
           (seq
             (apply (field_imm 29 (global Stdlib__String!)) push_char/494
               str/341)
             (apply (field_imm 1 (global Stdlib__Buffer!)) buf/342)))))
    (setfield_ptr(root-init) 1
      (global Ocaml_ocaml_types__Build_path_prefix_map!) encode_prefix/339))
  (let
    (decode_prefix/497 =
       (function str/499
         (let
           (buf/500 =
              (apply (field_imm 0 (global Stdlib__Buffer!))
                (string.length str/499)))
           (letrec
             (loop/501
                (function i/502[int]
                  (if (>= i/502 (string.length str/499))
                    (makeblock 0
                      (apply (field_imm 1 (global Stdlib__Buffer!)) buf/500))
                    (let (c/503 = (string.get str/499 i/502))
                      (catch
                        (let (switcher/947 =a (-58+ c/503))
                          (if (not (isout 3 switcher/947))
                            (if (isout 1 (-1+ switcher/947))
                              (apply
                                (field_imm 0
                                  (global Ocaml_ocaml_types__Build_path_prefix_map!))
                                [0:
                                 [11:
                                  "invalid character '"
                                  [0: [11: "' in key or value" 0]]]
                                 "invalid character '%c' in key or value"]
                                c/503)
                              (exit 4))
                            (if (!= switcher/947 -21) (exit 4)
                              (catch
                                (if (== (+ i/502 1) (string.length str/499))
                                  (apply
                                    (field_imm 0
                                      (global Ocaml_ocaml_types__Build_path_prefix_map!))
                                    [0:
                                     [11:
                                      "invalid encoded string "
                                      [3:
                                       0
                                       [11:
                                        " (trailing '" [12: '%' [11: "')" 0]]]]]
                                     "invalid encoded string %S (trailing '%%')"]
                                    str/499)
                                  (let
                                    (c/508 = (string.get str/499 (+ i/502 1)))
                                    (catch
                                      (let (switcher/946 =a (-35+ c/508))
                                        (if (isout 11 switcher/946) (exit 2)
                                          (switch* switcher/946
                                           case int 0: (exit 12 '%')
                                           case int 1: (exit 2)
                                           case int 2: (exit 2)
                                           case int 3: (exit 2)
                                           case int 4: (exit 2)
                                           case int 5: (exit 2)
                                           case int 6: (exit 2)
                                           case int 7: (exit 2)
                                           case int 8: (exit 12 '=')
                                           case int 9: (exit 2)
                                           case int 10: (exit 2)
                                           case int 11: (exit 12 ':'))))
                                     with (2)
                                      (apply
                                        (field_imm 0
                                          (global Ocaml_ocaml_types__Build_path_prefix_map!))
                                        [0:
                                         [11:
                                          "invalid "
                                          [12:
                                           '%'
                                           [11:
                                            "-escaped character '"
                                            [0: [12: '\'' 0]]]]]
                                         "invalid %%-escaped character '%c'"]
                                        c/508))))
                               with (12 c/507[int])
                                (seq
                                  (apply
                                    (field_imm 11 (global Stdlib__Buffer!))
                                    buf/500 c/507)
                                  (apply loop/501 (+ i/502 2)))))))
                       with (4)
                        (seq
                          (apply (field_imm 11 (global Stdlib__Buffer!))
                            buf/500 c/503)
                          (apply loop/501 (+ i/502 1))))))))
             (apply loop/501 0)))))
    (setfield_ptr(root-init) 2
      (global Ocaml_ocaml_types__Build_path_prefix_map!) decode_prefix/497))
  (let
    (encode_pair/512 =
       (function param/516
         (apply (field_imm 6 (global Stdlib__String!)) "="
           (makeblock 0
             (apply
               (field_imm 1
                 (global Ocaml_ocaml_types__Build_path_prefix_map!))
               (field_imm 0 param/516))
             (makeblock 0
               (apply
                 (field_imm 1
                   (global Ocaml_ocaml_types__Build_path_prefix_map!))
                 (field_imm 1 param/516))
               0)))))
    (setfield_ptr(root-init) 3
      (global Ocaml_ocaml_types__Build_path_prefix_map!) encode_pair/512))
  (let
    (decode_pair/517 =
       (function str/519
         (catch
           (try
             (exit 7
               (apply (field_imm 35 (global Stdlib__String!)) str/519 '='))
            with exn/956
             (if (== exn/956 (field_imm 7 (global Stdlib!)))
               (apply
                 (field_imm 0
                   (global Ocaml_ocaml_types__Build_path_prefix_map!))
                 [0:
                  [11:
                   "invalid key/value pair "
                   [3: 0 [11: ", no '=' separator" 0]]]
                  "invalid key/value pair %S, no '=' separator"]
                 str/519)
               (reraise exn/956)))
          with (7 equal_pos/520[int])
           (let
             (encoded_target/521 =
                (apply (field_imm 15 (global Stdlib__String!)) str/519 0
                  equal_pos/520)
              encoded_source/522 =
                (apply (field_imm 15 (global Stdlib__String!)) str/519
                  (+ equal_pos/520 1)
                  (- (- (string.length str/519) equal_pos/520) 1))
              *match*/950 =
                (apply
                  (field_imm 2
                    (global Ocaml_ocaml_types__Build_path_prefix_map!))
                  encoded_target/521)
              *match*/951 =
                (apply
                  (field_imm 2
                    (global Ocaml_ocaml_types__Build_path_prefix_map!))
                  encoded_source/522))
             (catch
               (switch* *match*/950
                case tag 0:
                 (switch* *match*/951
                  case tag 0:
                   (makeblock 0
                     (makeblock 0 (field_imm 0 *match*/950)
                       (field_imm 0 *match*/951)))
                  case tag 1: (exit 5 *match*/951))
                case tag 1: (exit 5 *match*/950))
              with (5 err/525) err/525)))))
    (setfield_ptr(root-init) 4
      (global Ocaml_ocaml_types__Build_path_prefix_map!) decode_pair/517))
  (let
    (encode_map/528 =
       (function map/530
         (let
           (encode_elem/531 =
              (function param/534
                (if (isint param/534) ""
                  (apply
                    (field_imm 3
                      (global Ocaml_ocaml_types__Build_path_prefix_map!))
                    (field_imm 0 param/534)))))
           (apply (field_imm 6 (global Stdlib__String!)) ":"
             (apply (field_imm 19 (global Stdlib__List!)) encode_elem/531
               map/530)))))
    (setfield_ptr(root-init) 5
      (global Ocaml_ocaml_types__Build_path_prefix_map!) encode_map/528))
  (let
    (decode_map/601 =
       (function str/603
         (let
           (Shortcut/604 = (makeblock 248 "Shortcut" (caml_fresh_oo_id 0))
            decode_or_empty/605 =
              (function pair/607
                (stringswitch pair/607
                 case "": 0
                 default:
                  (let
                    (*match*/959 =
                       (apply
                         (field_imm 4
                           (global Ocaml_ocaml_types__Build_path_prefix_map!))
                         pair/607))
                    (switch* *match*/959
                     case tag 0: (makeblock 0 (field_imm 0 *match*/959))
                     case tag 1:
                      (raise
                        (makeblock 0 Shortcut/604 (field_imm 0 *match*/959)))))))
            pairs/610 =
              (apply (field_imm 16 (global Stdlib__String!)) ':' str/603))
           (catch
             (try
               (exit 9
                 (apply (field_imm 19 (global Stdlib__List!))
                   decode_or_empty/605 pairs/610))
              with exn/957
               (if (== (field_imm 0 exn/957) Shortcut/604)
                 (makeblock 1 (field_imm 1 exn/957)) (reraise exn/957)))
            with (9 map/612) (makeblock 0 map/612)))))
    (setfield_ptr(root-init) 6
      (global Ocaml_ocaml_types__Build_path_prefix_map!) decode_map/601))
  (let
    (make_target/613 =
       (function path/615 param/619
         (if (isint param/619) 0
           (let
             (*match*/960 =a (field_imm 0 param/619)
              source/617 =a (field_imm 1 *match*/960)
              is_prefix/618 =[int]
                (&& (<= (string.length source/617) (string.length path/615))
                  (apply (field_imm 8 (global Stdlib__String!)) source/617
                    (apply (field_imm 15 (global Stdlib__String!)) path/615 0
                      (string.length source/617)))))
             (if is_prefix/618
               (makeblock 0
                 (apply (field_imm 27 (global Stdlib!))
                   (field_imm 0 *match*/960)
                   (apply (field_imm 15 (global Stdlib__String!)) path/615
                     (string.length source/617)
                     (- (string.length path/615) (string.length source/617)))))
               0)))))
    (setfield_ptr(root-init) 7
      (global Ocaml_ocaml_types__Build_path_prefix_map!) make_target/613))
  (let
    (rewrite_first/620 =
       (function prefix_map/622 path/623
         (apply (field_imm 41 (global Stdlib__List!))
           (apply
             (field_imm 7 (global Ocaml_ocaml_types__Build_path_prefix_map!))
             path/623)
           (apply (field_imm 9 (global Stdlib__List!)) prefix_map/622))))
    (setfield_ptr(root-init) 8
      (global Ocaml_ocaml_types__Build_path_prefix_map!) rewrite_first/620))
  (let
    (rewrite_all/624 =
       (function prefix_map/626 path/627
         (apply (field_imm 22 (global Stdlib__List!))
           (apply
             (field_imm 7 (global Ocaml_ocaml_types__Build_path_prefix_map!))
             path/627)
           (apply (field_imm 9 (global Stdlib__List!)) prefix_map/626))))
    (setfield_ptr(root-init) 9
      (global Ocaml_ocaml_types__Build_path_prefix_map!) rewrite_all/624))
  (let
    (rewrite/628 =
       (function prefix_map/630 path/631
         (let
           (*match*/961 =
              (apply
                (field_imm 8
                  (global Ocaml_ocaml_types__Build_path_prefix_map!))
                prefix_map/630 path/631))
           (if (isint *match*/961) path/631 (field_imm 0 *match*/961)))))
    (setfield_ptr(root-init) 10
      (global Ocaml_ocaml_types__Build_path_prefix_map!) rewrite/628))
  0)
